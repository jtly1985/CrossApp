#include "ccConfig.h"
#ifndef __autogentestbindings_js_h__
#define __autogentestbindings_js_h__

#include "jsapi.h"
#include "jsfriendapi.h"

extern JSClass  *jsb_CrossApp_CACopying_class;
extern JSObject *jsb_CrossApp_CACopying_prototype;

bool js_autogentestbindings_js_CACopying_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_autogentestbindings_js_CACopying_finalize(JSContext *cx, JSObject *obj);
void js_register_autogentestbindings_js_CACopying(JSContext *cx, JS::HandleObject global);
void register_all_autogentestbindings_js(JSContext* cx, JS::HandleObject obj);
bool js_autogentestbindings_js_CACopying_copyWithZone(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CAObject_class;
extern JSObject *jsb_CrossApp_CAObject_prototype;

bool js_autogentestbindings_js_CAObject_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_autogentestbindings_js_CAObject_finalize(JSContext *cx, JSObject *obj);
void js_register_autogentestbindings_js_CAObject(JSContext *cx, JS::HandleObject global);
void register_all_autogentestbindings_js(JSContext* cx, JS::HandleObject obj);
bool js_autogentestbindings_js_CAObject_setUserData(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAObject_getTextTag(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAObject_retainCount(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAObject_getUserData(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAObject_getUserObject(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAObject_update(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAObject_isEqual(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAObject_isSingleReference(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAObject_autorelease(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAObject_init(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAObject_setTextTag(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAObject_setTag(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAObject_release(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAObject_retain(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAObject_getTag(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAObject_copy(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAObject_setUserObject(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAObject_CAObject(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CAZone_class;
extern JSObject *jsb_CrossApp_CAZone_prototype;

bool js_autogentestbindings_js_CAZone_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_autogentestbindings_js_CAZone_finalize(JSContext *cx, JSObject *obj);
void js_register_autogentestbindings_js_CAZone(JSContext *cx, JS::HandleObject global);
void register_all_autogentestbindings_js(JSContext* cx, JS::HandleObject obj);
bool js_autogentestbindings_js_CAZone_CAZone(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CATimer_class;
extern JSObject *jsb_CrossApp_CATimer_prototype;

bool js_autogentestbindings_js_CATimer_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_autogentestbindings_js_CATimer_finalize(JSContext *cx, JSObject *obj);
void js_register_autogentestbindings_js_CATimer(JSContext *cx, JS::HandleObject global);
void register_all_autogentestbindings_js(JSContext* cx, JS::HandleObject obj);
bool js_autogentestbindings_js_CATimer_getInterval(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATimer_setInterval(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATimer_initWithScriptHandler(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATimer_update(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATimer_getSelector(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATimer_getScriptHandler(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATimer_timerWithScriptHandler(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATimer_CATimer(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CAScheduler_class;
extern JSObject *jsb_CrossApp_CAScheduler_prototype;

bool js_autogentestbindings_js_CAScheduler_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_autogentestbindings_js_CAScheduler_finalize(JSContext *cx, JSObject *obj);
void js_register_autogentestbindings_js_CAScheduler(JSContext *cx, JS::HandleObject global);
void register_all_autogentestbindings_js(JSContext* cx, JS::HandleObject obj);
bool js_autogentestbindings_js_CAScheduler_isTargetPaused(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAScheduler_update(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAScheduler_resumeTarget(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAScheduler_pauseAllTargets(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAScheduler_resumeTargets(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAScheduler_pauseTarget(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAScheduler_pauseAllTargetsWithMinPriority(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAScheduler_unscheduleAllForTarget(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAScheduler_unscheduleAll(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAScheduler_getScheduler(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAScheduler_CAScheduler(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CAImage_class;
extern JSObject *jsb_CrossApp_CAImage_prototype;

bool js_autogentestbindings_js_CAImage_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_autogentestbindings_js_CAImage_finalize(JSContext *cx, JSObject *obj);
void js_register_autogentestbindings_js_CAImage(JSContext *cx, JS::HandleObject global);
void register_all_autogentestbindings_js(JSContext* cx, JS::HandleObject obj);
bool js_autogentestbindings_js_CAImage_getShaderProgram(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAImage_premultipliedImageData(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAImage_initWithETCFile(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAImage_stringForFormat(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAImage_setMaxS(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAImage_setShaderProgram(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAImage_getMaxS(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAImage_getAspectRatio(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAImage_releaseData(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAImage_hasPremultipliedAlpha(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAImage_getPixelsWide(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAImage_getPixelsHigh(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAImage_setTexParameters(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAImage_freeName(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAImage_isTiff(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAImage_bitsPerPixelForFormat(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAImage_getName(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAImage_getGifImageIndex(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAImage_setMaxT(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAImage_initWithImageFile(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAImage_drawInRect(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAImage_getGifImageCounts(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAImage_getContentSize(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAImage_getMaxT(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAImage_initWithImageFileThreadSafe(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAImage_setAliasTexParameters(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAImage_isPng(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAImage_setAntiAliasTexParameters(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAImage_generateMipmap(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAImage_saveToFile(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAImage_description(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAImage_isMonochrome(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAImage_initWithImageData(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAImage_getPixelFormat(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAImage_hasAlpha(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAImage_isEtc(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAImage_isWebp(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAImage_updateGifImageWithIndex(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAImage_copy(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAImage_getImageFileType(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAImage_drawAtPoint(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAImage_initWithRawData(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAImage_repremultipliedImageData(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAImage_getData(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAImage_detectFormat(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAImage_hasMipmaps(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAImage_getDataLenght(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAImage_isJpg(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAImage_isPvr(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAImage_isGif(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAImage_scaleToNewImageWithImage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAImage_CC_WHITE_IMAGE(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAImage_getFontHeight(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAImage_create(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAImage_createWithRawData(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAImage_cutStringByWidth(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAImage_createWithImageDataNoCache(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAImage_cutStringByDSize(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAImage_createWithImageData(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAImage_getStringHeight(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAImage_getStringWidth(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAImage_generateMipmapsWithImage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAImage_createWithRawDataNoCache(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAImage_reloadAllImages(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAImage_createWithString(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAImage_CAImage(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CARGBAProtocol_class;
extern JSObject *jsb_CrossApp_CARGBAProtocol_prototype;

bool js_autogentestbindings_js_CARGBAProtocol_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_autogentestbindings_js_CARGBAProtocol_finalize(JSContext *cx, JSObject *obj);
void js_register_autogentestbindings_js_CARGBAProtocol(JSContext *cx, JS::HandleObject global);
void register_all_autogentestbindings_js(JSContext* cx, JS::HandleObject obj);
bool js_autogentestbindings_js_CARGBAProtocol_setColor(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CARGBAProtocol_getDisplayedColor(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CARGBAProtocol_updateDisplayedAlpha(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CARGBAProtocol_getColor(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CARGBAProtocol_setAlpha(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CARGBAProtocol_getDisplayedAlpha(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CARGBAProtocol_getAlpha(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CARGBAProtocol_updateDisplayedColor(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CAImageProtocol_class;
extern JSObject *jsb_CrossApp_CAImageProtocol_prototype;

bool js_autogentestbindings_js_CAImageProtocol_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_autogentestbindings_js_CAImageProtocol_finalize(JSContext *cx, JSObject *obj);
void js_register_autogentestbindings_js_CAImageProtocol(JSContext *cx, JS::HandleObject global);
void register_all_autogentestbindings_js(JSContext* cx, JS::HandleObject obj);
bool js_autogentestbindings_js_CAImageProtocol_getImage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAImageProtocol_getBlendFunc(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAImageProtocol_setImage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAImageProtocol_setBlendFunc(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CCLabelProtocol_class;
extern JSObject *jsb_CrossApp_CCLabelProtocol_prototype;

bool js_autogentestbindings_js_CCLabelProtocol_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_autogentestbindings_js_CCLabelProtocol_finalize(JSContext *cx, JSObject *obj);
void js_register_autogentestbindings_js_CCLabelProtocol(JSContext *cx, JS::HandleObject global);
void register_all_autogentestbindings_js(JSContext* cx, JS::HandleObject obj);
bool js_autogentestbindings_js_CCLabelProtocol_setString(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CCLabelProtocol_getString(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CATouch_class;
extern JSObject *jsb_CrossApp_CATouch_prototype;

bool js_autogentestbindings_js_CATouch_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_autogentestbindings_js_CATouch_finalize(JSContext *cx, JSObject *obj);
void js_register_autogentestbindings_js_CATouch(JSContext *cx, JS::HandleObject global);
void register_all_autogentestbindings_js(JSContext* cx, JS::HandleObject obj);
bool js_autogentestbindings_js_CATouch_getLocation(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATouch_getDelta(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATouch_getStartLocation(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATouch_getID(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATouch_isDelta(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATouch_setTouchInfo(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATouch_getDeltaFromAToZ(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATouch_getPreviousLocation(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATouch_CATouch(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CAEvent_class;
extern JSObject *jsb_CrossApp_CAEvent_prototype;

bool js_autogentestbindings_js_CAEvent_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_autogentestbindings_js_CAEvent_finalize(JSContext *cx, JSObject *obj);
void js_register_autogentestbindings_js_CAEvent(JSContext *cx, JS::HandleObject global);
void register_all_autogentestbindings_js(JSContext* cx, JS::HandleObject obj);
bool js_autogentestbindings_js_CAEvent_getEventType(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAEvent_setEventType(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAEvent_CAEvent(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CAResponder_class;
extern JSObject *jsb_CrossApp_CAResponder_prototype;

bool js_autogentestbindings_js_CAResponder_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_autogentestbindings_js_CAResponder_finalize(JSContext *cx, JSObject *obj);
void js_register_autogentestbindings_js_CAResponder(JSContext *cx, JS::HandleObject global);
void register_all_autogentestbindings_js(JSContext* cx, JS::HandleObject obj);
bool js_autogentestbindings_js_CAResponder_setReachBoundaryHandOverToSuperview(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAResponder_mouseScrollWheel(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAResponder_mouseMovedOutSide(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAResponder_ccTouchBegan(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAResponder_setMouseScrollWheelEnabled(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAResponder_setMouseMovedEnabled(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAResponder_isScrollEnabled(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAResponder_mouseMoved(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAResponder_isHaveNextResponder(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAResponder_setHorizontalScrollEnabled(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAResponder_isVerticalScrollEnabled(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAResponder_setPriorityScroll(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAResponder_isFirstResponder(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAResponder_isTouchEnabled(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAResponder_ccTouchEnded(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAResponder_ccTouchMoved(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAResponder_setTouchEnabled(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAResponder_setScrollEnabled(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAResponder_getTouches(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAResponder_isPriorityScroll(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAResponder_isHorizontalScrollEnabled(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAResponder_setVerticalScrollEnabled(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAResponder_setHaveNextResponder(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAResponder_nextResponder(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAResponder_isReachBoundaryRight(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAResponder_isReachBoundaryDown(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAResponder_isTouchEventScrollHandOverToSuperview(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAResponder_isReachBoundaryHandOverToSuperview(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAResponder_isReachBoundaryUp(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAResponder_isReachBoundaryLeft(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAResponder_getScrollRunning(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAResponder_isMouseScrollWheelEnabled(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAResponder_resignFirstResponder(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAResponder_setTouchEventScrollHandOverToSuperview(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAResponder_isMouseMovedEnabled(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAResponder_ccTouchCancelled(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAResponder_becomeFirstResponder(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAResponder_getZLevel(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAResponder_CAResponder(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CAImageCache_class;
extern JSObject *jsb_CrossApp_CAImageCache_prototype;

bool js_autogentestbindings_js_CAImageCache_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_autogentestbindings_js_CAImageCache_finalize(JSContext *cx, JSObject *obj);
void js_register_autogentestbindings_js_CAImageCache(JSContext *cx, JS::HandleObject global);
void register_all_autogentestbindings_js(JSContext* cx, JS::HandleObject obj);
bool js_autogentestbindings_js_CAImageCache_description(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAImageCache_dumpCachedImageInfo(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAImageCache_removeAllImages(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAImageCache_removeImage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAImageCache_removeUnusedImages(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAImageCache_addImage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAImageCache_setImageForKey(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAImageCache_removeImageForKey(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAImageCache_reloadImage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAImageCache_imageForKey(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAImageCache_sharedImageCache(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAImageCache_purgeSharedImageCache(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAImageCache_reloadAllImages(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAImageCache_CAImageCache(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CAImageAtlas_class;
extern JSObject *jsb_CrossApp_CAImageAtlas_prototype;

bool js_autogentestbindings_js_CAImageAtlas_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_autogentestbindings_js_CAImageAtlas_finalize(JSContext *cx, JSObject *obj);
void js_register_autogentestbindings_js_CAImageAtlas(JSContext *cx, JS::HandleObject global);
void register_all_autogentestbindings_js(JSContext* cx, JS::HandleObject obj);
bool js_autogentestbindings_js_CAImageAtlas_updateQuad(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAImageAtlas_initWithImage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAImageAtlas_moveQuadsFromIndex(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAImageAtlas_getSerialNumberOfDraws(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAImageAtlas_drawQuads(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAImageAtlas_fillWithEmptyQuadsFromIndex(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAImageAtlas_getCapacity(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAImageAtlas_listenBackToForeground(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAImageAtlas_description(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAImageAtlas_setQuads(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAImageAtlas_isDirty(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAImageAtlas_insertQuad(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAImageAtlas_getTotalQuads(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAImageAtlas_setDirty(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAImageAtlas_removeQuadsAtIndex(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAImageAtlas_removeAllQuads(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAImageAtlas_getImage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAImageAtlas_setImage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAImageAtlas_getQuads(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAImageAtlas_resizeCapacity(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAImageAtlas_increaseTotalQuadsWith(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAImageAtlas_drawNumberOfQuads(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAImageAtlas_insertQuads(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAImageAtlas_insertQuadFromIndex(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAImageAtlas_removeQuadAtIndex(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAImageAtlas_createWithImage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAImageAtlas_CAImageAtlas(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CAView_class;
extern JSObject *jsb_CrossApp_CAView_prototype;

bool js_autogentestbindings_js_CAView_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_autogentestbindings_js_CAView_finalize(JSContext *cx, JSObject *obj);
void js_register_autogentestbindings_js_CAView(JSContext *cx, JS::HandleObject global);
void register_all_autogentestbindings_js(JSContext* cx, JS::HandleObject obj);
bool js_autogentestbindings_js_CAView_removeFromSuperview(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAView_getShaderProgram(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAView_setLayout(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAView_ccTouchEnded(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAView_getSuperview(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAView_getSubviewByTag(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAView_sortAllSubviews(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAView_copy(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAView_updateDisplayedAlpha(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAView_isFlipX(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAView_isFlipY(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAView_init(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAView_ccTouchMoved(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAView_setRotation(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAView_setZOrder(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAView_ccTouchBegan(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAView_setScaleY(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAView_setScaleX(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAView_getAtlasIndex(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAView_removeSubviewByTag(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAView_visitEve(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAView_getContentContainer(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAView_onExit(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAView_setSuperview(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAView_setRotationX(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAView_getAlpha(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAView_setSkewX(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAView_setSkewY(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAView_removeSubview(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAView_onEnterTransitionDidFinish(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAView_getLayout(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAView_setContentContainer(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAView_removeAllSubviews(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAView_convertTouchToNodeSpace(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAView_reViewlayout(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAView_getSubviewByTextTag(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAView_removeSubviewByTextTag(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAView_getFrame(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAView_getImageRect(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAView_initWithLayout(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAView_setBatch(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAView_nodeToParentTransform(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAView_getLayoutType(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAView_nextResponder(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAView_getFrameOrigin(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAView_setDirty(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAView_setGLServerState(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAView_isImageRectRotated(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAView_getDisplayedColor(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAView_getAnchorPoint(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAView_updateTransform(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAView_getAnchorPointInPoints(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAView_onEnter(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAView_setAtlasIndex(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAView_getCenterOrigin(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAView_setShaderProgram(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAView_initWithCenter(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAView_getRotation(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAView_getZOrder(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAView_getSubviewsCount(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAView_visit(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAView_transform(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAView_setVertexZ(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAView_getSkewX(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAView_getSkewY(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAView_setRotationY(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAView_insertSubview(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAView_setFlipY(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAView_setFlipX(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAView_getCenter(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAView_isDirty(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAView_getRotationX(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAView_getOrderOfArrival(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAView_getRotationY(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAView_isRunning(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAView_setBlendFunc(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAView_getQuad(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAView_setVisible(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAView_reorderSubview(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAView_getVertexZ(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAView__setZOrder(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAView_setScale(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAView_isDisplayRange(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAView_getDisplayedAlpha(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAView_setOrderOfArrival(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAView_getImageAtlas(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAView_ccTouchCancelled(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAView_getScaleY(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAView_getScaleX(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAView_addSubview(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAView_initWithFrame(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAView_setDisplayRange(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAView_setAlpha(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAView_getSubviews(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAView_draw(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAView_getBlendFunc(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAView_transformAncestors(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAView_description(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAView_convertTouchToNodeSpaceAR(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAView_isVisible(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAView_update(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAView_onExitTransitionDidStart(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAView_getBounds(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAView_getScale(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAView_setImageAtlas(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAView_initWithColor(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAView_getCamera(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAView_getBatch(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAView_getColor(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAView_getGLServerState(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAView_create(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAView_createWithFrame(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAView_createWithColor(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAView_createWithLayout(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAView_createWithCenter(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAView_CAView(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CAImageView_class;
extern JSObject *jsb_CrossApp_CAImageView_prototype;

bool js_autogentestbindings_js_CAImageView_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_autogentestbindings_js_CAImageView_finalize(JSContext *cx, JSObject *obj);
void js_register_autogentestbindings_js_CAImageView(JSContext *cx, JS::HandleObject global);
void register_all_autogentestbindings_js(JSContext* cx, JS::HandleObject obj);
bool js_autogentestbindings_js_CAImageView_isAnimating(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAImageView_getAnimationRepeatCount(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAImageView_stopAnimating(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAImageView_setImage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAImageView_copy(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAImageView_initWithImage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAImageView_setAnimationImages(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAImageView_setImageAsyncWithFile(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAImageView_getImageViewScaleType(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAImageView_init(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAImageView_setImageViewScaleType(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAImageView_getAnimationImages(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAImageView_getAnimationDuration(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAImageView_startAnimating(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAImageView_getImage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAImageView_setAnimationDuration(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAImageView_setAnimationRepeatCount(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAImageView_createWithFrame(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAImageView_create(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAImageView_createWithImage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAImageView_createWithLayout(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAImageView_createWithCenter(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAImageView_CAImageView(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CAScale9ImageView_class;
extern JSObject *jsb_CrossApp_CAScale9ImageView_prototype;

bool js_autogentestbindings_js_CAScale9ImageView_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_autogentestbindings_js_CAScale9ImageView_finalize(JSContext *cx, JSObject *obj);
void js_register_autogentestbindings_js_CAScale9ImageView(JSContext *cx, JS::HandleObject global);
void register_all_autogentestbindings_js(JSContext* cx, JS::HandleObject obj);
bool js_autogentestbindings_js_CAScale9ImageView_setInsetBottom(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAScale9ImageView_getOriginalSize(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAScale9ImageView_draw(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAScale9ImageView_setColor(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAScale9ImageView_setImage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAScale9ImageView_initWithImage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAScale9ImageView_getInsetTop(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAScale9ImageView_setInsetLeft(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAScale9ImageView_setCapInsets(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAScale9ImageView_getCapInsets(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAScale9ImageView_setInsetTop(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAScale9ImageView_init(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAScale9ImageView_setAlpha(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAScale9ImageView_getColor(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAScale9ImageView_getInsetLeft(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAScale9ImageView_getInsetBottom(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAScale9ImageView_setInsetRight(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAScale9ImageView_copy(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAScale9ImageView_getInsetRight(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAScale9ImageView_createWithFrame(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAScale9ImageView_create(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAScale9ImageView_createWithImage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAScale9ImageView_createWithLayout(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAScale9ImageView_createWithCenter(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAScale9ImageView_CAScale9ImageView(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CAViewAnimationModule_class;
extern JSObject *jsb_CrossApp_CAViewAnimationModule_prototype;

bool js_autogentestbindings_js_CAViewAnimationModule_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_autogentestbindings_js_CAViewAnimationModule_finalize(JSContext *cx, JSObject *obj);
void js_register_autogentestbindings_js_CAViewAnimationModule(JSContext *cx, JS::HandleObject global);
void register_all_autogentestbindings_js(JSContext* cx, JS::HandleObject obj);
bool js_autogentestbindings_js_CAViewAnimationModule_setAlreadyRunning(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAViewAnimationModule_isAlreadyRunning(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAViewAnimationModule_CAViewAnimationModule(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CAViewAnimation_class;
extern JSObject *jsb_CrossApp_CAViewAnimation_prototype;

bool js_autogentestbindings_js_CAViewAnimation_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_autogentestbindings_js_CAViewAnimation_finalize(JSContext *cx, JSObject *obj);
void js_register_autogentestbindings_js_CAViewAnimation(JSContext *cx, JS::HandleObject global);
void register_all_autogentestbindings_js(JSContext* cx, JS::HandleObject obj);
bool js_autogentestbindings_js_CAViewAnimation_setAnimationsEnabled(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAViewAnimation_beginAnimations(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAViewAnimation_areBeginAnimationsWithID(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAViewAnimation_setAnimationDelay(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAViewAnimation_areAnimationsEnabled(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAViewAnimation_removeAnimationsWithView(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAViewAnimation_setAnimationDuration(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAViewAnimation_removeAnimations(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAViewAnimation_commitAnimations(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAViewAnimation_setAnimationRepeatAutoreverses(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAViewAnimation_setAnimationCurve(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAViewAnimation_areBeginAnimations(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAViewAnimation_setAnimationRepeatCount(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CAControl_class;
extern JSObject *jsb_CrossApp_CAControl_prototype;

bool js_autogentestbindings_js_CAControl_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_autogentestbindings_js_CAControl_finalize(JSContext *cx, JSObject *obj);
void js_register_autogentestbindings_js_CAControl(JSContext *cx, JS::HandleObject global);
void register_all_autogentestbindings_js(JSContext* cx, JS::HandleObject obj);
bool js_autogentestbindings_js_CAControl_setControlStateSelected(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAControl_setControlStateHighlighted(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAControl_getControlState(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAControl_setControlStateNormal(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAControl_setControlState(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAControl_setControlStateLocked(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAControl_init(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAControl_getControlStateLocked(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAControl_setControlStateDisabled(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAControl_CAControl(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CATouchView_class;
extern JSObject *jsb_CrossApp_CATouchView_prototype;

bool js_autogentestbindings_js_CATouchView_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_autogentestbindings_js_CATouchView_finalize(JSContext *cx, JSObject *obj);
void js_register_autogentestbindings_js_CATouchView(JSContext *cx, JS::HandleObject global);
void register_all_autogentestbindings_js(JSContext* cx, JS::HandleObject obj);
bool js_autogentestbindings_js_CATouchView_ccTouchBegan(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATouchView_ccTouchPress(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATouchView_ccTouchCancelled(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATouchView_ccTouchEnded(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATouchView_ccTouchMoved(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATouchView_CATouchView(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CATextToolBarView_class;
extern JSObject *jsb_CrossApp_CATextToolBarView_prototype;

bool js_autogentestbindings_js_CATextToolBarView_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_autogentestbindings_js_CATextToolBarView_finalize(JSContext *cx, JSObject *obj);
void js_register_autogentestbindings_js_CATextToolBarView(JSContext *cx, JS::HandleObject global);
void register_all_autogentestbindings_js(JSContext* cx, JS::HandleObject obj);
bool js_autogentestbindings_js_CATextToolBarView_show(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATextToolBarView_isTextToolBarShow(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATextToolBarView_create(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATextToolBarView_hideTextToolBar(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATextToolBarView_CATextToolBarView(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CATextResponder_class;
extern JSObject *jsb_CrossApp_CATextResponder_prototype;

bool js_autogentestbindings_js_CATextResponder_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_autogentestbindings_js_CATextResponder_finalize(JSContext *cx, JSObject *obj);
void js_register_autogentestbindings_js_CATextResponder(JSContext *cx, JS::HandleObject global);
void register_all_autogentestbindings_js(JSContext* cx, JS::HandleObject obj);
bool js_autogentestbindings_js_CATextResponder_resignAllResponder(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATextResponder_resignResponder(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATextResponder_CATextResponder(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CALabel_class;
extern JSObject *jsb_CrossApp_CALabel_prototype;

bool js_autogentestbindings_js_CALabel_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_autogentestbindings_js_CALabel_finalize(JSContext *cx, JSObject *obj);
void js_register_autogentestbindings_js_CALabel(JSContext *cx, JS::HandleObject global);
void register_all_autogentestbindings_js(JSContext* cx, JS::HandleObject obj);
bool js_autogentestbindings_js_CALabel_setTextAlignment(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CALabel_setDimensions(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CALabel_getFontSize(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CALabel_getText(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CALabel_isBold(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CALabel_setUnderLine(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CALabel_isDeleteLine(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CALabel_setFontName(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CALabel_isItalics(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CALabel_setLineSpacing(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CALabel_setBold(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CALabel_isUnderLine(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CALabel_sizeToFit(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CALabel_getLabelSize(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CALabel_visitEve(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CALabel_getColor(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CALabel_getEnableCopy(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CALabel_getFontName(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CALabel_getLineSpacing(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CALabel_setVerticalTextAlignmet(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CALabel_getFont(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CALabel_getVerticalTextAlignmet(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CALabel_setItalics(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CALabel_setWordWrap(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CALabel_getDimensions(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CALabel_getNumberOfLine(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CALabel_setFontSize(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CALabel_isWordWrap(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CALabel_setColor(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CALabel_setDeleteLine(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CALabel_unsizeToFit(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CALabel_setText(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CALabel_setEnableCopy(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CALabel_getTextAlignment(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CALabel_setNumberOfLine(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CALabel_setFont(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CALabel_create(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CALabel_createWithFrame(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CALabel_createWithLayout(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CALabel_createWithCenter(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CALabel_CALabel(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CAApplication_class;
extern JSObject *jsb_CrossApp_CAApplication_prototype;

bool js_autogentestbindings_js_CAApplication_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_autogentestbindings_js_CAApplication_finalize(JSContext *cx, JSObject *obj);
void js_register_autogentestbindings_js_CAApplication(JSContext *cx, JS::HandleObject global);
void register_all_autogentestbindings_js(JSContext* cx, JS::HandleObject obj);
bool js_autogentestbindings_js_CAApplication_setDefaultValues(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAApplication_getDeltaTime(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAApplication_setGLDefaultValues(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAApplication_setAlphaBlending(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAApplication_updateDraw(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAApplication_getKeypadDispatcher(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAApplication_getWinSize(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAApplication_end(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAApplication_runWindow(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAApplication_getAnimationInterval(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAApplication_getVisibleOrigin(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAApplication_mainLoop(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAApplication_isDrawing(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAApplication_setDepthTest(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAApplication_getSecondsPerFrame(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAApplication_convertToUI(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAApplication_setAccelerometer(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAApplication_getStatusBarStyle(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAApplication_init(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAApplication_reshapeProjection(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAApplication_startAnimation(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAApplication_getAdaptationRatio(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAApplication_getOpenGLView(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAApplication_setViewport(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAApplication_stopAnimation(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAApplication_getNumberOfDraws(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAApplication_setKeypadDispatcher(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAApplication_run(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAApplication_getProjection(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAApplication_resume(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAApplication_isStatusBarHidden(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAApplication_isNextDeltaTimeZero(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAApplication_getCurrentNumberOfDraws(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAApplication_setStatusBarStyle(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAApplication_setOpenGLView(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAApplication_convertToGL(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAApplication_purgeCachedData(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAApplication_getTotalFrames(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAApplication_pause(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAApplication_drawScene(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAApplication_setTouchDispatcher(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAApplication_isDisplayStats(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAApplication_setProjection(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAApplication_getTouchDispatcher(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAApplication_getZEye(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAApplication_setNextDeltaTimeZero(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAApplication_getAccelerometer(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAApplication_getVisibleSize(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAApplication_setNotificationView(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAApplication_setAnimationInterval(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAApplication_getClassTypeInfo(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAApplication_getNotificationView(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAApplication_isPaused(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAApplication_setDisplayStats(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAApplication_getRootWindow(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAApplication_getApplication(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAApplication_CAApplication(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CCDisplayLinkDirector_class;
extern JSObject *jsb_CrossApp_CCDisplayLinkDirector_prototype;

bool js_autogentestbindings_js_CCDisplayLinkDirector_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_autogentestbindings_js_CCDisplayLinkDirector_finalize(JSContext *cx, JSObject *obj);
void js_register_autogentestbindings_js_CCDisplayLinkDirector(JSContext *cx, JS::HandleObject global);
void register_all_autogentestbindings_js(JSContext* cx, JS::HandleObject obj);
bool js_autogentestbindings_js_CCDisplayLinkDirector_startAnimation(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CCDisplayLinkDirector_mainLoop(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CCDisplayLinkDirector_stopAnimation(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CCDisplayLinkDirector_setAnimationInterval(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CCDisplayLinkDirector_CCDisplayLinkDirector(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CAAutoreleasePool_class;
extern JSObject *jsb_CrossApp_CAAutoreleasePool_prototype;

bool js_autogentestbindings_js_CAAutoreleasePool_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_autogentestbindings_js_CAAutoreleasePool_finalize(JSContext *cx, JSObject *obj);
void js_register_autogentestbindings_js_CAAutoreleasePool(JSContext *cx, JS::HandleObject global);
void register_all_autogentestbindings_js(JSContext* cx, JS::HandleObject obj);
bool js_autogentestbindings_js_CAAutoreleasePool_addObject(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAAutoreleasePool_clear(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAAutoreleasePool_removeObject(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAAutoreleasePool_CAAutoreleasePool(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CAPoolManager_class;
extern JSObject *jsb_CrossApp_CAPoolManager_prototype;

bool js_autogentestbindings_js_CAPoolManager_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_autogentestbindings_js_CAPoolManager_finalize(JSContext *cx, JSObject *obj);
void js_register_autogentestbindings_js_CAPoolManager(JSContext *cx, JS::HandleObject global);
void register_all_autogentestbindings_js(JSContext* cx, JS::HandleObject obj);
bool js_autogentestbindings_js_CAPoolManager_addObject(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAPoolManager_finalize(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAPoolManager_pop(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAPoolManager_push(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAPoolManager_removeObject(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAPoolManager_purgePoolManager(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAPoolManager_sharedPoolManager(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAPoolManager_CAPoolManager(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CACamera_class;
extern JSObject *jsb_CrossApp_CACamera_prototype;

bool js_autogentestbindings_js_CACamera_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_autogentestbindings_js_CACamera_finalize(JSContext *cx, JSObject *obj);
void js_register_autogentestbindings_js_CACamera(JSContext *cx, JS::HandleObject global);
void register_all_autogentestbindings_js(JSContext* cx, JS::HandleObject obj);
bool js_autogentestbindings_js_CACamera_locate(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CACamera_restore(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CACamera_setUpXYZ(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CACamera_description(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CACamera_setCenterXYZ(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CACamera_setEyeXYZ(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CACamera_getCenterXYZ(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CACamera_getEyeXYZ(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CACamera_isDirty(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CACamera_init(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CACamera_getUpXYZ(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CACamera_setDirty(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CACamera_getZEye(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CACamera_CACamera(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CALock_class;
extern JSObject *jsb_CrossApp_CALock_prototype;

bool js_autogentestbindings_js_CALock_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_autogentestbindings_js_CALock_finalize(JSContext *cx, JSObject *obj);
void js_register_autogentestbindings_js_CALock(JSContext *cx, JS::HandleObject global);
void register_all_autogentestbindings_js(JSContext* cx, JS::HandleObject obj);
bool js_autogentestbindings_js_CALock_Lock(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CALock_UnLock(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CALock_CALock(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CAAutoLock_class;
extern JSObject *jsb_CrossApp_CAAutoLock_prototype;

bool js_autogentestbindings_js_CAAutoLock_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_autogentestbindings_js_CAAutoLock_finalize(JSContext *cx, JSObject *obj);
void js_register_autogentestbindings_js_CAAutoLock(JSContext *cx, JS::HandleObject global);
void register_all_autogentestbindings_js(JSContext* cx, JS::HandleObject obj);
bool js_autogentestbindings_js_CAAutoLock_CAAutoLock(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CAThread_class;
extern JSObject *jsb_CrossApp_CAThread_prototype;

bool js_autogentestbindings_js_CAThread_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_autogentestbindings_js_CAThread_finalize(JSContext *cx, JSObject *obj);
void js_register_autogentestbindings_js_CAThread(JSContext *cx, JS::HandleObject global);
void register_all_autogentestbindings_js(JSContext* cx, JS::HandleObject obj);
bool js_autogentestbindings_js_CAThread_setMaxMsgCount(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAThread_closeAtOnce(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAThread_isRunning(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAThread_OnRunning(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAThread_clear(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAThread_OnExitInstance(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAThread_start(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAThread_OnInitInstance(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAThread_close(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAThread_notifyRun(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAThread_CAThread(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CAButton_class;
extern JSObject *jsb_CrossApp_CAButton_prototype;

bool js_autogentestbindings_js_CAButton_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_autogentestbindings_js_CAButton_finalize(JSContext *cx, JSObject *obj);
void js_register_autogentestbindings_js_CAButton(JSContext *cx, JS::HandleObject global);
void register_all_autogentestbindings_js(JSContext* cx, JS::HandleObject obj);
bool js_autogentestbindings_js_CAButton_setImageSize(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAButton_setTitleFontSize(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAButton_ccTouchEnded(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAButton_setTitleForState(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAButton_isAllowsSelected(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAButton_setBackgroundViewForState(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAButton_isSelected(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAButton_init(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAButton_setImageColorForState(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAButton_ccTouchMoved(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAButton_getImageForState(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAButton_ccTouchBegan(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAButton_setTitleLabelSize(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAButton_isTouchClick(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAButton_setTitleFontName(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAButton_onExitTransitionDidStart(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAButton_setTitleOffset(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAButton_setTitleColorForState(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAButton_getBackgroundViewForState(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAButton_interruptTouchState(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAButton_setImageOffset(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAButton_setControlState(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAButton_setImageForState(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAButton_ccTouchCancelled(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAButton_onEnterTransitionDidFinish(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAButton_setAllowsSelected(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAButton_getTitleForState(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAButton_create(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAButton_createWithFrame(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAButton_createWithLayout(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAButton_createWithCenter(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAButton_CAButton(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CASegmentedControl_class;
extern JSObject *jsb_CrossApp_CASegmentedControl_prototype;

bool js_autogentestbindings_js_CASegmentedControl_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_autogentestbindings_js_CASegmentedControl_finalize(JSContext *cx, JSObject *obj);
void js_register_autogentestbindings_js_CASegmentedControl(JSContext *cx, JS::HandleObject global);
void register_all_autogentestbindings_js(JSContext* cx, JS::HandleObject obj);
bool js_autogentestbindings_js_CASegmentedControl_setTitleFontSize(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CASegmentedControl_setSegmentItemBackgroundImage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CASegmentedControl_setTitleColor(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CASegmentedControl_setSelectedAtIndex(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CASegmentedControl_setImageForSegmentAtIndex(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CASegmentedControl_setImageColor(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CASegmentedControl_getSelectedAtIndex(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CASegmentedControl_setTitleSelectedColor(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CASegmentedControl_getNumberOfSegments(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CASegmentedControl_setTitleForSegmentAtIndex(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CASegmentedControl_setImageSizeAtIndex(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CASegmentedControl_isEnabledForSegmentAtIndex(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CASegmentedControl_setBackgroundImage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CASegmentedControl_setTitleFontName(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CASegmentedControl_getTitleSelectedColor(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CASegmentedControl_setImageSelectedColor(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CASegmentedControl_getContentOffsetForSegmentAtIndex(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CASegmentedControl_getImageSelectedColor(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CASegmentedControl_init(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CASegmentedControl_getImageForSegmentAtIndex(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CASegmentedControl_setContentOffsetForSegmentAtIndex(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CASegmentedControl_getTitleColor(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CASegmentedControl_onExitTransitionDidStart(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CASegmentedControl_setTintColor(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CASegmentedControl_getTitleForSegmentAtIndex(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CASegmentedControl_getImageColor(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CASegmentedControl_onEnterTransitionDidFinish(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CASegmentedControl_setEnabledForSegmentAtIndex(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CASegmentedControl_create(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CASegmentedControl_createWithFrame(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CASegmentedControl_createWithLayout(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CASegmentedControl_createWithCenter(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CASegmentedControl_CASegmentedControl(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CABarItem_class;
extern JSObject *jsb_CrossApp_CABarItem_prototype;

bool js_autogentestbindings_js_CABarItem_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_autogentestbindings_js_CABarItem_finalize(JSContext *cx, JSObject *obj);
void js_register_autogentestbindings_js_CABarItem(JSContext *cx, JS::HandleObject global);
void register_all_autogentestbindings_js(JSContext* cx, JS::HandleObject obj);
bool js_autogentestbindings_js_CABarItem_setImage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CABarItem_setTitle(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CABarItem_getImage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CABarItem_getTitle(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CABarItem_CABarItem(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CABarButtonItem_class;
extern JSObject *jsb_CrossApp_CABarButtonItem_prototype;

bool js_autogentestbindings_js_CABarButtonItem_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_autogentestbindings_js_CABarButtonItem_finalize(JSContext *cx, JSObject *obj);
void js_register_autogentestbindings_js_CABarButtonItem(JSContext *cx, JS::HandleObject global);
void register_all_autogentestbindings_js(JSContext* cx, JS::HandleObject obj);
bool js_autogentestbindings_js_CABarButtonItem_getSel(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CABarButtonItem_getCustomView(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CABarButtonItem_initWithCustomView(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CABarButtonItem_setItemWidth(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CABarButtonItem_initWithImage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CABarButtonItem_getHighlightedImage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CABarButtonItem_getTarget(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CABarButtonItem_setHighlightedImage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CABarButtonItem_init(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CABarButtonItem_initWithTitle(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CABarButtonItem_getItemWidth(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CABarButtonItem_create(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CABarButtonItem_CABarButtonItem(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CANavigationBarItem_class;
extern JSObject *jsb_CrossApp_CANavigationBarItem_prototype;

bool js_autogentestbindings_js_CANavigationBarItem_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_autogentestbindings_js_CANavigationBarItem_finalize(JSContext *cx, JSObject *obj);
void js_register_autogentestbindings_js_CANavigationBarItem(JSContext *cx, JS::HandleObject global);
void register_all_autogentestbindings_js(JSContext* cx, JS::HandleObject obj);
bool js_autogentestbindings_js_CANavigationBarItem_addLeftButtonItem(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CANavigationBarItem_getRightButtonItems(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CANavigationBarItem_setNagigationBarHidden(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CANavigationBarItem_getTitleViewImage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CANavigationBarItem_setShowGoBackButton(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CANavigationBarItem_addRightButtonItem(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CANavigationBarItem_getTitleView(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CANavigationBarItem_setTitleView(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CANavigationBarItem_init(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CANavigationBarItem_getLeftButtonItems(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CANavigationBarItem_setTitleViewImage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CANavigationBarItem_isNagigationBarHidden(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CANavigationBarItem_isShowGoBackButton(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CANavigationBarItem_create(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CANavigationBarItem_CANavigationBarItem(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CATabBarItem_class;
extern JSObject *jsb_CrossApp_CATabBarItem_prototype;

bool js_autogentestbindings_js_CATabBarItem_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_autogentestbindings_js_CATabBarItem_finalize(JSContext *cx, JSObject *obj);
void js_register_autogentestbindings_js_CATabBarItem(JSContext *cx, JS::HandleObject global);
void register_all_autogentestbindings_js(JSContext* cx, JS::HandleObject obj);
bool js_autogentestbindings_js_CATabBarItem_getBadgeValue(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATabBarItem_setSelectedImage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATabBarItem_getSelectedImage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATabBarItem_init(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATabBarItem_setBadgeValue(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATabBarItem_create(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATabBarItem_CATabBarItem(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CANavigationBarDelegate_class;
extern JSObject *jsb_CrossApp_CANavigationBarDelegate_prototype;

bool js_autogentestbindings_js_CANavigationBarDelegate_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_autogentestbindings_js_CANavigationBarDelegate_finalize(JSContext *cx, JSObject *obj);
void js_register_autogentestbindings_js_CANavigationBarDelegate(JSContext *cx, JS::HandleObject global);
void register_all_autogentestbindings_js(JSContext* cx, JS::HandleObject obj);
bool js_autogentestbindings_js_CANavigationBarDelegate_navigationPopViewController(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CANavigationBar_class;
extern JSObject *jsb_CrossApp_CANavigationBar_prototype;

bool js_autogentestbindings_js_CANavigationBar_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_autogentestbindings_js_CANavigationBar_finalize(JSContext *cx, JSObject *obj);
void js_register_autogentestbindings_js_CANavigationBar(JSContext *cx, JS::HandleObject global);
void register_all_autogentestbindings_js(JSContext* cx, JS::HandleObject obj);
bool js_autogentestbindings_js_CANavigationBar_getDelegate(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CANavigationBar_getItem(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CANavigationBar_setButtonColor(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CANavigationBar_getTitleColor(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CANavigationBar_setItem(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CANavigationBar_getBackgroundView(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CANavigationBar_onExitTransitionDidStart(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CANavigationBar_setBackgroundView(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CANavigationBar_setDelegate(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CANavigationBar_getButtonColor(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CANavigationBar_onEnterTransitionDidFinish(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CANavigationBar_setTitleColor(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CANavigationBar_createWithFrame(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CANavigationBar_createWithLayout(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CANavigationBar_createWithCenter(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CANavigationBar_CANavigationBar(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CATabBarDelegate_class;
extern JSObject *jsb_CrossApp_CATabBarDelegate_prototype;

bool js_autogentestbindings_js_CATabBarDelegate_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_autogentestbindings_js_CATabBarDelegate_finalize(JSContext *cx, JSObject *obj);
void js_register_autogentestbindings_js_CATabBarDelegate(JSContext *cx, JS::HandleObject global);
void register_all_autogentestbindings_js(JSContext* cx, JS::HandleObject obj);
bool js_autogentestbindings_js_CATabBarDelegate_tabBarClickToForbidSelectedItem(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATabBarDelegate_tabBarSelectedItem(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CABadgeView_class;
extern JSObject *jsb_CrossApp_CABadgeView_prototype;

bool js_autogentestbindings_js_CABadgeView_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_autogentestbindings_js_CABadgeView_finalize(JSContext *cx, JSObject *obj);
void js_register_autogentestbindings_js_CABadgeView(JSContext *cx, JS::HandleObject global);
void register_all_autogentestbindings_js(JSContext* cx, JS::HandleObject obj);
bool js_autogentestbindings_js_CABadgeView_setBadgeText(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CABadgeView_init(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CABadgeView_setContentSize(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CABadgeView_CABadgeView(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CATabBar_class;
extern JSObject *jsb_CrossApp_CATabBar_prototype;

bool js_autogentestbindings_js_CATabBar_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_autogentestbindings_js_CATabBar_finalize(JSContext *cx, JSObject *obj);
void js_register_autogentestbindings_js_CATabBar(JSContext *cx, JS::HandleObject global);
void register_all_autogentestbindings_js(JSContext* cx, JS::HandleObject obj);
bool js_autogentestbindings_js_CATabBar_setSelectedBackgroundImage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATabBar_setSelectedIndicatorColor(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATabBar_getItemSize(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATabBar_replaceItemAtIndex(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATabBar_getSelectedIndicatorColor(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATabBar_getBackgroundColor(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATabBar_getContentViewFrame(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATabBar_setSelectedAtIndex(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATabBar_showSelectedIndicator(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATabBar_addForbidSelectedAtIndex(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATabBar_getSelectedIndex(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATabBar_setSelectedIndicatorImage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATabBar_getTitleColorForNormal(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATabBar_getTitleColorForSelected(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATabBar_setItems(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATabBar_getBackgroundImage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATabBar_getItems(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATabBar_setBackgroundImage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATabBar_setBackgroundColor(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATabBar_setTitleColorForSelected(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATabBar_onExitTransitionDidStart(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATabBar_setDelegate(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATabBar_getForbidSelectedIndexs(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATabBar_getSelectedBackgroundColor(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATabBar_setSelectedBackgroundColor(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATabBar_getDelegate(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATabBar_getSelectedIndicatorImage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATabBar_setTitleColorForNormal(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATabBar_getSelectedBackgroundImage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATabBar_onEnterTransitionDidFinish(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATabBar_createWithFrame(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATabBar_createWithLayout(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATabBar_createWithCenter(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATabBar_CATabBar(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CARenderImage_class;
extern JSObject *jsb_CrossApp_CARenderImage_prototype;

bool js_autogentestbindings_js_CARenderImage_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_autogentestbindings_js_CARenderImage_finalize(JSContext *cx, JSObject *obj);
void js_register_autogentestbindings_js_CARenderImage(JSContext *cx, JS::HandleObject global);
void register_all_autogentestbindings_js(JSContext* cx, JS::HandleObject obj);
bool js_autogentestbindings_js_CARenderImage_clearStencil(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CARenderImage_listenToForeground(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CARenderImage_getClearDepth(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CARenderImage_printscreenWithView(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CARenderImage_getClearStencil(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CARenderImage_setClearStencil(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CARenderImage_setImageView(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CARenderImage_initWithWidthAndHeight(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CARenderImage_visit(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CARenderImage_isAutoDraw(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CARenderImage_getImageView(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CARenderImage_setClearFlags(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CARenderImage_draw(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CARenderImage_saveToFile(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CARenderImage_setAutoDraw(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CARenderImage_setClearColor(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CARenderImage_clearDepth(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CARenderImage_getClearColor(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CARenderImage_listenToBackground(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CARenderImage_clear(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CARenderImage_getClearFlags(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CARenderImage_setClearDepth(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CARenderImage_create(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CARenderImage_CARenderImage(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CAProgress_class;
extern JSObject *jsb_CrossApp_CAProgress_prototype;

bool js_autogentestbindings_js_CAProgress_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_autogentestbindings_js_CAProgress_finalize(JSContext *cx, JSObject *obj);
void js_register_autogentestbindings_js_CAProgress(JSContext *cx, JS::HandleObject global);
void register_all_autogentestbindings_js(JSContext* cx, JS::HandleObject obj);
bool js_autogentestbindings_js_CAProgress_setProgressTintImage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAProgress_getProgressTintImage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAProgress_setProgressTrackColor(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAProgress_setColor(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAProgress_setProgressTrackImage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAProgress_getProgressTintColor(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAProgress_getProgressTrackImage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAProgress_getProgressTrackColor(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAProgress_init(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAProgress_onExitTransitionDidStart(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAProgress_getProgress(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAProgress_setProgress(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAProgress_onEnterTransitionDidFinish(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAProgress_setProgressTintColor(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAProgress_create(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAProgress_createWithFrame(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAProgress_createWithLayout(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAProgress_createWithCenter(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAProgress_CAProgress(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CASwitch_class;
extern JSObject *jsb_CrossApp_CASwitch_prototype;

bool js_autogentestbindings_js_CASwitch_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_autogentestbindings_js_CASwitch_finalize(JSContext *cx, JSObject *obj);
void js_register_autogentestbindings_js_CASwitch(JSContext *cx, JS::HandleObject global);
void register_all_autogentestbindings_js(JSContext* cx, JS::HandleObject obj);
bool js_autogentestbindings_js_CASwitch_getOnImage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CASwitch_setOffImage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CASwitch_isTouchClick(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CASwitch_getThumbTintImage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CASwitch_setIsOn(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CASwitch_isOn(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CASwitch_setOnImage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CASwitch_init(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CASwitch_onExitTransitionDidStart(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CASwitch_getOffImage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CASwitch_onEnterTransitionDidFinish(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CASwitch_setThumbTintImage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CASwitch_create(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CASwitch_createWithFrame(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CASwitch_createWithLayout(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CASwitch_createWithCenter(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CASwitch_CASwitch(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CASlider_class;
extern JSObject *jsb_CrossApp_CASlider_prototype;

bool js_autogentestbindings_js_CASlider_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_autogentestbindings_js_CASlider_finalize(JSContext *cx, JSObject *obj);
void js_register_autogentestbindings_js_CASlider(JSContext *cx, JS::HandleObject global);
void register_all_autogentestbindings_js(JSContext* cx, JS::HandleObject obj);
bool js_autogentestbindings_js_CASlider_ccTouchBegan(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CASlider_initWithCenter(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CASlider_ccTouchEnded(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CASlider_getTrackHeight(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CASlider_setMinValue(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CASlider_getMinValue(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CASlider_init(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CASlider_ccTouchMoved(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CASlider_getMaxValue(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CASlider_setMaxTrackTintImage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CASlider_setValue(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CASlider_isTouchClick(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CASlider_initWithFrame(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CASlider_layoutSubViews(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CASlider_onExitTransitionDidStart(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CASlider_setThumbTintImage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CASlider_getMinTrackTintImage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CASlider_setTrackHeight(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CASlider_getThumbTintImage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CASlider_setMaxValue(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CASlider_getValue(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CASlider_getMaxTrackTintImage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CASlider_setMinTrackTintImage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CASlider_onEnterTransitionDidFinish(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CASlider_create(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CASlider_createWithFrame(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CASlider_createWithLayout(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CASlider_createWithCenter(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CASlider_CASlider(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CAPageControl_class;
extern JSObject *jsb_CrossApp_CAPageControl_prototype;

bool js_autogentestbindings_js_CAPageControl_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_autogentestbindings_js_CAPageControl_finalize(JSContext *cx, JSObject *obj);
void js_register_autogentestbindings_js_CAPageControl(JSContext *cx, JS::HandleObject global);
void register_all_autogentestbindings_js(JSContext* cx, JS::HandleObject obj);
bool js_autogentestbindings_js_CAPageControl_setDefersCurrentPageDisplay(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAPageControl_onEnter(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAPageControl_getPageIndicatorImage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAPageControl_initWithCenter(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAPageControl_sizeForNumberOfPages(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAPageControl_isSinglePage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAPageControl_setPageIndicatorImage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAPageControl_setNumberOfPages(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAPageControl_visit(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAPageControl_getNumberOfPages(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAPageControl_init(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAPageControl_setTouchEnabled(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAPageControl_setPageIndicatorTintColor(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAPageControl_initWithFrame(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAPageControl_setSinglePage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAPageControl_getStyle(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAPageControl_getPageIndicatorTintColor(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAPageControl_setStyle(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAPageControl_isDefersCurrentPageDisplay(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAPageControl_setCurrentPageIndicatorTintColor(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAPageControl_setCurrentPage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAPageControl_updateCurrentPageDisplay(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAPageControl_getCurrentPage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAPageControl_onExit(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAPageControl_getCurrentPageIndicatorTintColor(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAPageControl_setCurrIndicatorImage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAPageControl_getCurrIndicatorImage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAPageControl_create(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAPageControl_createWithFrame(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAPageControl_createWithLayout(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAPageControl_createWithCenter(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAPageControl_CAPageControl(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CAStepper_class;
extern JSObject *jsb_CrossApp_CAStepper_prototype;

bool js_autogentestbindings_js_CAStepper_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_autogentestbindings_js_CAStepper_finalize(JSContext *cx, JSObject *obj);
void js_register_autogentestbindings_js_CAStepper(JSContext *cx, JS::HandleObject global);
void register_all_autogentestbindings_js(JSContext* cx, JS::HandleObject obj);
bool js_autogentestbindings_js_CAStepper_onEnter(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAStepper_setMinValue(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAStepper_ccTouchBegan(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAStepper_getBackgroundImageForState(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAStepper_setWraps(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAStepper_ccTouchEnded(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAStepper_setValue(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAStepper_setTailorImageAtIndex(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAStepper_getContinuous(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAStepper_getTailorImageAtIndex(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAStepper_getAutoRepeat(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAStepper_setContinuous(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAStepper_getMinValue(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAStepper_init(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAStepper_getIncrementImageForState(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAStepper_setDividerColor(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAStepper_getDecrementImageForState(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAStepper_ccTouchMoved(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAStepper_getMaxValue(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAStepper_setDecrementImage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAStepper_getWraps(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAStepper_setStepValue(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAStepper_setBackgroundImage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAStepper_setAutoRepeat(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAStepper_removeAllTargets(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAStepper_getDividerColor(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAStepper_setTouchEffect(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAStepper_onExit(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAStepper_setIncrementImage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAStepper_getStepValue(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAStepper_setMaxValue(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAStepper_getValue(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAStepper_ccTouchCancelled(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAStepper_visit(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAStepper_getTouchEffect(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAStepper_create(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAStepper_createWithFrame(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAStepper_createWithLayout(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAStepper_createWithCenter(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAStepper_CAStepper(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CAActivityIndicatorView_class;
extern JSObject *jsb_CrossApp_CAActivityIndicatorView_prototype;

bool js_autogentestbindings_js_CAActivityIndicatorView_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_autogentestbindings_js_CAActivityIndicatorView_finalize(JSContext *cx, JSObject *obj);
void js_register_autogentestbindings_js_CAActivityIndicatorView(JSContext *cx, JS::HandleObject global);
void register_all_autogentestbindings_js(JSContext* cx, JS::HandleObject obj);
bool js_autogentestbindings_js_CAActivityIndicatorView_setCycleTime(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAActivityIndicatorView_draw(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAActivityIndicatorView_onEnter(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAActivityIndicatorView_onExit(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAActivityIndicatorView_getActivityBackView(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAActivityIndicatorView_getActivityIndicatorView(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAActivityIndicatorView_setTimesOneCycle(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAActivityIndicatorView_getColor(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAActivityIndicatorView_visit(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAActivityIndicatorView_setActivityBackView(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAActivityIndicatorView_setStyle(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAActivityIndicatorView_setLoadingMinTime(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAActivityIndicatorView_init(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAActivityIndicatorView_isAnimating(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAActivityIndicatorView_setActivityIndicatorView(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAActivityIndicatorView_getLoadingMinTime(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAActivityIndicatorView_startAnimating(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAActivityIndicatorView_stopAnimating(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAActivityIndicatorView_create(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAActivityIndicatorView_createWithFrame(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAActivityIndicatorView_createWithLayout(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAActivityIndicatorView_createWithCenter(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAActivityIndicatorView_CAActivityIndicatorView(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CAPullToRefreshView_class;
extern JSObject *jsb_CrossApp_CAPullToRefreshView_prototype;

bool js_autogentestbindings_js_CAPullToRefreshView_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_autogentestbindings_js_CAPullToRefreshView_finalize(JSContext *cx, JSObject *obj);
void js_register_autogentestbindings_js_CAPullToRefreshView(JSContext *cx, JS::HandleObject global);
void register_all_autogentestbindings_js(JSContext* cx, JS::HandleObject obj);
bool js_autogentestbindings_js_CAPullToRefreshView_getLoadingView(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAPullToRefreshView_setPullToRefreshText(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAPullToRefreshView_getPullToRefreshType(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAPullToRefreshView_getRefreshingText(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAPullToRefreshView_setLoadingView(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAPullToRefreshView_setRefreshingText(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAPullToRefreshView_getLabelColor(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAPullToRefreshView_getPullToImage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAPullToRefreshView_init(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAPullToRefreshView_getReleaseToRefreshText(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAPullToRefreshView_setLayoutLinearType(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAPullToRefreshView_setLabelColor(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAPullToRefreshView_setReleaseToRefreshText(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAPullToRefreshView_getLayoutLinearType(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAPullToRefreshView_setPullToImage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAPullToRefreshView_getPullToRefreshText(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAPullToRefreshView_create(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAPullToRefreshView_CAPullToRefreshView(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CAScrollViewDelegate_class;
extern JSObject *jsb_CrossApp_CAScrollViewDelegate_prototype;

bool js_autogentestbindings_js_CAScrollViewDelegate_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_autogentestbindings_js_CAScrollViewDelegate_finalize(JSContext *cx, JSObject *obj);
void js_register_autogentestbindings_js_CAScrollViewDelegate(JSContext *cx, JS::HandleObject global);
void register_all_autogentestbindings_js(JSContext* cx, JS::HandleObject obj);
bool js_autogentestbindings_js_CAScrollViewDelegate_scrollViewDidMoved(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAScrollViewDelegate_scrollViewDidEndDragging(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAScrollViewDelegate_scrollViewStopMoved(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAScrollViewDelegate_scrollViewFooterBeginRefreshing(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAScrollViewDelegate_scrollViewTouchUpWithoutMoved(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAScrollViewDelegate_scrollViewHeaderBeginRefreshing(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAScrollViewDelegate_scrollViewDidZoom(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAScrollViewDelegate_scrollViewDragging(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAScrollViewDelegate_scrollViewWillBeginDragging(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CAScrollView_class;
extern JSObject *jsb_CrossApp_CAScrollView_prototype;

bool js_autogentestbindings_js_CAScrollView_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_autogentestbindings_js_CAScrollView_finalize(JSContext *cx, JSObject *obj);
void js_register_autogentestbindings_js_CAScrollView(JSContext *cx, JS::HandleObject global);
void register_all_autogentestbindings_js(JSContext* cx, JS::HandleObject obj);
bool js_autogentestbindings_js_CAScrollView_mouseScrollWheel(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAScrollView_setBounceVertical(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAScrollView_removeAllSubviews(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAScrollView_isTracking(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAScrollView_startDeaccelerateScroll(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAScrollView_isBounceVertical(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAScrollView_isShowsScrollIndicators(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAScrollView_setShowsHorizontalScrollIndicator(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAScrollView_setTouchEnabledAtSubviews(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAScrollView_getZoomScale(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAScrollView_isDecelerating(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAScrollView_endFooterRefresh(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAScrollView_isBounceHorizontal(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAScrollView_setFooterRefreshView(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAScrollView_ccTouchEnded(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAScrollView_getHeaderRefreshView(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAScrollView_addSubview(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAScrollView_setShowsVerticalScrollIndicator(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAScrollView_setContentOffset(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAScrollView_init(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAScrollView_isShowsVerticalScrollIndicator(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAScrollView_startPullToHeaderRefreshView(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAScrollView_getSubviews(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAScrollView_ccTouchMoved(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAScrollView_getMultitouchGesture(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAScrollView_setHeaderRefreshView(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAScrollView_ccTouchBegan(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAScrollView_getScrollViewDelegate(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAScrollView_setBounces(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAScrollView_getContentOffset(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAScrollView_setViewSize(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAScrollView_insertSubview(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAScrollView_setShowsScrollIndicators(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAScrollView_removeSubviewByTag(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAScrollView_getSubviewByTag(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAScrollView_isBounces(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAScrollView_setBackgroundColor(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAScrollView_getMaximumZoomScale(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAScrollView_getViewSize(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAScrollView_setMaximumZoomScale(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAScrollView_onExitTransitionDidStart(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAScrollView_isReachBoundaryDown(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAScrollView_isZooming(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAScrollView_setBackgroundImage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAScrollView_isShowsHorizontalScrollIndicator(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAScrollView_switchPCMode(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAScrollView_isReachBoundaryUp(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAScrollView_isReachBoundaryLeft(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAScrollView_getFooterRefreshView(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAScrollView_stopDeaccelerateScroll(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAScrollView_setScrollViewDelegate(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAScrollView_ccTouchCancelled(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAScrollView_isTouchEnabledAtSubviews(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAScrollView_isReachBoundaryRight(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAScrollView_setMinimumZoomScale(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAScrollView_endHeaderRefresh(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAScrollView_getMinimumZoomScale(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAScrollView_setBounceHorizontal(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAScrollView_removeSubview(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAScrollView_setZoomScale(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAScrollView_onEnterTransitionDidFinish(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAScrollView_setMultitouchGesture(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAScrollView_createWithFrame(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAScrollView_createWithLayout(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAScrollView_createWithCenter(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAScrollView_CAScrollView(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CAIndicator_class;
extern JSObject *jsb_CrossApp_CAIndicator_prototype;

bool js_autogentestbindings_js_CAIndicator_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_autogentestbindings_js_CAIndicator_finalize(JSContext *cx, JSObject *obj);
void js_register_autogentestbindings_js_CAIndicator(JSContext *cx, JS::HandleObject global);
void register_all_autogentestbindings_js(JSContext* cx, JS::HandleObject obj);
bool js_autogentestbindings_js_CAIndicator_mouseMovedOutSide(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAIndicator_setIndicator(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAIndicator_ccTouchBegan(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAIndicator_setHide(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAIndicator_ccTouchCancelled(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAIndicator_ccTouchEnded(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAIndicator_init(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAIndicator_onExitTransitionDidStart(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAIndicator_ccTouchMoved(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAIndicator_switchPCMode(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAIndicator_mouseMoved(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAIndicator_onEnterTransitionDidFinish(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAIndicator_getMyScrollView(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAIndicator_create(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAIndicator_CAIndicator(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CAPageViewDelegate_class;
extern JSObject *jsb_CAPageViewDelegate_prototype;

bool js_autogentestbindings_js_CAPageViewDelegate_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_autogentestbindings_js_CAPageViewDelegate_finalize(JSContext *cx, JSObject *obj);
void js_register_autogentestbindings_js_CAPageViewDelegate(JSContext *cx, JS::HandleObject global);
void register_all_autogentestbindings_js(JSContext* cx, JS::HandleObject obj);
bool js_autogentestbindings_js_CAPageViewDelegate_pageViewDidBeginTurning(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAPageViewDelegate_pageViewDidSelectedPageAtIndex(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAPageViewDelegate_pageViewDidEndTurning(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CAPageView_class;
extern JSObject *jsb_CAPageView_prototype;

bool js_autogentestbindings_js_CAPageView_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_autogentestbindings_js_CAPageView_finalize(JSContext *cx, JSObject *obj);
void js_register_autogentestbindings_js_CAPageView(JSContext *cx, JS::HandleObject global);
void register_all_autogentestbindings_js(JSContext* cx, JS::HandleObject obj);
bool js_autogentestbindings_js_CAPageView_setPageViewDelegate(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAPageView_setSpacing(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAPageView_setShowsScrollIndicators(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAPageView_getPageViewDirection(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAPageView_setViews(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAPageView_getSpacing(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAPageView_getCurrPage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAPageView_init(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAPageView_getPageViewDelegate(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAPageView_getPageCount(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAPageView_setCurrPage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAPageView_getSubViewAtIndex(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAPageView_createWithFrame(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAPageView_createWithLayout(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAPageView_createWithCenter(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAPageView_CAPageView(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CAKeypadDelegate_class;
extern JSObject *jsb_CrossApp_CAKeypadDelegate_prototype;

bool js_autogentestbindings_js_CAKeypadDelegate_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_autogentestbindings_js_CAKeypadDelegate_finalize(JSContext *cx, JSObject *obj);
void js_register_autogentestbindings_js_CAKeypadDelegate(JSContext *cx, JS::HandleObject global);
void register_all_autogentestbindings_js(JSContext* cx, JS::HandleObject obj);
bool js_autogentestbindings_js_CAKeypadDelegate_keyBackClicked(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAKeypadDelegate_keyMenuClicked(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CAKeypadHandler_class;
extern JSObject *jsb_CrossApp_CAKeypadHandler_prototype;

bool js_autogentestbindings_js_CAKeypadHandler_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_autogentestbindings_js_CAKeypadHandler_finalize(JSContext *cx, JSObject *obj);
void js_register_autogentestbindings_js_CAKeypadHandler(JSContext *cx, JS::HandleObject global);
void register_all_autogentestbindings_js(JSContext* cx, JS::HandleObject obj);
bool js_autogentestbindings_js_CAKeypadHandler_getDelegate(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAKeypadHandler_initWithDelegate(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAKeypadHandler_setDelegate(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAKeypadHandler_handlerWithDelegate(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CAKeypadDispatcher_class;
extern JSObject *jsb_CrossApp_CAKeypadDispatcher_prototype;

bool js_autogentestbindings_js_CAKeypadDispatcher_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_autogentestbindings_js_CAKeypadDispatcher_finalize(JSContext *cx, JSObject *obj);
void js_register_autogentestbindings_js_CAKeypadDispatcher(JSContext *cx, JS::HandleObject global);
void register_all_autogentestbindings_js(JSContext* cx, JS::HandleObject obj);
bool js_autogentestbindings_js_CAKeypadDispatcher_forceRemoveDelegate(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAKeypadDispatcher_dispatchKeypadMSG(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAKeypadDispatcher_forceAddDelegate(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAKeypadDispatcher_addDelegate(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAKeypadDispatcher_removeDelegate(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAKeypadDispatcher_CAKeypadDispatcher(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CAViewController_class;
extern JSObject *jsb_CrossApp_CAViewController_prototype;

bool js_autogentestbindings_js_CAViewController_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_autogentestbindings_js_CAViewController_finalize(JSContext *cx, JSObject *obj);
void js_register_autogentestbindings_js_CAViewController(JSContext *cx, JS::HandleObject global);
void register_all_autogentestbindings_js(JSContext* cx, JS::HandleObject obj);
bool js_autogentestbindings_js_CAViewController_getView(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAViewController_dismissModalViewController(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAViewController_getTabBarItem(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAViewController_keyBackClicked(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAViewController_setTabBarItem(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAViewController_getViewWithID(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAViewController_setTitle(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAViewController_isKeypadEnabled(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAViewController_isViewRunning(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAViewController_ccTouchEnded(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAViewController_viewDidLoad(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAViewController_presentModalViewController(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAViewController_init(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAViewController_getNavigationBarItem(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAViewController_ccTouchMoved(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAViewController_removeViewFromSuperview(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAViewController_ccTouchBegan(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAViewController_viewDidDisappear(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAViewController_getNibName(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAViewController_setNavigationBarItem(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAViewController_nextResponder(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAViewController_getTitle(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAViewController_viewDidAppear(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAViewController_addViewFromSuperview(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAViewController_getNavigationController(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAViewController_getTabBarController(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAViewController_ccTouchCancelled(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAViewController_viewDidUnload(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAViewController_setKeypadEnabled(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAViewController_keyMenuClicked(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAViewController_CAViewController(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CANavigationController_class;
extern JSObject *jsb_CrossApp_CANavigationController_prototype;

bool js_autogentestbindings_js_CANavigationController_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_autogentestbindings_js_CANavigationController_finalize(JSContext *cx, JSObject *obj);
void js_register_autogentestbindings_js_CANavigationController(JSContext *cx, JS::HandleObject global);
void register_all_autogentestbindings_js(JSContext* cx, JS::HandleObject obj);
bool js_autogentestbindings_js_CANavigationController_ccTouchBegan(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CANavigationController_setNavigationBarTitleColor(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CANavigationController_ccTouchEnded(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CANavigationController_setNavigationBarButtonColor(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CANavigationController_ccTouchCancelled(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CANavigationController_updateItem(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CANavigationController_getBackViewController(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CANavigationController_getNavigationBarBackgroundColor(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CANavigationController_getViewControllerCount(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CANavigationController_setNavigationBarHidden(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CANavigationController_ccTouchMoved(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CANavigationController_replaceViewController(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CANavigationController_popToRootViewControllerAnimated(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CANavigationController_pushViewController(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CANavigationController_isReachBoundaryDown(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CANavigationController_setTouchMoved(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CANavigationController_initWithRootViewController(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CANavigationController_isReachBoundaryRight(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CANavigationController_popViewControllerAnimated(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CANavigationController_getNavigationBarButtonColor(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CANavigationController_isTouchMoved(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CANavigationController_getNavigationBarTitleColor(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CANavigationController_isReachBoundaryUp(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CANavigationController_isReachBoundaryLeft(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CANavigationController_setNavigationBarBackgroundColor(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CANavigationController_isNavigationBarHidden(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CANavigationController_getNavigationBarBackgroundImage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CANavigationController_getViewControllerAtIndex(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CANavigationController_setNavigationBarBackgroundImage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CANavigationController_popFirstViewController(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CANavigationController_popViewControllerAtIndex(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CANavigationController_CANavigationController(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CATabBarController_class;
extern JSObject *jsb_CrossApp_CATabBarController_prototype;

bool js_autogentestbindings_js_CATabBarController_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_autogentestbindings_js_CATabBarController_finalize(JSContext *cx, JSObject *obj);
void js_register_autogentestbindings_js_CATabBarController(JSContext *cx, JS::HandleObject global);
void register_all_autogentestbindings_js(JSContext* cx, JS::HandleObject obj);
bool js_autogentestbindings_js_CATabBarController_getSelectedViewController(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATabBarController_setTabBarSelectedBackgroundImage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATabBarController_setTabBarBackgroundImage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATabBarController_setTabBarTitleColorForSelected(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATabBarController_showSelectedViewControllerAtIndex(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATabBarController_setTabBarHidden(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATabBarController_updateItem(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATabBarController_setTabBarTitleColorForNormal(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATabBarController_setTabBarSelectedIndicatorImage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATabBarController_getTabBarTitleColorForSelected(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATabBarController_getSelectedViewControllerAtIndex(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATabBarController_getTabBarSelectedBackgroundColor(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATabBarController_showSelectedViewController(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATabBarController_getTabBarSelectedBackgroundImage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATabBarController_getTabBarBackgroundColor(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATabBarController_getTabBarBackgroundImage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATabBarController_getTabBarVerticalAlignment(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATabBarController_getTabBarSelectedIndicatorColor(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATabBarController_setTabBarSelectedIndicatorColor(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATabBarController_showTabBarSelectedIndicator(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATabBarController_getTabBarSelectedIndicatorImage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATabBarController_initWithViewControllers(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATabBarController_getTabBarTitleColorForNormal(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATabBarController_getViewControllerAtIndex(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATabBarController_setTabBarBackgroundColor(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATabBarController_setTabBarSelectedBackgroundColor(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATabBarController_isTabBarHidden(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATabBarController_CATabBarController(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CADrawerController_class;
extern JSObject *jsb_CrossApp_CADrawerController_prototype;

bool js_autogentestbindings_js_CADrawerController_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_autogentestbindings_js_CADrawerController_finalize(JSContext *cx, JSObject *obj);
void js_register_autogentestbindings_js_CADrawerController(JSContext *cx, JS::HandleObject global);
void register_all_autogentestbindings_js(JSContext* cx, JS::HandleObject obj);
bool js_autogentestbindings_js_CADrawerController_hideLeftViewController(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CADrawerController_isReachBoundaryLeft(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CADrawerController_showLeftViewController(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CADrawerController_ccTouchEnded(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CADrawerController_ccTouchBegan(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CADrawerController_setTouchMoved(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CADrawerController_getEffect3D(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CADrawerController_getRightViewController(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CADrawerController_ccTouchCancelled(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CADrawerController_ccTouchMoved(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CADrawerController_getBackgroundView(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CADrawerController_isShowLeftViewController(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CADrawerController_isTouchMoved(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CADrawerController_initWithController(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CADrawerController_setEffect3D(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CADrawerController_isReachBoundaryRight(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CADrawerController_replaceRightViewController(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CADrawerController_getLeftViewController(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CADrawerController_setBackgroundView(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CADrawerController_CADrawerController(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CCSet_class;
extern JSObject *jsb_CrossApp_CCSet_prototype;

bool js_autogentestbindings_js_CCSet_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_autogentestbindings_js_CCSet_finalize(JSContext *cx, JSObject *obj);
void js_register_autogentestbindings_js_CCSet(JSContext *cx, JS::HandleObject global);
void register_all_autogentestbindings_js(JSContext* cx, JS::HandleObject obj);
bool js_autogentestbindings_js_CCSet_count(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CCSet_addObject(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CCSet_begin(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CCSet_end(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CCSet_mutableCopy(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CCSet_anyObject(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CCSet_removeAllObjects(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CCSet_removeObject(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CCSet_copy(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CCSet_containsObject(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CCSet_create(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CCSet_CCSet(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CCEGLTouchDelegate_class;
extern JSObject *jsb_CrossApp_CCEGLTouchDelegate_prototype;

bool js_autogentestbindings_js_CCEGLTouchDelegate_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_autogentestbindings_js_CCEGLTouchDelegate_finalize(JSContext *cx, JSObject *obj);
void js_register_autogentestbindings_js_CCEGLTouchDelegate(JSContext *cx, JS::HandleObject global);
void register_all_autogentestbindings_js(JSContext* cx, JS::HandleObject obj);
bool js_autogentestbindings_js_CCEGLTouchDelegate_mouseScrollWheel(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CCEGLTouchDelegate_touchesBegan(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CCEGLTouchDelegate_touchesCancelled(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CCEGLTouchDelegate_touchesMoved(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CCEGLTouchDelegate_touchesEnded(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CCEGLTouchDelegate_mouseMoved(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CATouchController_class;
extern JSObject *jsb_CrossApp_CATouchController_prototype;

bool js_autogentestbindings_js_CATouchController_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_autogentestbindings_js_CATouchController_finalize(JSContext *cx, JSObject *obj);
void js_register_autogentestbindings_js_CATouchController(JSContext *cx, JS::HandleObject global);
void register_all_autogentestbindings_js(JSContext* cx, JS::HandleObject obj);
bool js_autogentestbindings_js_CATouchController_touchMoved(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATouchController_setEvent(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATouchController_getEvent(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATouchController_getTouch(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATouchController_touchBegan(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATouchController_touchEnded(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATouchController_getTouchID(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATouchController_setTouch(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATouchController_touchCancelled(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATouchController_CATouchController(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CATouchDispatcher_class;
extern JSObject *jsb_CrossApp_CATouchDispatcher_prototype;

bool js_autogentestbindings_js_CATouchDispatcher_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_autogentestbindings_js_CATouchDispatcher_finalize(JSContext *cx, JSObject *obj);
void js_register_autogentestbindings_js_CATouchDispatcher(JSContext *cx, JS::HandleObject global);
void register_all_autogentestbindings_js(JSContext* cx, JS::HandleObject obj);
bool js_autogentestbindings_js_CATouchDispatcher_removeMouseMovedResponder(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATouchDispatcher_mouseScrollWheel(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATouchDispatcher_isDispatchEvents(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATouchDispatcher_touchesCancelled(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATouchDispatcher_setScrollRunningResponder(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATouchDispatcher_setFirstResponder(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATouchDispatcher_mouseMoved(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATouchDispatcher_touchesEnded(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATouchDispatcher_addMouseScrollWheel(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATouchDispatcher_getTouchCount(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATouchDispatcher_setDispatchEvents(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATouchDispatcher_init(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATouchDispatcher_touchesBegan(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATouchDispatcher_setDispatchEventsTrue(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATouchDispatcher_touchesMoved(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATouchDispatcher_addMouseMovedResponder(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATouchDispatcher_getScrollRunningResponder(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATouchDispatcher_setDispatchEventsFalse(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATouchDispatcher_getFirstResponder(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATouchDispatcher_removeMouseScrollWheel(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATouchDispatcher_removeScrollRunningResponder(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATouchDispatcher_CATouchDispatcher(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CAGif_class;
extern JSObject *jsb_CrossApp_CAGif_prototype;

bool js_autogentestbindings_js_CAGif_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_autogentestbindings_js_CAGif_finalize(JSContext *cx, JSObject *obj);
void js_register_autogentestbindings_js_CAGif(JSContext *cx, JS::HandleObject global);
void register_all_autogentestbindings_js(JSContext* cx, JS::HandleObject obj);
bool js_autogentestbindings_js_CAGif_getImage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAGif_initWithFilePath(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAGif_initWithData(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAGif_setGifImageWithIndex(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAGif_getGifImageIndex(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAGif_getHeight(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAGif_getWidth(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAGif_getImageDuration(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAGif_getGifImageCounts(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAGif_nextGifImageIndex(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAGif_createWithFilePath(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAGif_createWithData(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAGif_CAGif(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CAWindow_class;
extern JSObject *jsb_CrossApp_CAWindow_prototype;

bool js_autogentestbindings_js_CAWindow_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_autogentestbindings_js_CAWindow_finalize(JSContext *cx, JSObject *obj);
void js_register_autogentestbindings_js_CAWindow(JSContext *cx, JS::HandleObject global);
void register_all_autogentestbindings_js(JSContext* cx, JS::HandleObject obj);
bool js_autogentestbindings_js_CAWindow_presentModalViewController(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAWindow_setRootViewController(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAWindow_getRootViewController(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAWindow_init(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAWindow_dismissModalViewController(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAWindow_getModalViewController(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAWindow_create(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAWindow_CAWindow(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CAGifView_class;
extern JSObject *jsb_CrossApp_CAGifView_prototype;

bool js_autogentestbindings_js_CAGifView_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_autogentestbindings_js_CAGifView_finalize(JSContext *cx, JSObject *obj);
void js_register_autogentestbindings_js_CAGifView(JSContext *cx, JS::HandleObject global);
void register_all_autogentestbindings_js(JSContext* cx, JS::HandleObject obj);
bool js_autogentestbindings_js_CAGifView_setTimes(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAGifView_initWithGif(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAGifView_init(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAGifView_setGif(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAGifView_isRepeatForever(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAGifView_setRepeatForever(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAGifView_createWithGif(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAGifView_createWithFrame(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAGifView_createWithLayout(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAGifView_createWithCenter(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAGifView_CAGifView(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CABatchView_class;
extern JSObject *jsb_CrossApp_CABatchView_prototype;

bool js_autogentestbindings_js_CABatchView_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_autogentestbindings_js_CABatchView_finalize(JSContext *cx, JSObject *obj);
void js_register_autogentestbindings_js_CABatchView(JSContext *cx, JS::HandleObject global);
void register_all_autogentestbindings_js(JSContext* cx, JS::HandleObject obj);
bool js_autogentestbindings_js_CABatchView_reorderSubview(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CABatchView_reorderBatch(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CABatchView_lowestAtlasIndexInSubview(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CABatchView_setBlendFunc(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CABatchView_removeAllSubviews(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CABatchView_visit(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CABatchView_initWithImage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CABatchView_insertSubview(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CABatchView_atlasIndexForSubview(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CABatchView_highestAtlasIndexInSubview(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CABatchView_increaseAtlasCapacity(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CABatchView_init(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CABatchView_removeViewFromAtlas(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CABatchView_draw(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CABatchView_getBlendFunc(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CABatchView_sortAllSubview(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CABatchView_getImageAtlas(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CABatchView_removeSubviewAtIndex(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CABatchView_appendSubview(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CABatchView_setImageAtlas(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CABatchView_setImage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CABatchView_rebuildIndexInOrder(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CABatchView_addSubview(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CABatchView_getDescendants(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CABatchView_getImage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CABatchView_removeSubview(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CABatchView_createWithImage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CABatchView_CABatchView(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CAClippingView_class;
extern JSObject *jsb_CrossApp_CAClippingView_prototype;

bool js_autogentestbindings_js_CAClippingView_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_autogentestbindings_js_CAClippingView_finalize(JSContext *cx, JSObject *obj);
void js_register_autogentestbindings_js_CAClippingView(JSContext *cx, JS::HandleObject global);
void register_all_autogentestbindings_js(JSContext* cx, JS::HandleObject obj);
bool js_autogentestbindings_js_CAClippingView_isClippingEnabled(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAClippingView_onEnter(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAClippingView_onExit(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAClippingView_setInverted(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAClippingView_visit(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAClippingView_setStencil(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAClippingView_getAlphaThreshold(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAClippingView_init(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAClippingView_onExitTransitionDidStart(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAClippingView_getStencil(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAClippingView_setClippingEnabled(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAClippingView_setAlphaThreshold(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAClippingView_onEnterTransitionDidFinish(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAClippingView_isInverted(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAClippingView_create(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CAListViewDelegate_class;
extern JSObject *jsb_CrossApp_CAListViewDelegate_prototype;

bool js_autogentestbindings_js_CAListViewDelegate_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_autogentestbindings_js_CAListViewDelegate_finalize(JSContext *cx, JSObject *obj);
void js_register_autogentestbindings_js_CAListViewDelegate(JSContext *cx, JS::HandleObject global);
void register_all_autogentestbindings_js(JSContext* cx, JS::HandleObject obj);
bool js_autogentestbindings_js_CAListViewDelegate_listViewDidDeselectCellAtIndex(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAListViewDelegate_listViewDidSelectCellAtIndex(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CAListViewDataSource_class;
extern JSObject *jsb_CrossApp_CAListViewDataSource_prototype;

bool js_autogentestbindings_js_CAListViewDataSource_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_autogentestbindings_js_CAListViewDataSource_finalize(JSContext *cx, JSObject *obj);
void js_register_autogentestbindings_js_CAListViewDataSource(JSContext *cx, JS::HandleObject global);
void register_all_autogentestbindings_js(JSContext* cx, JS::HandleObject obj);
bool js_autogentestbindings_js_CAListViewDataSource_listViewCellAtIndex(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAListViewDataSource_numberOfIndex(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAListViewDataSource_listViewWillDisplayCellAtIndex(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAListViewDataSource_listViewHeightForIndex(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CAListView_class;
extern JSObject *jsb_CrossApp_CAListView_prototype;

bool js_autogentestbindings_js_CAListView_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_autogentestbindings_js_CAListView_finalize(JSContext *cx, JSObject *obj);
void js_register_autogentestbindings_js_CAListView(JSContext *cx, JS::HandleObject global);
void register_all_autogentestbindings_js(JSContext* cx, JS::HandleObject obj);
bool js_autogentestbindings_js_CAListView_isAllowsSelection(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAListView_mouseMovedOutSide(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAListView_setListViewDataSource(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAListView_ccTouchBegan(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAListView_setListFooterHeight(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAListView_ccTouchEnded(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAListView_setSeparatorColor(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAListView_getListViewDelegate(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAListView_mouseMoved(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAListView_setSelectAtIndex(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAListView_clearData(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAListView_setListViewOrientation(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAListView_getSeparatorViewHeight(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAListView_setListViewDelegate(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAListView_init(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAListView_getListViewDataSource(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAListView_setAllowsHeadAndFootHover(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAListView_getSeparatorColor(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAListView_ccTouchMoved(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAListView_setAllowsSelection(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAListView_reloadData(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAListView_setAllowsMultipleSelection(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAListView_isAllowsMultipleSelection(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAListView_displayingListCell(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAListView_setListHeaderView(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAListView_getAllowsHeadAndFootHover(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAListView_getListFooterHeight(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAListView_setShowsScrollIndicators(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAListView_setListHeaderHeight(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAListView_onExitTransitionDidStart(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAListView_getListHeaderView(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAListView_setSeparatorViewHeight(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAListView_reloadViewSizeData(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAListView_getListViewOrientation(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAListView_setListFooterView(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAListView_getListFooterView(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAListView_ccTouchCancelled(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAListView_cellForRowAtIndex(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAListView_switchPCMode(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAListView_setUnSelectAtIndex(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAListView_dequeueReusableCellWithIdentifier(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAListView_onEnterTransitionDidFinish(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAListView_getListHeaderHeight(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAListView_createWithFrame(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAListView_createWithLayout(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAListView_createWithCenter(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAListView_CAListView(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CAListViewCell_class;
extern JSObject *jsb_CrossApp_CAListViewCell_prototype;

bool js_autogentestbindings_js_CAListViewCell_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_autogentestbindings_js_CAListViewCell_finalize(JSContext *cx, JSObject *obj);
void js_register_autogentestbindings_js_CAListViewCell(JSContext *cx, JS::HandleObject global);
void register_all_autogentestbindings_js(JSContext* cx, JS::HandleObject obj);
bool js_autogentestbindings_js_CAListViewCell_getIndex(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAListViewCell_getContentView(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAListViewCell_setReuseIdentifier(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAListViewCell_isAllowsSelected(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAListViewCell_getReuseIdentifier(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAListViewCell_setAllowsSelected(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAListViewCell_setControlStateEffect(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAListViewCell_getBackgroundView(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAListViewCell_isControlStateEffect(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAListViewCell_initWithReuseIdentifier(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAListViewCell_setBackgroundView(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAListViewCell_create(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAListViewCell_CAListViewCell(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CATableViewDelegate_class;
extern JSObject *jsb_CrossApp_CATableViewDelegate_prototype;

bool js_autogentestbindings_js_CATableViewDelegate_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_autogentestbindings_js_CATableViewDelegate_finalize(JSContext *cx, JSObject *obj);
void js_register_autogentestbindings_js_CATableViewDelegate(JSContext *cx, JS::HandleObject global);
void register_all_autogentestbindings_js(JSContext* cx, JS::HandleObject obj);
bool js_autogentestbindings_js_CATableViewDelegate_tableViewDidSelectRowAtIndexPath(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATableViewDelegate_tableViewDidDeselectRowAtIndexPath(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CATableViewDataSource_class;
extern JSObject *jsb_CrossApp_CATableViewDataSource_prototype;

bool js_autogentestbindings_js_CATableViewDataSource_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_autogentestbindings_js_CATableViewDataSource_finalize(JSContext *cx, JSObject *obj);
void js_register_autogentestbindings_js_CATableViewDataSource(JSContext *cx, JS::HandleObject global);
void register_all_autogentestbindings_js(JSContext* cx, JS::HandleObject obj);
bool js_autogentestbindings_js_CATableViewDataSource_tableViewHeightForFooterInSection(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATableViewDataSource_tableViewSectionViewForHeaderInSection(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATableViewDataSource_tableViewSectionViewForFooterInSection(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATableViewDataSource_tableViewHeightForRowAtIndexPath(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATableViewDataSource_numberOfSections(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATableViewDataSource_tableCellAtIndex(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATableViewDataSource_numberOfRowsInSection(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATableViewDataSource_tableViewHeightForHeaderInSection(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATableViewDataSource_tableViewWillDisplayCellAtIndex(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CATableView_class;
extern JSObject *jsb_CrossApp_CATableView_prototype;

bool js_autogentestbindings_js_CATableView_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_autogentestbindings_js_CATableView_finalize(JSContext *cx, JSObject *obj);
void js_register_autogentestbindings_js_CATableView(JSContext *cx, JS::HandleObject global);
void register_all_autogentestbindings_js(JSContext* cx, JS::HandleObject obj);
bool js_autogentestbindings_js_CATableView_getTableFooterView(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATableView_isAllowsSelection(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATableView_mouseMovedOutSide(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATableView_ccTouchBegan(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATableView_getSectionFooterHeightInSection(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATableView_setSeparatorColor(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATableView_setTableFooterHeight(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATableView_setTableHeaderHeight(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATableView_setAlwaysTopSectionHeader(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATableView_mouseMoved(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATableView_isAlwaysBottomSectionFooter(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATableView_getRowHeightInSectionInRow(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATableView_setTableHeaderView(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATableView_getNumberOfSections(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATableView_getSeparatorViewHeight(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATableView_init(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATableView_setSelectRowAtIndexPath(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATableView_getTableViewDataSource(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATableView_getSectionHeightInSection(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATableView_isAllowsMultipleSelection(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATableView_getSeparatorColor(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATableView_ccTouchMoved(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATableView_setAllowsSelection(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATableView_reloadData(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATableView_setAllowsMultipleSelection(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATableView_getTableFooterHeight(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATableView_setShowsScrollIndicators(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATableView_cellForRowAtIndexPath(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATableView_displayingTableCell(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATableView_getTableHeaderView(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATableView_setAlwaysBottomSectionFooter(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATableView_onExitTransitionDidStart(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATableView_isAlwaysTopSectionHeader(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATableView_setTableFooterView(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATableView_setSeparatorViewHeight(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATableView_setTableViewDelegate(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATableView_setTableViewDataSource(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATableView_ccTouchEnded(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATableView_ccTouchCancelled(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATableView_getNumberOfRowsInSection(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATableView_setUnSelectRowAtIndexPath(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATableView_onEnterTransitionDidFinish(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATableView_getSectionHeaderHeightInSection(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATableView_switchPCMode(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATableView_dequeueReusableCellWithIdentifier(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATableView_getTableViewDelegate(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATableView_getTableHeaderHeight(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATableView_createWithFrame(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATableView_createWithLayout(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATableView_createWithCenter(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATableView_CATableView(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CATableViewCell_class;
extern JSObject *jsb_CrossApp_CATableViewCell_prototype;

bool js_autogentestbindings_js_CATableViewCell_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_autogentestbindings_js_CATableViewCell_finalize(JSContext *cx, JSObject *obj);
void js_register_autogentestbindings_js_CATableViewCell(JSContext *cx, JS::HandleObject global);
void register_all_autogentestbindings_js(JSContext* cx, JS::HandleObject obj);
bool js_autogentestbindings_js_CATableViewCell_getContentView(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATableViewCell_setReuseIdentifier(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATableViewCell_isAllowsSelected(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATableViewCell_getReuseIdentifier(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATableViewCell_setAllowsSelected(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATableViewCell_setControlStateEffect(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATableViewCell_getRow(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATableViewCell_getBackgroundView(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATableViewCell_getSection(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATableViewCell_isControlStateEffect(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATableViewCell_initWithReuseIdentifier(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATableViewCell_setBackgroundView(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATableViewCell_create(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATableViewCell_CATableViewCell(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CACollectionViewDelegate_class;
extern JSObject *jsb_CrossApp_CACollectionViewDelegate_prototype;

bool js_autogentestbindings_js_CACollectionViewDelegate_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_autogentestbindings_js_CACollectionViewDelegate_finalize(JSContext *cx, JSObject *obj);
void js_register_autogentestbindings_js_CACollectionViewDelegate(JSContext *cx, JS::HandleObject global);
void register_all_autogentestbindings_js(JSContext* cx, JS::HandleObject obj);
bool js_autogentestbindings_js_CACollectionViewDelegate_collectionViewDidSelectCellAtIndexPath(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CACollectionViewDelegate_collectionViewDidDeselectCellAtIndexPath(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CACollectionViewDataSource_class;
extern JSObject *jsb_CrossApp_CACollectionViewDataSource_prototype;

bool js_autogentestbindings_js_CACollectionViewDataSource_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_autogentestbindings_js_CACollectionViewDataSource_finalize(JSContext *cx, JSObject *obj);
void js_register_autogentestbindings_js_CACollectionViewDataSource(JSContext *cx, JS::HandleObject global);
void register_all_autogentestbindings_js(JSContext* cx, JS::HandleObject obj);
bool js_autogentestbindings_js_CACollectionViewDataSource_numberOfSections(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CACollectionViewDataSource_collectionViewHeightForRowAtIndexPath(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CACollectionViewDataSource_collectionViewHeightForHeaderInSection(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CACollectionViewDataSource_collectionViewHeightForFooterInSection(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CACollectionViewDataSource_collectionViewSectionViewForHeaderInSection(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CACollectionViewDataSource_numberOfItemsInRowsInSection(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CACollectionViewDataSource_numberOfRowsInSection(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CACollectionViewDataSource_collectionViewWillDisplayCellAtIndex(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CACollectionViewDataSource_collectionViewSectionViewForFooterInSection(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CACollectionViewDataSource_collectionCellAtIndex(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CACollectionView_class;
extern JSObject *jsb_CrossApp_CACollectionView_prototype;

bool js_autogentestbindings_js_CACollectionView_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_autogentestbindings_js_CACollectionView_finalize(JSContext *cx, JSObject *obj);
void js_register_autogentestbindings_js_CACollectionView(JSContext *cx, JS::HandleObject global);
void register_all_autogentestbindings_js(JSContext* cx, JS::HandleObject obj);
bool js_autogentestbindings_js_CACollectionView_setCollectionFooterHeight(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CACollectionView_mouseMovedOutSide(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CACollectionView_isAllowsSelection(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CACollectionView_ccTouchBegan(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CACollectionView_setCollectionHeaderView(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CACollectionView_getVertInterval(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CACollectionView_setCollectionFooterView(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CACollectionView_getCollectionFooterView(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CACollectionView_setAlwaysTopSectionHeader(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CACollectionView_mouseMoved(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CACollectionView_isAlwaysBottomSectionFooter(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CACollectionView_getHoriInterval(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CACollectionView_clearData(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CACollectionView_setCollectionViewDelegate(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CACollectionView_setHoriInterval(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CACollectionView_setSelectRowAtIndexPath(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CACollectionView_init(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CACollectionView_ccTouchEnded(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CACollectionView_isAllowsMultipleSelection(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CACollectionView_ccTouchMoved(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CACollectionView_setAllowsSelection(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CACollectionView_reloadData(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CACollectionView_setAllowsMultipleSelection(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CACollectionView_getCollectionHeaderView(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CACollectionView_setCollectionViewDataSource(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CACollectionView_setShowsScrollIndicators(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CACollectionView_cellForRowAtIndexPath(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CACollectionView_displayingCollectionCell(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CACollectionView_getCollectionViewDataSource(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CACollectionView_setAlwaysBottomSectionFooter(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CACollectionView_onExitTransitionDidStart(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CACollectionView_isAlwaysTopSectionHeader(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CACollectionView_getCollectionHeaderHeight(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CACollectionView_getCollectionViewDelegate(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CACollectionView_setVertInterval(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CACollectionView_getCollectionFooterHeight(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CACollectionView_ccTouchCancelled(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CACollectionView_setCollectionHeaderHeight(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CACollectionView_setUnSelectRowAtIndexPath(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CACollectionView_getHighlightCollectionCell(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CACollectionView_switchPCMode(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CACollectionView_dequeueReusableCellWithIdentifier(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CACollectionView_onEnterTransitionDidFinish(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CACollectionView_createWithFrame(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CACollectionView_createWithLayout(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CACollectionView_createWithCenter(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CACollectionView_CACollectionView(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CACollectionViewCell_class;
extern JSObject *jsb_CrossApp_CACollectionViewCell_prototype;

bool js_autogentestbindings_js_CACollectionViewCell_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_autogentestbindings_js_CACollectionViewCell_finalize(JSContext *cx, JSObject *obj);
void js_register_autogentestbindings_js_CACollectionViewCell(JSContext *cx, JS::HandleObject global);
void register_all_autogentestbindings_js(JSContext* cx, JS::HandleObject obj);
bool js_autogentestbindings_js_CACollectionViewCell_getContentView(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CACollectionViewCell_setReuseIdentifier(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CACollectionViewCell_isAllowsSelected(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CACollectionViewCell_getReuseIdentifier(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CACollectionViewCell_setAllowsSelected(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CACollectionViewCell_setControlStateEffect(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CACollectionViewCell_getRow(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CACollectionViewCell_getBackgroundView(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CACollectionViewCell_getSection(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CACollectionViewCell_isControlStateEffect(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CACollectionViewCell_getItem(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CACollectionViewCell_initWithReuseIdentifier(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CACollectionViewCell_setBackgroundView(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CACollectionViewCell_create(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CACollectionViewCell_CACollectionViewCell(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CAAutoCollectionViewDelegate_class;
extern JSObject *jsb_CrossApp_CAAutoCollectionViewDelegate_prototype;

bool js_autogentestbindings_js_CAAutoCollectionViewDelegate_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_autogentestbindings_js_CAAutoCollectionViewDelegate_finalize(JSContext *cx, JSObject *obj);
void js_register_autogentestbindings_js_CAAutoCollectionViewDelegate(JSContext *cx, JS::HandleObject global);
void register_all_autogentestbindings_js(JSContext* cx, JS::HandleObject obj);
bool js_autogentestbindings_js_CAAutoCollectionViewDelegate_collectionViewDidSelectCellAtIndexPath(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAAutoCollectionViewDelegate_collectionViewDidDeselectCellAtIndexPath(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CAAutoCollectionViewDataSource_class;
extern JSObject *jsb_CrossApp_CAAutoCollectionViewDataSource_prototype;

bool js_autogentestbindings_js_CAAutoCollectionViewDataSource_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_autogentestbindings_js_CAAutoCollectionViewDataSource_finalize(JSContext *cx, JSObject *obj);
void js_register_autogentestbindings_js_CAAutoCollectionViewDataSource(JSContext *cx, JS::HandleObject global);
void register_all_autogentestbindings_js(JSContext* cx, JS::HandleObject obj);
bool js_autogentestbindings_js_CAAutoCollectionViewDataSource_numberOfItemsInSection(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAAutoCollectionViewDataSource_numberOfSections(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAAutoCollectionViewDataSource_collectionViewHeightForHeaderInSection(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAAutoCollectionViewDataSource_collectionViewHeightForFooterInSection(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAAutoCollectionViewDataSource_collectionViewSectionViewForHeaderInSection(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAAutoCollectionViewDataSource_collectionViewWillDisplayCellAtIndex(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAAutoCollectionViewDataSource_collectionViewSizeForItemAtIndexPath(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAAutoCollectionViewDataSource_collectionViewSectionViewForFooterInSection(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAAutoCollectionViewDataSource_collectionCellAtIndex(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CAAutoCollectionView_class;
extern JSObject *jsb_CrossApp_CAAutoCollectionView_prototype;

bool js_autogentestbindings_js_CAAutoCollectionView_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_autogentestbindings_js_CAAutoCollectionView_finalize(JSContext *cx, JSObject *obj);
void js_register_autogentestbindings_js_CAAutoCollectionView(JSContext *cx, JS::HandleObject global);
void register_all_autogentestbindings_js(JSContext* cx, JS::HandleObject obj);
bool js_autogentestbindings_js_CAAutoCollectionView_setCollectionFooterHeight(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAAutoCollectionView_mouseMovedOutSide(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAAutoCollectionView_isAllowsSelection(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAAutoCollectionView_getCellVertAlign(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAAutoCollectionView_ccTouchBegan(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAAutoCollectionView_setCollectionHeaderView(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAAutoCollectionView_getOrientation(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAAutoCollectionView_setCollectionFooterView(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAAutoCollectionView_getCollectionFooterView(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAAutoCollectionView_setHoriCellInterval(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAAutoCollectionView_getCellHoriAlign(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAAutoCollectionView_getVertMargins(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAAutoCollectionView_isAlwaysBottomSectionFooter(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAAutoCollectionView_setCollectionViewDelegate(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAAutoCollectionView_mouseMoved(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAAutoCollectionView_setCellHoriAlign(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAAutoCollectionView_setSelectRowAtIndexPath(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAAutoCollectionView_init(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAAutoCollectionView_getHoriCellInterval(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAAutoCollectionView_isAllowsMultipleSelection(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAAutoCollectionView_setVertMargins(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAAutoCollectionView_setAllowsSelection(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAAutoCollectionView_reloadData(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAAutoCollectionView_setAllowsMultipleSelection(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAAutoCollectionView_getCollectionHeaderView(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAAutoCollectionView_setCollectionViewDataSource(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAAutoCollectionView_setAlwaysTopSectionHeader(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAAutoCollectionView_setShowsScrollIndicators(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAAutoCollectionView_cellForRowAtIndexPath(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAAutoCollectionView_displayingCollectionCell(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAAutoCollectionView_getCollectionViewDataSource(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAAutoCollectionView_ccTouchMoved(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAAutoCollectionView_setAlwaysBottomSectionFooter(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAAutoCollectionView_onExitTransitionDidStart(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAAutoCollectionView_setCellVertAlign(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAAutoCollectionView_isAlwaysTopSectionHeader(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAAutoCollectionView_getCollectionHeaderHeight(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAAutoCollectionView_setOrientation(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAAutoCollectionView_getCollectionViewDelegate(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAAutoCollectionView_getVertCellInterval(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAAutoCollectionView_ccTouchEnded(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAAutoCollectionView_getCollectionFooterHeight(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAAutoCollectionView_ccTouchCancelled(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAAutoCollectionView_setHoriMargins(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAAutoCollectionView_setCollectionHeaderHeight(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAAutoCollectionView_setUnSelectRowAtIndexPath(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAAutoCollectionView_getHighlightCollectionCell(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAAutoCollectionView_setVertCellInterval(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAAutoCollectionView_switchPCMode(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAAutoCollectionView_getHoriMargins(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAAutoCollectionView_dequeueReusableCellWithIdentifier(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAAutoCollectionView_onEnterTransitionDidFinish(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAAutoCollectionView_createWithFrame(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAAutoCollectionView_createWithLayout(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAAutoCollectionView_createWithCenter(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAAutoCollectionView_CAAutoCollectionView(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CAAlertView_class;
extern JSObject *jsb_CrossApp_CAAlertView_prototype;

bool js_autogentestbindings_js_CAAlertView_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_autogentestbindings_js_CAAlertView_finalize(JSContext *cx, JSObject *obj);
void js_register_autogentestbindings_js_CAAlertView(JSContext *cx, JS::HandleObject global);
void register_all_autogentestbindings_js(JSContext* cx, JS::HandleObject obj);
bool js_autogentestbindings_js_CAAlertView_setAlertMessage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAAlertView_hide(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAAlertView_show(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAAlertView_setTitle(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAAlertView_addButton(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAAlertView_setMessageFontName(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAAlertView_create(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAAlertView_hideWithDisplayed(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAAlertView_CAAlertView(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CAPickerViewDelegate_class;
extern JSObject *jsb_CrossApp_CAPickerViewDelegate_prototype;

bool js_autogentestbindings_js_CAPickerViewDelegate_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_autogentestbindings_js_CAPickerViewDelegate_finalize(JSContext *cx, JSObject *obj);
void js_register_autogentestbindings_js_CAPickerViewDelegate(JSContext *cx, JS::HandleObject global);
void register_all_autogentestbindings_js(JSContext* cx, JS::HandleObject obj);
bool js_autogentestbindings_js_CAPickerViewDelegate_didSelectRow(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CAPickerViewDataSource_class;
extern JSObject *jsb_CrossApp_CAPickerViewDataSource_prototype;

bool js_autogentestbindings_js_CAPickerViewDataSource_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_autogentestbindings_js_CAPickerViewDataSource_finalize(JSContext *cx, JSObject *obj);
void js_register_autogentestbindings_js_CAPickerViewDataSource(JSContext *cx, JS::HandleObject global);
void register_all_autogentestbindings_js(JSContext* cx, JS::HandleObject obj);
bool js_autogentestbindings_js_CAPickerViewDataSource_numberOfComponentsInPickerView(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAPickerViewDataSource_numberOfRowsInComponent(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAPickerViewDataSource_viewForSelect(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAPickerViewDataSource_viewForRow(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAPickerViewDataSource_widthForComponent(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAPickerViewDataSource_titleForRow(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAPickerViewDataSource_rowHeightForComponent(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CAPickerView_class;
extern JSObject *jsb_CrossApp_CAPickerView_prototype;

bool js_autogentestbindings_js_CAPickerView_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_autogentestbindings_js_CAPickerView_finalize(JSContext *cx, JSObject *obj);
void js_register_autogentestbindings_js_CAPickerView(JSContext *cx, JS::HandleObject global);
void register_all_autogentestbindings_js(JSContext* cx, JS::HandleObject obj);
bool js_autogentestbindings_js_CAPickerView_setFontSizeNormal(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAPickerView_getFontSizeNormal(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAPickerView_getPickerViewDataSource(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAPickerView_reloadAllComponents(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAPickerView_getPickerViewDelegate(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAPickerView_getFontSizeSelected(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAPickerView_init(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAPickerView_reloadComponent(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAPickerView_getFontColorSelected(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAPickerView_visitEve(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAPickerView_setBackgroundColor(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAPickerView_setFontColorNormal(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAPickerView_onExitTransitionDidStart(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAPickerView_numberOfRowsInComponent(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAPickerView_getSeparateColor(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAPickerView_selectRow(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAPickerView_setPickerViewDataSource(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAPickerView_numberOfComponents(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAPickerView_setFontColorSelected(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAPickerView_rowSizeForComponent(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAPickerView_selectedRowInComponent(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAPickerView_setSeparateColor(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAPickerView_setPickerViewDelegate(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAPickerView_getFontColorNormal(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAPickerView_onEnterTransitionDidFinish(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAPickerView_viewForRow(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAPickerView_setFontSizeSelected(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAPickerView_create(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAPickerView_createWithFrame(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAPickerView_createWithLayout(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAPickerView_createWithCenter(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAPickerView_CAPickerView(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CADatePickerViewDelegate_class;
extern JSObject *jsb_CrossApp_CADatePickerViewDelegate_prototype;

bool js_autogentestbindings_js_CADatePickerViewDelegate_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_autogentestbindings_js_CADatePickerViewDelegate_finalize(JSContext *cx, JSObject *obj);
void js_register_autogentestbindings_js_CADatePickerViewDelegate(JSContext *cx, JS::HandleObject global);
void register_all_autogentestbindings_js(JSContext* cx, JS::HandleObject obj);
bool js_autogentestbindings_js_CADatePickerViewDelegate_didSelectRow(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CADatePickerView_class;
extern JSObject *jsb_CrossApp_CADatePickerView_prototype;

bool js_autogentestbindings_js_CADatePickerView_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_autogentestbindings_js_CADatePickerView_finalize(JSContext *cx, JSObject *obj);
void js_register_autogentestbindings_js_CADatePickerView(JSContext *cx, JS::HandleObject global);
void register_all_autogentestbindings_js(JSContext* cx, JS::HandleObject obj);
bool js_autogentestbindings_js_CADatePickerView_getDelegate(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CADatePickerView_onEnter(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CADatePickerView_onExit(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CADatePickerView_init(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CADatePickerView_setDelegate(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CADatePickerView_setDate(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CADatePickerView_create(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CADatePickerView_createWithFrame(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CADatePickerView_createWithLayout(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CADatePickerView_createWithCenter(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CADatePickerView_CADatePickerView(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CAWebViewDelegate_class;
extern JSObject *jsb_CrossApp_CAWebViewDelegate_prototype;

bool js_autogentestbindings_js_CAWebViewDelegate_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_autogentestbindings_js_CAWebViewDelegate_finalize(JSContext *cx, JSObject *obj);
void js_register_autogentestbindings_js_CAWebViewDelegate(JSContext *cx, JS::HandleObject global);
void register_all_autogentestbindings_js(JSContext* cx, JS::HandleObject obj);
bool js_autogentestbindings_js_CAWebViewDelegate_onShouldStartLoading(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAWebViewDelegate_onJSCallback(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAWebViewDelegate_onDidFailLoading(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAWebViewDelegate_onDidFinishLoading(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CAWebView_class;
extern JSObject *jsb_CrossApp_CAWebView_prototype;

bool js_autogentestbindings_js_CAWebView_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_autogentestbindings_js_CAWebView_finalize(JSContext *cx, JSObject *obj);
void js_register_autogentestbindings_js_CAWebView(JSContext *cx, JS::HandleObject global);
void register_all_autogentestbindings_js(JSContext* cx, JS::HandleObject obj);
bool js_autogentestbindings_js_CAWebView_draw(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAWebView_canGoBack(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAWebView_loadHTMLString(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAWebView_reload(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAWebView_goForward(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAWebView_goBack(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAWebView_setScalesPageToFit(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAWebView_getWebViewDelegate(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAWebView_init(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAWebView_showNativeWeb(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAWebView_loadFile(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAWebView_loadURL(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAWebView_evaluateJS(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAWebView_showLoadingActivity(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAWebView_setJavascriptInterfaceScheme(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAWebView_update(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAWebView_setActivityView(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAWebView_setWebViewDelegate(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAWebView_canGoForward(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAWebView_stopLoading(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAWebView_getHTMLSource(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAWebView_setVisible(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAWebView_hideNativeWebAndShowImage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAWebView_createWithFrame(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAWebView_createWithLayout(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAWebView_createWithCenter(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAWebView_CAWebView(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CADrawView_class;
extern JSObject *jsb_CrossApp_CADrawView_prototype;

bool js_autogentestbindings_js_CADrawView_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_autogentestbindings_js_CADrawView_finalize(JSContext *cx, JSObject *obj);
void js_register_autogentestbindings_js_CADrawView(JSContext *cx, JS::HandleObject global);
void register_all_autogentestbindings_js(JSContext* cx, JS::HandleObject obj);
bool js_autogentestbindings_js_CADrawView_draw(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CADrawView_getBlendFunc(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CADrawView_drawPolygon(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CADrawView_clear(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CADrawView_setBlendFunc(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CADrawView_init(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CADrawView_drawDot(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CADrawView_drawSegment(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CADrawView_listenBackToForeground(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CADrawView_create(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CADrawView_CADrawView(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CAWaterfallViewDataSource_class;
extern JSObject *jsb_CrossApp_CAWaterfallViewDataSource_prototype;

bool js_autogentestbindings_js_CAWaterfallViewDataSource_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_autogentestbindings_js_CAWaterfallViewDataSource_finalize(JSContext *cx, JSObject *obj);
void js_register_autogentestbindings_js_CAWaterfallViewDataSource(JSContext *cx, JS::HandleObject global);
void register_all_autogentestbindings_js(JSContext* cx, JS::HandleObject obj);
bool js_autogentestbindings_js_CAWaterfallViewDataSource_waterfallViewWillDisplayCellAtIndex(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAWaterfallViewDataSource_waterfallViewSectionViewForHeader(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAWaterfallViewDataSource_waterfallViewHeightForItemAtIndex(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAWaterfallViewDataSource_numberOfItems(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAWaterfallViewDataSource_waterfallCellAtIndex(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAWaterfallViewDataSource_waterfallViewHeightForFooter(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAWaterfallViewDataSource_waterfallViewSectionViewForFooter(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAWaterfallViewDataSource_waterfallViewHeightForHeader(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CAWaterfallViewDelegate_class;
extern JSObject *jsb_CrossApp_CAWaterfallViewDelegate_prototype;

bool js_autogentestbindings_js_CAWaterfallViewDelegate_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_autogentestbindings_js_CAWaterfallViewDelegate_finalize(JSContext *cx, JSObject *obj);
void js_register_autogentestbindings_js_CAWaterfallViewDelegate(JSContext *cx, JS::HandleObject global);
void register_all_autogentestbindings_js(JSContext* cx, JS::HandleObject obj);
bool js_autogentestbindings_js_CAWaterfallViewDelegate_waterfallViewDidSelectCellAtIndexPath(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAWaterfallViewDelegate_waterfallViewDidDeselectCellAtIndexPath(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CAWaterfallView_class;
extern JSObject *jsb_CrossApp_CAWaterfallView_prototype;

bool js_autogentestbindings_js_CAWaterfallView_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_autogentestbindings_js_CAWaterfallView_finalize(JSContext *cx, JSObject *obj);
void js_register_autogentestbindings_js_CAWaterfallView(JSContext *cx, JS::HandleObject global);
void register_all_autogentestbindings_js(JSContext* cx, JS::HandleObject obj);
bool js_autogentestbindings_js_CAWaterfallView_setWaterfallViewDelegate(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAWaterfallView_isAllowsSelection(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAWaterfallView_mouseMovedOutSide(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAWaterfallView_getWaterfallViewDataSource(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAWaterfallView_ccTouchBegan(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAWaterfallView_setColumnMargin(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAWaterfallView_getWaterfallHeaderView(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAWaterfallView_getColumnCount(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAWaterfallView_setAlwaysTopSectionHeader(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAWaterfallView_getWaterfallViewDelegate(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAWaterfallView_isAlwaysBottomSectionFooter(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAWaterfallView_getWaterfallHeaderHeight(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAWaterfallView_setColumnCount(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAWaterfallView_setWaterfallHeaderView(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAWaterfallView_mouseMoved(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAWaterfallView_setWaterfallViewDataSource(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAWaterfallView_setWaterfallFooterHeight(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAWaterfallView_setSelectRowAtIndexPath(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAWaterfallView_setWaterfallHeaderHeight(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAWaterfallView_init(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAWaterfallView_isAllowsMultipleSelection(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAWaterfallView_getHighlightWaterfallCell(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAWaterfallView_ccTouchMoved(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAWaterfallView_setAllowsSelection(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAWaterfallView_reloadData(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAWaterfallView_setAllowsMultipleSelection(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAWaterfallView_setShowsScrollIndicators(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAWaterfallView_cellForRowAtIndexPath(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAWaterfallView_setWaterfallFooterView(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAWaterfallView_getColumnMargin(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAWaterfallView_getWaterfallFooterView(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAWaterfallView_setAlwaysBottomSectionFooter(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAWaterfallView_onExitTransitionDidStart(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAWaterfallView_setItemMargin(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAWaterfallView_isAlwaysTopSectionHeader(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAWaterfallView_displayingWaterfallCell(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAWaterfallView_ccTouchEnded(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAWaterfallView_getItemMargin(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAWaterfallView_ccTouchCancelled(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAWaterfallView_setUnSelectRowAtIndexPath(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAWaterfallView_getWaterfallFooterHeight(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAWaterfallView_switchPCMode(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAWaterfallView_dequeueReusableCellWithIdentifier(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAWaterfallView_onEnterTransitionDidFinish(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAWaterfallView_createWithFrame(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAWaterfallView_createWithLayout(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAWaterfallView_createWithCenter(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAWaterfallView_CAWaterfallView(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CAWaterfallViewCell_class;
extern JSObject *jsb_CrossApp_CAWaterfallViewCell_prototype;

bool js_autogentestbindings_js_CAWaterfallViewCell_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_autogentestbindings_js_CAWaterfallViewCell_finalize(JSContext *cx, JSObject *obj);
void js_register_autogentestbindings_js_CAWaterfallViewCell(JSContext *cx, JS::HandleObject global);
void register_all_autogentestbindings_js(JSContext* cx, JS::HandleObject obj);
bool js_autogentestbindings_js_CAWaterfallViewCell_getContentView(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAWaterfallViewCell_setReuseIdentifier(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAWaterfallViewCell_isAllowsSelected(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAWaterfallViewCell_getReuseIdentifier(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAWaterfallViewCell_setAllowsSelected(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAWaterfallViewCell_setControlStateEffect(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAWaterfallViewCell_getItemIndex(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAWaterfallViewCell_getBackgroundView(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAWaterfallViewCell_isControlStateEffect(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAWaterfallViewCell_initWithReuseIdentifier(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAWaterfallViewCell_setBackgroundView(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAWaterfallViewCell_create(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAWaterfallViewCell_CAWaterfallViewCell(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_VPFrame_class;
extern JSObject *jsb_CrossApp_VPFrame_prototype;

bool js_autogentestbindings_js_VPFrame_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_autogentestbindings_js_VPFrame_finalize(JSContext *cx, JSObject *obj);
void js_register_autogentestbindings_js_VPFrame(JSContext *cx, JS::HandleObject global);
void register_all_autogentestbindings_js(JSContext* cx, JS::HandleObject obj);
bool js_autogentestbindings_js_VPFrame_getType(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_VPFrame_getDuration(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_VPFrame_setPosition(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_VPFrame_setDuration(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_VPFrame_getPosition(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_VPFrame_setType(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_VPFrame_VPFrame(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_VPAudioFrame_class;
extern JSObject *jsb_CrossApp_VPAudioFrame_prototype;

bool js_autogentestbindings_js_VPAudioFrame_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_autogentestbindings_js_VPAudioFrame_finalize(JSContext *cx, JSObject *obj);
void js_register_autogentestbindings_js_VPAudioFrame(JSContext *cx, JS::HandleObject global);
void register_all_autogentestbindings_js(JSContext* cx, JS::HandleObject obj);
bool js_autogentestbindings_js_VPAudioFrame_setData(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_VPAudioFrame_setDataLength(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_VPAudioFrame_getData(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_VPAudioFrame_getDataLength(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_VPAudioFrame_VPAudioFrame(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_VPVideoFrame_class;
extern JSObject *jsb_CrossApp_VPVideoFrame_prototype;

bool js_autogentestbindings_js_VPVideoFrame_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_autogentestbindings_js_VPVideoFrame_finalize(JSContext *cx, JSObject *obj);
void js_register_autogentestbindings_js_VPVideoFrame(JSContext *cx, JS::HandleObject global);
void register_all_autogentestbindings_js(JSContext* cx, JS::HandleObject obj);
bool js_autogentestbindings_js_VPVideoFrame_setHeight(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_VPVideoFrame_setFormat(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_VPVideoFrame_setWidth(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_VPVideoFrame_getHeight(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_VPVideoFrame_getWidth(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_VPVideoFrame_getFormat(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_VPVideoFrame_VPVideoFrame(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_VPVideoFrameRGB_class;
extern JSObject *jsb_CrossApp_VPVideoFrameRGB_prototype;

bool js_autogentestbindings_js_VPVideoFrameRGB_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_autogentestbindings_js_VPVideoFrameRGB_finalize(JSContext *cx, JSObject *obj);
void js_register_autogentestbindings_js_VPVideoFrameRGB(JSContext *cx, JS::HandleObject global);
void register_all_autogentestbindings_js(JSContext* cx, JS::HandleObject obj);
bool js_autogentestbindings_js_VPVideoFrameRGB_getDataLength(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_VPVideoFrameRGB_setLineSize(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_VPVideoFrameRGB_getLineSize(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_VPVideoFrameRGB_setDataLength(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_VPVideoFrameRGB_getData(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_VPVideoFrameRGB_setData(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_VPVideoFrameRGB_VPVideoFrameRGB(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_VPVideoFrameYUV_class;
extern JSObject *jsb_CrossApp_VPVideoFrameYUV_prototype;

bool js_autogentestbindings_js_VPVideoFrameYUV_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_autogentestbindings_js_VPVideoFrameYUV_finalize(JSContext *cx, JSObject *obj);
void js_register_autogentestbindings_js_VPVideoFrameYUV(JSContext *cx, JS::HandleObject global);
void register_all_autogentestbindings_js(JSContext* cx, JS::HandleObject obj);
bool js_autogentestbindings_js_VPVideoFrameYUV_getChromaB(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_VPVideoFrameYUV_setChromaR(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_VPVideoFrameYUV_setChromaRLength(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_VPVideoFrameYUV_getChromaBLength(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_VPVideoFrameYUV_getLumaLength(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_VPVideoFrameYUV_getChromaRLength(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_VPVideoFrameYUV_setLumaLength(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_VPVideoFrameYUV_getLuma(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_VPVideoFrameYUV_getChromaR(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_VPVideoFrameYUV_setChromaB(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_VPVideoFrameYUV_setChromaBLength(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_VPVideoFrameYUV_setLuma(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_VPVideoFrameYUV_VPVideoFrameYUV(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_VPDecoder_class;
extern JSObject *jsb_CrossApp_VPDecoder_prototype;

bool js_autogentestbindings_js_VPDecoder_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_autogentestbindings_js_VPDecoder_finalize(JSContext *cx, JSObject *obj);
void js_register_autogentestbindings_js_VPDecoder(JSContext *cx, JS::HandleObject global);
void register_all_autogentestbindings_js(JSContext* cx, JS::HandleObject obj);
bool js_autogentestbindings_js_VPDecoder_isValidAudio(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_VPDecoder_getStartTime(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_VPDecoder_openFile(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_VPDecoder_isEOF(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_VPDecoder_getFrameHeight(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_VPDecoder_isValidVideo(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_VPDecoder_decodeFrames(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_VPDecoder_getDuration(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_VPDecoder_getFirstVideoFrame(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_VPDecoder_enableAudio(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_VPDecoder_getSampleRate(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_VPDecoder_getFrameWidth(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_VPDecoder_onAudioCallback(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_VPDecoder_setPosition(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_VPDecoder_setupVideoFrameFormat(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_VPDecoder_getPosition(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_VPDecoder_closeFile(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_VPDecoder_VPDecoder(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_VPFrameRender_class;
extern JSObject *jsb_CrossApp_VPFrameRender_prototype;

bool js_autogentestbindings_js_VPFrameRender_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_autogentestbindings_js_VPFrameRender_finalize(JSContext *cx, JSObject *obj);
void js_register_autogentestbindings_js_VPFrameRender(JSContext *cx, JS::HandleObject global);
void register_all_autogentestbindings_js(JSContext* cx, JS::HandleObject obj);
bool js_autogentestbindings_js_VPFrameRender_updateVertices(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_VPFrameRender_draw(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_VPFrameRender_fragmentShader(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_VPFrameRender_setFrame(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_VPFrameRender_isValid(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_VPFrameRender_prepareRender(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_VPFrameRender_loadShaders(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_VPFrameRender_key(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_VPFrameRender_resolveUniforms(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_VPFrameRender_VPFrameRender(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_VPFrameRenderRGB_class;
extern JSObject *jsb_CrossApp_VPFrameRenderRGB_prototype;

bool js_autogentestbindings_js_VPFrameRenderRGB_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_autogentestbindings_js_VPFrameRenderRGB_finalize(JSContext *cx, JSObject *obj);
void js_register_autogentestbindings_js_VPFrameRenderRGB(JSContext *cx, JS::HandleObject global);
void register_all_autogentestbindings_js(JSContext* cx, JS::HandleObject obj);
bool js_autogentestbindings_js_VPFrameRenderRGB_fragmentShader(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_VPFrameRenderRGB_setFrame(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_VPFrameRenderRGB_isValid(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_VPFrameRenderRGB_prepareRender(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_VPFrameRenderRGB_resolveUniforms(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_VPFrameRenderRGB_VPFrameRenderRGB(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_VPFrameRenderYUV_class;
extern JSObject *jsb_CrossApp_VPFrameRenderYUV_prototype;

bool js_autogentestbindings_js_VPFrameRenderYUV_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_autogentestbindings_js_VPFrameRenderYUV_finalize(JSContext *cx, JSObject *obj);
void js_register_autogentestbindings_js_VPFrameRenderYUV(JSContext *cx, JS::HandleObject global);
void register_all_autogentestbindings_js(JSContext* cx, JS::HandleObject obj);
bool js_autogentestbindings_js_VPFrameRenderYUV_fragmentShader(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_VPFrameRenderYUV_setFrame(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_VPFrameRenderYUV_isValid(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_VPFrameRenderYUV_prepareRender(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_VPFrameRenderYUV_resolveUniforms(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_VPFrameRenderYUV_VPFrameRenderYUV(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CAVideoPlayerViewDelegate_class;
extern JSObject *jsb_CrossApp_CAVideoPlayerViewDelegate_prototype;

bool js_autogentestbindings_js_CAVideoPlayerViewDelegate_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_autogentestbindings_js_CAVideoPlayerViewDelegate_finalize(JSContext *cx, JSObject *obj);
void js_register_autogentestbindings_js_CAVideoPlayerViewDelegate(JSContext *cx, JS::HandleObject global);
void register_all_autogentestbindings_js(JSContext* cx, JS::HandleObject obj);
bool js_autogentestbindings_js_CAVideoPlayerViewDelegate_movieFinishedCallback(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CAVideoPlayerView_class;
extern JSObject *jsb_CrossApp_CAVideoPlayerView_prototype;

bool js_autogentestbindings_js_CAVideoPlayerView_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_autogentestbindings_js_CAVideoPlayerView_finalize(JSContext *cx, JSObject *obj);
void js_register_autogentestbindings_js_CAVideoPlayerView(JSContext *cx, JS::HandleObject global);
void register_all_autogentestbindings_js(JSContext* cx, JS::HandleObject obj);
bool js_autogentestbindings_js_CAVideoPlayerView_setPlayerViewDelegate(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAVideoPlayerView_play(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAVideoPlayerView_pause(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAVideoPlayerView_setFirstVideoFrame(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAVideoPlayerView_getDuration(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAVideoPlayerView_enableAudio(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAVideoPlayerView_setUrl(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAVideoPlayerView_isDecoderInited(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAVideoPlayerView_setFullPath(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAVideoPlayerView_setPosition(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAVideoPlayerView_isPlaying(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAVideoPlayerView_getPlayerViewDelegate(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAVideoPlayerView_getPosition(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAVideoPlayerView_create(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAVideoPlayerView_createWithFrame(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAVideoPlayerView_createWithLayout(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAVideoPlayerView_createWithCenter(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAVideoPlayerView_CAVideoPlayerView(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CAVideoPlayerControlViewDelegate_class;
extern JSObject *jsb_CrossApp_CAVideoPlayerControlViewDelegate_prototype;

bool js_autogentestbindings_js_CAVideoPlayerControlViewDelegate_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_autogentestbindings_js_CAVideoPlayerControlViewDelegate_finalize(JSContext *cx, JSObject *obj);
void js_register_autogentestbindings_js_CAVideoPlayerControlViewDelegate(JSContext *cx, JS::HandleObject global);
void register_all_autogentestbindings_js(JSContext* cx, JS::HandleObject obj);
bool js_autogentestbindings_js_CAVideoPlayerControlViewDelegate_onBackButtonClicked(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CAVideoPlayerControlView_class;
extern JSObject *jsb_CrossApp_CAVideoPlayerControlView_prototype;

bool js_autogentestbindings_js_CAVideoPlayerControlView_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_autogentestbindings_js_CAVideoPlayerControlView_finalize(JSContext *cx, JSObject *obj);
void js_register_autogentestbindings_js_CAVideoPlayerControlView(JSContext *cx, JS::HandleObject global);
void register_all_autogentestbindings_js(JSContext* cx, JS::HandleObject obj);
bool js_autogentestbindings_js_CAVideoPlayerControlView_getPlayerControlViewDelegate(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAVideoPlayerControlView_setPlayerViewDelegate(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAVideoPlayerControlView_setShowBackButton(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAVideoPlayerControlView_setTitle(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAVideoPlayerControlView_setUrl(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAVideoPlayerControlView_setPlayerControlViewDelegate(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAVideoPlayerControlView_getTitle(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAVideoPlayerControlView_setFullPath(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAVideoPlayerControlView_getShowBackButton(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAVideoPlayerControlView_createWithFrame(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAVideoPlayerControlView_createWithLayout(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAVideoPlayerControlView_createWithCenter(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CAVideoPlayerControlView_CAVideoPlayerControlView(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CACalendar_class;
extern JSObject *jsb_CrossApp_CACalendar_prototype;

bool js_autogentestbindings_js_CACalendar_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_autogentestbindings_js_CACalendar_finalize(JSContext *cx, JSObject *obj);
void js_register_autogentestbindings_js_CACalendar(JSContext *cx, JS::HandleObject global);
void register_all_autogentestbindings_js(JSContext* cx, JS::HandleObject obj);
bool js_autogentestbindings_js_CACalendar_dayOfWeek(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CACalendar_dateByDayOfYear(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CACalendar__dayCountOfYear(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CACalendar_addYear(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CACalendar_weekOfYear(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CACalendar_isLeapYear(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CACalendar_dayCountOfYear(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CACalendar_dayOfYear(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CACalendar__dayCountOfMonth(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CACalendar_dayCountOfMonth(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CACalendar__compareDate(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CACalendar_addDay(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CACalendar__isLeapYear(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CACalendar_addMonth(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CACalendar_monthOfYear(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CACalendar_setCalendar(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CACalendar__calcDayCount(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CACalendar_dayOfMonth(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CACalendar_create(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CACalendar_CACalendar(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CATextFieldDelegate_class;
extern JSObject *jsb_CrossApp_CATextFieldDelegate_prototype;

bool js_autogentestbindings_js_CATextFieldDelegate_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_autogentestbindings_js_CATextFieldDelegate_finalize(JSContext *cx, JSObject *obj);
void js_register_autogentestbindings_js_CATextFieldDelegate(JSContext *cx, JS::HandleObject global);
void register_all_autogentestbindings_js(JSContext* cx, JS::HandleObject obj);
bool js_autogentestbindings_js_CATextFieldDelegate_textFieldShouldBeginEditing(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATextFieldDelegate_keyBoardHeight(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATextFieldDelegate_textFieldShouldEndEditing(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATextFieldDelegate_textFieldShouldReturn(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATextFieldDelegate_textFieldShouldChangeCharacters(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CATextField_class;
extern JSObject *jsb_CrossApp_CATextField_prototype;

bool js_autogentestbindings_js_CATextField_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_autogentestbindings_js_CATextField_finalize(JSContext *cx, JSObject *obj);
void js_register_autogentestbindings_js_CATextField(JSContext *cx, JS::HandleObject global);
void register_all_autogentestbindings_js(JSContext* cx, JS::HandleObject obj);
bool js_autogentestbindings_js_CATextField_getFontSize(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATextField_setKeyboardType(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATextField_ccTouchBegan(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATextField_getText(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATextField_setClearButtonMode(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATextField_ccTouchEnded(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATextField_getTextColor(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATextField_getKeyboardType(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATextField_isSecureTextEntry(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATextField_getMaxLenght(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATextField_setTextFieldAlign(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATextField_setMarginImageLeft(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATextField_init(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATextField_setMarginRight(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATextField_getClearButtonMode(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATextField_ccTouchMoved(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATextField_getReturnType(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATextField_getPlaceHolderText(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATextField_setAllowkeyBoardHide(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATextField_getPlaceHolderColor(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATextField_setPlaceHolderText(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATextField_setBackgroundImage(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATextField_getMarginRight(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATextField_onExitTransitionDidStart(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATextField_setMarginLeft(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATextField_setDelegate(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATextField_setFontSize(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATextField_setPlaceHolderColor(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATextField_setTextColor(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATextField_setReturnType(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATextField_getDelegate(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATextField_resignFirstResponder(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATextField_setText(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATextField_getTextFieldAlign(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATextField_setMarginImageRight(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATextField_ccTouchCancelled(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATextField_getMarginLeft(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATextField_setMaxLenght(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATextField_becomeFirstResponder(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATextField_setSecureTextEntry(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATextField_isAllowkeyBoardHide(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATextField_onEnterTransitionDidFinish(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATextField_createWithFrame(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATextField_createWithLayout(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATextField_createWithCenter(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CATextField_CATextField(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CCScriptHandlerEntry_class;
extern JSObject *jsb_CrossApp_CCScriptHandlerEntry_prototype;

bool js_autogentestbindings_js_CCScriptHandlerEntry_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_autogentestbindings_js_CCScriptHandlerEntry_finalize(JSContext *cx, JSObject *obj);
void js_register_autogentestbindings_js_CCScriptHandlerEntry(JSContext *cx, JS::HandleObject global);
void register_all_autogentestbindings_js(JSContext* cx, JS::HandleObject obj);
bool js_autogentestbindings_js_CCScriptHandlerEntry_getHandler(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CCScriptHandlerEntry_getEntryId(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CCScriptHandlerEntry_create(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CCSchedulerScriptHandlerEntry_class;
extern JSObject *jsb_CrossApp_CCSchedulerScriptHandlerEntry_prototype;

bool js_autogentestbindings_js_CCSchedulerScriptHandlerEntry_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_autogentestbindings_js_CCSchedulerScriptHandlerEntry_finalize(JSContext *cx, JSObject *obj);
void js_register_autogentestbindings_js_CCSchedulerScriptHandlerEntry(JSContext *cx, JS::HandleObject global);
void register_all_autogentestbindings_js(JSContext* cx, JS::HandleObject obj);
bool js_autogentestbindings_js_CCSchedulerScriptHandlerEntry_isMarkedForDeletion(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CCSchedulerScriptHandlerEntry_markedForDeletion(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CCSchedulerScriptHandlerEntry_isPaused(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CCSchedulerScriptHandlerEntry_getTimer(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CCSchedulerScriptHandlerEntry_create(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CCTouchScriptHandlerEntry_class;
extern JSObject *jsb_CrossApp_CCTouchScriptHandlerEntry_prototype;

bool js_autogentestbindings_js_CCTouchScriptHandlerEntry_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_autogentestbindings_js_CCTouchScriptHandlerEntry_finalize(JSContext *cx, JSObject *obj);
void js_register_autogentestbindings_js_CCTouchScriptHandlerEntry(JSContext *cx, JS::HandleObject global);
void register_all_autogentestbindings_js(JSContext* cx, JS::HandleObject obj);
bool js_autogentestbindings_js_CCTouchScriptHandlerEntry_isMultiTouches(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CCTouchScriptHandlerEntry_getSwallowsTouches(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CCTouchScriptHandlerEntry_getPriority(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CCTouchScriptHandlerEntry_create(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CCScriptEngineProtocol_class;
extern JSObject *jsb_CrossApp_CCScriptEngineProtocol_prototype;

bool js_autogentestbindings_js_CCScriptEngineProtocol_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_autogentestbindings_js_CCScriptEngineProtocol_finalize(JSContext *cx, JSObject *obj);
void js_register_autogentestbindings_js_CCScriptEngineProtocol(JSContext *cx, JS::HandleObject global);
void register_all_autogentestbindings_js(JSContext* cx, JS::HandleObject obj);
bool js_autogentestbindings_js_CCScriptEngineProtocol_parseConfig(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CCScriptEngineProtocol_getScriptType(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CCScriptEngineProtocol_removeScriptObjectByCCObject(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CCScriptEngineProtocol_executeScriptFile(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CCScriptEngineProtocol_executeNodeEvent(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CCScriptEngineProtocol_executeString(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CCScriptEngineProtocol_handleAssert(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CCScriptEngineProtocol_removeScriptHandler(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CCScriptEngineProtocol_reallocateScriptHandler(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_CrossApp_CCScriptEngineManager_class;
extern JSObject *jsb_CrossApp_CCScriptEngineManager_prototype;

bool js_autogentestbindings_js_CCScriptEngineManager_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_autogentestbindings_js_CCScriptEngineManager_finalize(JSContext *cx, JSObject *obj);
void js_register_autogentestbindings_js_CCScriptEngineManager(JSContext *cx, JS::HandleObject global);
void register_all_autogentestbindings_js(JSContext* cx, JS::HandleObject obj);
bool js_autogentestbindings_js_CCScriptEngineManager_setScriptEngine(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CCScriptEngineManager_getScriptEngine(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CCScriptEngineManager_removeScriptEngine(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CCScriptEngineManager_sharedManager(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_CCScriptEngineManager_purgeSharedManager(JSContext *cx, uint32_t argc, jsval *vp);

extern JSClass  *jsb_JSViewController_class;
extern JSObject *jsb_JSViewController_prototype;

bool js_autogentestbindings_js_JSViewController_constructor(JSContext *cx, uint32_t argc, jsval *vp);
void js_autogentestbindings_js_JSViewController_finalize(JSContext *cx, JSObject *obj);
void js_register_autogentestbindings_js_JSViewController(JSContext *cx, JS::HandleObject global);
void register_all_autogentestbindings_js(JSContext* cx, JS::HandleObject obj);
bool js_autogentestbindings_js_JSViewController_viewDidUnload(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_JSViewController_viewDidLoad(JSContext *cx, uint32_t argc, jsval *vp);
bool js_autogentestbindings_js_JSViewController_JSViewController(JSContext *cx, uint32_t argc, jsval *vp);

#endif // __autogentestbindings_js_h__
