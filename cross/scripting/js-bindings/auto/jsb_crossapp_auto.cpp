#include "jsb_crossapp_auto.hpp"
#include "cocos2d_specifics.hpp"
#include "CrossApp.h"

template<class T>
static bool dummy_constructor(JSContext *cx, uint32_t argc, jsval *vp) {
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedValue initializing(cx);
    bool isNewValid = true;
    if (isNewValid)
    {
        TypeTest<T> t;
        js_type_class_t *typeClass = nullptr;
        std::string typeName = t.s_name();
        auto typeMapIter = _js_global_type_map.find(typeName);
        CCAssert(typeMapIter != _js_global_type_map.end(), "Can't find the class type!");
        typeClass = typeMapIter->second;
        CCAssert(typeClass, "The value is null.");

        JS::RootedObject proto(cx, typeClass->proto.get());
        JS::RootedObject parent(cx, typeClass->parentProto.get());
        JS::RootedObject _tmp(cx, JS_NewObject(cx, typeClass->jsclass, proto, parent));
        
        T* cobj = new T();
        js_proxy_t *pp = jsb_new_proxy(cobj, _tmp);
        AddObjectRoot(cx, &pp->obj);
        args.rval().set(OBJECT_TO_JSVAL(_tmp));
        return true;
    }

    return false;
}

static bool empty_constructor(JSContext *cx, uint32_t argc, jsval *vp) {
    return false;
}

static bool js_is_native_obj(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    args.rval().setBoolean(true);
    return true;    
}
JSClass  *jsb_CrossApp_CACopying_class;
JSObject *jsb_CrossApp_CACopying_prototype;

bool js_autogentestbindings_js_CACopying_copyWithZone(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CACopying* cobj = (CrossApp::CACopying *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CACopying_copyWithZone : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAZone* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAZone*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CACopying_copyWithZone : Error processing arguments");
        CrossApp::CAObject* ret = cobj->copyWithZone(arg0);
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAObject>(cx, (CrossApp::CAObject*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CACopying_copyWithZone : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}

void js_CrossApp_CACopying_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOGINFO("jsbindings: finalizing JS object %p (CACopying)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::CACopying *nobj = static_cast<CrossApp::CACopying *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
void js_register_autogentestbindings_js_CACopying(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_CACopying_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_CACopying_class->name = "CACopying";
    jsb_CrossApp_CACopying_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_CACopying_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_CACopying_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_CACopying_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_CACopying_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_CACopying_class->resolve = JS_ResolveStub;
    jsb_CrossApp_CACopying_class->convert = JS_ConvertStub;
    jsb_CrossApp_CACopying_class->finalize = js_CrossApp_CACopying_finalize;
    jsb_CrossApp_CACopying_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("copyWithZone", js_autogentestbindings_js_CACopying_copyWithZone, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    JSFunctionSpec *st_funcs = NULL;

    jsb_CrossApp_CACopying_prototype = JS_InitClass(
        cx, global,
        JS::NullPtr(), // parent proto
        jsb_CrossApp_CACopying_class,
        dummy_constructor<CrossApp::CACopying>, 0, // no constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27 
//  JS_SetPropertyAttributes(cx, global, "CACopying", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::CACopying> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_CACopying_class;
        p->proto = jsb_CrossApp_CACopying_prototype;
        p->parentProto = NULL;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
}

JSClass  *jsb_CrossApp_CAObject_class;
JSObject *jsb_CrossApp_CAObject_prototype;

bool js_autogentestbindings_js_CAObject_setUserData(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAObject* cobj = (CrossApp::CAObject *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAObject_setUserData : Invalid Native Object");
    if (argc == 1) {
        void* arg0 = nullptr;
        #pragma warning NO CONVERSION TO NATIVE FOR void*
		ok = false;
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAObject_setUserData : Error processing arguments");
        cobj->setUserData(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAObject_setUserData : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAObject_getTextTag(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAObject* cobj = (CrossApp::CAObject *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAObject_getTextTag : Invalid Native Object");
    if (argc == 0) {
        const std::string& ret = cobj->getTextTag();
        jsval jsret = JSVAL_NULL;
        jsret = std_string_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAObject_getTextTag : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAObject_retainCount(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAObject* cobj = (CrossApp::CAObject *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAObject_retainCount : Invalid Native Object");
    if (argc == 0) {
        unsigned int ret = cobj->retainCount();
        jsval jsret = JSVAL_NULL;
        jsret = uint32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAObject_retainCount : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAObject_getUserData(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAObject* cobj = (CrossApp::CAObject *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAObject_getUserData : Invalid Native Object");
    if (argc == 0) {
        void* ret = cobj->getUserData();
        jsval jsret = JSVAL_NULL;
        #pragma warning NO CONVERSION FROM NATIVE FOR void*;
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAObject_getUserData : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAObject_getUserObject(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAObject* cobj = (CrossApp::CAObject *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAObject_getUserObject : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CAObject* ret = cobj->getUserObject();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAObject>(cx, (CrossApp::CAObject*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAObject_getUserObject : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAObject_update(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAObject* cobj = (CrossApp::CAObject *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAObject_update : Invalid Native Object");
    if (argc == 1) {
        double arg0 = 0;
        ok &= JS::ToNumber( cx, args.get(0), &arg0) && !isnan(arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAObject_update : Error processing arguments");
        cobj->update(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAObject_update : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAObject_isEqual(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAObject* cobj = (CrossApp::CAObject *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAObject_isEqual : Invalid Native Object");
    if (argc == 1) {
        const CrossApp::CAObject* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (const CrossApp::CAObject*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAObject_isEqual : Error processing arguments");
        bool ret = cobj->isEqual(arg0);
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAObject_isEqual : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAObject_isSingleReference(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAObject* cobj = (CrossApp::CAObject *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAObject_isSingleReference : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->isSingleReference();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAObject_isSingleReference : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAObject_autorelease(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAObject* cobj = (CrossApp::CAObject *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAObject_autorelease : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CAObject* ret = cobj->autorelease();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAObject>(cx, (CrossApp::CAObject*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAObject_autorelease : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAObject_init(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAObject* cobj = (CrossApp::CAObject *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAObject_init : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->init();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAObject_init : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAObject_setTextTag(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAObject* cobj = (CrossApp::CAObject *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAObject_setTextTag : Invalid Native Object");
    if (argc == 1) {
        std::string arg0;
        ok &= jsval_to_std_string(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAObject_setTextTag : Error processing arguments");
        cobj->setTextTag(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAObject_setTextTag : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAObject_setTag(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAObject* cobj = (CrossApp::CAObject *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAObject_setTag : Invalid Native Object");
    if (argc == 1) {
        int arg0 = 0;
        ok &= jsval_to_int32(cx, args.get(0), (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAObject_setTag : Error processing arguments");
        cobj->setTag(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAObject_setTag : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAObject_release(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAObject* cobj = (CrossApp::CAObject *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAObject_release : Invalid Native Object");
    if (argc == 0) {
        cobj->release();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAObject_release : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAObject_retain(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAObject* cobj = (CrossApp::CAObject *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAObject_retain : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CAObject* ret = cobj->retain();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAObject>(cx, (CrossApp::CAObject*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAObject_retain : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAObject_getTag(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAObject* cobj = (CrossApp::CAObject *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAObject_getTag : Invalid Native Object");
    if (argc == 0) {
        int ret = cobj->getTag();
        jsval jsret = JSVAL_NULL;
        jsret = int32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAObject_getTag : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAObject_copy(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAObject* cobj = (CrossApp::CAObject *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAObject_copy : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CAObject* ret = cobj->copy();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAObject>(cx, (CrossApp::CAObject*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAObject_copy : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAObject_setUserObject(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAObject* cobj = (CrossApp::CAObject *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAObject_setUserObject : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAObject* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAObject*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAObject_setUserObject : Error processing arguments");
        cobj->setUserObject(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAObject_setUserObject : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAObject_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    CrossApp::CAObject* cobj = new (std::nothrow) CrossApp::CAObject();
    TypeTest<CrossApp::CAObject> t;
    js_type_class_t *typeClass = nullptr;
    std::string typeName = t.s_name();
    auto typeMapIter = _js_global_type_map.find(typeName);
    CCAssert(typeMapIter != _js_global_type_map.end(), "Can't find the class type!");
    typeClass = typeMapIter->second;
    CCAssert(typeClass, "The value is null.");
    JS::RootedObject proto(cx, typeClass->proto.get());
    JS::RootedObject parent(cx, typeClass->parentProto.get());
    JS::RootedObject obj(cx, JS_NewObject(cx, typeClass->jsclass, proto, parent));
    args.rval().set(OBJECT_TO_JSVAL(obj));
    // link the native object with the javascript object
    js_proxy_t* p = jsb_new_proxy(cobj, obj);
    if (JS_HasProperty(cx, obj, "_ctor", &ok) && ok)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    return true;
}

extern JSObject *jsb_CrossApp_CACopying_prototype;

void js_CrossApp_CAObject_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOGINFO("jsbindings: finalizing JS object %p (CAObject)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::CAObject *nobj = static_cast<CrossApp::CAObject *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
void js_register_autogentestbindings_js_CAObject(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_CAObject_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_CAObject_class->name = "CAObject";
    jsb_CrossApp_CAObject_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_CAObject_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_CAObject_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_CAObject_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_CAObject_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_CAObject_class->resolve = JS_ResolveStub;
    jsb_CrossApp_CAObject_class->convert = JS_ConvertStub;
    jsb_CrossApp_CAObject_class->finalize = js_CrossApp_CAObject_finalize;
    jsb_CrossApp_CAObject_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("setUserData", js_autogentestbindings_js_CAObject_setUserData, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getTextTag", js_autogentestbindings_js_CAObject_getTextTag, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("retainCount", js_autogentestbindings_js_CAObject_retainCount, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getUserData", js_autogentestbindings_js_CAObject_getUserData, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getUserObject", js_autogentestbindings_js_CAObject_getUserObject, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("update", js_autogentestbindings_js_CAObject_update, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isEqual", js_autogentestbindings_js_CAObject_isEqual, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isSingleReference", js_autogentestbindings_js_CAObject_isSingleReference, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("autorelease", js_autogentestbindings_js_CAObject_autorelease, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("init", js_autogentestbindings_js_CAObject_init, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setTextTag", js_autogentestbindings_js_CAObject_setTextTag, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setTag", js_autogentestbindings_js_CAObject_setTag, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("release", js_autogentestbindings_js_CAObject_release, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("retain", js_autogentestbindings_js_CAObject_retain, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getTag", js_autogentestbindings_js_CAObject_getTag, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("copy", js_autogentestbindings_js_CAObject_copy, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setUserObject", js_autogentestbindings_js_CAObject_setUserObject, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    JSFunctionSpec *st_funcs = NULL;

    jsb_CrossApp_CAObject_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_CACopying_prototype),
        jsb_CrossApp_CAObject_class,
        js_autogentestbindings_js_CAObject_constructor, 0, // constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27 
//  JS_SetPropertyAttributes(cx, global, "CAObject", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::CAObject> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_CAObject_class;
        p->proto = jsb_CrossApp_CAObject_prototype;
        p->parentProto = jsb_CrossApp_CACopying_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
}

JSClass  *jsb_CrossApp_CAZone_class;
JSObject *jsb_CrossApp_CAZone_prototype;

bool js_autogentestbindings_js_CAZone_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    CrossApp::CAZone* cobj = new (std::nothrow) CrossApp::CAZone();
    TypeTest<CrossApp::CAZone> t;
    js_type_class_t *typeClass = nullptr;
    std::string typeName = t.s_name();
    auto typeMapIter = _js_global_type_map.find(typeName);
    CCAssert(typeMapIter != _js_global_type_map.end(), "Can't find the class type!");
    typeClass = typeMapIter->second;
    CCAssert(typeClass, "The value is null.");
    JS::RootedObject proto(cx, typeClass->proto.get());
    JS::RootedObject parent(cx, typeClass->parentProto.get());
    JS::RootedObject obj(cx, JS_NewObject(cx, typeClass->jsclass, proto, parent));
    args.rval().set(OBJECT_TO_JSVAL(obj));
    // link the native object with the javascript object
    js_proxy_t* p = jsb_new_proxy(cobj, obj);
    if (JS_HasProperty(cx, obj, "_ctor", &ok) && ok)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    return true;
}

void js_CrossApp_CAZone_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOGINFO("jsbindings: finalizing JS object %p (CAZone)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::CAZone *nobj = static_cast<CrossApp::CAZone *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
void js_register_autogentestbindings_js_CAZone(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_CAZone_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_CAZone_class->name = "CAZone";
    jsb_CrossApp_CAZone_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_CAZone_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_CAZone_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_CAZone_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_CAZone_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_CAZone_class->resolve = JS_ResolveStub;
    jsb_CrossApp_CAZone_class->convert = JS_ConvertStub;
    jsb_CrossApp_CAZone_class->finalize = js_CrossApp_CAZone_finalize;
    jsb_CrossApp_CAZone_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FS_END
    };

    JSFunctionSpec *st_funcs = NULL;

    jsb_CrossApp_CAZone_prototype = JS_InitClass(
        cx, global,
        JS::NullPtr(), // parent proto
        jsb_CrossApp_CAZone_class,
        js_autogentestbindings_js_CAZone_constructor, 0, // constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27 
//  JS_SetPropertyAttributes(cx, global, "CAZone", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::CAZone> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_CAZone_class;
        p->proto = jsb_CrossApp_CAZone_prototype;
        p->parentProto = NULL;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
}

JSClass  *jsb_CrossApp_CATimer_class;
JSObject *jsb_CrossApp_CATimer_prototype;

bool js_autogentestbindings_js_CATimer_getInterval(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATimer* cobj = (CrossApp::CATimer *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CATimer_getInterval : Invalid Native Object");
    if (argc == 0) {
        double ret = cobj->getInterval();
        jsval jsret = JSVAL_NULL;
        jsret = DOUBLE_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CATimer_getInterval : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CATimer_setInterval(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATimer* cobj = (CrossApp::CATimer *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CATimer_setInterval : Invalid Native Object");
    if (argc == 1) {
        double arg0 = 0;
        ok &= JS::ToNumber( cx, args.get(0), &arg0) && !isnan(arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CATimer_setInterval : Error processing arguments");
        cobj->setInterval(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CATimer_setInterval : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CATimer_initWithScriptHandler(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATimer* cobj = (CrossApp::CATimer *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CATimer_initWithScriptHandler : Invalid Native Object");
    if (argc == 2) {
        int arg0 = 0;
        double arg1 = 0;
        ok &= jsval_to_int32(cx, args.get(0), (int32_t *)&arg0);
        ok &= JS::ToNumber( cx, args.get(1), &arg1) && !isnan(arg1);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CATimer_initWithScriptHandler : Error processing arguments");
        bool ret = cobj->initWithScriptHandler(arg0, arg1);
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CATimer_initWithScriptHandler : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_autogentestbindings_js_CATimer_update(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATimer* cobj = (CrossApp::CATimer *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CATimer_update : Invalid Native Object");
    if (argc == 1) {
        double arg0 = 0;
        ok &= JS::ToNumber( cx, args.get(0), &arg0) && !isnan(arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CATimer_update : Error processing arguments");
        cobj->update(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CATimer_update : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CATimer_getSelector(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATimer* cobj = (CrossApp::CATimer *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CATimer_getSelector : Invalid Native Object");
    if (argc == 0) {
        ?? ret = cobj->getSelector();
        jsval jsret = JSVAL_NULL;
        #pragma warning NO CONVERSION FROM NATIVE FOR ??;
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CATimer_getSelector : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CATimer_getScriptHandler(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATimer* cobj = (CrossApp::CATimer *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CATimer_getScriptHandler : Invalid Native Object");
    if (argc == 0) {
        int ret = cobj->getScriptHandler();
        jsval jsret = JSVAL_NULL;
        jsret = int32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CATimer_getScriptHandler : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CATimer_timerWithScriptHandler(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 2) {
        int arg0 = 0;
        double arg1 = 0;
        ok &= jsval_to_int32(cx, args.get(0), (int32_t *)&arg0);
        ok &= JS::ToNumber( cx, args.get(1), &arg1) && !isnan(arg1);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CATimer_timerWithScriptHandler : Error processing arguments");
        CrossApp::CATimer* ret = CrossApp::CATimer::timerWithScriptHandler(arg0, arg1);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CATimer>(cx, (CrossApp::CATimer*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_autogentestbindings_js_CATimer_timerWithScriptHandler : wrong number of arguments");
    return false;
}

bool js_autogentestbindings_js_CATimer_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    CrossApp::CATimer* cobj = new (std::nothrow) CrossApp::CATimer();
    TypeTest<CrossApp::CATimer> t;
    js_type_class_t *typeClass = nullptr;
    std::string typeName = t.s_name();
    auto typeMapIter = _js_global_type_map.find(typeName);
    CCAssert(typeMapIter != _js_global_type_map.end(), "Can't find the class type!");
    typeClass = typeMapIter->second;
    CCAssert(typeClass, "The value is null.");
    JS::RootedObject proto(cx, typeClass->proto.get());
    JS::RootedObject parent(cx, typeClass->parentProto.get());
    JS::RootedObject obj(cx, JS_NewObject(cx, typeClass->jsclass, proto, parent));
    args.rval().set(OBJECT_TO_JSVAL(obj));
    // link the native object with the javascript object
    js_proxy_t* p = jsb_new_proxy(cobj, obj);
    if (JS_HasProperty(cx, obj, "_ctor", &ok) && ok)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    return true;
}

extern JSObject *jsb_CrossApp_CAObject_prototype;

void js_CrossApp_CATimer_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOGINFO("jsbindings: finalizing JS object %p (CATimer)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::CATimer *nobj = static_cast<CrossApp::CATimer *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
void js_register_autogentestbindings_js_CATimer(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_CATimer_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_CATimer_class->name = "CATimer";
    jsb_CrossApp_CATimer_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_CATimer_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_CATimer_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_CATimer_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_CATimer_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_CATimer_class->resolve = JS_ResolveStub;
    jsb_CrossApp_CATimer_class->convert = JS_ConvertStub;
    jsb_CrossApp_CATimer_class->finalize = js_CrossApp_CATimer_finalize;
    jsb_CrossApp_CATimer_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("getInterval", js_autogentestbindings_js_CATimer_getInterval, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setInterval", js_autogentestbindings_js_CATimer_setInterval, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("initWithScriptHandler", js_autogentestbindings_js_CATimer_initWithScriptHandler, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("update", js_autogentestbindings_js_CATimer_update, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getSelector", js_autogentestbindings_js_CATimer_getSelector, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getScriptHandler", js_autogentestbindings_js_CATimer_getScriptHandler, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    static JSFunctionSpec st_funcs[] = {
        JS_FN("timerWithScriptHandler", js_autogentestbindings_js_CATimer_timerWithScriptHandler, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    jsb_CrossApp_CATimer_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_CAObject_prototype),
        jsb_CrossApp_CATimer_class,
        js_autogentestbindings_js_CATimer_constructor, 0, // constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27 
//  JS_SetPropertyAttributes(cx, global, "CATimer", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::CATimer> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_CATimer_class;
        p->proto = jsb_CrossApp_CATimer_prototype;
        p->parentProto = jsb_CrossApp_CAObject_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
}

JSClass  *jsb_CrossApp_CAScheduler_class;
JSObject *jsb_CrossApp_CAScheduler_prototype;

bool js_autogentestbindings_js_CAScheduler_isTargetPaused(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAScheduler* cobj = (CrossApp::CAScheduler *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAScheduler_isTargetPaused : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAObject* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAObject*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAScheduler_isTargetPaused : Error processing arguments");
        bool ret = cobj->isTargetPaused(arg0);
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAScheduler_isTargetPaused : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAScheduler_update(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAScheduler* cobj = (CrossApp::CAScheduler *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAScheduler_update : Invalid Native Object");
    if (argc == 1) {
        double arg0 = 0;
        ok &= JS::ToNumber( cx, args.get(0), &arg0) && !isnan(arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAScheduler_update : Error processing arguments");
        cobj->update(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAScheduler_update : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAScheduler_resumeTarget(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAScheduler* cobj = (CrossApp::CAScheduler *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAScheduler_resumeTarget : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAObject* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAObject*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAScheduler_resumeTarget : Error processing arguments");
        cobj->resumeTarget(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAScheduler_resumeTarget : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAScheduler_pauseAllTargets(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAScheduler* cobj = (CrossApp::CAScheduler *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAScheduler_pauseAllTargets : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CCSet* ret = cobj->pauseAllTargets();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CCSet>(cx, (CrossApp::CCSet*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAScheduler_pauseAllTargets : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAScheduler_resumeTargets(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAScheduler* cobj = (CrossApp::CAScheduler *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAScheduler_resumeTargets : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CCSet* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CCSet*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAScheduler_resumeTargets : Error processing arguments");
        cobj->resumeTargets(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAScheduler_resumeTargets : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAScheduler_pauseTarget(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAScheduler* cobj = (CrossApp::CAScheduler *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAScheduler_pauseTarget : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAObject* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAObject*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAScheduler_pauseTarget : Error processing arguments");
        cobj->pauseTarget(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAScheduler_pauseTarget : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAScheduler_pauseAllTargetsWithMinPriority(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAScheduler* cobj = (CrossApp::CAScheduler *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAScheduler_pauseAllTargetsWithMinPriority : Invalid Native Object");
    if (argc == 1) {
        int arg0 = 0;
        ok &= jsval_to_int32(cx, args.get(0), (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAScheduler_pauseAllTargetsWithMinPriority : Error processing arguments");
        CrossApp::CCSet* ret = cobj->pauseAllTargetsWithMinPriority(arg0);
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CCSet>(cx, (CrossApp::CCSet*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAScheduler_pauseAllTargetsWithMinPriority : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAScheduler_unscheduleAllForTarget(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        CrossApp::CAObject* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAObject*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAScheduler_unscheduleAllForTarget : Error processing arguments");
        CrossApp::CAScheduler::unscheduleAllForTarget(arg0);
        args.rval().setUndefined();
        return true;
    }
    JS_ReportError(cx, "js_autogentestbindings_js_CAScheduler_unscheduleAllForTarget : wrong number of arguments");
    return false;
}

bool js_autogentestbindings_js_CAScheduler_unscheduleAll(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    if (argc == 0) {
        CrossApp::CAScheduler::unscheduleAll();
        args.rval().setUndefined();
        return true;
    }
    JS_ReportError(cx, "js_autogentestbindings_js_CAScheduler_unscheduleAll : wrong number of arguments");
    return false;
}

bool js_autogentestbindings_js_CAScheduler_getScheduler(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    if (argc == 0) {
        CrossApp::CAScheduler* ret = CrossApp::CAScheduler::getScheduler();
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAScheduler>(cx, (CrossApp::CAScheduler*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_autogentestbindings_js_CAScheduler_getScheduler : wrong number of arguments");
    return false;
}

bool js_autogentestbindings_js_CAScheduler_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    CrossApp::CAScheduler* cobj = new (std::nothrow) CrossApp::CAScheduler();
    TypeTest<CrossApp::CAScheduler> t;
    js_type_class_t *typeClass = nullptr;
    std::string typeName = t.s_name();
    auto typeMapIter = _js_global_type_map.find(typeName);
    CCAssert(typeMapIter != _js_global_type_map.end(), "Can't find the class type!");
    typeClass = typeMapIter->second;
    CCAssert(typeClass, "The value is null.");
    JS::RootedObject proto(cx, typeClass->proto.get());
    JS::RootedObject parent(cx, typeClass->parentProto.get());
    JS::RootedObject obj(cx, JS_NewObject(cx, typeClass->jsclass, proto, parent));
    args.rval().set(OBJECT_TO_JSVAL(obj));
    // link the native object with the javascript object
    js_proxy_t* p = jsb_new_proxy(cobj, obj);
    if (JS_HasProperty(cx, obj, "_ctor", &ok) && ok)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    return true;
}

extern JSObject *jsb_CrossApp_CAObject_prototype;

void js_CrossApp_CAScheduler_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOGINFO("jsbindings: finalizing JS object %p (CAScheduler)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::CAScheduler *nobj = static_cast<CrossApp::CAScheduler *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
void js_register_autogentestbindings_js_CAScheduler(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_CAScheduler_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_CAScheduler_class->name = "CAScheduler";
    jsb_CrossApp_CAScheduler_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_CAScheduler_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_CAScheduler_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_CAScheduler_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_CAScheduler_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_CAScheduler_class->resolve = JS_ResolveStub;
    jsb_CrossApp_CAScheduler_class->convert = JS_ConvertStub;
    jsb_CrossApp_CAScheduler_class->finalize = js_CrossApp_CAScheduler_finalize;
    jsb_CrossApp_CAScheduler_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("isTargetPaused", js_autogentestbindings_js_CAScheduler_isTargetPaused, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("update", js_autogentestbindings_js_CAScheduler_update, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("resumeTarget", js_autogentestbindings_js_CAScheduler_resumeTarget, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("pauseAllTargets", js_autogentestbindings_js_CAScheduler_pauseAllTargets, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("resumeTargets", js_autogentestbindings_js_CAScheduler_resumeTargets, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("pauseTarget", js_autogentestbindings_js_CAScheduler_pauseTarget, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("pauseAllTargetsWithMinPriority", js_autogentestbindings_js_CAScheduler_pauseAllTargetsWithMinPriority, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    static JSFunctionSpec st_funcs[] = {
        JS_FN("unscheduleAllForTarget", js_autogentestbindings_js_CAScheduler_unscheduleAllForTarget, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("unscheduleAll", js_autogentestbindings_js_CAScheduler_unscheduleAll, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getScheduler", js_autogentestbindings_js_CAScheduler_getScheduler, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    jsb_CrossApp_CAScheduler_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_CAObject_prototype),
        jsb_CrossApp_CAScheduler_class,
        js_autogentestbindings_js_CAScheduler_constructor, 0, // constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27 
//  JS_SetPropertyAttributes(cx, global, "CAScheduler", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::CAScheduler> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_CAScheduler_class;
        p->proto = jsb_CrossApp_CAScheduler_prototype;
        p->parentProto = jsb_CrossApp_CAObject_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
}

JSClass  *jsb_CrossApp_CAImage_class;
JSObject *jsb_CrossApp_CAImage_prototype;

bool js_autogentestbindings_js_CAImage_getShaderProgram(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAImage* cobj = (CrossApp::CAImage *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAImage_getShaderProgram : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CAGLProgram* ret = cobj->getShaderProgram();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAGLProgram>(cx, (CrossApp::CAGLProgram*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAImage_getShaderProgram : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAImage_premultipliedImageData(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAImage* cobj = (CrossApp::CAImage *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAImage_premultipliedImageData : Invalid Native Object");
    if (argc == 0) {
        cobj->premultipliedImageData();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAImage_premultipliedImageData : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAImage_initWithETCFile(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAImage* cobj = (CrossApp::CAImage *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAImage_initWithETCFile : Invalid Native Object");
    if (argc == 1) {
        const char* arg0 = nullptr;
        std::string arg0_tmp; ok &= jsval_to_std_string(cx, args.get(0), &arg0_tmp); arg0 = arg0_tmp.c_str();
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAImage_initWithETCFile : Error processing arguments");
        bool ret = cobj->initWithETCFile(arg0);
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAImage_initWithETCFile : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAImage_stringForFormat(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAImage* cobj = (CrossApp::CAImage *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAImage_stringForFormat : Invalid Native Object");
    if (argc == 0) {
        const char* ret = cobj->stringForFormat();
        jsval jsret = JSVAL_NULL;
        jsret = c_string_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAImage_stringForFormat : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAImage_setMaxS(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAImage* cobj = (CrossApp::CAImage *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAImage_setMaxS : Invalid Native Object");
    if (argc == 1) {
        double arg0 = 0;
        ok &= JS::ToNumber( cx, args.get(0), &arg0) && !isnan(arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAImage_setMaxS : Error processing arguments");
        cobj->setMaxS(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAImage_setMaxS : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAImage_setShaderProgram(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAImage* cobj = (CrossApp::CAImage *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAImage_setShaderProgram : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAGLProgram* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAGLProgram*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAImage_setShaderProgram : Error processing arguments");
        cobj->setShaderProgram(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAImage_setShaderProgram : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAImage_getMaxS(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAImage* cobj = (CrossApp::CAImage *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAImage_getMaxS : Invalid Native Object");
    if (argc == 0) {
        double ret = cobj->getMaxS();
        jsval jsret = JSVAL_NULL;
        jsret = DOUBLE_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAImage_getMaxS : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAImage_getAspectRatio(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAImage* cobj = (CrossApp::CAImage *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAImage_getAspectRatio : Invalid Native Object");
    if (argc == 0) {
        double ret = cobj->getAspectRatio();
        jsval jsret = JSVAL_NULL;
        jsret = DOUBLE_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAImage_getAspectRatio : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAImage_releaseData(JSContext *cx, uint32_t argc, jsval *vp)
{
    bool ok = true;
    CrossApp::CAImage* cobj = nullptr;

    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx);
    obj = args.thisv().toObjectOrNull();
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    cobj = (CrossApp::CAImage *)(proxy ? proxy->ptr : nullptr);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAImage_releaseData : Invalid Native Object");
    do {
        if (argc == 1) {
            unsigned char** arg0 = nullptr;
            #pragma warning NO CONVERSION TO NATIVE FOR unsigned char**
			ok = false;
            if (!ok) { ok = true; break; }
            cobj->releaseData(arg0);
            args.rval().setUndefined();
            return true;
        }
    } while(0);

    do {
        if (argc == 0) {
            cobj->releaseData();
            args.rval().setUndefined();
            return true;
        }
    } while(0);

    JS_ReportError(cx, "js_autogentestbindings_js_CAImage_releaseData : wrong number of arguments");
    return false;
}
bool js_autogentestbindings_js_CAImage_hasPremultipliedAlpha(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAImage* cobj = (CrossApp::CAImage *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAImage_hasPremultipliedAlpha : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->hasPremultipliedAlpha();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAImage_hasPremultipliedAlpha : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAImage_getPixelsWide(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAImage* cobj = (CrossApp::CAImage *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAImage_getPixelsWide : Invalid Native Object");
    if (argc == 0) {
        unsigned int ret = cobj->getPixelsWide();
        jsval jsret = JSVAL_NULL;
        jsret = uint32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAImage_getPixelsWide : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAImage_getPixelsHigh(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAImage* cobj = (CrossApp::CAImage *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAImage_getPixelsHigh : Invalid Native Object");
    if (argc == 0) {
        unsigned int ret = cobj->getPixelsHigh();
        jsval jsret = JSVAL_NULL;
        jsret = uint32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAImage_getPixelsHigh : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAImage_setTexParameters(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAImage* cobj = (CrossApp::CAImage *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAImage_setTexParameters : Invalid Native Object");
    if (argc == 1) {
        CrossApp::_ccTexParams* arg0 = nullptr;
        #pragma warning NO CONVERSION TO NATIVE FOR _ccTexParams*
		ok = false;
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAImage_setTexParameters : Error processing arguments");
        cobj->setTexParameters(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAImage_setTexParameters : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAImage_freeName(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAImage* cobj = (CrossApp::CAImage *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAImage_freeName : Invalid Native Object");
    if (argc == 0) {
        cobj->freeName();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAImage_freeName : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAImage_isTiff(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAImage* cobj = (CrossApp::CAImage *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAImage_isTiff : Invalid Native Object");
    if (argc == 2) {
        const unsigned char* arg0 = nullptr;
        unsigned long arg1 = 0;
        #pragma warning NO CONVERSION TO NATIVE FOR unsigned char*
		ok = false;
        ok &= jsval_to_ulong(cx, args.get(1), &arg1);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAImage_isTiff : Error processing arguments");
        bool ret = cobj->isTiff(arg0, arg1);
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAImage_isTiff : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_autogentestbindings_js_CAImage_bitsPerPixelForFormat(JSContext *cx, uint32_t argc, jsval *vp)
{
    bool ok = true;
    CrossApp::CAImage* cobj = nullptr;

    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx);
    obj = args.thisv().toObjectOrNull();
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    cobj = (CrossApp::CAImage *)(proxy ? proxy->ptr : nullptr);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAImage_bitsPerPixelForFormat : Invalid Native Object");
    do {
        if (argc == 1) {
            CrossApp::CAImage::PixelFormat arg0;
            ok &= jsval_to_int32(cx, args.get(0), (int32_t *)&arg0);
            if (!ok) { ok = true; break; }
            unsigned int ret = cobj->bitsPerPixelForFormat(arg0);
            jsval jsret = JSVAL_NULL;
            jsret = uint32_to_jsval(cx, ret);
            args.rval().set(jsret);
            return true;
        }
    } while(0);

    do {
        if (argc == 0) {
            unsigned int ret = cobj->bitsPerPixelForFormat();
            jsval jsret = JSVAL_NULL;
            jsret = uint32_to_jsval(cx, ret);
            args.rval().set(jsret);
            return true;
        }
    } while(0);

    JS_ReportError(cx, "js_autogentestbindings_js_CAImage_bitsPerPixelForFormat : wrong number of arguments");
    return false;
}
bool js_autogentestbindings_js_CAImage_getName(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAImage* cobj = (CrossApp::CAImage *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAImage_getName : Invalid Native Object");
    if (argc == 0) {
        unsigned int ret = cobj->getName();
        jsval jsret = JSVAL_NULL;
        jsret = uint32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAImage_getName : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAImage_getGifImageIndex(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAImage* cobj = (CrossApp::CAImage *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAImage_getGifImageIndex : Invalid Native Object");
    if (argc == 0) {
        unsigned int ret = cobj->getGifImageIndex();
        jsval jsret = JSVAL_NULL;
        jsret = uint32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAImage_getGifImageIndex : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAImage_setMaxT(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAImage* cobj = (CrossApp::CAImage *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAImage_setMaxT : Invalid Native Object");
    if (argc == 1) {
        double arg0 = 0;
        ok &= JS::ToNumber( cx, args.get(0), &arg0) && !isnan(arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAImage_setMaxT : Error processing arguments");
        cobj->setMaxT(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAImage_setMaxT : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAImage_initWithImageFile(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAImage* cobj = (CrossApp::CAImage *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAImage_initWithImageFile : Invalid Native Object");
    if (argc == 1) {
        std::string arg0;
        ok &= jsval_to_std_string(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAImage_initWithImageFile : Error processing arguments");
        bool ret = cobj->initWithImageFile(arg0);
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAImage_initWithImageFile : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAImage_drawInRect(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAImage* cobj = (CrossApp::CAImage *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAImage_drawInRect : Invalid Native Object");
    if (argc == 1) {
        CrossApp::DRect arg0;
        ok &= jsval_to_drect(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAImage_drawInRect : Error processing arguments");
        cobj->drawInRect(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAImage_drawInRect : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAImage_getGifImageCounts(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAImage* cobj = (CrossApp::CAImage *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAImage_getGifImageCounts : Invalid Native Object");
    if (argc == 0) {
        unsigned int ret = cobj->getGifImageCounts();
        jsval jsret = JSVAL_NULL;
        jsret = uint32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAImage_getGifImageCounts : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAImage_getContentSize(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAImage* cobj = (CrossApp::CAImage *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAImage_getContentSize : Invalid Native Object");
    if (argc == 0) {
        const CrossApp::DSize& ret = cobj->getContentSize();
        jsval jsret = JSVAL_NULL;
        jsret = dsize_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAImage_getContentSize : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAImage_getMaxT(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAImage* cobj = (CrossApp::CAImage *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAImage_getMaxT : Invalid Native Object");
    if (argc == 0) {
        double ret = cobj->getMaxT();
        jsval jsret = JSVAL_NULL;
        jsret = DOUBLE_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAImage_getMaxT : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAImage_initWithImageFileThreadSafe(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAImage* cobj = (CrossApp::CAImage *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAImage_initWithImageFileThreadSafe : Invalid Native Object");
    if (argc == 1) {
        std::string arg0;
        ok &= jsval_to_std_string(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAImage_initWithImageFileThreadSafe : Error processing arguments");
        bool ret = cobj->initWithImageFileThreadSafe(arg0);
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAImage_initWithImageFileThreadSafe : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAImage_setAliasTexParameters(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAImage* cobj = (CrossApp::CAImage *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAImage_setAliasTexParameters : Invalid Native Object");
    if (argc == 0) {
        cobj->setAliasTexParameters();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAImage_setAliasTexParameters : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAImage_isPng(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAImage* cobj = (CrossApp::CAImage *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAImage_isPng : Invalid Native Object");
    if (argc == 2) {
        const unsigned char* arg0 = nullptr;
        unsigned long arg1 = 0;
        #pragma warning NO CONVERSION TO NATIVE FOR unsigned char*
		ok = false;
        ok &= jsval_to_ulong(cx, args.get(1), &arg1);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAImage_isPng : Error processing arguments");
        bool ret = cobj->isPng(arg0, arg1);
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAImage_isPng : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_autogentestbindings_js_CAImage_setAntiAliasTexParameters(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAImage* cobj = (CrossApp::CAImage *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAImage_setAntiAliasTexParameters : Invalid Native Object");
    if (argc == 0) {
        cobj->setAntiAliasTexParameters();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAImage_setAntiAliasTexParameters : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAImage_generateMipmap(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAImage* cobj = (CrossApp::CAImage *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAImage_generateMipmap : Invalid Native Object");
    if (argc == 0) {
        cobj->generateMipmap();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAImage_generateMipmap : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAImage_saveToFile(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAImage* cobj = (CrossApp::CAImage *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAImage_saveToFile : Invalid Native Object");
    if (argc == 1) {
        std::string arg0;
        ok &= jsval_to_std_string(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAImage_saveToFile : Error processing arguments");
        bool ret = cobj->saveToFile(arg0);
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }
    if (argc == 2) {
        std::string arg0;
        bool arg1;
        ok &= jsval_to_std_string(cx, args.get(0), &arg0);
        arg1 = JS::ToBoolean(args.get(1));
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAImage_saveToFile : Error processing arguments");
        bool ret = cobj->saveToFile(arg0, arg1);
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAImage_saveToFile : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAImage_description(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAImage* cobj = (CrossApp::CAImage *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAImage_description : Invalid Native Object");
    if (argc == 0) {
        const char* ret = cobj->description();
        jsval jsret = JSVAL_NULL;
        jsret = c_string_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAImage_description : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAImage_isMonochrome(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAImage* cobj = (CrossApp::CAImage *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAImage_isMonochrome : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->isMonochrome();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAImage_isMonochrome : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAImage_initWithImageData(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAImage* cobj = (CrossApp::CAImage *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAImage_initWithImageData : Invalid Native Object");
    if (argc == 2) {
        const unsigned char* arg0 = nullptr;
        unsigned long arg1 = 0;
        #pragma warning NO CONVERSION TO NATIVE FOR unsigned char*
		ok = false;
        ok &= jsval_to_ulong(cx, args.get(1), &arg1);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAImage_initWithImageData : Error processing arguments");
        bool ret = cobj->initWithImageData(arg0, arg1);
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAImage_initWithImageData : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_autogentestbindings_js_CAImage_getPixelFormat(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAImage* cobj = (CrossApp::CAImage *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAImage_getPixelFormat : Invalid Native Object");
    if (argc == 0) {
        int ret = (int)cobj->getPixelFormat();
        jsval jsret = JSVAL_NULL;
        jsret = int32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAImage_getPixelFormat : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAImage_hasAlpha(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAImage* cobj = (CrossApp::CAImage *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAImage_hasAlpha : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->hasAlpha();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAImage_hasAlpha : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAImage_isEtc(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAImage* cobj = (CrossApp::CAImage *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAImage_isEtc : Invalid Native Object");
    if (argc == 2) {
        const unsigned char* arg0 = nullptr;
        unsigned long arg1 = 0;
        #pragma warning NO CONVERSION TO NATIVE FOR unsigned char*
		ok = false;
        ok &= jsval_to_ulong(cx, args.get(1), &arg1);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAImage_isEtc : Error processing arguments");
        bool ret = cobj->isEtc(arg0, arg1);
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAImage_isEtc : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_autogentestbindings_js_CAImage_isWebp(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAImage* cobj = (CrossApp::CAImage *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAImage_isWebp : Invalid Native Object");
    if (argc == 2) {
        const unsigned char* arg0 = nullptr;
        unsigned long arg1 = 0;
        #pragma warning NO CONVERSION TO NATIVE FOR unsigned char*
		ok = false;
        ok &= jsval_to_ulong(cx, args.get(1), &arg1);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAImage_isWebp : Error processing arguments");
        bool ret = cobj->isWebp(arg0, arg1);
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAImage_isWebp : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_autogentestbindings_js_CAImage_updateGifImageWithIndex(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAImage* cobj = (CrossApp::CAImage *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAImage_updateGifImageWithIndex : Invalid Native Object");
    if (argc == 1) {
        unsigned int arg0 = 0;
        ok &= jsval_to_uint32(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAImage_updateGifImageWithIndex : Error processing arguments");
        cobj->updateGifImageWithIndex(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAImage_updateGifImageWithIndex : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAImage_copy(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAImage* cobj = (CrossApp::CAImage *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAImage_copy : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CAImage* ret = cobj->copy();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAImage>(cx, (CrossApp::CAImage*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAImage_copy : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAImage_getImageFileType(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAImage* cobj = (CrossApp::CAImage *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAImage_getImageFileType : Invalid Native Object");
    if (argc == 0) {
        const char* ret = cobj->getImageFileType();
        jsval jsret = JSVAL_NULL;
        jsret = c_string_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAImage_getImageFileType : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAImage_drawAtPoint(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAImage* cobj = (CrossApp::CAImage *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAImage_drawAtPoint : Invalid Native Object");
    if (argc == 1) {
        CrossApp::DPoint arg0 = 0;
        ok &= jsval_to_dpoint(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAImage_drawAtPoint : Error processing arguments");
        cobj->drawAtPoint(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAImage_drawAtPoint : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAImage_initWithRawData(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAImage* cobj = (CrossApp::CAImage *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAImage_initWithRawData : Invalid Native Object");
    if (argc == 4) {
        const unsigned char* arg0 = nullptr;
        CrossApp::CAImage::PixelFormat arg1;
        unsigned int arg2 = 0;
        unsigned int arg3 = 0;
        #pragma warning NO CONVERSION TO NATIVE FOR unsigned char*
		ok = false;
        ok &= jsval_to_int32(cx, args.get(1), (int32_t *)&arg1);
        ok &= jsval_to_uint32(cx, args.get(2), &arg2);
        ok &= jsval_to_uint32(cx, args.get(3), &arg3);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAImage_initWithRawData : Error processing arguments");
        bool ret = cobj->initWithRawData(arg0, arg1, arg2, arg3);
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAImage_initWithRawData : wrong number of arguments: %d, was expecting %d", argc, 4);
    return false;
}
bool js_autogentestbindings_js_CAImage_repremultipliedImageData(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAImage* cobj = (CrossApp::CAImage *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAImage_repremultipliedImageData : Invalid Native Object");
    if (argc == 0) {
        cobj->repremultipliedImageData();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAImage_repremultipliedImageData : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAImage_getData(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAImage* cobj = (CrossApp::CAImage *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAImage_getData : Invalid Native Object");
    if (argc == 0) {
        unsigned char* ret = cobj->getData();
        jsval jsret = JSVAL_NULL;
        #pragma warning NO CONVERSION FROM NATIVE FOR unsigned char*;
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAImage_getData : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAImage_detectFormat(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAImage* cobj = (CrossApp::CAImage *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAImage_detectFormat : Invalid Native Object");
    if (argc == 2) {
        const unsigned char* arg0 = nullptr;
        unsigned long arg1 = 0;
        #pragma warning NO CONVERSION TO NATIVE FOR unsigned char*
		ok = false;
        ok &= jsval_to_ulong(cx, args.get(1), &arg1);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAImage_detectFormat : Error processing arguments");
        int ret = (int)cobj->detectFormat(arg0, arg1);
        jsval jsret = JSVAL_NULL;
        jsret = int32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAImage_detectFormat : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_autogentestbindings_js_CAImage_hasMipmaps(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAImage* cobj = (CrossApp::CAImage *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAImage_hasMipmaps : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->hasMipmaps();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAImage_hasMipmaps : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAImage_getDataLenght(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAImage* cobj = (CrossApp::CAImage *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAImage_getDataLenght : Invalid Native Object");
    if (argc == 0) {
        unsigned long ret = cobj->getDataLenght();
        jsval jsret = JSVAL_NULL;
        jsret = ulong_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAImage_getDataLenght : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAImage_isJpg(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAImage* cobj = (CrossApp::CAImage *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAImage_isJpg : Invalid Native Object");
    if (argc == 2) {
        const unsigned char* arg0 = nullptr;
        unsigned long arg1 = 0;
        #pragma warning NO CONVERSION TO NATIVE FOR unsigned char*
		ok = false;
        ok &= jsval_to_ulong(cx, args.get(1), &arg1);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAImage_isJpg : Error processing arguments");
        bool ret = cobj->isJpg(arg0, arg1);
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAImage_isJpg : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_autogentestbindings_js_CAImage_isPvr(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAImage* cobj = (CrossApp::CAImage *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAImage_isPvr : Invalid Native Object");
    if (argc == 2) {
        const unsigned char* arg0 = nullptr;
        unsigned long arg1 = 0;
        #pragma warning NO CONVERSION TO NATIVE FOR unsigned char*
		ok = false;
        ok &= jsval_to_ulong(cx, args.get(1), &arg1);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAImage_isPvr : Error processing arguments");
        bool ret = cobj->isPvr(arg0, arg1);
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAImage_isPvr : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_autogentestbindings_js_CAImage_isGif(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAImage* cobj = (CrossApp::CAImage *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAImage_isGif : Invalid Native Object");
    if (argc == 2) {
        const unsigned char* arg0 = nullptr;
        unsigned long arg1 = 0;
        #pragma warning NO CONVERSION TO NATIVE FOR unsigned char*
		ok = false;
        ok &= jsval_to_ulong(cx, args.get(1), &arg1);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAImage_isGif : Error processing arguments");
        bool ret = cobj->isGif(arg0, arg1);
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAImage_isGif : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_autogentestbindings_js_CAImage_scaleToNewImageWithImage(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    
    do {
        if (argc == 3) {
            CrossApp::CAImage* arg0 = nullptr;
            do {
                if (args.get(0).isNull()) { arg0 = nullptr; break; }
                if (!args.get(0).isObject()) { ok = false; break; }
                js_proxy_t *jsProxy;
                JSObject *tmpObj = args.get(0).toObjectOrNull();
                jsProxy = jsb_get_js_proxy(tmpObj);
                arg0 = (CrossApp::CAImage*)(jsProxy ? jsProxy->ptr : NULL);
                JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
            } while (0);
            if (!ok) { ok = true; break; }
            double arg1 = 0;
            ok &= JS::ToNumber( cx, args.get(1), &arg1) && !isnan(arg1);
            if (!ok) { ok = true; break; }
            double arg2 = 0;
            ok &= JS::ToNumber( cx, args.get(2), &arg2) && !isnan(arg2);
            if (!ok) { ok = true; break; }
            CrossApp::CAImage* ret = CrossApp::CAImage::scaleToNewImageWithImage(arg0, arg1, arg2);
            jsval jsret = JSVAL_NULL;
            do {
                if (ret) {
                    js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAImage>(cx, (CrossApp::CAImage*)ret);
                    jsret = OBJECT_TO_JSVAL(jsProxy->obj);
                } else {
                    jsret = JSVAL_NULL;
                }
            } while (0);
            args.rval().set(jsret);
            return true;
        }
    } while (0);
    
    do {
        if (argc == 2) {
            CrossApp::CAImage* arg0 = nullptr;
            do {
                if (args.get(0).isNull()) { arg0 = nullptr; break; }
                if (!args.get(0).isObject()) { ok = false; break; }
                js_proxy_t *jsProxy;
                JSObject *tmpObj = args.get(0).toObjectOrNull();
                jsProxy = jsb_get_js_proxy(tmpObj);
                arg0 = (CrossApp::CAImage*)(jsProxy ? jsProxy->ptr : NULL);
                JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
            } while (0);
            if (!ok) { ok = true; break; }
            CrossApp::DSize arg1;
            ok &= jsval_to_dsize(cx, args.get(1), &arg1);
            if (!ok) { ok = true; break; }
            CrossApp::CAImage* ret = CrossApp::CAImage::scaleToNewImageWithImage(arg0, arg1);
            jsval jsret = JSVAL_NULL;
            do {
                if (ret) {
                    js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAImage>(cx, (CrossApp::CAImage*)ret);
                    jsret = OBJECT_TO_JSVAL(jsProxy->obj);
                } else {
                    jsret = JSVAL_NULL;
                }
            } while (0);
            args.rval().set(jsret);
            return true;
        }
    } while (0);
    JS_ReportError(cx, "js_autogentestbindings_js_CAImage_scaleToNewImageWithImage : wrong number of arguments");
    return false;
}
bool js_autogentestbindings_js_CAImage_CC_WHITE_IMAGE(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    if (argc == 0) {
        CrossApp::CAImage* ret = CrossApp::CAImage::CC_WHITE_IMAGE();
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAImage>(cx, (CrossApp::CAImage*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_autogentestbindings_js_CAImage_CC_WHITE_IMAGE : wrong number of arguments");
    return false;
}

bool js_autogentestbindings_js_CAImage_getFontHeight(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 2) {
        const char* arg0 = nullptr;
        unsigned long arg1 = 0;
        std::string arg0_tmp; ok &= jsval_to_std_string(cx, args.get(0), &arg0_tmp); arg0 = arg0_tmp.c_str();
        ok &= jsval_to_ulong(cx, args.get(1), &arg1);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAImage_getFontHeight : Error processing arguments");
        int ret = CrossApp::CAImage::getFontHeight(arg0, arg1);
        jsval jsret = JSVAL_NULL;
        jsret = int32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_autogentestbindings_js_CAImage_getFontHeight : wrong number of arguments");
    return false;
}

bool js_autogentestbindings_js_CAImage_create(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        std::string arg0;
        ok &= jsval_to_std_string(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAImage_create : Error processing arguments");
        CrossApp::CAImage* ret = CrossApp::CAImage::create(arg0);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAImage>(cx, (CrossApp::CAImage*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_autogentestbindings_js_CAImage_create : wrong number of arguments");
    return false;
}

bool js_autogentestbindings_js_CAImage_createWithRawData(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 5) {
        const unsigned char* arg0 = nullptr;
        CrossApp::CAImage::PixelFormat arg1;
        unsigned int arg2 = 0;
        unsigned int arg3 = 0;
        std::string arg4;
        #pragma warning NO CONVERSION TO NATIVE FOR unsigned char*
		ok = false;
        ok &= jsval_to_int32(cx, args.get(1), (int32_t *)&arg1);
        ok &= jsval_to_uint32(cx, args.get(2), &arg2);
        ok &= jsval_to_uint32(cx, args.get(3), &arg3);
        ok &= jsval_to_std_string(cx, args.get(4), &arg4);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAImage_createWithRawData : Error processing arguments");
        CrossApp::CAImage* ret = CrossApp::CAImage::createWithRawData(arg0, arg1, arg2, arg3, arg4);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAImage>(cx, (CrossApp::CAImage*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_autogentestbindings_js_CAImage_createWithRawData : wrong number of arguments");
    return false;
}

bool js_autogentestbindings_js_CAImage_cutStringByWidth(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 5) {
        const char* arg0 = nullptr;
        unsigned long arg1 = 0;
        std::string arg2;
        int arg3 = 0;
        int arg4 = 0;
        std::string arg0_tmp; ok &= jsval_to_std_string(cx, args.get(0), &arg0_tmp); arg0 = arg0_tmp.c_str();
        ok &= jsval_to_ulong(cx, args.get(1), &arg1);
        ok &= jsval_to_std_string(cx, args.get(2), &arg2);
        ok &= jsval_to_int32(cx, args.get(3), (int32_t *)&arg3);
        ok &= jsval_to_int32(cx, args.get(4), (int32_t *)&arg4);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAImage_cutStringByWidth : Error processing arguments");
        int ret = CrossApp::CAImage::cutStringByWidth(arg0, arg1, arg2, arg3, arg4);
        jsval jsret = JSVAL_NULL;
        jsret = int32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_autogentestbindings_js_CAImage_cutStringByWidth : wrong number of arguments");
    return false;
}

bool js_autogentestbindings_js_CAImage_createWithImageDataNoCache(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 2) {
        const unsigned char* arg0 = nullptr;
        unsigned long arg1 = 0;
        #pragma warning NO CONVERSION TO NATIVE FOR unsigned char*
		ok = false;
        ok &= jsval_to_ulong(cx, args.get(1), &arg1);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAImage_createWithImageDataNoCache : Error processing arguments");
        CrossApp::CAImage* ret = CrossApp::CAImage::createWithImageDataNoCache(arg0, arg1);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAImage>(cx, (CrossApp::CAImage*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_autogentestbindings_js_CAImage_createWithImageDataNoCache : wrong number of arguments");
    return false;
}

bool js_autogentestbindings_js_CAImage_cutStringByDSize(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 4) {
        std::string arg0;
        CrossApp::DSize arg1;
        const char* arg2 = nullptr;
        unsigned long arg3 = 0;
        ok &= jsval_to_std_string(cx, args.get(0), &arg0);
        ok &= jsval_to_dsize(cx, args.get(1), &arg1);
        std::string arg2_tmp; ok &= jsval_to_std_string(cx, args.get(2), &arg2_tmp); arg2 = arg2_tmp.c_str();
        ok &= jsval_to_ulong(cx, args.get(3), &arg3);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAImage_cutStringByDSize : Error processing arguments");
        int ret = CrossApp::CAImage::cutStringByDSize(arg0, arg1, arg2, arg3);
        jsval jsret = JSVAL_NULL;
        jsret = int32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }
    if (argc == 5) {
        std::string arg0;
        CrossApp::DSize arg1;
        const char* arg2 = nullptr;
        unsigned long arg3 = 0;
        bool arg4;
        ok &= jsval_to_std_string(cx, args.get(0), &arg0);
        ok &= jsval_to_dsize(cx, args.get(1), &arg1);
        std::string arg2_tmp; ok &= jsval_to_std_string(cx, args.get(2), &arg2_tmp); arg2 = arg2_tmp.c_str();
        ok &= jsval_to_ulong(cx, args.get(3), &arg3);
        arg4 = JS::ToBoolean(args.get(4));
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAImage_cutStringByDSize : Error processing arguments");
        int ret = CrossApp::CAImage::cutStringByDSize(arg0, arg1, arg2, arg3, arg4);
        jsval jsret = JSVAL_NULL;
        jsret = int32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }
    if (argc == 6) {
        std::string arg0;
        CrossApp::DSize arg1;
        const char* arg2 = nullptr;
        unsigned long arg3 = 0;
        bool arg4;
        int arg5 = 0;
        ok &= jsval_to_std_string(cx, args.get(0), &arg0);
        ok &= jsval_to_dsize(cx, args.get(1), &arg1);
        std::string arg2_tmp; ok &= jsval_to_std_string(cx, args.get(2), &arg2_tmp); arg2 = arg2_tmp.c_str();
        ok &= jsval_to_ulong(cx, args.get(3), &arg3);
        arg4 = JS::ToBoolean(args.get(4));
        ok &= jsval_to_int32(cx, args.get(5), (int32_t *)&arg5);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAImage_cutStringByDSize : Error processing arguments");
        int ret = CrossApp::CAImage::cutStringByDSize(arg0, arg1, arg2, arg3, arg4, arg5);
        jsval jsret = JSVAL_NULL;
        jsret = int32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }
    if (argc == 7) {
        std::string arg0;
        CrossApp::DSize arg1;
        const char* arg2 = nullptr;
        unsigned long arg3 = 0;
        bool arg4;
        int arg5 = 0;
        bool arg6;
        ok &= jsval_to_std_string(cx, args.get(0), &arg0);
        ok &= jsval_to_dsize(cx, args.get(1), &arg1);
        std::string arg2_tmp; ok &= jsval_to_std_string(cx, args.get(2), &arg2_tmp); arg2 = arg2_tmp.c_str();
        ok &= jsval_to_ulong(cx, args.get(3), &arg3);
        arg4 = JS::ToBoolean(args.get(4));
        ok &= jsval_to_int32(cx, args.get(5), (int32_t *)&arg5);
        arg6 = JS::ToBoolean(args.get(6));
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAImage_cutStringByDSize : Error processing arguments");
        int ret = CrossApp::CAImage::cutStringByDSize(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
        jsval jsret = JSVAL_NULL;
        jsret = int32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }
    if (argc == 8) {
        std::string arg0;
        CrossApp::DSize arg1;
        const char* arg2 = nullptr;
        unsigned long arg3 = 0;
        bool arg4;
        int arg5 = 0;
        bool arg6;
        bool arg7;
        ok &= jsval_to_std_string(cx, args.get(0), &arg0);
        ok &= jsval_to_dsize(cx, args.get(1), &arg1);
        std::string arg2_tmp; ok &= jsval_to_std_string(cx, args.get(2), &arg2_tmp); arg2 = arg2_tmp.c_str();
        ok &= jsval_to_ulong(cx, args.get(3), &arg3);
        arg4 = JS::ToBoolean(args.get(4));
        ok &= jsval_to_int32(cx, args.get(5), (int32_t *)&arg5);
        arg6 = JS::ToBoolean(args.get(6));
        arg7 = JS::ToBoolean(args.get(7));
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAImage_cutStringByDSize : Error processing arguments");
        int ret = CrossApp::CAImage::cutStringByDSize(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
        jsval jsret = JSVAL_NULL;
        jsret = int32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_autogentestbindings_js_CAImage_cutStringByDSize : wrong number of arguments");
    return false;
}

bool js_autogentestbindings_js_CAImage_createWithImageData(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 3) {
        const unsigned char* arg0 = nullptr;
        unsigned long arg1 = 0;
        std::string arg2;
        #pragma warning NO CONVERSION TO NATIVE FOR unsigned char*
		ok = false;
        ok &= jsval_to_ulong(cx, args.get(1), &arg1);
        ok &= jsval_to_std_string(cx, args.get(2), &arg2);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAImage_createWithImageData : Error processing arguments");
        CrossApp::CAImage* ret = CrossApp::CAImage::createWithImageData(arg0, arg1, arg2);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAImage>(cx, (CrossApp::CAImage*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_autogentestbindings_js_CAImage_createWithImageData : wrong number of arguments");
    return false;
}

bool js_autogentestbindings_js_CAImage_getStringHeight(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 4) {
        const char* arg0 = nullptr;
        unsigned long arg1 = 0;
        std::string arg2;
        int arg3 = 0;
        std::string arg0_tmp; ok &= jsval_to_std_string(cx, args.get(0), &arg0_tmp); arg0 = arg0_tmp.c_str();
        ok &= jsval_to_ulong(cx, args.get(1), &arg1);
        ok &= jsval_to_std_string(cx, args.get(2), &arg2);
        ok &= jsval_to_int32(cx, args.get(3), (int32_t *)&arg3);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAImage_getStringHeight : Error processing arguments");
        int ret = CrossApp::CAImage::getStringHeight(arg0, arg1, arg2, arg3);
        jsval jsret = JSVAL_NULL;
        jsret = int32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }
    if (argc == 5) {
        const char* arg0 = nullptr;
        unsigned long arg1 = 0;
        std::string arg2;
        int arg3 = 0;
        int arg4 = 0;
        std::string arg0_tmp; ok &= jsval_to_std_string(cx, args.get(0), &arg0_tmp); arg0 = arg0_tmp.c_str();
        ok &= jsval_to_ulong(cx, args.get(1), &arg1);
        ok &= jsval_to_std_string(cx, args.get(2), &arg2);
        ok &= jsval_to_int32(cx, args.get(3), (int32_t *)&arg3);
        ok &= jsval_to_int32(cx, args.get(4), (int32_t *)&arg4);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAImage_getStringHeight : Error processing arguments");
        int ret = CrossApp::CAImage::getStringHeight(arg0, arg1, arg2, arg3, arg4);
        jsval jsret = JSVAL_NULL;
        jsret = int32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }
    if (argc == 6) {
        const char* arg0 = nullptr;
        unsigned long arg1 = 0;
        std::string arg2;
        int arg3 = 0;
        int arg4 = 0;
        bool arg5;
        std::string arg0_tmp; ok &= jsval_to_std_string(cx, args.get(0), &arg0_tmp); arg0 = arg0_tmp.c_str();
        ok &= jsval_to_ulong(cx, args.get(1), &arg1);
        ok &= jsval_to_std_string(cx, args.get(2), &arg2);
        ok &= jsval_to_int32(cx, args.get(3), (int32_t *)&arg3);
        ok &= jsval_to_int32(cx, args.get(4), (int32_t *)&arg4);
        arg5 = JS::ToBoolean(args.get(5));
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAImage_getStringHeight : Error processing arguments");
        int ret = CrossApp::CAImage::getStringHeight(arg0, arg1, arg2, arg3, arg4, arg5);
        jsval jsret = JSVAL_NULL;
        jsret = int32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_autogentestbindings_js_CAImage_getStringHeight : wrong number of arguments");
    return false;
}

bool js_autogentestbindings_js_CAImage_getStringWidth(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 3) {
        const char* arg0 = nullptr;
        unsigned long arg1 = 0;
        std::string arg2;
        std::string arg0_tmp; ok &= jsval_to_std_string(cx, args.get(0), &arg0_tmp); arg0 = arg0_tmp.c_str();
        ok &= jsval_to_ulong(cx, args.get(1), &arg1);
        ok &= jsval_to_std_string(cx, args.get(2), &arg2);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAImage_getStringWidth : Error processing arguments");
        int ret = CrossApp::CAImage::getStringWidth(arg0, arg1, arg2);
        jsval jsret = JSVAL_NULL;
        jsret = int32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_autogentestbindings_js_CAImage_getStringWidth : wrong number of arguments");
    return false;
}

bool js_autogentestbindings_js_CAImage_generateMipmapsWithImage(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        CrossApp::CAImage* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAImage*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAImage_generateMipmapsWithImage : Error processing arguments");
        CrossApp::CAImage* ret = CrossApp::CAImage::generateMipmapsWithImage(arg0);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAImage>(cx, (CrossApp::CAImage*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_autogentestbindings_js_CAImage_generateMipmapsWithImage : wrong number of arguments");
    return false;
}

bool js_autogentestbindings_js_CAImage_createWithRawDataNoCache(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 4) {
        const unsigned char* arg0 = nullptr;
        CrossApp::CAImage::PixelFormat arg1;
        unsigned int arg2 = 0;
        unsigned int arg3 = 0;
        #pragma warning NO CONVERSION TO NATIVE FOR unsigned char*
		ok = false;
        ok &= jsval_to_int32(cx, args.get(1), (int32_t *)&arg1);
        ok &= jsval_to_uint32(cx, args.get(2), &arg2);
        ok &= jsval_to_uint32(cx, args.get(3), &arg3);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAImage_createWithRawDataNoCache : Error processing arguments");
        CrossApp::CAImage* ret = CrossApp::CAImage::createWithRawDataNoCache(arg0, arg1, arg2, arg3);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAImage>(cx, (CrossApp::CAImage*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_autogentestbindings_js_CAImage_createWithRawDataNoCache : wrong number of arguments");
    return false;
}

bool js_autogentestbindings_js_CAImage_reloadAllImages(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    if (argc == 0) {
        CrossApp::CAImage::reloadAllImages();
        args.rval().setUndefined();
        return true;
    }
    JS_ReportError(cx, "js_autogentestbindings_js_CAImage_reloadAllImages : wrong number of arguments");
    return false;
}

bool js_autogentestbindings_js_CAImage_createWithString(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 7) {
        const char* arg0 = nullptr;
        CrossApp::CAColor4B arg1;
        const char* arg2 = nullptr;
        double arg3 = 0;
        CrossApp::DSize arg4;
        CrossApp::CATextAlignment arg5;
        CrossApp::CAVerticalTextAlignment arg6;
        std::string arg0_tmp; ok &= jsval_to_std_string(cx, args.get(0), &arg0_tmp); arg0 = arg0_tmp.c_str();
        ok &= jsval_to_cacolor4b(cx, args.get(1), &arg1);
        std::string arg2_tmp; ok &= jsval_to_std_string(cx, args.get(2), &arg2_tmp); arg2 = arg2_tmp.c_str();
        ok &= JS::ToNumber( cx, args.get(3), &arg3) && !isnan(arg3);
        ok &= jsval_to_dsize(cx, args.get(4), &arg4);
        ok &= jsval_to_int32(cx, args.get(5), (int32_t *)&arg5);
        ok &= jsval_to_int32(cx, args.get(6), (int32_t *)&arg6);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAImage_createWithString : Error processing arguments");
        CrossApp::CAImage* ret = CrossApp::CAImage::createWithString(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAImage>(cx, (CrossApp::CAImage*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    if (argc == 8) {
        const char* arg0 = nullptr;
        CrossApp::CAColor4B arg1;
        const char* arg2 = nullptr;
        double arg3 = 0;
        CrossApp::DSize arg4;
        CrossApp::CATextAlignment arg5;
        CrossApp::CAVerticalTextAlignment arg6;
        bool arg7;
        std::string arg0_tmp; ok &= jsval_to_std_string(cx, args.get(0), &arg0_tmp); arg0 = arg0_tmp.c_str();
        ok &= jsval_to_cacolor4b(cx, args.get(1), &arg1);
        std::string arg2_tmp; ok &= jsval_to_std_string(cx, args.get(2), &arg2_tmp); arg2 = arg2_tmp.c_str();
        ok &= JS::ToNumber( cx, args.get(3), &arg3) && !isnan(arg3);
        ok &= jsval_to_dsize(cx, args.get(4), &arg4);
        ok &= jsval_to_int32(cx, args.get(5), (int32_t *)&arg5);
        ok &= jsval_to_int32(cx, args.get(6), (int32_t *)&arg6);
        arg7 = JS::ToBoolean(args.get(7));
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAImage_createWithString : Error processing arguments");
        CrossApp::CAImage* ret = CrossApp::CAImage::createWithString(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAImage>(cx, (CrossApp::CAImage*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    if (argc == 9) {
        const char* arg0 = nullptr;
        CrossApp::CAColor4B arg1;
        const char* arg2 = nullptr;
        double arg3 = 0;
        CrossApp::DSize arg4;
        CrossApp::CATextAlignment arg5;
        CrossApp::CAVerticalTextAlignment arg6;
        bool arg7;
        int arg8 = 0;
        std::string arg0_tmp; ok &= jsval_to_std_string(cx, args.get(0), &arg0_tmp); arg0 = arg0_tmp.c_str();
        ok &= jsval_to_cacolor4b(cx, args.get(1), &arg1);
        std::string arg2_tmp; ok &= jsval_to_std_string(cx, args.get(2), &arg2_tmp); arg2 = arg2_tmp.c_str();
        ok &= JS::ToNumber( cx, args.get(3), &arg3) && !isnan(arg3);
        ok &= jsval_to_dsize(cx, args.get(4), &arg4);
        ok &= jsval_to_int32(cx, args.get(5), (int32_t *)&arg5);
        ok &= jsval_to_int32(cx, args.get(6), (int32_t *)&arg6);
        arg7 = JS::ToBoolean(args.get(7));
        ok &= jsval_to_int32(cx, args.get(8), (int32_t *)&arg8);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAImage_createWithString : Error processing arguments");
        CrossApp::CAImage* ret = CrossApp::CAImage::createWithString(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAImage>(cx, (CrossApp::CAImage*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    if (argc == 10) {
        const char* arg0 = nullptr;
        CrossApp::CAColor4B arg1;
        const char* arg2 = nullptr;
        double arg3 = 0;
        CrossApp::DSize arg4;
        CrossApp::CATextAlignment arg5;
        CrossApp::CAVerticalTextAlignment arg6;
        bool arg7;
        int arg8 = 0;
        bool arg9;
        std::string arg0_tmp; ok &= jsval_to_std_string(cx, args.get(0), &arg0_tmp); arg0 = arg0_tmp.c_str();
        ok &= jsval_to_cacolor4b(cx, args.get(1), &arg1);
        std::string arg2_tmp; ok &= jsval_to_std_string(cx, args.get(2), &arg2_tmp); arg2 = arg2_tmp.c_str();
        ok &= JS::ToNumber( cx, args.get(3), &arg3) && !isnan(arg3);
        ok &= jsval_to_dsize(cx, args.get(4), &arg4);
        ok &= jsval_to_int32(cx, args.get(5), (int32_t *)&arg5);
        ok &= jsval_to_int32(cx, args.get(6), (int32_t *)&arg6);
        arg7 = JS::ToBoolean(args.get(7));
        ok &= jsval_to_int32(cx, args.get(8), (int32_t *)&arg8);
        arg9 = JS::ToBoolean(args.get(9));
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAImage_createWithString : Error processing arguments");
        CrossApp::CAImage* ret = CrossApp::CAImage::createWithString(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAImage>(cx, (CrossApp::CAImage*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    if (argc == 11) {
        const char* arg0 = nullptr;
        CrossApp::CAColor4B arg1;
        const char* arg2 = nullptr;
        double arg3 = 0;
        CrossApp::DSize arg4;
        CrossApp::CATextAlignment arg5;
        CrossApp::CAVerticalTextAlignment arg6;
        bool arg7;
        int arg8 = 0;
        bool arg9;
        bool arg10;
        std::string arg0_tmp; ok &= jsval_to_std_string(cx, args.get(0), &arg0_tmp); arg0 = arg0_tmp.c_str();
        ok &= jsval_to_cacolor4b(cx, args.get(1), &arg1);
        std::string arg2_tmp; ok &= jsval_to_std_string(cx, args.get(2), &arg2_tmp); arg2 = arg2_tmp.c_str();
        ok &= JS::ToNumber( cx, args.get(3), &arg3) && !isnan(arg3);
        ok &= jsval_to_dsize(cx, args.get(4), &arg4);
        ok &= jsval_to_int32(cx, args.get(5), (int32_t *)&arg5);
        ok &= jsval_to_int32(cx, args.get(6), (int32_t *)&arg6);
        arg7 = JS::ToBoolean(args.get(7));
        ok &= jsval_to_int32(cx, args.get(8), (int32_t *)&arg8);
        arg9 = JS::ToBoolean(args.get(9));
        arg10 = JS::ToBoolean(args.get(10));
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAImage_createWithString : Error processing arguments");
        CrossApp::CAImage* ret = CrossApp::CAImage::createWithString(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAImage>(cx, (CrossApp::CAImage*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    if (argc == 12) {
        const char* arg0 = nullptr;
        CrossApp::CAColor4B arg1;
        const char* arg2 = nullptr;
        double arg3 = 0;
        CrossApp::DSize arg4;
        CrossApp::CATextAlignment arg5;
        CrossApp::CAVerticalTextAlignment arg6;
        bool arg7;
        int arg8 = 0;
        bool arg9;
        bool arg10;
        bool arg11;
        std::string arg0_tmp; ok &= jsval_to_std_string(cx, args.get(0), &arg0_tmp); arg0 = arg0_tmp.c_str();
        ok &= jsval_to_cacolor4b(cx, args.get(1), &arg1);
        std::string arg2_tmp; ok &= jsval_to_std_string(cx, args.get(2), &arg2_tmp); arg2 = arg2_tmp.c_str();
        ok &= JS::ToNumber( cx, args.get(3), &arg3) && !isnan(arg3);
        ok &= jsval_to_dsize(cx, args.get(4), &arg4);
        ok &= jsval_to_int32(cx, args.get(5), (int32_t *)&arg5);
        ok &= jsval_to_int32(cx, args.get(6), (int32_t *)&arg6);
        arg7 = JS::ToBoolean(args.get(7));
        ok &= jsval_to_int32(cx, args.get(8), (int32_t *)&arg8);
        arg9 = JS::ToBoolean(args.get(9));
        arg10 = JS::ToBoolean(args.get(10));
        arg11 = JS::ToBoolean(args.get(11));
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAImage_createWithString : Error processing arguments");
        CrossApp::CAImage* ret = CrossApp::CAImage::createWithString(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAImage>(cx, (CrossApp::CAImage*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    if (argc == 13) {
        const char* arg0 = nullptr;
        CrossApp::CAColor4B arg1;
        const char* arg2 = nullptr;
        double arg3 = 0;
        CrossApp::DSize arg4;
        CrossApp::CATextAlignment arg5;
        CrossApp::CAVerticalTextAlignment arg6;
        bool arg7;
        int arg8 = 0;
        bool arg9;
        bool arg10;
        bool arg11;
        bool arg12;
        std::string arg0_tmp; ok &= jsval_to_std_string(cx, args.get(0), &arg0_tmp); arg0 = arg0_tmp.c_str();
        ok &= jsval_to_cacolor4b(cx, args.get(1), &arg1);
        std::string arg2_tmp; ok &= jsval_to_std_string(cx, args.get(2), &arg2_tmp); arg2 = arg2_tmp.c_str();
        ok &= JS::ToNumber( cx, args.get(3), &arg3) && !isnan(arg3);
        ok &= jsval_to_dsize(cx, args.get(4), &arg4);
        ok &= jsval_to_int32(cx, args.get(5), (int32_t *)&arg5);
        ok &= jsval_to_int32(cx, args.get(6), (int32_t *)&arg6);
        arg7 = JS::ToBoolean(args.get(7));
        ok &= jsval_to_int32(cx, args.get(8), (int32_t *)&arg8);
        arg9 = JS::ToBoolean(args.get(9));
        arg10 = JS::ToBoolean(args.get(10));
        arg11 = JS::ToBoolean(args.get(11));
        arg12 = JS::ToBoolean(args.get(12));
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAImage_createWithString : Error processing arguments");
        CrossApp::CAImage* ret = CrossApp::CAImage::createWithString(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAImage>(cx, (CrossApp::CAImage*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_autogentestbindings_js_CAImage_createWithString : wrong number of arguments");
    return false;
}

bool js_autogentestbindings_js_CAImage_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    CrossApp::CAImage* cobj = new (std::nothrow) CrossApp::CAImage();
    TypeTest<CrossApp::CAImage> t;
    js_type_class_t *typeClass = nullptr;
    std::string typeName = t.s_name();
    auto typeMapIter = _js_global_type_map.find(typeName);
    CCAssert(typeMapIter != _js_global_type_map.end(), "Can't find the class type!");
    typeClass = typeMapIter->second;
    CCAssert(typeClass, "The value is null.");
    JS::RootedObject proto(cx, typeClass->proto.get());
    JS::RootedObject parent(cx, typeClass->parentProto.get());
    JS::RootedObject obj(cx, JS_NewObject(cx, typeClass->jsclass, proto, parent));
    args.rval().set(OBJECT_TO_JSVAL(obj));
    // link the native object with the javascript object
    js_proxy_t* p = jsb_new_proxy(cobj, obj);
    if (JS_HasProperty(cx, obj, "_ctor", &ok) && ok)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    return true;
}

extern JSObject *jsb_CrossApp_CAObject_prototype;

void js_CrossApp_CAImage_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOGINFO("jsbindings: finalizing JS object %p (CAImage)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::CAImage *nobj = static_cast<CrossApp::CAImage *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
void js_register_autogentestbindings_js_CAImage(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_CAImage_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_CAImage_class->name = "CAImage";
    jsb_CrossApp_CAImage_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_CAImage_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_CAImage_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_CAImage_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_CAImage_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_CAImage_class->resolve = JS_ResolveStub;
    jsb_CrossApp_CAImage_class->convert = JS_ConvertStub;
    jsb_CrossApp_CAImage_class->finalize = js_CrossApp_CAImage_finalize;
    jsb_CrossApp_CAImage_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("getShaderProgram", js_autogentestbindings_js_CAImage_getShaderProgram, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("premultipliedImageData", js_autogentestbindings_js_CAImage_premultipliedImageData, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("initWithETCFile", js_autogentestbindings_js_CAImage_initWithETCFile, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("stringForFormat", js_autogentestbindings_js_CAImage_stringForFormat, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setMaxS", js_autogentestbindings_js_CAImage_setMaxS, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setShaderProgram", js_autogentestbindings_js_CAImage_setShaderProgram, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getMaxS", js_autogentestbindings_js_CAImage_getMaxS, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getAspectRatio", js_autogentestbindings_js_CAImage_getAspectRatio, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("releaseData", js_autogentestbindings_js_CAImage_releaseData, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("hasPremultipliedAlpha", js_autogentestbindings_js_CAImage_hasPremultipliedAlpha, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getPixelsWide", js_autogentestbindings_js_CAImage_getPixelsWide, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getPixelsHigh", js_autogentestbindings_js_CAImage_getPixelsHigh, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setTexParameters", js_autogentestbindings_js_CAImage_setTexParameters, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("freeName", js_autogentestbindings_js_CAImage_freeName, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isTiff", js_autogentestbindings_js_CAImage_isTiff, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("bitsPerPixelForFormat", js_autogentestbindings_js_CAImage_bitsPerPixelForFormat, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getName", js_autogentestbindings_js_CAImage_getName, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getGifImageIndex", js_autogentestbindings_js_CAImage_getGifImageIndex, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setMaxT", js_autogentestbindings_js_CAImage_setMaxT, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("initWithImageFile", js_autogentestbindings_js_CAImage_initWithImageFile, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("drawInRect", js_autogentestbindings_js_CAImage_drawInRect, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getGifImageCounts", js_autogentestbindings_js_CAImage_getGifImageCounts, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getContentSize", js_autogentestbindings_js_CAImage_getContentSize, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getMaxT", js_autogentestbindings_js_CAImage_getMaxT, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("initWithImageFileThreadSafe", js_autogentestbindings_js_CAImage_initWithImageFileThreadSafe, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setAliasTexParameters", js_autogentestbindings_js_CAImage_setAliasTexParameters, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isPng", js_autogentestbindings_js_CAImage_isPng, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setAntiAliasTexParameters", js_autogentestbindings_js_CAImage_setAntiAliasTexParameters, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("generateMipmap", js_autogentestbindings_js_CAImage_generateMipmap, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("saveToFile", js_autogentestbindings_js_CAImage_saveToFile, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("description", js_autogentestbindings_js_CAImage_description, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isMonochrome", js_autogentestbindings_js_CAImage_isMonochrome, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("initWithImageData", js_autogentestbindings_js_CAImage_initWithImageData, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getPixelFormat", js_autogentestbindings_js_CAImage_getPixelFormat, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("hasAlpha", js_autogentestbindings_js_CAImage_hasAlpha, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isEtc", js_autogentestbindings_js_CAImage_isEtc, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isWebp", js_autogentestbindings_js_CAImage_isWebp, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("updateGifImageWithIndex", js_autogentestbindings_js_CAImage_updateGifImageWithIndex, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("copy", js_autogentestbindings_js_CAImage_copy, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getImageFileType", js_autogentestbindings_js_CAImage_getImageFileType, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("drawAtPoint", js_autogentestbindings_js_CAImage_drawAtPoint, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("initWithRawData", js_autogentestbindings_js_CAImage_initWithRawData, 4, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("repremultipliedImageData", js_autogentestbindings_js_CAImage_repremultipliedImageData, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getData", js_autogentestbindings_js_CAImage_getData, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("detectFormat", js_autogentestbindings_js_CAImage_detectFormat, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("hasMipmaps", js_autogentestbindings_js_CAImage_hasMipmaps, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getDataLenght", js_autogentestbindings_js_CAImage_getDataLenght, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isJpg", js_autogentestbindings_js_CAImage_isJpg, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isPvr", js_autogentestbindings_js_CAImage_isPvr, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isGif", js_autogentestbindings_js_CAImage_isGif, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    static JSFunctionSpec st_funcs[] = {
        JS_FN("scaleToNewImageWithImage", js_autogentestbindings_js_CAImage_scaleToNewImageWithImage, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("CC_WHITE_IMAGE", js_autogentestbindings_js_CAImage_CC_WHITE_IMAGE, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getFontHeight", js_autogentestbindings_js_CAImage_getFontHeight, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("create", js_autogentestbindings_js_CAImage_create, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("createWithRawData", js_autogentestbindings_js_CAImage_createWithRawData, 5, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("cutStringByWidth", js_autogentestbindings_js_CAImage_cutStringByWidth, 5, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("createWithImageDataNoCache", js_autogentestbindings_js_CAImage_createWithImageDataNoCache, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("cutStringByDSize", js_autogentestbindings_js_CAImage_cutStringByDSize, 4, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("createWithImageData", js_autogentestbindings_js_CAImage_createWithImageData, 3, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getStringHeight", js_autogentestbindings_js_CAImage_getStringHeight, 4, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getStringWidth", js_autogentestbindings_js_CAImage_getStringWidth, 3, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("generateMipmapsWithImage", js_autogentestbindings_js_CAImage_generateMipmapsWithImage, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("createWithRawDataNoCache", js_autogentestbindings_js_CAImage_createWithRawDataNoCache, 4, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("reloadAllImages", js_autogentestbindings_js_CAImage_reloadAllImages, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("createWithString", js_autogentestbindings_js_CAImage_createWithString, 7, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    jsb_CrossApp_CAImage_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_CAObject_prototype),
        jsb_CrossApp_CAImage_class,
        js_autogentestbindings_js_CAImage_constructor, 0, // constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27 
//  JS_SetPropertyAttributes(cx, global, "CAImage", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::CAImage> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_CAImage_class;
        p->proto = jsb_CrossApp_CAImage_prototype;
        p->parentProto = jsb_CrossApp_CAObject_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
}

JSClass  *jsb_CrossApp_CARGBAProtocol_class;
JSObject *jsb_CrossApp_CARGBAProtocol_prototype;

bool js_autogentestbindings_js_CARGBAProtocol_setColor(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CARGBAProtocol* cobj = (CrossApp::CARGBAProtocol *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CARGBAProtocol_setColor : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAColor4B arg0;
        ok &= jsval_to_cacolor4b(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CARGBAProtocol_setColor : Error processing arguments");
        cobj->setColor(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CARGBAProtocol_setColor : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CARGBAProtocol_getDisplayedColor(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CARGBAProtocol* cobj = (CrossApp::CARGBAProtocol *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CARGBAProtocol_getDisplayedColor : Invalid Native Object");
    if (argc == 0) {
        const CrossApp::CAColor4B& ret = cobj->getDisplayedColor();
        jsval jsret = JSVAL_NULL;
        jsret = cacolor4b_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CARGBAProtocol_getDisplayedColor : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CARGBAProtocol_updateDisplayedAlpha(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CARGBAProtocol* cobj = (CrossApp::CARGBAProtocol *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CARGBAProtocol_updateDisplayedAlpha : Invalid Native Object");
    if (argc == 1) {
        double arg0 = 0;
        ok &= JS::ToNumber( cx, args.get(0), &arg0) && !isnan(arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CARGBAProtocol_updateDisplayedAlpha : Error processing arguments");
        cobj->updateDisplayedAlpha(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CARGBAProtocol_updateDisplayedAlpha : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CARGBAProtocol_getColor(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CARGBAProtocol* cobj = (CrossApp::CARGBAProtocol *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CARGBAProtocol_getColor : Invalid Native Object");
    if (argc == 0) {
        const CrossApp::CAColor4B& ret = cobj->getColor();
        jsval jsret = JSVAL_NULL;
        jsret = cacolor4b_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CARGBAProtocol_getColor : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CARGBAProtocol_setAlpha(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CARGBAProtocol* cobj = (CrossApp::CARGBAProtocol *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CARGBAProtocol_setAlpha : Invalid Native Object");
    if (argc == 1) {
        double arg0 = 0;
        ok &= JS::ToNumber( cx, args.get(0), &arg0) && !isnan(arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CARGBAProtocol_setAlpha : Error processing arguments");
        cobj->setAlpha(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CARGBAProtocol_setAlpha : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CARGBAProtocol_getDisplayedAlpha(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CARGBAProtocol* cobj = (CrossApp::CARGBAProtocol *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CARGBAProtocol_getDisplayedAlpha : Invalid Native Object");
    if (argc == 0) {
        double ret = cobj->getDisplayedAlpha();
        jsval jsret = JSVAL_NULL;
        jsret = DOUBLE_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CARGBAProtocol_getDisplayedAlpha : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CARGBAProtocol_getAlpha(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CARGBAProtocol* cobj = (CrossApp::CARGBAProtocol *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CARGBAProtocol_getAlpha : Invalid Native Object");
    if (argc == 0) {
        double ret = cobj->getAlpha();
        jsval jsret = JSVAL_NULL;
        jsret = DOUBLE_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CARGBAProtocol_getAlpha : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CARGBAProtocol_updateDisplayedColor(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CARGBAProtocol* cobj = (CrossApp::CARGBAProtocol *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CARGBAProtocol_updateDisplayedColor : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAColor4B arg0;
        ok &= jsval_to_cacolor4b(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CARGBAProtocol_updateDisplayedColor : Error processing arguments");
        cobj->updateDisplayedColor(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CARGBAProtocol_updateDisplayedColor : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}

void js_CrossApp_CARGBAProtocol_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOGINFO("jsbindings: finalizing JS object %p (CARGBAProtocol)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::CARGBAProtocol *nobj = static_cast<CrossApp::CARGBAProtocol *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
void js_register_autogentestbindings_js_CARGBAProtocol(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_CARGBAProtocol_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_CARGBAProtocol_class->name = "CARGBAProtocol";
    jsb_CrossApp_CARGBAProtocol_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_CARGBAProtocol_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_CARGBAProtocol_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_CARGBAProtocol_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_CARGBAProtocol_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_CARGBAProtocol_class->resolve = JS_ResolveStub;
    jsb_CrossApp_CARGBAProtocol_class->convert = JS_ConvertStub;
    jsb_CrossApp_CARGBAProtocol_class->finalize = js_CrossApp_CARGBAProtocol_finalize;
    jsb_CrossApp_CARGBAProtocol_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("setColor", js_autogentestbindings_js_CARGBAProtocol_setColor, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getDisplayedColor", js_autogentestbindings_js_CARGBAProtocol_getDisplayedColor, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("updateDisplayedAlpha", js_autogentestbindings_js_CARGBAProtocol_updateDisplayedAlpha, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getColor", js_autogentestbindings_js_CARGBAProtocol_getColor, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setAlpha", js_autogentestbindings_js_CARGBAProtocol_setAlpha, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getDisplayedAlpha", js_autogentestbindings_js_CARGBAProtocol_getDisplayedAlpha, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getAlpha", js_autogentestbindings_js_CARGBAProtocol_getAlpha, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("updateDisplayedColor", js_autogentestbindings_js_CARGBAProtocol_updateDisplayedColor, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    JSFunctionSpec *st_funcs = NULL;

    jsb_CrossApp_CARGBAProtocol_prototype = JS_InitClass(
        cx, global,
        JS::NullPtr(), // parent proto
        jsb_CrossApp_CARGBAProtocol_class,
        dummy_constructor<CrossApp::CARGBAProtocol>, 0, // no constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27 
//  JS_SetPropertyAttributes(cx, global, "CARGBAProtocol", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::CARGBAProtocol> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_CARGBAProtocol_class;
        p->proto = jsb_CrossApp_CARGBAProtocol_prototype;
        p->parentProto = NULL;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
}

JSClass  *jsb_CrossApp_CAImageProtocol_class;
JSObject *jsb_CrossApp_CAImageProtocol_prototype;

bool js_autogentestbindings_js_CAImageProtocol_getImage(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAImageProtocol* cobj = (CrossApp::CAImageProtocol *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAImageProtocol_getImage : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CAImage* ret = cobj->getImage();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAImage>(cx, (CrossApp::CAImage*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAImageProtocol_getImage : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAImageProtocol_getBlendFunc(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAImageProtocol* cobj = (CrossApp::CAImageProtocol *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAImageProtocol_getBlendFunc : Invalid Native Object");
    if (argc == 0) {
        CrossApp::_ccBlendFunc ret = cobj->getBlendFunc();
        jsval jsret = JSVAL_NULL;
        #pragma warning NO CONVERSION FROM NATIVE FOR _ccBlendFunc;
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAImageProtocol_getBlendFunc : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAImageProtocol_setImage(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAImageProtocol* cobj = (CrossApp::CAImageProtocol *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAImageProtocol_setImage : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAImage* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAImage*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAImageProtocol_setImage : Error processing arguments");
        cobj->setImage(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAImageProtocol_setImage : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAImageProtocol_setBlendFunc(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAImageProtocol* cobj = (CrossApp::CAImageProtocol *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAImageProtocol_setBlendFunc : Invalid Native Object");
    if (argc == 1) {
        CrossApp::_ccBlendFunc arg0;
        #pragma warning NO CONVERSION TO NATIVE FOR _ccBlendFunc
		ok = false;
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAImageProtocol_setBlendFunc : Error processing arguments");
        cobj->setBlendFunc(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAImageProtocol_setBlendFunc : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}

void js_CrossApp_CAImageProtocol_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOGINFO("jsbindings: finalizing JS object %p (CAImageProtocol)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::CAImageProtocol *nobj = static_cast<CrossApp::CAImageProtocol *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
void js_register_autogentestbindings_js_CAImageProtocol(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_CAImageProtocol_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_CAImageProtocol_class->name = "CAImageProtocol";
    jsb_CrossApp_CAImageProtocol_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_CAImageProtocol_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_CAImageProtocol_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_CAImageProtocol_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_CAImageProtocol_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_CAImageProtocol_class->resolve = JS_ResolveStub;
    jsb_CrossApp_CAImageProtocol_class->convert = JS_ConvertStub;
    jsb_CrossApp_CAImageProtocol_class->finalize = js_CrossApp_CAImageProtocol_finalize;
    jsb_CrossApp_CAImageProtocol_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("getImage", js_autogentestbindings_js_CAImageProtocol_getImage, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getBlendFunc", js_autogentestbindings_js_CAImageProtocol_getBlendFunc, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setImage", js_autogentestbindings_js_CAImageProtocol_setImage, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setBlendFunc", js_autogentestbindings_js_CAImageProtocol_setBlendFunc, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    JSFunctionSpec *st_funcs = NULL;

    jsb_CrossApp_CAImageProtocol_prototype = JS_InitClass(
        cx, global,
        JS::NullPtr(), // parent proto
        jsb_CrossApp_CAImageProtocol_class,
        dummy_constructor<CrossApp::CAImageProtocol>, 0, // no constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27 
//  JS_SetPropertyAttributes(cx, global, "CAImageProtocol", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::CAImageProtocol> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_CAImageProtocol_class;
        p->proto = jsb_CrossApp_CAImageProtocol_prototype;
        p->parentProto = NULL;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
}

JSClass  *jsb_CrossApp_CCLabelProtocol_class;
JSObject *jsb_CrossApp_CCLabelProtocol_prototype;

bool js_autogentestbindings_js_CCLabelProtocol_setString(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CCLabelProtocol* cobj = (CrossApp::CCLabelProtocol *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CCLabelProtocol_setString : Invalid Native Object");
    if (argc == 1) {
        std::string arg0;
        ok &= jsval_to_std_string(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CCLabelProtocol_setString : Error processing arguments");
        cobj->setString(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CCLabelProtocol_setString : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CCLabelProtocol_getString(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CCLabelProtocol* cobj = (CrossApp::CCLabelProtocol *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CCLabelProtocol_getString : Invalid Native Object");
    if (argc == 0) {
        const std::string& ret = cobj->getString();
        jsval jsret = JSVAL_NULL;
        jsret = std_string_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CCLabelProtocol_getString : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}

void js_CrossApp_CCLabelProtocol_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOGINFO("jsbindings: finalizing JS object %p (CCLabelProtocol)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::CCLabelProtocol *nobj = static_cast<CrossApp::CCLabelProtocol *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
void js_register_autogentestbindings_js_CCLabelProtocol(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_CCLabelProtocol_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_CCLabelProtocol_class->name = "CCLabelProtocol";
    jsb_CrossApp_CCLabelProtocol_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_CCLabelProtocol_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_CCLabelProtocol_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_CCLabelProtocol_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_CCLabelProtocol_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_CCLabelProtocol_class->resolve = JS_ResolveStub;
    jsb_CrossApp_CCLabelProtocol_class->convert = JS_ConvertStub;
    jsb_CrossApp_CCLabelProtocol_class->finalize = js_CrossApp_CCLabelProtocol_finalize;
    jsb_CrossApp_CCLabelProtocol_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("setString", js_autogentestbindings_js_CCLabelProtocol_setString, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getString", js_autogentestbindings_js_CCLabelProtocol_getString, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    JSFunctionSpec *st_funcs = NULL;

    jsb_CrossApp_CCLabelProtocol_prototype = JS_InitClass(
        cx, global,
        JS::NullPtr(), // parent proto
        jsb_CrossApp_CCLabelProtocol_class,
        dummy_constructor<CrossApp::CCLabelProtocol>, 0, // no constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27 
//  JS_SetPropertyAttributes(cx, global, "CCLabelProtocol", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::CCLabelProtocol> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_CCLabelProtocol_class;
        p->proto = jsb_CrossApp_CCLabelProtocol_prototype;
        p->parentProto = NULL;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
}

JSClass  *jsb_CrossApp_CATouch_class;
JSObject *jsb_CrossApp_CATouch_prototype;

bool js_autogentestbindings_js_CATouch_getLocation(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATouch* cobj = (CrossApp::CATouch *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CATouch_getLocation : Invalid Native Object");
    if (argc == 0) {
        CrossApp::DPoint ret = cobj->getLocation();
        jsval jsret = JSVAL_NULL;
        jsret = dpoint_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CATouch_getLocation : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CATouch_getDelta(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATouch* cobj = (CrossApp::CATouch *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CATouch_getDelta : Invalid Native Object");
    if (argc == 0) {
        CrossApp::DPoint ret = cobj->getDelta();
        jsval jsret = JSVAL_NULL;
        jsret = dpoint_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CATouch_getDelta : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CATouch_getStartLocation(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATouch* cobj = (CrossApp::CATouch *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CATouch_getStartLocation : Invalid Native Object");
    if (argc == 0) {
        CrossApp::DPoint ret = cobj->getStartLocation();
        jsval jsret = JSVAL_NULL;
        jsret = dpoint_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CATouch_getStartLocation : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CATouch_getID(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATouch* cobj = (CrossApp::CATouch *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CATouch_getID : Invalid Native Object");
    if (argc == 0) {
        int ret = cobj->getID();
        jsval jsret = JSVAL_NULL;
        jsret = int32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CATouch_getID : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CATouch_isDelta(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATouch* cobj = (CrossApp::CATouch *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CATouch_isDelta : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->isDelta();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CATouch_isDelta : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CATouch_setTouchInfo(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATouch* cobj = (CrossApp::CATouch *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CATouch_setTouchInfo : Invalid Native Object");
    if (argc == 3) {
        int arg0 = 0;
        double arg1 = 0;
        double arg2 = 0;
        ok &= jsval_to_int32(cx, args.get(0), (int32_t *)&arg0);
        ok &= JS::ToNumber( cx, args.get(1), &arg1) && !isnan(arg1);
        ok &= JS::ToNumber( cx, args.get(2), &arg2) && !isnan(arg2);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CATouch_setTouchInfo : Error processing arguments");
        cobj->setTouchInfo(arg0, arg1, arg2);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CATouch_setTouchInfo : wrong number of arguments: %d, was expecting %d", argc, 3);
    return false;
}
bool js_autogentestbindings_js_CATouch_getDeltaFromAToZ(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATouch* cobj = (CrossApp::CATouch *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CATouch_getDeltaFromAToZ : Invalid Native Object");
    if (argc == 0) {
        CrossApp::DPoint ret = cobj->getDeltaFromAToZ();
        jsval jsret = JSVAL_NULL;
        jsret = dpoint_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CATouch_getDeltaFromAToZ : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CATouch_getPreviousLocation(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATouch* cobj = (CrossApp::CATouch *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CATouch_getPreviousLocation : Invalid Native Object");
    if (argc == 0) {
        CrossApp::DPoint ret = cobj->getPreviousLocation();
        jsval jsret = JSVAL_NULL;
        jsret = dpoint_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CATouch_getPreviousLocation : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CATouch_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    CrossApp::CATouch* cobj = new (std::nothrow) CrossApp::CATouch();
    TypeTest<CrossApp::CATouch> t;
    js_type_class_t *typeClass = nullptr;
    std::string typeName = t.s_name();
    auto typeMapIter = _js_global_type_map.find(typeName);
    CCAssert(typeMapIter != _js_global_type_map.end(), "Can't find the class type!");
    typeClass = typeMapIter->second;
    CCAssert(typeClass, "The value is null.");
    JS::RootedObject proto(cx, typeClass->proto.get());
    JS::RootedObject parent(cx, typeClass->parentProto.get());
    JS::RootedObject obj(cx, JS_NewObject(cx, typeClass->jsclass, proto, parent));
    args.rval().set(OBJECT_TO_JSVAL(obj));
    // link the native object with the javascript object
    js_proxy_t* p = jsb_new_proxy(cobj, obj);
    if (JS_HasProperty(cx, obj, "_ctor", &ok) && ok)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    return true;
}

extern JSObject *jsb_CrossApp_CAObject_prototype;

void js_CrossApp_CATouch_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOGINFO("jsbindings: finalizing JS object %p (CATouch)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::CATouch *nobj = static_cast<CrossApp::CATouch *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
void js_register_autogentestbindings_js_CATouch(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_CATouch_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_CATouch_class->name = "CATouch";
    jsb_CrossApp_CATouch_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_CATouch_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_CATouch_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_CATouch_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_CATouch_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_CATouch_class->resolve = JS_ResolveStub;
    jsb_CrossApp_CATouch_class->convert = JS_ConvertStub;
    jsb_CrossApp_CATouch_class->finalize = js_CrossApp_CATouch_finalize;
    jsb_CrossApp_CATouch_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("getLocation", js_autogentestbindings_js_CATouch_getLocation, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getDelta", js_autogentestbindings_js_CATouch_getDelta, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getStartLocation", js_autogentestbindings_js_CATouch_getStartLocation, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getID", js_autogentestbindings_js_CATouch_getID, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isDelta", js_autogentestbindings_js_CATouch_isDelta, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setTouchInfo", js_autogentestbindings_js_CATouch_setTouchInfo, 3, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getDeltaFromAToZ", js_autogentestbindings_js_CATouch_getDeltaFromAToZ, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getPreviousLocation", js_autogentestbindings_js_CATouch_getPreviousLocation, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    JSFunctionSpec *st_funcs = NULL;

    jsb_CrossApp_CATouch_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_CAObject_prototype),
        jsb_CrossApp_CATouch_class,
        js_autogentestbindings_js_CATouch_constructor, 0, // constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27 
//  JS_SetPropertyAttributes(cx, global, "CATouch", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::CATouch> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_CATouch_class;
        p->proto = jsb_CrossApp_CATouch_prototype;
        p->parentProto = jsb_CrossApp_CAObject_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
}

JSClass  *jsb_CrossApp_CAEvent_class;
JSObject *jsb_CrossApp_CAEvent_prototype;

bool js_autogentestbindings_js_CAEvent_getEventType(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAEvent* cobj = (CrossApp::CAEvent *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAEvent_getEventType : Invalid Native Object");
    if (argc == 0) {
        int ret = (int)cobj->getEventType();
        jsval jsret = JSVAL_NULL;
        jsret = int32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAEvent_getEventType : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAEvent_setEventType(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAEvent* cobj = (CrossApp::CAEvent *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAEvent_setEventType : Invalid Native Object");
    if (argc == 1) {
        CrossApp::EventType arg0;
        ok &= jsval_to_int32(cx, args.get(0), (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAEvent_setEventType : Error processing arguments");
        cobj->setEventType(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAEvent_setEventType : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAEvent_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    CrossApp::CAEvent* cobj = new (std::nothrow) CrossApp::CAEvent();
    TypeTest<CrossApp::CAEvent> t;
    js_type_class_t *typeClass = nullptr;
    std::string typeName = t.s_name();
    auto typeMapIter = _js_global_type_map.find(typeName);
    CCAssert(typeMapIter != _js_global_type_map.end(), "Can't find the class type!");
    typeClass = typeMapIter->second;
    CCAssert(typeClass, "The value is null.");
    JS::RootedObject proto(cx, typeClass->proto.get());
    JS::RootedObject parent(cx, typeClass->parentProto.get());
    JS::RootedObject obj(cx, JS_NewObject(cx, typeClass->jsclass, proto, parent));
    args.rval().set(OBJECT_TO_JSVAL(obj));
    // link the native object with the javascript object
    js_proxy_t* p = jsb_new_proxy(cobj, obj);
    if (JS_HasProperty(cx, obj, "_ctor", &ok) && ok)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    return true;
}

extern JSObject *jsb_CrossApp_CAObject_prototype;

void js_CrossApp_CAEvent_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOGINFO("jsbindings: finalizing JS object %p (CAEvent)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::CAEvent *nobj = static_cast<CrossApp::CAEvent *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
void js_register_autogentestbindings_js_CAEvent(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_CAEvent_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_CAEvent_class->name = "CAEvent";
    jsb_CrossApp_CAEvent_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_CAEvent_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_CAEvent_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_CAEvent_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_CAEvent_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_CAEvent_class->resolve = JS_ResolveStub;
    jsb_CrossApp_CAEvent_class->convert = JS_ConvertStub;
    jsb_CrossApp_CAEvent_class->finalize = js_CrossApp_CAEvent_finalize;
    jsb_CrossApp_CAEvent_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("getEventType", js_autogentestbindings_js_CAEvent_getEventType, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setEventType", js_autogentestbindings_js_CAEvent_setEventType, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    JSFunctionSpec *st_funcs = NULL;

    jsb_CrossApp_CAEvent_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_CAObject_prototype),
        jsb_CrossApp_CAEvent_class,
        js_autogentestbindings_js_CAEvent_constructor, 0, // constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27 
//  JS_SetPropertyAttributes(cx, global, "CAEvent", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::CAEvent> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_CAEvent_class;
        p->proto = jsb_CrossApp_CAEvent_prototype;
        p->parentProto = jsb_CrossApp_CAObject_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
}

JSClass  *jsb_CrossApp_CAResponder_class;
JSObject *jsb_CrossApp_CAResponder_prototype;

bool js_autogentestbindings_js_CAResponder_setReachBoundaryHandOverToSuperview(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAResponder* cobj = (CrossApp::CAResponder *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAResponder_setReachBoundaryHandOverToSuperview : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        arg0 = JS::ToBoolean(args.get(0));
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAResponder_setReachBoundaryHandOverToSuperview : Error processing arguments");
        cobj->setReachBoundaryHandOverToSuperview(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAResponder_setReachBoundaryHandOverToSuperview : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAResponder_mouseScrollWheel(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAResponder* cobj = (CrossApp::CAResponder *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAResponder_mouseScrollWheel : Invalid Native Object");
    if (argc == 4) {
        CrossApp::CATouch* arg0 = nullptr;
        double arg1 = 0;
        double arg2 = 0;
        CrossApp::CAEvent* arg3 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CATouch*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        ok &= JS::ToNumber( cx, args.get(1), &arg1) && !isnan(arg1);
        ok &= JS::ToNumber( cx, args.get(2), &arg2) && !isnan(arg2);
        do {
            if (args.get(3).isNull()) { arg3 = nullptr; break; }
            if (!args.get(3).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(3).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg3 = (CrossApp::CAEvent*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg3, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAResponder_mouseScrollWheel : Error processing arguments");
        cobj->mouseScrollWheel(arg0, arg1, arg2, arg3);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAResponder_mouseScrollWheel : wrong number of arguments: %d, was expecting %d", argc, 4);
    return false;
}
bool js_autogentestbindings_js_CAResponder_mouseMovedOutSide(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAResponder* cobj = (CrossApp::CAResponder *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAResponder_mouseMovedOutSide : Invalid Native Object");
    if (argc == 2) {
        CrossApp::CATouch* arg0 = nullptr;
        CrossApp::CAEvent* arg1 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CATouch*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        do {
            if (args.get(1).isNull()) { arg1 = nullptr; break; }
            if (!args.get(1).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(1).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg1 = (CrossApp::CAEvent*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg1, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAResponder_mouseMovedOutSide : Error processing arguments");
        cobj->mouseMovedOutSide(arg0, arg1);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAResponder_mouseMovedOutSide : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_autogentestbindings_js_CAResponder_ccTouchBegan(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAResponder* cobj = (CrossApp::CAResponder *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAResponder_ccTouchBegan : Invalid Native Object");
    if (argc == 2) {
        CrossApp::CATouch* arg0 = nullptr;
        CrossApp::CAEvent* arg1 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CATouch*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        do {
            if (args.get(1).isNull()) { arg1 = nullptr; break; }
            if (!args.get(1).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(1).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg1 = (CrossApp::CAEvent*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg1, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAResponder_ccTouchBegan : Error processing arguments");
        bool ret = cobj->ccTouchBegan(arg0, arg1);
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAResponder_ccTouchBegan : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_autogentestbindings_js_CAResponder_setMouseScrollWheelEnabled(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAResponder* cobj = (CrossApp::CAResponder *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAResponder_setMouseScrollWheelEnabled : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        arg0 = JS::ToBoolean(args.get(0));
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAResponder_setMouseScrollWheelEnabled : Error processing arguments");
        cobj->setMouseScrollWheelEnabled(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAResponder_setMouseScrollWheelEnabled : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAResponder_setMouseMovedEnabled(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAResponder* cobj = (CrossApp::CAResponder *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAResponder_setMouseMovedEnabled : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        arg0 = JS::ToBoolean(args.get(0));
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAResponder_setMouseMovedEnabled : Error processing arguments");
        cobj->setMouseMovedEnabled(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAResponder_setMouseMovedEnabled : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAResponder_isScrollEnabled(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAResponder* cobj = (CrossApp::CAResponder *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAResponder_isScrollEnabled : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->isScrollEnabled();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAResponder_isScrollEnabled : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAResponder_mouseMoved(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAResponder* cobj = (CrossApp::CAResponder *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAResponder_mouseMoved : Invalid Native Object");
    if (argc == 2) {
        CrossApp::CATouch* arg0 = nullptr;
        CrossApp::CAEvent* arg1 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CATouch*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        do {
            if (args.get(1).isNull()) { arg1 = nullptr; break; }
            if (!args.get(1).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(1).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg1 = (CrossApp::CAEvent*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg1, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAResponder_mouseMoved : Error processing arguments");
        cobj->mouseMoved(arg0, arg1);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAResponder_mouseMoved : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_autogentestbindings_js_CAResponder_isHaveNextResponder(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAResponder* cobj = (CrossApp::CAResponder *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAResponder_isHaveNextResponder : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->isHaveNextResponder();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAResponder_isHaveNextResponder : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAResponder_setHorizontalScrollEnabled(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAResponder* cobj = (CrossApp::CAResponder *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAResponder_setHorizontalScrollEnabled : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        arg0 = JS::ToBoolean(args.get(0));
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAResponder_setHorizontalScrollEnabled : Error processing arguments");
        cobj->setHorizontalScrollEnabled(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAResponder_setHorizontalScrollEnabled : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAResponder_isVerticalScrollEnabled(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAResponder* cobj = (CrossApp::CAResponder *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAResponder_isVerticalScrollEnabled : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->isVerticalScrollEnabled();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAResponder_isVerticalScrollEnabled : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAResponder_setPriorityScroll(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAResponder* cobj = (CrossApp::CAResponder *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAResponder_setPriorityScroll : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        arg0 = JS::ToBoolean(args.get(0));
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAResponder_setPriorityScroll : Error processing arguments");
        cobj->setPriorityScroll(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAResponder_setPriorityScroll : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAResponder_isFirstResponder(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAResponder* cobj = (CrossApp::CAResponder *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAResponder_isFirstResponder : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->isFirstResponder();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAResponder_isFirstResponder : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAResponder_isTouchEnabled(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAResponder* cobj = (CrossApp::CAResponder *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAResponder_isTouchEnabled : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->isTouchEnabled();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAResponder_isTouchEnabled : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAResponder_ccTouchEnded(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAResponder* cobj = (CrossApp::CAResponder *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAResponder_ccTouchEnded : Invalid Native Object");
    if (argc == 2) {
        CrossApp::CATouch* arg0 = nullptr;
        CrossApp::CAEvent* arg1 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CATouch*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        do {
            if (args.get(1).isNull()) { arg1 = nullptr; break; }
            if (!args.get(1).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(1).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg1 = (CrossApp::CAEvent*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg1, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAResponder_ccTouchEnded : Error processing arguments");
        cobj->ccTouchEnded(arg0, arg1);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAResponder_ccTouchEnded : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_autogentestbindings_js_CAResponder_ccTouchMoved(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAResponder* cobj = (CrossApp::CAResponder *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAResponder_ccTouchMoved : Invalid Native Object");
    if (argc == 2) {
        CrossApp::CATouch* arg0 = nullptr;
        CrossApp::CAEvent* arg1 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CATouch*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        do {
            if (args.get(1).isNull()) { arg1 = nullptr; break; }
            if (!args.get(1).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(1).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg1 = (CrossApp::CAEvent*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg1, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAResponder_ccTouchMoved : Error processing arguments");
        cobj->ccTouchMoved(arg0, arg1);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAResponder_ccTouchMoved : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_autogentestbindings_js_CAResponder_setTouchEnabled(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAResponder* cobj = (CrossApp::CAResponder *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAResponder_setTouchEnabled : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        arg0 = JS::ToBoolean(args.get(0));
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAResponder_setTouchEnabled : Error processing arguments");
        cobj->setTouchEnabled(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAResponder_setTouchEnabled : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAResponder_setScrollEnabled(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAResponder* cobj = (CrossApp::CAResponder *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAResponder_setScrollEnabled : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        arg0 = JS::ToBoolean(args.get(0));
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAResponder_setScrollEnabled : Error processing arguments");
        cobj->setScrollEnabled(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAResponder_setScrollEnabled : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAResponder_getTouches(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAResponder* cobj = (CrossApp::CAResponder *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAResponder_getTouches : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CAVector<CrossApp::CATouch *> ret = cobj->getTouches();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAVector<CrossApp::CATouch >>(cx, (CrossApp::CAVector<CrossApp::CATouch *>)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAResponder_getTouches : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAResponder_isPriorityScroll(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAResponder* cobj = (CrossApp::CAResponder *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAResponder_isPriorityScroll : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->isPriorityScroll();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAResponder_isPriorityScroll : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAResponder_isHorizontalScrollEnabled(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAResponder* cobj = (CrossApp::CAResponder *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAResponder_isHorizontalScrollEnabled : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->isHorizontalScrollEnabled();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAResponder_isHorizontalScrollEnabled : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAResponder_setVerticalScrollEnabled(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAResponder* cobj = (CrossApp::CAResponder *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAResponder_setVerticalScrollEnabled : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        arg0 = JS::ToBoolean(args.get(0));
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAResponder_setVerticalScrollEnabled : Error processing arguments");
        cobj->setVerticalScrollEnabled(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAResponder_setVerticalScrollEnabled : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAResponder_setHaveNextResponder(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAResponder* cobj = (CrossApp::CAResponder *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAResponder_setHaveNextResponder : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        arg0 = JS::ToBoolean(args.get(0));
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAResponder_setHaveNextResponder : Error processing arguments");
        cobj->setHaveNextResponder(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAResponder_setHaveNextResponder : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAResponder_nextResponder(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAResponder* cobj = (CrossApp::CAResponder *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAResponder_nextResponder : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CAResponder* ret = cobj->nextResponder();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAResponder>(cx, (CrossApp::CAResponder*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAResponder_nextResponder : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAResponder_isReachBoundaryRight(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAResponder* cobj = (CrossApp::CAResponder *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAResponder_isReachBoundaryRight : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->isReachBoundaryRight();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAResponder_isReachBoundaryRight : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAResponder_isReachBoundaryDown(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAResponder* cobj = (CrossApp::CAResponder *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAResponder_isReachBoundaryDown : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->isReachBoundaryDown();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAResponder_isReachBoundaryDown : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAResponder_isTouchEventScrollHandOverToSuperview(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAResponder* cobj = (CrossApp::CAResponder *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAResponder_isTouchEventScrollHandOverToSuperview : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->isTouchEventScrollHandOverToSuperview();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAResponder_isTouchEventScrollHandOverToSuperview : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAResponder_isReachBoundaryHandOverToSuperview(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAResponder* cobj = (CrossApp::CAResponder *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAResponder_isReachBoundaryHandOverToSuperview : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->isReachBoundaryHandOverToSuperview();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAResponder_isReachBoundaryHandOverToSuperview : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAResponder_isReachBoundaryUp(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAResponder* cobj = (CrossApp::CAResponder *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAResponder_isReachBoundaryUp : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->isReachBoundaryUp();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAResponder_isReachBoundaryUp : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAResponder_isReachBoundaryLeft(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAResponder* cobj = (CrossApp::CAResponder *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAResponder_isReachBoundaryLeft : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->isReachBoundaryLeft();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAResponder_isReachBoundaryLeft : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAResponder_getScrollRunning(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAResponder* cobj = (CrossApp::CAResponder *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAResponder_getScrollRunning : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->getScrollRunning();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAResponder_getScrollRunning : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAResponder_isMouseScrollWheelEnabled(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAResponder* cobj = (CrossApp::CAResponder *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAResponder_isMouseScrollWheelEnabled : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->isMouseScrollWheelEnabled();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAResponder_isMouseScrollWheelEnabled : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAResponder_resignFirstResponder(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAResponder* cobj = (CrossApp::CAResponder *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAResponder_resignFirstResponder : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->resignFirstResponder();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAResponder_resignFirstResponder : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAResponder_setTouchEventScrollHandOverToSuperview(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAResponder* cobj = (CrossApp::CAResponder *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAResponder_setTouchEventScrollHandOverToSuperview : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        arg0 = JS::ToBoolean(args.get(0));
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAResponder_setTouchEventScrollHandOverToSuperview : Error processing arguments");
        cobj->setTouchEventScrollHandOverToSuperview(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAResponder_setTouchEventScrollHandOverToSuperview : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAResponder_isMouseMovedEnabled(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAResponder* cobj = (CrossApp::CAResponder *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAResponder_isMouseMovedEnabled : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->isMouseMovedEnabled();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAResponder_isMouseMovedEnabled : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAResponder_ccTouchCancelled(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAResponder* cobj = (CrossApp::CAResponder *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAResponder_ccTouchCancelled : Invalid Native Object");
    if (argc == 2) {
        CrossApp::CATouch* arg0 = nullptr;
        CrossApp::CAEvent* arg1 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CATouch*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        do {
            if (args.get(1).isNull()) { arg1 = nullptr; break; }
            if (!args.get(1).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(1).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg1 = (CrossApp::CAEvent*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg1, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAResponder_ccTouchCancelled : Error processing arguments");
        cobj->ccTouchCancelled(arg0, arg1);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAResponder_ccTouchCancelled : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_autogentestbindings_js_CAResponder_becomeFirstResponder(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAResponder* cobj = (CrossApp::CAResponder *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAResponder_becomeFirstResponder : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->becomeFirstResponder();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAResponder_becomeFirstResponder : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAResponder_getZLevel(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAResponder* cobj = (CrossApp::CAResponder *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAResponder_getZLevel : Invalid Native Object");
    if (argc == 0) {
        unsigned long ret = cobj->getZLevel();
        jsval jsret = JSVAL_NULL;
        jsret = ulong_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAResponder_getZLevel : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAResponder_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    CrossApp::CAResponder* cobj = new (std::nothrow) CrossApp::CAResponder();
    TypeTest<CrossApp::CAResponder> t;
    js_type_class_t *typeClass = nullptr;
    std::string typeName = t.s_name();
    auto typeMapIter = _js_global_type_map.find(typeName);
    CCAssert(typeMapIter != _js_global_type_map.end(), "Can't find the class type!");
    typeClass = typeMapIter->second;
    CCAssert(typeClass, "The value is null.");
    JS::RootedObject proto(cx, typeClass->proto.get());
    JS::RootedObject parent(cx, typeClass->parentProto.get());
    JS::RootedObject obj(cx, JS_NewObject(cx, typeClass->jsclass, proto, parent));
    args.rval().set(OBJECT_TO_JSVAL(obj));
    // link the native object with the javascript object
    js_proxy_t* p = jsb_new_proxy(cobj, obj);
    if (JS_HasProperty(cx, obj, "_ctor", &ok) && ok)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    return true;
}

extern JSObject *jsb_CrossApp_CAObject_prototype;

void js_CrossApp_CAResponder_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOGINFO("jsbindings: finalizing JS object %p (CAResponder)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::CAResponder *nobj = static_cast<CrossApp::CAResponder *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
void js_register_autogentestbindings_js_CAResponder(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_CAResponder_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_CAResponder_class->name = "CAResponder";
    jsb_CrossApp_CAResponder_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_CAResponder_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_CAResponder_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_CAResponder_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_CAResponder_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_CAResponder_class->resolve = JS_ResolveStub;
    jsb_CrossApp_CAResponder_class->convert = JS_ConvertStub;
    jsb_CrossApp_CAResponder_class->finalize = js_CrossApp_CAResponder_finalize;
    jsb_CrossApp_CAResponder_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("setReachBoundaryHandOverToSuperview", js_autogentestbindings_js_CAResponder_setReachBoundaryHandOverToSuperview, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("mouseScrollWheel", js_autogentestbindings_js_CAResponder_mouseScrollWheel, 4, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("mouseMovedOutSide", js_autogentestbindings_js_CAResponder_mouseMovedOutSide, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("ccTouchBegan", js_autogentestbindings_js_CAResponder_ccTouchBegan, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setMouseScrollWheelEnabled", js_autogentestbindings_js_CAResponder_setMouseScrollWheelEnabled, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setMouseMovedEnabled", js_autogentestbindings_js_CAResponder_setMouseMovedEnabled, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isScrollEnabled", js_autogentestbindings_js_CAResponder_isScrollEnabled, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("mouseMoved", js_autogentestbindings_js_CAResponder_mouseMoved, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isHaveNextResponder", js_autogentestbindings_js_CAResponder_isHaveNextResponder, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setHorizontalScrollEnabled", js_autogentestbindings_js_CAResponder_setHorizontalScrollEnabled, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isVerticalScrollEnabled", js_autogentestbindings_js_CAResponder_isVerticalScrollEnabled, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setPriorityScroll", js_autogentestbindings_js_CAResponder_setPriorityScroll, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isFirstResponder", js_autogentestbindings_js_CAResponder_isFirstResponder, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isTouchEnabled", js_autogentestbindings_js_CAResponder_isTouchEnabled, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("ccTouchEnded", js_autogentestbindings_js_CAResponder_ccTouchEnded, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("ccTouchMoved", js_autogentestbindings_js_CAResponder_ccTouchMoved, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setTouchEnabled", js_autogentestbindings_js_CAResponder_setTouchEnabled, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setScrollEnabled", js_autogentestbindings_js_CAResponder_setScrollEnabled, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getTouches", js_autogentestbindings_js_CAResponder_getTouches, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isPriorityScroll", js_autogentestbindings_js_CAResponder_isPriorityScroll, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isHorizontalScrollEnabled", js_autogentestbindings_js_CAResponder_isHorizontalScrollEnabled, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setVerticalScrollEnabled", js_autogentestbindings_js_CAResponder_setVerticalScrollEnabled, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setHaveNextResponder", js_autogentestbindings_js_CAResponder_setHaveNextResponder, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("nextResponder", js_autogentestbindings_js_CAResponder_nextResponder, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isReachBoundaryRight", js_autogentestbindings_js_CAResponder_isReachBoundaryRight, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isReachBoundaryDown", js_autogentestbindings_js_CAResponder_isReachBoundaryDown, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isTouchEventScrollHandOverToSuperview", js_autogentestbindings_js_CAResponder_isTouchEventScrollHandOverToSuperview, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isReachBoundaryHandOverToSuperview", js_autogentestbindings_js_CAResponder_isReachBoundaryHandOverToSuperview, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isReachBoundaryUp", js_autogentestbindings_js_CAResponder_isReachBoundaryUp, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isReachBoundaryLeft", js_autogentestbindings_js_CAResponder_isReachBoundaryLeft, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getScrollRunning", js_autogentestbindings_js_CAResponder_getScrollRunning, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isMouseScrollWheelEnabled", js_autogentestbindings_js_CAResponder_isMouseScrollWheelEnabled, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("resignFirstResponder", js_autogentestbindings_js_CAResponder_resignFirstResponder, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setTouchEventScrollHandOverToSuperview", js_autogentestbindings_js_CAResponder_setTouchEventScrollHandOverToSuperview, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isMouseMovedEnabled", js_autogentestbindings_js_CAResponder_isMouseMovedEnabled, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("ccTouchCancelled", js_autogentestbindings_js_CAResponder_ccTouchCancelled, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("becomeFirstResponder", js_autogentestbindings_js_CAResponder_becomeFirstResponder, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getZLevel", js_autogentestbindings_js_CAResponder_getZLevel, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    JSFunctionSpec *st_funcs = NULL;

    jsb_CrossApp_CAResponder_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_CAObject_prototype),
        jsb_CrossApp_CAResponder_class,
        js_autogentestbindings_js_CAResponder_constructor, 0, // constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27 
//  JS_SetPropertyAttributes(cx, global, "CAResponder", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::CAResponder> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_CAResponder_class;
        p->proto = jsb_CrossApp_CAResponder_prototype;
        p->parentProto = jsb_CrossApp_CAObject_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
}

JSClass  *jsb_CrossApp_CAImageCache_class;
JSObject *jsb_CrossApp_CAImageCache_prototype;

bool js_autogentestbindings_js_CAImageCache_description(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAImageCache* cobj = (CrossApp::CAImageCache *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAImageCache_description : Invalid Native Object");
    if (argc == 0) {
        const char* ret = cobj->description();
        jsval jsret = JSVAL_NULL;
        jsret = c_string_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAImageCache_description : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAImageCache_dumpCachedImageInfo(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAImageCache* cobj = (CrossApp::CAImageCache *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAImageCache_dumpCachedImageInfo : Invalid Native Object");
    if (argc == 0) {
        cobj->dumpCachedImageInfo();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAImageCache_dumpCachedImageInfo : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAImageCache_removeAllImages(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAImageCache* cobj = (CrossApp::CAImageCache *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAImageCache_removeAllImages : Invalid Native Object");
    if (argc == 0) {
        cobj->removeAllImages();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAImageCache_removeAllImages : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAImageCache_removeImage(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAImageCache* cobj = (CrossApp::CAImageCache *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAImageCache_removeImage : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAImage* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAImage*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAImageCache_removeImage : Error processing arguments");
        cobj->removeImage(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAImageCache_removeImage : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAImageCache_removeUnusedImages(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAImageCache* cobj = (CrossApp::CAImageCache *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAImageCache_removeUnusedImages : Invalid Native Object");
    if (argc == 0) {
        cobj->removeUnusedImages();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAImageCache_removeUnusedImages : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAImageCache_addImage(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAImageCache* cobj = (CrossApp::CAImageCache *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAImageCache_addImage : Invalid Native Object");
    if (argc == 1) {
        std::string arg0;
        ok &= jsval_to_std_string(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAImageCache_addImage : Error processing arguments");
        CrossApp::CAImage* ret = cobj->addImage(arg0);
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAImage>(cx, (CrossApp::CAImage*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAImageCache_addImage : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAImageCache_setImageForKey(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAImageCache* cobj = (CrossApp::CAImageCache *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAImageCache_setImageForKey : Invalid Native Object");
    if (argc == 2) {
        CrossApp::CAImage* arg0 = nullptr;
        std::string arg1;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAImage*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        ok &= jsval_to_std_string(cx, args.get(1), &arg1);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAImageCache_setImageForKey : Error processing arguments");
        cobj->setImageForKey(arg0, arg1);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAImageCache_setImageForKey : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_autogentestbindings_js_CAImageCache_removeImageForKey(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAImageCache* cobj = (CrossApp::CAImageCache *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAImageCache_removeImageForKey : Invalid Native Object");
    if (argc == 1) {
        std::string arg0;
        ok &= jsval_to_std_string(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAImageCache_removeImageForKey : Error processing arguments");
        cobj->removeImageForKey(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAImageCache_removeImageForKey : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAImageCache_reloadImage(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAImageCache* cobj = (CrossApp::CAImageCache *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAImageCache_reloadImage : Invalid Native Object");
    if (argc == 1) {
        std::string arg0;
        ok &= jsval_to_std_string(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAImageCache_reloadImage : Error processing arguments");
        bool ret = cobj->reloadImage(arg0);
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAImageCache_reloadImage : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAImageCache_imageForKey(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAImageCache* cobj = (CrossApp::CAImageCache *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAImageCache_imageForKey : Invalid Native Object");
    if (argc == 1) {
        std::string arg0;
        ok &= jsval_to_std_string(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAImageCache_imageForKey : Error processing arguments");
        CrossApp::CAImage* ret = cobj->imageForKey(arg0);
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAImage>(cx, (CrossApp::CAImage*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAImageCache_imageForKey : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAImageCache_sharedImageCache(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    if (argc == 0) {
        CrossApp::CAImageCache* ret = CrossApp::CAImageCache::sharedImageCache();
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAImageCache>(cx, (CrossApp::CAImageCache*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_autogentestbindings_js_CAImageCache_sharedImageCache : wrong number of arguments");
    return false;
}

bool js_autogentestbindings_js_CAImageCache_purgeSharedImageCache(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    if (argc == 0) {
        CrossApp::CAImageCache::purgeSharedImageCache();
        args.rval().setUndefined();
        return true;
    }
    JS_ReportError(cx, "js_autogentestbindings_js_CAImageCache_purgeSharedImageCache : wrong number of arguments");
    return false;
}

bool js_autogentestbindings_js_CAImageCache_reloadAllImages(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    if (argc == 0) {
        CrossApp::CAImageCache::reloadAllImages();
        args.rval().setUndefined();
        return true;
    }
    JS_ReportError(cx, "js_autogentestbindings_js_CAImageCache_reloadAllImages : wrong number of arguments");
    return false;
}

bool js_autogentestbindings_js_CAImageCache_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    CrossApp::CAImageCache* cobj = new (std::nothrow) CrossApp::CAImageCache();
    TypeTest<CrossApp::CAImageCache> t;
    js_type_class_t *typeClass = nullptr;
    std::string typeName = t.s_name();
    auto typeMapIter = _js_global_type_map.find(typeName);
    CCAssert(typeMapIter != _js_global_type_map.end(), "Can't find the class type!");
    typeClass = typeMapIter->second;
    CCAssert(typeClass, "The value is null.");
    JS::RootedObject proto(cx, typeClass->proto.get());
    JS::RootedObject parent(cx, typeClass->parentProto.get());
    JS::RootedObject obj(cx, JS_NewObject(cx, typeClass->jsclass, proto, parent));
    args.rval().set(OBJECT_TO_JSVAL(obj));
    // link the native object with the javascript object
    js_proxy_t* p = jsb_new_proxy(cobj, obj);
    if (JS_HasProperty(cx, obj, "_ctor", &ok) && ok)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    return true;
}

extern JSObject *jsb_CrossApp_CAObject_prototype;

void js_CrossApp_CAImageCache_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOGINFO("jsbindings: finalizing JS object %p (CAImageCache)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::CAImageCache *nobj = static_cast<CrossApp::CAImageCache *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
void js_register_autogentestbindings_js_CAImageCache(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_CAImageCache_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_CAImageCache_class->name = "CAImageCache";
    jsb_CrossApp_CAImageCache_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_CAImageCache_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_CAImageCache_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_CAImageCache_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_CAImageCache_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_CAImageCache_class->resolve = JS_ResolveStub;
    jsb_CrossApp_CAImageCache_class->convert = JS_ConvertStub;
    jsb_CrossApp_CAImageCache_class->finalize = js_CrossApp_CAImageCache_finalize;
    jsb_CrossApp_CAImageCache_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("description", js_autogentestbindings_js_CAImageCache_description, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("dumpCachedImageInfo", js_autogentestbindings_js_CAImageCache_dumpCachedImageInfo, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("removeAllImages", js_autogentestbindings_js_CAImageCache_removeAllImages, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("removeImage", js_autogentestbindings_js_CAImageCache_removeImage, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("removeUnusedImages", js_autogentestbindings_js_CAImageCache_removeUnusedImages, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("addImage", js_autogentestbindings_js_CAImageCache_addImage, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setImageForKey", js_autogentestbindings_js_CAImageCache_setImageForKey, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("removeImageForKey", js_autogentestbindings_js_CAImageCache_removeImageForKey, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("reloadImage", js_autogentestbindings_js_CAImageCache_reloadImage, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("imageForKey", js_autogentestbindings_js_CAImageCache_imageForKey, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    static JSFunctionSpec st_funcs[] = {
        JS_FN("sharedImageCache", js_autogentestbindings_js_CAImageCache_sharedImageCache, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("purgeSharedImageCache", js_autogentestbindings_js_CAImageCache_purgeSharedImageCache, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("reloadAllImages", js_autogentestbindings_js_CAImageCache_reloadAllImages, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    jsb_CrossApp_CAImageCache_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_CAObject_prototype),
        jsb_CrossApp_CAImageCache_class,
        js_autogentestbindings_js_CAImageCache_constructor, 0, // constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27 
//  JS_SetPropertyAttributes(cx, global, "CAImageCache", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::CAImageCache> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_CAImageCache_class;
        p->proto = jsb_CrossApp_CAImageCache_prototype;
        p->parentProto = jsb_CrossApp_CAObject_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
}

JSClass  *jsb_CrossApp_CAImageAtlas_class;
JSObject *jsb_CrossApp_CAImageAtlas_prototype;

bool js_autogentestbindings_js_CAImageAtlas_updateQuad(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAImageAtlas* cobj = (CrossApp::CAImageAtlas *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAImageAtlas_updateQuad : Invalid Native Object");
    if (argc == 2) {
        CrossApp::_ccV3F_C4B_T2F_Quad* arg0 = nullptr;
        unsigned int arg1 = 0;
        #pragma warning NO CONVERSION TO NATIVE FOR _ccV3F_C4B_T2F_Quad*
		ok = false;
        ok &= jsval_to_uint32(cx, args.get(1), &arg1);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAImageAtlas_updateQuad : Error processing arguments");
        cobj->updateQuad(arg0, arg1);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAImageAtlas_updateQuad : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_autogentestbindings_js_CAImageAtlas_initWithImage(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAImageAtlas* cobj = (CrossApp::CAImageAtlas *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAImageAtlas_initWithImage : Invalid Native Object");
    if (argc == 2) {
        CrossApp::CAImage* arg0 = nullptr;
        unsigned int arg1 = 0;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAImage*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        ok &= jsval_to_uint32(cx, args.get(1), &arg1);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAImageAtlas_initWithImage : Error processing arguments");
        bool ret = cobj->initWithImage(arg0, arg1);
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAImageAtlas_initWithImage : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_autogentestbindings_js_CAImageAtlas_moveQuadsFromIndex(JSContext *cx, uint32_t argc, jsval *vp)
{
    bool ok = true;
    CrossApp::CAImageAtlas* cobj = nullptr;

    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx);
    obj = args.thisv().toObjectOrNull();
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    cobj = (CrossApp::CAImageAtlas *)(proxy ? proxy->ptr : nullptr);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAImageAtlas_moveQuadsFromIndex : Invalid Native Object");
    do {
        if (argc == 2) {
            unsigned int arg0 = 0;
            ok &= jsval_to_uint32(cx, args.get(0), &arg0);
            if (!ok) { ok = true; break; }
            unsigned int arg1 = 0;
            ok &= jsval_to_uint32(cx, args.get(1), &arg1);
            if (!ok) { ok = true; break; }
            cobj->moveQuadsFromIndex(arg0, arg1);
            args.rval().setUndefined();
            return true;
        }
    } while(0);

    do {
        if (argc == 3) {
            unsigned int arg0 = 0;
            ok &= jsval_to_uint32(cx, args.get(0), &arg0);
            if (!ok) { ok = true; break; }
            unsigned int arg1 = 0;
            ok &= jsval_to_uint32(cx, args.get(1), &arg1);
            if (!ok) { ok = true; break; }
            unsigned int arg2 = 0;
            ok &= jsval_to_uint32(cx, args.get(2), &arg2);
            if (!ok) { ok = true; break; }
            cobj->moveQuadsFromIndex(arg0, arg1, arg2);
            args.rval().setUndefined();
            return true;
        }
    } while(0);

    JS_ReportError(cx, "js_autogentestbindings_js_CAImageAtlas_moveQuadsFromIndex : wrong number of arguments");
    return false;
}
bool js_autogentestbindings_js_CAImageAtlas_getSerialNumberOfDraws(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAImageAtlas* cobj = (CrossApp::CAImageAtlas *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAImageAtlas_getSerialNumberOfDraws : Invalid Native Object");
    if (argc == 0) {
        unsigned long ret = cobj->getSerialNumberOfDraws();
        jsval jsret = JSVAL_NULL;
        jsret = ulong_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAImageAtlas_getSerialNumberOfDraws : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAImageAtlas_drawQuads(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAImageAtlas* cobj = (CrossApp::CAImageAtlas *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAImageAtlas_drawQuads : Invalid Native Object");
    if (argc == 0) {
        cobj->drawQuads();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAImageAtlas_drawQuads : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAImageAtlas_fillWithEmptyQuadsFromIndex(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAImageAtlas* cobj = (CrossApp::CAImageAtlas *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAImageAtlas_fillWithEmptyQuadsFromIndex : Invalid Native Object");
    if (argc == 2) {
        unsigned int arg0 = 0;
        unsigned int arg1 = 0;
        ok &= jsval_to_uint32(cx, args.get(0), &arg0);
        ok &= jsval_to_uint32(cx, args.get(1), &arg1);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAImageAtlas_fillWithEmptyQuadsFromIndex : Error processing arguments");
        cobj->fillWithEmptyQuadsFromIndex(arg0, arg1);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAImageAtlas_fillWithEmptyQuadsFromIndex : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_autogentestbindings_js_CAImageAtlas_getCapacity(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAImageAtlas* cobj = (CrossApp::CAImageAtlas *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAImageAtlas_getCapacity : Invalid Native Object");
    if (argc == 0) {
        unsigned int ret = cobj->getCapacity();
        jsval jsret = JSVAL_NULL;
        jsret = uint32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAImageAtlas_getCapacity : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAImageAtlas_listenBackToForeground(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAImageAtlas* cobj = (CrossApp::CAImageAtlas *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAImageAtlas_listenBackToForeground : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAObject* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAObject*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAImageAtlas_listenBackToForeground : Error processing arguments");
        cobj->listenBackToForeground(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAImageAtlas_listenBackToForeground : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAImageAtlas_description(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAImageAtlas* cobj = (CrossApp::CAImageAtlas *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAImageAtlas_description : Invalid Native Object");
    if (argc == 0) {
        const char* ret = cobj->description();
        jsval jsret = JSVAL_NULL;
        jsret = c_string_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAImageAtlas_description : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAImageAtlas_setQuads(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAImageAtlas* cobj = (CrossApp::CAImageAtlas *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAImageAtlas_setQuads : Invalid Native Object");
    if (argc == 1) {
        CrossApp::_ccV3F_C4B_T2F_Quad* arg0 = nullptr;
        #pragma warning NO CONVERSION TO NATIVE FOR _ccV3F_C4B_T2F_Quad*
		ok = false;
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAImageAtlas_setQuads : Error processing arguments");
        cobj->setQuads(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAImageAtlas_setQuads : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAImageAtlas_isDirty(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAImageAtlas* cobj = (CrossApp::CAImageAtlas *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAImageAtlas_isDirty : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->isDirty();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAImageAtlas_isDirty : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAImageAtlas_insertQuad(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAImageAtlas* cobj = (CrossApp::CAImageAtlas *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAImageAtlas_insertQuad : Invalid Native Object");
    if (argc == 2) {
        CrossApp::_ccV3F_C4B_T2F_Quad* arg0 = nullptr;
        unsigned int arg1 = 0;
        #pragma warning NO CONVERSION TO NATIVE FOR _ccV3F_C4B_T2F_Quad*
		ok = false;
        ok &= jsval_to_uint32(cx, args.get(1), &arg1);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAImageAtlas_insertQuad : Error processing arguments");
        cobj->insertQuad(arg0, arg1);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAImageAtlas_insertQuad : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_autogentestbindings_js_CAImageAtlas_getTotalQuads(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAImageAtlas* cobj = (CrossApp::CAImageAtlas *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAImageAtlas_getTotalQuads : Invalid Native Object");
    if (argc == 0) {
        unsigned int ret = cobj->getTotalQuads();
        jsval jsret = JSVAL_NULL;
        jsret = uint32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAImageAtlas_getTotalQuads : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAImageAtlas_setDirty(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAImageAtlas* cobj = (CrossApp::CAImageAtlas *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAImageAtlas_setDirty : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        arg0 = JS::ToBoolean(args.get(0));
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAImageAtlas_setDirty : Error processing arguments");
        cobj->setDirty(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAImageAtlas_setDirty : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAImageAtlas_removeQuadsAtIndex(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAImageAtlas* cobj = (CrossApp::CAImageAtlas *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAImageAtlas_removeQuadsAtIndex : Invalid Native Object");
    if (argc == 2) {
        unsigned int arg0 = 0;
        unsigned int arg1 = 0;
        ok &= jsval_to_uint32(cx, args.get(0), &arg0);
        ok &= jsval_to_uint32(cx, args.get(1), &arg1);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAImageAtlas_removeQuadsAtIndex : Error processing arguments");
        cobj->removeQuadsAtIndex(arg0, arg1);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAImageAtlas_removeQuadsAtIndex : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_autogentestbindings_js_CAImageAtlas_removeAllQuads(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAImageAtlas* cobj = (CrossApp::CAImageAtlas *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAImageAtlas_removeAllQuads : Invalid Native Object");
    if (argc == 0) {
        cobj->removeAllQuads();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAImageAtlas_removeAllQuads : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAImageAtlas_getImage(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAImageAtlas* cobj = (CrossApp::CAImageAtlas *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAImageAtlas_getImage : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CAImage* ret = cobj->getImage();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAImage>(cx, (CrossApp::CAImage*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAImageAtlas_getImage : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAImageAtlas_setImage(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAImageAtlas* cobj = (CrossApp::CAImageAtlas *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAImageAtlas_setImage : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAImage* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAImage*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAImageAtlas_setImage : Error processing arguments");
        cobj->setImage(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAImageAtlas_setImage : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAImageAtlas_getQuads(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAImageAtlas* cobj = (CrossApp::CAImageAtlas *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAImageAtlas_getQuads : Invalid Native Object");
    if (argc == 0) {
        CrossApp::_ccV3F_C4B_T2F_Quad* ret = cobj->getQuads();
        jsval jsret = JSVAL_NULL;
        #pragma warning NO CONVERSION FROM NATIVE FOR _ccV3F_C4B_T2F_Quad*;
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAImageAtlas_getQuads : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAImageAtlas_resizeCapacity(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAImageAtlas* cobj = (CrossApp::CAImageAtlas *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAImageAtlas_resizeCapacity : Invalid Native Object");
    if (argc == 1) {
        unsigned int arg0 = 0;
        ok &= jsval_to_uint32(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAImageAtlas_resizeCapacity : Error processing arguments");
        bool ret = cobj->resizeCapacity(arg0);
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAImageAtlas_resizeCapacity : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAImageAtlas_increaseTotalQuadsWith(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAImageAtlas* cobj = (CrossApp::CAImageAtlas *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAImageAtlas_increaseTotalQuadsWith : Invalid Native Object");
    if (argc == 1) {
        unsigned int arg0 = 0;
        ok &= jsval_to_uint32(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAImageAtlas_increaseTotalQuadsWith : Error processing arguments");
        cobj->increaseTotalQuadsWith(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAImageAtlas_increaseTotalQuadsWith : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAImageAtlas_drawNumberOfQuads(JSContext *cx, uint32_t argc, jsval *vp)
{
    bool ok = true;
    CrossApp::CAImageAtlas* cobj = nullptr;

    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx);
    obj = args.thisv().toObjectOrNull();
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    cobj = (CrossApp::CAImageAtlas *)(proxy ? proxy->ptr : nullptr);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAImageAtlas_drawNumberOfQuads : Invalid Native Object");
    do {
        if (argc == 2) {
            unsigned int arg0 = 0;
            ok &= jsval_to_uint32(cx, args.get(0), &arg0);
            if (!ok) { ok = true; break; }
            unsigned int arg1 = 0;
            ok &= jsval_to_uint32(cx, args.get(1), &arg1);
            if (!ok) { ok = true; break; }
            cobj->drawNumberOfQuads(arg0, arg1);
            args.rval().setUndefined();
            return true;
        }
    } while(0);

    do {
        if (argc == 1) {
            unsigned int arg0 = 0;
            ok &= jsval_to_uint32(cx, args.get(0), &arg0);
            if (!ok) { ok = true; break; }
            cobj->drawNumberOfQuads(arg0);
            args.rval().setUndefined();
            return true;
        }
    } while(0);

    JS_ReportError(cx, "js_autogentestbindings_js_CAImageAtlas_drawNumberOfQuads : wrong number of arguments");
    return false;
}
bool js_autogentestbindings_js_CAImageAtlas_insertQuads(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAImageAtlas* cobj = (CrossApp::CAImageAtlas *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAImageAtlas_insertQuads : Invalid Native Object");
    if (argc == 3) {
        CrossApp::_ccV3F_C4B_T2F_Quad* arg0 = nullptr;
        unsigned int arg1 = 0;
        unsigned int arg2 = 0;
        #pragma warning NO CONVERSION TO NATIVE FOR _ccV3F_C4B_T2F_Quad*
		ok = false;
        ok &= jsval_to_uint32(cx, args.get(1), &arg1);
        ok &= jsval_to_uint32(cx, args.get(2), &arg2);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAImageAtlas_insertQuads : Error processing arguments");
        cobj->insertQuads(arg0, arg1, arg2);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAImageAtlas_insertQuads : wrong number of arguments: %d, was expecting %d", argc, 3);
    return false;
}
bool js_autogentestbindings_js_CAImageAtlas_insertQuadFromIndex(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAImageAtlas* cobj = (CrossApp::CAImageAtlas *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAImageAtlas_insertQuadFromIndex : Invalid Native Object");
    if (argc == 2) {
        unsigned int arg0 = 0;
        unsigned int arg1 = 0;
        ok &= jsval_to_uint32(cx, args.get(0), &arg0);
        ok &= jsval_to_uint32(cx, args.get(1), &arg1);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAImageAtlas_insertQuadFromIndex : Error processing arguments");
        cobj->insertQuadFromIndex(arg0, arg1);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAImageAtlas_insertQuadFromIndex : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_autogentestbindings_js_CAImageAtlas_removeQuadAtIndex(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAImageAtlas* cobj = (CrossApp::CAImageAtlas *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAImageAtlas_removeQuadAtIndex : Invalid Native Object");
    if (argc == 1) {
        unsigned int arg0 = 0;
        ok &= jsval_to_uint32(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAImageAtlas_removeQuadAtIndex : Error processing arguments");
        cobj->removeQuadAtIndex(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAImageAtlas_removeQuadAtIndex : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAImageAtlas_createWithImage(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 2) {
        CrossApp::CAImage* arg0 = nullptr;
        unsigned int arg1 = 0;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAImage*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        ok &= jsval_to_uint32(cx, args.get(1), &arg1);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAImageAtlas_createWithImage : Error processing arguments");
        CrossApp::CAImageAtlas* ret = CrossApp::CAImageAtlas::createWithImage(arg0, arg1);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAImageAtlas>(cx, (CrossApp::CAImageAtlas*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_autogentestbindings_js_CAImageAtlas_createWithImage : wrong number of arguments");
    return false;
}

bool js_autogentestbindings_js_CAImageAtlas_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    CrossApp::CAImageAtlas* cobj = new (std::nothrow) CrossApp::CAImageAtlas();
    TypeTest<CrossApp::CAImageAtlas> t;
    js_type_class_t *typeClass = nullptr;
    std::string typeName = t.s_name();
    auto typeMapIter = _js_global_type_map.find(typeName);
    CCAssert(typeMapIter != _js_global_type_map.end(), "Can't find the class type!");
    typeClass = typeMapIter->second;
    CCAssert(typeClass, "The value is null.");
    JS::RootedObject proto(cx, typeClass->proto.get());
    JS::RootedObject parent(cx, typeClass->parentProto.get());
    JS::RootedObject obj(cx, JS_NewObject(cx, typeClass->jsclass, proto, parent));
    args.rval().set(OBJECT_TO_JSVAL(obj));
    // link the native object with the javascript object
    js_proxy_t* p = jsb_new_proxy(cobj, obj);
    if (JS_HasProperty(cx, obj, "_ctor", &ok) && ok)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    return true;
}

extern JSObject *jsb_CrossApp_CAObject_prototype;

void js_CrossApp_CAImageAtlas_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOGINFO("jsbindings: finalizing JS object %p (CAImageAtlas)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::CAImageAtlas *nobj = static_cast<CrossApp::CAImageAtlas *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
void js_register_autogentestbindings_js_CAImageAtlas(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_CAImageAtlas_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_CAImageAtlas_class->name = "CAImageAtlas";
    jsb_CrossApp_CAImageAtlas_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_CAImageAtlas_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_CAImageAtlas_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_CAImageAtlas_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_CAImageAtlas_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_CAImageAtlas_class->resolve = JS_ResolveStub;
    jsb_CrossApp_CAImageAtlas_class->convert = JS_ConvertStub;
    jsb_CrossApp_CAImageAtlas_class->finalize = js_CrossApp_CAImageAtlas_finalize;
    jsb_CrossApp_CAImageAtlas_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("updateQuad", js_autogentestbindings_js_CAImageAtlas_updateQuad, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("initWithImage", js_autogentestbindings_js_CAImageAtlas_initWithImage, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("moveQuadsFromIndex", js_autogentestbindings_js_CAImageAtlas_moveQuadsFromIndex, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getSerialNumberOfDraws", js_autogentestbindings_js_CAImageAtlas_getSerialNumberOfDraws, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("drawQuads", js_autogentestbindings_js_CAImageAtlas_drawQuads, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("fillWithEmptyQuadsFromIndex", js_autogentestbindings_js_CAImageAtlas_fillWithEmptyQuadsFromIndex, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getCapacity", js_autogentestbindings_js_CAImageAtlas_getCapacity, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("listenBackToForeground", js_autogentestbindings_js_CAImageAtlas_listenBackToForeground, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("description", js_autogentestbindings_js_CAImageAtlas_description, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setQuads", js_autogentestbindings_js_CAImageAtlas_setQuads, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isDirty", js_autogentestbindings_js_CAImageAtlas_isDirty, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("insertQuad", js_autogentestbindings_js_CAImageAtlas_insertQuad, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getTotalQuads", js_autogentestbindings_js_CAImageAtlas_getTotalQuads, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setDirty", js_autogentestbindings_js_CAImageAtlas_setDirty, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("removeQuadsAtIndex", js_autogentestbindings_js_CAImageAtlas_removeQuadsAtIndex, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("removeAllQuads", js_autogentestbindings_js_CAImageAtlas_removeAllQuads, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getImage", js_autogentestbindings_js_CAImageAtlas_getImage, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setImage", js_autogentestbindings_js_CAImageAtlas_setImage, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getQuads", js_autogentestbindings_js_CAImageAtlas_getQuads, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("resizeCapacity", js_autogentestbindings_js_CAImageAtlas_resizeCapacity, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("increaseTotalQuadsWith", js_autogentestbindings_js_CAImageAtlas_increaseTotalQuadsWith, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("drawNumberOfQuads", js_autogentestbindings_js_CAImageAtlas_drawNumberOfQuads, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("insertQuads", js_autogentestbindings_js_CAImageAtlas_insertQuads, 3, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("insertQuadFromIndex", js_autogentestbindings_js_CAImageAtlas_insertQuadFromIndex, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("removeQuadAtIndex", js_autogentestbindings_js_CAImageAtlas_removeQuadAtIndex, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    static JSFunctionSpec st_funcs[] = {
        JS_FN("createWithImage", js_autogentestbindings_js_CAImageAtlas_createWithImage, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    jsb_CrossApp_CAImageAtlas_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_CAObject_prototype),
        jsb_CrossApp_CAImageAtlas_class,
        js_autogentestbindings_js_CAImageAtlas_constructor, 0, // constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27 
//  JS_SetPropertyAttributes(cx, global, "CAImageAtlas", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::CAImageAtlas> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_CAImageAtlas_class;
        p->proto = jsb_CrossApp_CAImageAtlas_prototype;
        p->parentProto = jsb_CrossApp_CAObject_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
}

JSClass  *jsb_CrossApp_CAView_class;
JSObject *jsb_CrossApp_CAView_prototype;

bool js_autogentestbindings_js_CAView_removeFromSuperview(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAView* cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAView_removeFromSuperview : Invalid Native Object");
    if (argc == 0) {
        cobj->removeFromSuperview();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAView_removeFromSuperview : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAView_getShaderProgram(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAView* cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAView_getShaderProgram : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CAGLProgram* ret = cobj->getShaderProgram();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAGLProgram>(cx, (CrossApp::CAGLProgram*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAView_getShaderProgram : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAView_setLayout(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAView* cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAView_setLayout : Invalid Native Object");
    if (argc == 1) {
        CrossApp::DRectLayout arg0;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (const CrossApp::DRectLayout&)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAView_setLayout : Error processing arguments");
        cobj->setLayout(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAView_setLayout : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAView_ccTouchEnded(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAView* cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAView_ccTouchEnded : Invalid Native Object");
    if (argc == 2) {
        CrossApp::CATouch* arg0 = nullptr;
        CrossApp::CAEvent* arg1 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CATouch*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        do {
            if (args.get(1).isNull()) { arg1 = nullptr; break; }
            if (!args.get(1).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(1).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg1 = (CrossApp::CAEvent*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg1, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAView_ccTouchEnded : Error processing arguments");
        cobj->ccTouchEnded(arg0, arg1);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAView_ccTouchEnded : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_autogentestbindings_js_CAView_getSuperview(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAView* cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAView_getSuperview : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CAView* ret = cobj->getSuperview();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAView>(cx, (CrossApp::CAView*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAView_getSuperview : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAView_getSubviewByTag(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAView* cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAView_getSubviewByTag : Invalid Native Object");
    if (argc == 1) {
        int arg0 = 0;
        ok &= jsval_to_int32(cx, args.get(0), (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAView_getSubviewByTag : Error processing arguments");
        CrossApp::CAView* ret = cobj->getSubviewByTag(arg0);
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAView>(cx, (CrossApp::CAView*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAView_getSubviewByTag : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAView_sortAllSubviews(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAView* cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAView_sortAllSubviews : Invalid Native Object");
    if (argc == 0) {
        cobj->sortAllSubviews();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAView_sortAllSubviews : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAView_copy(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAView* cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAView_copy : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CAView* ret = cobj->copy();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAView>(cx, (CrossApp::CAView*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAView_copy : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAView_updateDisplayedAlpha(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAView* cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAView_updateDisplayedAlpha : Invalid Native Object");
    if (argc == 1) {
        double arg0 = 0;
        ok &= JS::ToNumber( cx, args.get(0), &arg0) && !isnan(arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAView_updateDisplayedAlpha : Error processing arguments");
        cobj->updateDisplayedAlpha(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAView_updateDisplayedAlpha : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAView_isFlipX(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAView* cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAView_isFlipX : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->isFlipX();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAView_isFlipX : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAView_isFlipY(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAView* cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAView_isFlipY : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->isFlipY();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAView_isFlipY : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAView_init(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAView* cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAView_init : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->init();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAView_init : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAView_ccTouchMoved(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAView* cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAView_ccTouchMoved : Invalid Native Object");
    if (argc == 2) {
        CrossApp::CATouch* arg0 = nullptr;
        CrossApp::CAEvent* arg1 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CATouch*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        do {
            if (args.get(1).isNull()) { arg1 = nullptr; break; }
            if (!args.get(1).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(1).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg1 = (CrossApp::CAEvent*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg1, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAView_ccTouchMoved : Error processing arguments");
        cobj->ccTouchMoved(arg0, arg1);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAView_ccTouchMoved : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_autogentestbindings_js_CAView_setRotation(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAView* cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAView_setRotation : Invalid Native Object");
    if (argc == 1) {
        int arg0 = 0;
        ok &= jsval_to_int32(cx, args.get(0), (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAView_setRotation : Error processing arguments");
        cobj->setRotation(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAView_setRotation : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAView_setZOrder(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAView* cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAView_setZOrder : Invalid Native Object");
    if (argc == 1) {
        int arg0 = 0;
        ok &= jsval_to_int32(cx, args.get(0), (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAView_setZOrder : Error processing arguments");
        cobj->setZOrder(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAView_setZOrder : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAView_ccTouchBegan(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAView* cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAView_ccTouchBegan : Invalid Native Object");
    if (argc == 2) {
        CrossApp::CATouch* arg0 = nullptr;
        CrossApp::CAEvent* arg1 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CATouch*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        do {
            if (args.get(1).isNull()) { arg1 = nullptr; break; }
            if (!args.get(1).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(1).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg1 = (CrossApp::CAEvent*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg1, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAView_ccTouchBegan : Error processing arguments");
        bool ret = cobj->ccTouchBegan(arg0, arg1);
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAView_ccTouchBegan : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_autogentestbindings_js_CAView_setScaleY(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAView* cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAView_setScaleY : Invalid Native Object");
    if (argc == 1) {
        double arg0 = 0;
        ok &= JS::ToNumber( cx, args.get(0), &arg0) && !isnan(arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAView_setScaleY : Error processing arguments");
        cobj->setScaleY(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAView_setScaleY : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAView_setScaleX(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAView* cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAView_setScaleX : Invalid Native Object");
    if (argc == 1) {
        double arg0 = 0;
        ok &= JS::ToNumber( cx, args.get(0), &arg0) && !isnan(arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAView_setScaleX : Error processing arguments");
        cobj->setScaleX(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAView_setScaleX : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAView_getAtlasIndex(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAView* cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAView_getAtlasIndex : Invalid Native Object");
    if (argc == 0) {
        unsigned int ret = cobj->getAtlasIndex();
        jsval jsret = JSVAL_NULL;
        jsret = uint32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAView_getAtlasIndex : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAView_removeSubviewByTag(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAView* cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAView_removeSubviewByTag : Invalid Native Object");
    if (argc == 1) {
        int arg0 = 0;
        ok &= jsval_to_int32(cx, args.get(0), (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAView_removeSubviewByTag : Error processing arguments");
        cobj->removeSubviewByTag(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAView_removeSubviewByTag : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAView_visitEve(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAView* cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAView_visitEve : Invalid Native Object");
    if (argc == 0) {
        cobj->visitEve();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAView_visitEve : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAView_getContentContainer(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAView* cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAView_getContentContainer : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CAContentContainer* ret = cobj->getContentContainer();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAContentContainer>(cx, (CrossApp::CAContentContainer*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAView_getContentContainer : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAView_onExit(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAView* cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAView_onExit : Invalid Native Object");
    if (argc == 0) {
        cobj->onExit();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAView_onExit : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAView_setSuperview(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAView* cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAView_setSuperview : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAView* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAView*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAView_setSuperview : Error processing arguments");
        cobj->setSuperview(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAView_setSuperview : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAView_setRotationX(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAView* cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAView_setRotationX : Invalid Native Object");
    if (argc == 1) {
        int arg0 = 0;
        ok &= jsval_to_int32(cx, args.get(0), (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAView_setRotationX : Error processing arguments");
        cobj->setRotationX(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAView_setRotationX : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAView_getAlpha(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAView* cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAView_getAlpha : Invalid Native Object");
    if (argc == 0) {
        double ret = cobj->getAlpha();
        jsval jsret = JSVAL_NULL;
        jsret = DOUBLE_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAView_getAlpha : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAView_setSkewX(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAView* cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAView_setSkewX : Invalid Native Object");
    if (argc == 1) {
        double arg0 = 0;
        ok &= JS::ToNumber( cx, args.get(0), &arg0) && !isnan(arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAView_setSkewX : Error processing arguments");
        cobj->setSkewX(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAView_setSkewX : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAView_setSkewY(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAView* cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAView_setSkewY : Invalid Native Object");
    if (argc == 1) {
        double arg0 = 0;
        ok &= JS::ToNumber( cx, args.get(0), &arg0) && !isnan(arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAView_setSkewY : Error processing arguments");
        cobj->setSkewY(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAView_setSkewY : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAView_removeSubview(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAView* cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAView_removeSubview : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAView* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAView*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAView_removeSubview : Error processing arguments");
        cobj->removeSubview(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAView_removeSubview : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAView_onEnterTransitionDidFinish(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAView* cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAView_onEnterTransitionDidFinish : Invalid Native Object");
    if (argc == 0) {
        cobj->onEnterTransitionDidFinish();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAView_onEnterTransitionDidFinish : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAView_getLayout(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAView* cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAView_getLayout : Invalid Native Object");
    if (argc == 0) {
        const CrossApp::DRectLayout& ret = cobj->getLayout();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::DRectLayout&>(cx, (CrossApp::DRectLayout&)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAView_getLayout : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAView_setContentContainer(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAView* cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAView_setContentContainer : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAContentContainer* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAContentContainer*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAView_setContentContainer : Error processing arguments");
        cobj->setContentContainer(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAView_setContentContainer : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAView_removeAllSubviews(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAView* cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAView_removeAllSubviews : Invalid Native Object");
    if (argc == 0) {
        cobj->removeAllSubviews();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAView_removeAllSubviews : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAView_convertTouchToNodeSpace(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAView* cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAView_convertTouchToNodeSpace : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CATouch* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CATouch*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAView_convertTouchToNodeSpace : Error processing arguments");
        CrossApp::DPoint ret = cobj->convertTouchToNodeSpace(arg0);
        jsval jsret = JSVAL_NULL;
        jsret = dpoint_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAView_convertTouchToNodeSpace : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAView_reViewlayout(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAView* cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAView_reViewlayout : Invalid Native Object");
    if (argc == 1) {
        CrossApp::DSize arg0;
        ok &= jsval_to_dsize(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAView_reViewlayout : Error processing arguments");
        cobj->reViewlayout(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAView_reViewlayout : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAView_getSubviewByTextTag(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAView* cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAView_getSubviewByTextTag : Invalid Native Object");
    if (argc == 1) {
        std::string arg0;
        ok &= jsval_to_std_string(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAView_getSubviewByTextTag : Error processing arguments");
        CrossApp::CAView* ret = cobj->getSubviewByTextTag(arg0);
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAView>(cx, (CrossApp::CAView*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAView_getSubviewByTextTag : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAView_removeSubviewByTextTag(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAView* cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAView_removeSubviewByTextTag : Invalid Native Object");
    if (argc == 1) {
        std::string arg0;
        ok &= jsval_to_std_string(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAView_removeSubviewByTextTag : Error processing arguments");
        cobj->removeSubviewByTextTag(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAView_removeSubviewByTextTag : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAView_getFrame(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAView* cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAView_getFrame : Invalid Native Object");
    if (argc == 0) {
        CrossApp::DRect ret = cobj->getFrame();
        jsval jsret = JSVAL_NULL;
        jsret = drect_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAView_getFrame : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAView_getImageRect(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAView* cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAView_getImageRect : Invalid Native Object");
    if (argc == 0) {
        const CrossApp::DRect& ret = cobj->getImageRect();
        jsval jsret = JSVAL_NULL;
        jsret = drect_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAView_getImageRect : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAView_initWithLayout(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAView* cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAView_initWithLayout : Invalid Native Object");
    if (argc == 1) {
        CrossApp::DRectLayout arg0;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (const CrossApp::DRectLayout&)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAView_initWithLayout : Error processing arguments");
        bool ret = cobj->initWithLayout(arg0);
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAView_initWithLayout : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAView_setBatch(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAView* cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAView_setBatch : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CABatchView* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CABatchView*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAView_setBatch : Error processing arguments");
        cobj->setBatch(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAView_setBatch : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAView_nodeToParentTransform(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAView* cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAView_nodeToParentTransform : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CATransformation ret = cobj->nodeToParentTransform();
        jsval jsret = JSVAL_NULL;
        #pragma warning NO CONVERSION FROM NATIVE FOR CATransformation;
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAView_nodeToParentTransform : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAView_getLayoutType(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAView* cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAView_getLayoutType : Invalid Native Object");
    if (argc == 0) {
        int ret = cobj->getLayoutType();
        jsval jsret = JSVAL_NULL;
        jsret = int32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAView_getLayoutType : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAView_nextResponder(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAView* cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAView_nextResponder : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CAResponder* ret = cobj->nextResponder();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAResponder>(cx, (CrossApp::CAResponder*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAView_nextResponder : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAView_getFrameOrigin(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAView* cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAView_getFrameOrigin : Invalid Native Object");
    if (argc == 0) {
        CrossApp::DPoint ret = cobj->getFrameOrigin();
        jsval jsret = JSVAL_NULL;
        jsret = dpoint_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAView_getFrameOrigin : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAView_setDirty(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAView* cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAView_setDirty : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        arg0 = JS::ToBoolean(args.get(0));
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAView_setDirty : Error processing arguments");
        cobj->setDirty(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAView_setDirty : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAView_setGLServerState(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAView* cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAView_setGLServerState : Invalid Native Object");
    if (argc == 1) {
        CrossApp::ccGLServerState arg0;
        ok &= jsval_to_int32(cx, args.get(0), (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAView_setGLServerState : Error processing arguments");
        cobj->setGLServerState(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAView_setGLServerState : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAView_isImageRectRotated(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAView* cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAView_isImageRectRotated : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->isImageRectRotated();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAView_isImageRectRotated : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAView_getDisplayedColor(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAView* cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAView_getDisplayedColor : Invalid Native Object");
    if (argc == 0) {
        const CrossApp::CAColor4B& ret = cobj->getDisplayedColor();
        jsval jsret = JSVAL_NULL;
        jsret = cacolor4b_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAView_getDisplayedColor : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAView_getAnchorPoint(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAView* cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAView_getAnchorPoint : Invalid Native Object");
    if (argc == 0) {
        const CrossApp::DPoint& ret = cobj->getAnchorPoint();
        jsval jsret = JSVAL_NULL;
        jsret = dpoint_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAView_getAnchorPoint : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAView_updateTransform(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAView* cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAView_updateTransform : Invalid Native Object");
    if (argc == 0) {
        cobj->updateTransform();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAView_updateTransform : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAView_getAnchorPointInPoints(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAView* cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAView_getAnchorPointInPoints : Invalid Native Object");
    if (argc == 0) {
        const CrossApp::DPoint& ret = cobj->getAnchorPointInPoints();
        jsval jsret = JSVAL_NULL;
        jsret = dpoint_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAView_getAnchorPointInPoints : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAView_onEnter(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAView* cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAView_onEnter : Invalid Native Object");
    if (argc == 0) {
        cobj->onEnter();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAView_onEnter : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAView_setAtlasIndex(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAView* cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAView_setAtlasIndex : Invalid Native Object");
    if (argc == 1) {
        unsigned int arg0 = 0;
        ok &= jsval_to_uint32(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAView_setAtlasIndex : Error processing arguments");
        cobj->setAtlasIndex(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAView_setAtlasIndex : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAView_getCenterOrigin(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAView* cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAView_getCenterOrigin : Invalid Native Object");
    if (argc == 0) {
        CrossApp::DPoint ret = cobj->getCenterOrigin();
        jsval jsret = JSVAL_NULL;
        jsret = dpoint_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAView_getCenterOrigin : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAView_setShaderProgram(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAView* cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAView_setShaderProgram : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAGLProgram* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAGLProgram*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAView_setShaderProgram : Error processing arguments");
        cobj->setShaderProgram(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAView_setShaderProgram : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAView_initWithCenter(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAView* cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAView_initWithCenter : Invalid Native Object");
    if (argc == 1) {
        CrossApp::DRect arg0;
        ok &= jsval_to_drect(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAView_initWithCenter : Error processing arguments");
        bool ret = cobj->initWithCenter(arg0);
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAView_initWithCenter : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAView_getRotation(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAView* cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAView_getRotation : Invalid Native Object");
    if (argc == 0) {
        int ret = cobj->getRotation();
        jsval jsret = JSVAL_NULL;
        jsret = int32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAView_getRotation : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAView_getZOrder(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAView* cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAView_getZOrder : Invalid Native Object");
    if (argc == 0) {
        int ret = cobj->getZOrder();
        jsval jsret = JSVAL_NULL;
        jsret = int32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAView_getZOrder : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAView_getSubviewsCount(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAView* cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAView_getSubviewsCount : Invalid Native Object");
    if (argc == 0) {
        unsigned int ret = cobj->getSubviewsCount();
        jsval jsret = JSVAL_NULL;
        jsret = uint32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAView_getSubviewsCount : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAView_visit(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAView* cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAView_visit : Invalid Native Object");
    if (argc == 0) {
        cobj->visit();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAView_visit : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAView_transform(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAView* cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAView_transform : Invalid Native Object");
    if (argc == 0) {
        cobj->transform();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAView_transform : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAView_setVertexZ(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAView* cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAView_setVertexZ : Invalid Native Object");
    if (argc == 1) {
        double arg0 = 0;
        ok &= JS::ToNumber( cx, args.get(0), &arg0) && !isnan(arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAView_setVertexZ : Error processing arguments");
        cobj->setVertexZ(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAView_setVertexZ : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAView_getSkewX(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAView* cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAView_getSkewX : Invalid Native Object");
    if (argc == 0) {
        double ret = cobj->getSkewX();
        jsval jsret = JSVAL_NULL;
        jsret = DOUBLE_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAView_getSkewX : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAView_getSkewY(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAView* cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAView_getSkewY : Invalid Native Object");
    if (argc == 0) {
        double ret = cobj->getSkewY();
        jsval jsret = JSVAL_NULL;
        jsret = DOUBLE_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAView_getSkewY : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAView_setRotationY(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAView* cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAView_setRotationY : Invalid Native Object");
    if (argc == 1) {
        int arg0 = 0;
        ok &= jsval_to_int32(cx, args.get(0), (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAView_setRotationY : Error processing arguments");
        cobj->setRotationY(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAView_setRotationY : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAView_insertSubview(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAView* cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAView_insertSubview : Invalid Native Object");
    if (argc == 2) {
        CrossApp::CAView* arg0 = nullptr;
        int arg1 = 0;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAView*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        ok &= jsval_to_int32(cx, args.get(1), (int32_t *)&arg1);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAView_insertSubview : Error processing arguments");
        cobj->insertSubview(arg0, arg1);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAView_insertSubview : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_autogentestbindings_js_CAView_setFlipY(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAView* cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAView_setFlipY : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        arg0 = JS::ToBoolean(args.get(0));
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAView_setFlipY : Error processing arguments");
        cobj->setFlipY(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAView_setFlipY : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAView_setFlipX(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAView* cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAView_setFlipX : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        arg0 = JS::ToBoolean(args.get(0));
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAView_setFlipX : Error processing arguments");
        cobj->setFlipX(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAView_setFlipX : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAView_getCenter(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAView* cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAView_getCenter : Invalid Native Object");
    if (argc == 0) {
        CrossApp::DRect ret = cobj->getCenter();
        jsval jsret = JSVAL_NULL;
        jsret = drect_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAView_getCenter : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAView_isDirty(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAView* cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAView_isDirty : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->isDirty();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAView_isDirty : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAView_getRotationX(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAView* cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAView_getRotationX : Invalid Native Object");
    if (argc == 0) {
        int ret = cobj->getRotationX();
        jsval jsret = JSVAL_NULL;
        jsret = int32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAView_getRotationX : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAView_getOrderOfArrival(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAView* cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAView_getOrderOfArrival : Invalid Native Object");
    if (argc == 0) {
        unsigned int ret = cobj->getOrderOfArrival();
        jsval jsret = JSVAL_NULL;
        jsret = uint32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAView_getOrderOfArrival : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAView_getRotationY(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAView* cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAView_getRotationY : Invalid Native Object");
    if (argc == 0) {
        int ret = cobj->getRotationY();
        jsval jsret = JSVAL_NULL;
        jsret = int32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAView_getRotationY : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAView_isRunning(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAView* cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAView_isRunning : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->isRunning();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAView_isRunning : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAView_setBlendFunc(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAView* cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAView_setBlendFunc : Invalid Native Object");
    if (argc == 1) {
        CrossApp::_ccBlendFunc arg0;
        #pragma warning NO CONVERSION TO NATIVE FOR _ccBlendFunc
		ok = false;
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAView_setBlendFunc : Error processing arguments");
        cobj->setBlendFunc(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAView_setBlendFunc : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAView_getQuad(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAView* cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAView_getQuad : Invalid Native Object");
    if (argc == 0) {
        CrossApp::_ccV3F_C4B_T2F_Quad ret = cobj->getQuad();
        jsval jsret = JSVAL_NULL;
        #pragma warning NO CONVERSION FROM NATIVE FOR _ccV3F_C4B_T2F_Quad;
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAView_getQuad : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAView_setVisible(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAView* cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAView_setVisible : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        arg0 = JS::ToBoolean(args.get(0));
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAView_setVisible : Error processing arguments");
        cobj->setVisible(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAView_setVisible : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAView_reorderSubview(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAView* cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAView_reorderSubview : Invalid Native Object");
    if (argc == 2) {
        CrossApp::CAView* arg0 = nullptr;
        int arg1 = 0;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAView*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        ok &= jsval_to_int32(cx, args.get(1), (int32_t *)&arg1);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAView_reorderSubview : Error processing arguments");
        cobj->reorderSubview(arg0, arg1);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAView_reorderSubview : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_autogentestbindings_js_CAView_getVertexZ(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAView* cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAView_getVertexZ : Invalid Native Object");
    if (argc == 0) {
        double ret = cobj->getVertexZ();
        jsval jsret = JSVAL_NULL;
        jsret = DOUBLE_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAView_getVertexZ : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAView__setZOrder(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAView* cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAView__setZOrder : Invalid Native Object");
    if (argc == 1) {
        int arg0 = 0;
        ok &= jsval_to_int32(cx, args.get(0), (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAView__setZOrder : Error processing arguments");
        cobj->_setZOrder(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAView__setZOrder : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAView_setScale(JSContext *cx, uint32_t argc, jsval *vp)
{
    bool ok = true;
    CrossApp::CAView* cobj = nullptr;

    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx);
    obj = args.thisv().toObjectOrNull();
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : nullptr);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAView_setScale : Invalid Native Object");
    do {
        if (argc == 2) {
            double arg0 = 0;
            ok &= JS::ToNumber( cx, args.get(0), &arg0) && !isnan(arg0);
            if (!ok) { ok = true; break; }
            double arg1 = 0;
            ok &= JS::ToNumber( cx, args.get(1), &arg1) && !isnan(arg1);
            if (!ok) { ok = true; break; }
            cobj->setScale(arg0, arg1);
            args.rval().setUndefined();
            return true;
        }
    } while(0);

    do {
        if (argc == 1) {
            double arg0 = 0;
            ok &= JS::ToNumber( cx, args.get(0), &arg0) && !isnan(arg0);
            if (!ok) { ok = true; break; }
            cobj->setScale(arg0);
            args.rval().setUndefined();
            return true;
        }
    } while(0);

    JS_ReportError(cx, "js_autogentestbindings_js_CAView_setScale : wrong number of arguments");
    return false;
}
bool js_autogentestbindings_js_CAView_isDisplayRange(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAView* cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAView_isDisplayRange : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->isDisplayRange();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAView_isDisplayRange : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAView_getDisplayedAlpha(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAView* cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAView_getDisplayedAlpha : Invalid Native Object");
    if (argc == 0) {
        double ret = cobj->getDisplayedAlpha();
        jsval jsret = JSVAL_NULL;
        jsret = DOUBLE_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAView_getDisplayedAlpha : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAView_setOrderOfArrival(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAView* cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAView_setOrderOfArrival : Invalid Native Object");
    if (argc == 1) {
        unsigned int arg0 = 0;
        ok &= jsval_to_uint32(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAView_setOrderOfArrival : Error processing arguments");
        cobj->setOrderOfArrival(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAView_setOrderOfArrival : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAView_getImageAtlas(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAView* cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAView_getImageAtlas : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CAImageAtlas* ret = cobj->getImageAtlas();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAImageAtlas>(cx, (CrossApp::CAImageAtlas*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAView_getImageAtlas : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAView_ccTouchCancelled(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAView* cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAView_ccTouchCancelled : Invalid Native Object");
    if (argc == 2) {
        CrossApp::CATouch* arg0 = nullptr;
        CrossApp::CAEvent* arg1 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CATouch*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        do {
            if (args.get(1).isNull()) { arg1 = nullptr; break; }
            if (!args.get(1).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(1).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg1 = (CrossApp::CAEvent*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg1, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAView_ccTouchCancelled : Error processing arguments");
        cobj->ccTouchCancelled(arg0, arg1);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAView_ccTouchCancelled : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_autogentestbindings_js_CAView_getScaleY(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAView* cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAView_getScaleY : Invalid Native Object");
    if (argc == 0) {
        double ret = cobj->getScaleY();
        jsval jsret = JSVAL_NULL;
        jsret = DOUBLE_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAView_getScaleY : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAView_getScaleX(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAView* cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAView_getScaleX : Invalid Native Object");
    if (argc == 0) {
        double ret = cobj->getScaleX();
        jsval jsret = JSVAL_NULL;
        jsret = DOUBLE_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAView_getScaleX : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAView_addSubview(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAView* cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAView_addSubview : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAView* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAView*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAView_addSubview : Error processing arguments");
        cobj->addSubview(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAView_addSubview : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAView_initWithFrame(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAView* cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAView_initWithFrame : Invalid Native Object");
    if (argc == 1) {
        CrossApp::DRect arg0;
        ok &= jsval_to_drect(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAView_initWithFrame : Error processing arguments");
        bool ret = cobj->initWithFrame(arg0);
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAView_initWithFrame : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAView_setDisplayRange(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAView* cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAView_setDisplayRange : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        arg0 = JS::ToBoolean(args.get(0));
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAView_setDisplayRange : Error processing arguments");
        cobj->setDisplayRange(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAView_setDisplayRange : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAView_setAlpha(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAView* cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAView_setAlpha : Invalid Native Object");
    if (argc == 1) {
        double arg0 = 0;
        ok &= JS::ToNumber( cx, args.get(0), &arg0) && !isnan(arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAView_setAlpha : Error processing arguments");
        cobj->setAlpha(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAView_setAlpha : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAView_getSubviews(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAView* cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAView_getSubviews : Invalid Native Object");
    if (argc == 0) {
        const CrossApp::CAVector<CrossApp::CAView *>& ret = cobj->getSubviews();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAVector<CrossApp::CAView >&>(cx, (CrossApp::CAVector<CrossApp::CAView *>&)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAView_getSubviews : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAView_draw(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAView* cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAView_draw : Invalid Native Object");
    if (argc == 0) {
        cobj->draw();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAView_draw : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAView_getBlendFunc(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAView* cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAView_getBlendFunc : Invalid Native Object");
    if (argc == 0) {
        CrossApp::_ccBlendFunc ret = cobj->getBlendFunc();
        jsval jsret = JSVAL_NULL;
        #pragma warning NO CONVERSION FROM NATIVE FOR _ccBlendFunc;
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAView_getBlendFunc : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAView_transformAncestors(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAView* cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAView_transformAncestors : Invalid Native Object");
    if (argc == 0) {
        cobj->transformAncestors();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAView_transformAncestors : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAView_description(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAView* cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAView_description : Invalid Native Object");
    if (argc == 0) {
        const char* ret = cobj->description();
        jsval jsret = JSVAL_NULL;
        jsret = c_string_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAView_description : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAView_convertTouchToNodeSpaceAR(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAView* cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAView_convertTouchToNodeSpaceAR : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CATouch* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CATouch*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAView_convertTouchToNodeSpaceAR : Error processing arguments");
        CrossApp::DPoint ret = cobj->convertTouchToNodeSpaceAR(arg0);
        jsval jsret = JSVAL_NULL;
        jsret = dpoint_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAView_convertTouchToNodeSpaceAR : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAView_isVisible(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAView* cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAView_isVisible : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->isVisible();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAView_isVisible : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAView_update(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAView* cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAView_update : Invalid Native Object");
    if (argc == 1) {
        double arg0 = 0;
        ok &= JS::ToNumber( cx, args.get(0), &arg0) && !isnan(arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAView_update : Error processing arguments");
        cobj->update(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAView_update : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAView_onExitTransitionDidStart(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAView* cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAView_onExitTransitionDidStart : Invalid Native Object");
    if (argc == 0) {
        cobj->onExitTransitionDidStart();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAView_onExitTransitionDidStart : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAView_getBounds(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAView* cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAView_getBounds : Invalid Native Object");
    if (argc == 0) {
        CrossApp::DRect ret = cobj->getBounds();
        jsval jsret = JSVAL_NULL;
        jsret = drect_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAView_getBounds : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAView_getScale(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAView* cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAView_getScale : Invalid Native Object");
    if (argc == 0) {
        double ret = cobj->getScale();
        jsval jsret = JSVAL_NULL;
        jsret = DOUBLE_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAView_getScale : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAView_setImageAtlas(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAView* cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAView_setImageAtlas : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAImageAtlas* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAImageAtlas*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAView_setImageAtlas : Error processing arguments");
        cobj->setImageAtlas(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAView_setImageAtlas : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAView_initWithColor(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAView* cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAView_initWithColor : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAColor4B arg0;
        ok &= jsval_to_cacolor4b(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAView_initWithColor : Error processing arguments");
        bool ret = cobj->initWithColor(arg0);
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAView_initWithColor : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAView_getCamera(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAView* cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAView_getCamera : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CACamera* ret = cobj->getCamera();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CACamera>(cx, (CrossApp::CACamera*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAView_getCamera : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAView_getBatch(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAView* cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAView_getBatch : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CABatchView* ret = cobj->getBatch();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CABatchView>(cx, (CrossApp::CABatchView*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAView_getBatch : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAView_getColor(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAView* cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAView_getColor : Invalid Native Object");
    if (argc == 0) {
        const CrossApp::CAColor4B& ret = cobj->getColor();
        jsval jsret = JSVAL_NULL;
        jsret = cacolor4b_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAView_getColor : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAView_getGLServerState(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAView* cobj = (CrossApp::CAView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAView_getGLServerState : Invalid Native Object");
    if (argc == 0) {
        int ret = (int)cobj->getGLServerState();
        jsval jsret = JSVAL_NULL;
        jsret = int32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAView_getGLServerState : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAView_create(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    if (argc == 0) {
        CrossApp::CAView* ret = CrossApp::CAView::create();
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAView>(cx, (CrossApp::CAView*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_autogentestbindings_js_CAView_create : wrong number of arguments");
    return false;
}

bool js_autogentestbindings_js_CAView_createWithFrame(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    
    do {
        if (argc == 2) {
            CrossApp::DRect arg0;
            ok &= jsval_to_drect(cx, args.get(0), &arg0);
            if (!ok) { ok = true; break; }
            CrossApp::CAColor4B arg1;
            ok &= jsval_to_cacolor4b(cx, args.get(1), &arg1);
            if (!ok) { ok = true; break; }
            CrossApp::CAView* ret = CrossApp::CAView::createWithFrame(arg0, arg1);
            jsval jsret = JSVAL_NULL;
            do {
                if (ret) {
                    js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAView>(cx, (CrossApp::CAView*)ret);
                    jsret = OBJECT_TO_JSVAL(jsProxy->obj);
                } else {
                    jsret = JSVAL_NULL;
                }
            } while (0);
            args.rval().set(jsret);
            return true;
        }
    } while (0);
    
    do {
        if (argc == 1) {
            CrossApp::DRect arg0;
            ok &= jsval_to_drect(cx, args.get(0), &arg0);
            if (!ok) { ok = true; break; }
            CrossApp::CAView* ret = CrossApp::CAView::createWithFrame(arg0);
            jsval jsret = JSVAL_NULL;
            do {
                if (ret) {
                    js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAView>(cx, (CrossApp::CAView*)ret);
                    jsret = OBJECT_TO_JSVAL(jsProxy->obj);
                } else {
                    jsret = JSVAL_NULL;
                }
            } while (0);
            args.rval().set(jsret);
            return true;
        }
    } while (0);
    JS_ReportError(cx, "js_autogentestbindings_js_CAView_createWithFrame : wrong number of arguments");
    return false;
}
bool js_autogentestbindings_js_CAView_createWithColor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        CrossApp::CAColor4B arg0;
        ok &= jsval_to_cacolor4b(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAView_createWithColor : Error processing arguments");
        CrossApp::CAView* ret = CrossApp::CAView::createWithColor(arg0);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAView>(cx, (CrossApp::CAView*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_autogentestbindings_js_CAView_createWithColor : wrong number of arguments");
    return false;
}

bool js_autogentestbindings_js_CAView_createWithLayout(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    
    do {
        if (argc == 2) {
            CrossApp::DRectLayout arg0;
            do {
                if (args.get(0).isNull()) { arg0 = nullptr; break; }
                if (!args.get(0).isObject()) { ok = false; break; }
                js_proxy_t *jsProxy;
                JSObject *tmpObj = args.get(0).toObjectOrNull();
                jsProxy = jsb_get_js_proxy(tmpObj);
                arg0 = (const CrossApp::DRectLayout&)(jsProxy ? jsProxy->ptr : NULL);
                JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
            } while (0);
            if (!ok) { ok = true; break; }
            CrossApp::CAColor4B arg1;
            ok &= jsval_to_cacolor4b(cx, args.get(1), &arg1);
            if (!ok) { ok = true; break; }
            CrossApp::CAView* ret = CrossApp::CAView::createWithLayout(arg0, arg1);
            jsval jsret = JSVAL_NULL;
            do {
                if (ret) {
                    js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAView>(cx, (CrossApp::CAView*)ret);
                    jsret = OBJECT_TO_JSVAL(jsProxy->obj);
                } else {
                    jsret = JSVAL_NULL;
                }
            } while (0);
            args.rval().set(jsret);
            return true;
        }
    } while (0);
    
    do {
        if (argc == 1) {
            CrossApp::DRectLayout arg0;
            do {
                if (args.get(0).isNull()) { arg0 = nullptr; break; }
                if (!args.get(0).isObject()) { ok = false; break; }
                js_proxy_t *jsProxy;
                JSObject *tmpObj = args.get(0).toObjectOrNull();
                jsProxy = jsb_get_js_proxy(tmpObj);
                arg0 = (const CrossApp::DRectLayout&)(jsProxy ? jsProxy->ptr : NULL);
                JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
            } while (0);
            if (!ok) { ok = true; break; }
            CrossApp::CAView* ret = CrossApp::CAView::createWithLayout(arg0);
            jsval jsret = JSVAL_NULL;
            do {
                if (ret) {
                    js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAView>(cx, (CrossApp::CAView*)ret);
                    jsret = OBJECT_TO_JSVAL(jsProxy->obj);
                } else {
                    jsret = JSVAL_NULL;
                }
            } while (0);
            args.rval().set(jsret);
            return true;
        }
    } while (0);
    JS_ReportError(cx, "js_autogentestbindings_js_CAView_createWithLayout : wrong number of arguments");
    return false;
}
bool js_autogentestbindings_js_CAView_createWithCenter(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    
    do {
        if (argc == 2) {
            CrossApp::DRect arg0;
            ok &= jsval_to_drect(cx, args.get(0), &arg0);
            if (!ok) { ok = true; break; }
            CrossApp::CAColor4B arg1;
            ok &= jsval_to_cacolor4b(cx, args.get(1), &arg1);
            if (!ok) { ok = true; break; }
            CrossApp::CAView* ret = CrossApp::CAView::createWithCenter(arg0, arg1);
            jsval jsret = JSVAL_NULL;
            do {
                if (ret) {
                    js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAView>(cx, (CrossApp::CAView*)ret);
                    jsret = OBJECT_TO_JSVAL(jsProxy->obj);
                } else {
                    jsret = JSVAL_NULL;
                }
            } while (0);
            args.rval().set(jsret);
            return true;
        }
    } while (0);
    
    do {
        if (argc == 1) {
            CrossApp::DRect arg0;
            ok &= jsval_to_drect(cx, args.get(0), &arg0);
            if (!ok) { ok = true; break; }
            CrossApp::CAView* ret = CrossApp::CAView::createWithCenter(arg0);
            jsval jsret = JSVAL_NULL;
            do {
                if (ret) {
                    js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAView>(cx, (CrossApp::CAView*)ret);
                    jsret = OBJECT_TO_JSVAL(jsProxy->obj);
                } else {
                    jsret = JSVAL_NULL;
                }
            } while (0);
            args.rval().set(jsret);
            return true;
        }
    } while (0);
    JS_ReportError(cx, "js_autogentestbindings_js_CAView_createWithCenter : wrong number of arguments");
    return false;
}
bool js_autogentestbindings_js_CAView_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    CrossApp::CAView* cobj = new (std::nothrow) CrossApp::CAView();
    TypeTest<CrossApp::CAView> t;
    js_type_class_t *typeClass = nullptr;
    std::string typeName = t.s_name();
    auto typeMapIter = _js_global_type_map.find(typeName);
    CCAssert(typeMapIter != _js_global_type_map.end(), "Can't find the class type!");
    typeClass = typeMapIter->second;
    CCAssert(typeClass, "The value is null.");
    JS::RootedObject proto(cx, typeClass->proto.get());
    JS::RootedObject parent(cx, typeClass->parentProto.get());
    JS::RootedObject obj(cx, JS_NewObject(cx, typeClass->jsclass, proto, parent));
    args.rval().set(OBJECT_TO_JSVAL(obj));
    // link the native object with the javascript object
    js_proxy_t* p = jsb_new_proxy(cobj, obj);
    if (JS_HasProperty(cx, obj, "_ctor", &ok) && ok)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    return true;
}

extern JSObject *jsb_CrossApp_CAResponder_prototype;

void js_CrossApp_CAView_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOGINFO("jsbindings: finalizing JS object %p (CAView)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::CAView *nobj = static_cast<CrossApp::CAView *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
void js_register_autogentestbindings_js_CAView(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_CAView_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_CAView_class->name = "CAView";
    jsb_CrossApp_CAView_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_CAView_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_CAView_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_CAView_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_CAView_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_CAView_class->resolve = JS_ResolveStub;
    jsb_CrossApp_CAView_class->convert = JS_ConvertStub;
    jsb_CrossApp_CAView_class->finalize = js_CrossApp_CAView_finalize;
    jsb_CrossApp_CAView_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("removeFromSuperview", js_autogentestbindings_js_CAView_removeFromSuperview, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getShaderProgram", js_autogentestbindings_js_CAView_getShaderProgram, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setLayout", js_autogentestbindings_js_CAView_setLayout, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("ccTouchEnded", js_autogentestbindings_js_CAView_ccTouchEnded, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getSuperview", js_autogentestbindings_js_CAView_getSuperview, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getSubviewByTag", js_autogentestbindings_js_CAView_getSubviewByTag, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("sortAllSubviews", js_autogentestbindings_js_CAView_sortAllSubviews, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("copy", js_autogentestbindings_js_CAView_copy, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("updateDisplayedAlpha", js_autogentestbindings_js_CAView_updateDisplayedAlpha, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isFlipX", js_autogentestbindings_js_CAView_isFlipX, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isFlipY", js_autogentestbindings_js_CAView_isFlipY, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("init", js_autogentestbindings_js_CAView_init, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("ccTouchMoved", js_autogentestbindings_js_CAView_ccTouchMoved, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setRotation", js_autogentestbindings_js_CAView_setRotation, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setZOrder", js_autogentestbindings_js_CAView_setZOrder, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("ccTouchBegan", js_autogentestbindings_js_CAView_ccTouchBegan, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setScaleY", js_autogentestbindings_js_CAView_setScaleY, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setScaleX", js_autogentestbindings_js_CAView_setScaleX, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getAtlasIndex", js_autogentestbindings_js_CAView_getAtlasIndex, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("removeSubviewByTag", js_autogentestbindings_js_CAView_removeSubviewByTag, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("visitEve", js_autogentestbindings_js_CAView_visitEve, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getContentContainer", js_autogentestbindings_js_CAView_getContentContainer, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("onExit", js_autogentestbindings_js_CAView_onExit, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setSuperview", js_autogentestbindings_js_CAView_setSuperview, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setRotationX", js_autogentestbindings_js_CAView_setRotationX, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getAlpha", js_autogentestbindings_js_CAView_getAlpha, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setSkewX", js_autogentestbindings_js_CAView_setSkewX, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setSkewY", js_autogentestbindings_js_CAView_setSkewY, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("removeSubview", js_autogentestbindings_js_CAView_removeSubview, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("onEnterTransitionDidFinish", js_autogentestbindings_js_CAView_onEnterTransitionDidFinish, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getLayout", js_autogentestbindings_js_CAView_getLayout, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setContentContainer", js_autogentestbindings_js_CAView_setContentContainer, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("removeAllSubviews", js_autogentestbindings_js_CAView_removeAllSubviews, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("convertTouchToNodeSpace", js_autogentestbindings_js_CAView_convertTouchToNodeSpace, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("reViewlayout", js_autogentestbindings_js_CAView_reViewlayout, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getSubviewByTextTag", js_autogentestbindings_js_CAView_getSubviewByTextTag, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("removeSubviewByTextTag", js_autogentestbindings_js_CAView_removeSubviewByTextTag, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getFrame", js_autogentestbindings_js_CAView_getFrame, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getImageRect", js_autogentestbindings_js_CAView_getImageRect, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("initWithLayout", js_autogentestbindings_js_CAView_initWithLayout, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setBatch", js_autogentestbindings_js_CAView_setBatch, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("nodeToParentTransform", js_autogentestbindings_js_CAView_nodeToParentTransform, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getLayoutType", js_autogentestbindings_js_CAView_getLayoutType, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("nextResponder", js_autogentestbindings_js_CAView_nextResponder, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getFrameOrigin", js_autogentestbindings_js_CAView_getFrameOrigin, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setDirty", js_autogentestbindings_js_CAView_setDirty, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setGLServerState", js_autogentestbindings_js_CAView_setGLServerState, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isImageRectRotated", js_autogentestbindings_js_CAView_isImageRectRotated, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getDisplayedColor", js_autogentestbindings_js_CAView_getDisplayedColor, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getAnchorPoint", js_autogentestbindings_js_CAView_getAnchorPoint, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("updateTransform", js_autogentestbindings_js_CAView_updateTransform, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getAnchorPointInPoints", js_autogentestbindings_js_CAView_getAnchorPointInPoints, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("onEnter", js_autogentestbindings_js_CAView_onEnter, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setAtlasIndex", js_autogentestbindings_js_CAView_setAtlasIndex, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getCenterOrigin", js_autogentestbindings_js_CAView_getCenterOrigin, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setShaderProgram", js_autogentestbindings_js_CAView_setShaderProgram, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("initWithCenter", js_autogentestbindings_js_CAView_initWithCenter, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getRotation", js_autogentestbindings_js_CAView_getRotation, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getZOrder", js_autogentestbindings_js_CAView_getZOrder, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getSubviewsCount", js_autogentestbindings_js_CAView_getSubviewsCount, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("visit", js_autogentestbindings_js_CAView_visit, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("transform", js_autogentestbindings_js_CAView_transform, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setVertexZ", js_autogentestbindings_js_CAView_setVertexZ, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getSkewX", js_autogentestbindings_js_CAView_getSkewX, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getSkewY", js_autogentestbindings_js_CAView_getSkewY, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setRotationY", js_autogentestbindings_js_CAView_setRotationY, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("insertSubview", js_autogentestbindings_js_CAView_insertSubview, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setFlipY", js_autogentestbindings_js_CAView_setFlipY, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setFlipX", js_autogentestbindings_js_CAView_setFlipX, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getCenter", js_autogentestbindings_js_CAView_getCenter, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isDirty", js_autogentestbindings_js_CAView_isDirty, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getRotationX", js_autogentestbindings_js_CAView_getRotationX, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getOrderOfArrival", js_autogentestbindings_js_CAView_getOrderOfArrival, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getRotationY", js_autogentestbindings_js_CAView_getRotationY, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isRunning", js_autogentestbindings_js_CAView_isRunning, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setBlendFunc", js_autogentestbindings_js_CAView_setBlendFunc, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getQuad", js_autogentestbindings_js_CAView_getQuad, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setVisible", js_autogentestbindings_js_CAView_setVisible, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("reorderSubview", js_autogentestbindings_js_CAView_reorderSubview, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getVertexZ", js_autogentestbindings_js_CAView_getVertexZ, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("_setZOrder", js_autogentestbindings_js_CAView__setZOrder, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setScale", js_autogentestbindings_js_CAView_setScale, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isDisplayRange", js_autogentestbindings_js_CAView_isDisplayRange, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getDisplayedAlpha", js_autogentestbindings_js_CAView_getDisplayedAlpha, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setOrderOfArrival", js_autogentestbindings_js_CAView_setOrderOfArrival, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getImageAtlas", js_autogentestbindings_js_CAView_getImageAtlas, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("ccTouchCancelled", js_autogentestbindings_js_CAView_ccTouchCancelled, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getScaleY", js_autogentestbindings_js_CAView_getScaleY, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getScaleX", js_autogentestbindings_js_CAView_getScaleX, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("addSubview", js_autogentestbindings_js_CAView_addSubview, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("initWithFrame", js_autogentestbindings_js_CAView_initWithFrame, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setDisplayRange", js_autogentestbindings_js_CAView_setDisplayRange, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setAlpha", js_autogentestbindings_js_CAView_setAlpha, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getSubviews", js_autogentestbindings_js_CAView_getSubviews, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("draw", js_autogentestbindings_js_CAView_draw, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getBlendFunc", js_autogentestbindings_js_CAView_getBlendFunc, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("transformAncestors", js_autogentestbindings_js_CAView_transformAncestors, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("description", js_autogentestbindings_js_CAView_description, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("convertTouchToNodeSpaceAR", js_autogentestbindings_js_CAView_convertTouchToNodeSpaceAR, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isVisible", js_autogentestbindings_js_CAView_isVisible, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("update", js_autogentestbindings_js_CAView_update, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("onExitTransitionDidStart", js_autogentestbindings_js_CAView_onExitTransitionDidStart, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getBounds", js_autogentestbindings_js_CAView_getBounds, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getScale", js_autogentestbindings_js_CAView_getScale, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setImageAtlas", js_autogentestbindings_js_CAView_setImageAtlas, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("initWithColor", js_autogentestbindings_js_CAView_initWithColor, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getCamera", js_autogentestbindings_js_CAView_getCamera, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getBatch", js_autogentestbindings_js_CAView_getBatch, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getColor", js_autogentestbindings_js_CAView_getColor, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getGLServerState", js_autogentestbindings_js_CAView_getGLServerState, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    static JSFunctionSpec st_funcs[] = {
        JS_FN("create", js_autogentestbindings_js_CAView_create, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("createWithFrame", js_autogentestbindings_js_CAView_createWithFrame, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("createWithColor", js_autogentestbindings_js_CAView_createWithColor, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("createWithLayout", js_autogentestbindings_js_CAView_createWithLayout, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("createWithCenter", js_autogentestbindings_js_CAView_createWithCenter, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    jsb_CrossApp_CAView_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_CAResponder_prototype),
        jsb_CrossApp_CAView_class,
        js_autogentestbindings_js_CAView_constructor, 0, // constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27 
//  JS_SetPropertyAttributes(cx, global, "CAView", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::CAView> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_CAView_class;
        p->proto = jsb_CrossApp_CAView_prototype;
        p->parentProto = jsb_CrossApp_CAResponder_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
}

JSClass  *jsb_CrossApp_CAImageView_class;
JSObject *jsb_CrossApp_CAImageView_prototype;

bool js_autogentestbindings_js_CAImageView_isAnimating(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAImageView* cobj = (CrossApp::CAImageView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAImageView_isAnimating : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->isAnimating();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAImageView_isAnimating : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAImageView_getAnimationRepeatCount(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAImageView* cobj = (CrossApp::CAImageView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAImageView_getAnimationRepeatCount : Invalid Native Object");
    if (argc == 0) {
        unsigned int ret = cobj->getAnimationRepeatCount();
        jsval jsret = JSVAL_NULL;
        jsret = uint32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAImageView_getAnimationRepeatCount : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAImageView_stopAnimating(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAImageView* cobj = (CrossApp::CAImageView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAImageView_stopAnimating : Invalid Native Object");
    if (argc == 0) {
        cobj->stopAnimating();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAImageView_stopAnimating : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAImageView_setImage(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAImageView* cobj = (CrossApp::CAImageView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAImageView_setImage : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAImage* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAImage*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAImageView_setImage : Error processing arguments");
        cobj->setImage(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAImageView_setImage : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAImageView_copy(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAImageView* cobj = (CrossApp::CAImageView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAImageView_copy : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CAView* ret = cobj->copy();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAView>(cx, (CrossApp::CAView*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAImageView_copy : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAImageView_initWithImage(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAImageView* cobj = (CrossApp::CAImageView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAImageView_initWithImage : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAImage* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAImage*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAImageView_initWithImage : Error processing arguments");
        bool ret = cobj->initWithImage(arg0);
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAImageView_initWithImage : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAImageView_setAnimationImages(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAImageView* cobj = (CrossApp::CAImageView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAImageView_setAnimationImages : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAVector<CrossApp::CAImage *> arg0;
        ok &= jsval_to_cavector(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAImageView_setAnimationImages : Error processing arguments");
        cobj->setAnimationImages(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAImageView_setAnimationImages : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAImageView_setImageAsyncWithFile(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAImageView* cobj = (CrossApp::CAImageView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAImageView_setImageAsyncWithFile : Invalid Native Object");
    if (argc == 1) {
        std::string arg0;
        ok &= jsval_to_std_string(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAImageView_setImageAsyncWithFile : Error processing arguments");
        cobj->setImageAsyncWithFile(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAImageView_setImageAsyncWithFile : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAImageView_getImageViewScaleType(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAImageView* cobj = (CrossApp::CAImageView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAImageView_getImageViewScaleType : Invalid Native Object");
    if (argc == 0) {
        int ret = (int)cobj->getImageViewScaleType();
        jsval jsret = JSVAL_NULL;
        jsret = int32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAImageView_getImageViewScaleType : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAImageView_init(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAImageView* cobj = (CrossApp::CAImageView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAImageView_init : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->init();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAImageView_init : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAImageView_setImageViewScaleType(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAImageView* cobj = (CrossApp::CAImageView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAImageView_setImageViewScaleType : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAImageViewScaleType arg0;
        ok &= jsval_to_int32(cx, args.get(0), (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAImageView_setImageViewScaleType : Error processing arguments");
        cobj->setImageViewScaleType(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAImageView_setImageViewScaleType : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAImageView_getAnimationImages(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAImageView* cobj = (CrossApp::CAImageView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAImageView_getAnimationImages : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CAVector<CrossApp::CAImage *> ret = cobj->getAnimationImages();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAVector<CrossApp::CAImage >>(cx, (CrossApp::CAVector<CrossApp::CAImage *>)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAImageView_getAnimationImages : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAImageView_getAnimationDuration(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAImageView* cobj = (CrossApp::CAImageView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAImageView_getAnimationDuration : Invalid Native Object");
    if (argc == 0) {
        double ret = cobj->getAnimationDuration();
        jsval jsret = JSVAL_NULL;
        jsret = DOUBLE_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAImageView_getAnimationDuration : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAImageView_startAnimating(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAImageView* cobj = (CrossApp::CAImageView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAImageView_startAnimating : Invalid Native Object");
    if (argc == 0) {
        cobj->startAnimating();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAImageView_startAnimating : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAImageView_getImage(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAImageView* cobj = (CrossApp::CAImageView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAImageView_getImage : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CAImage* ret = cobj->getImage();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAImage>(cx, (CrossApp::CAImage*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAImageView_getImage : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAImageView_setAnimationDuration(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAImageView* cobj = (CrossApp::CAImageView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAImageView_setAnimationDuration : Invalid Native Object");
    if (argc == 1) {
        double arg0 = 0;
        ok &= JS::ToNumber( cx, args.get(0), &arg0) && !isnan(arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAImageView_setAnimationDuration : Error processing arguments");
        cobj->setAnimationDuration(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAImageView_setAnimationDuration : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAImageView_setAnimationRepeatCount(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAImageView* cobj = (CrossApp::CAImageView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAImageView_setAnimationRepeatCount : Invalid Native Object");
    if (argc == 1) {
        unsigned int arg0 = 0;
        ok &= jsval_to_uint32(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAImageView_setAnimationRepeatCount : Error processing arguments");
        cobj->setAnimationRepeatCount(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAImageView_setAnimationRepeatCount : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAImageView_createWithFrame(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        CrossApp::DRect arg0;
        ok &= jsval_to_drect(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAImageView_createWithFrame : Error processing arguments");
        CrossApp::CAImageView* ret = CrossApp::CAImageView::createWithFrame(arg0);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAImageView>(cx, (CrossApp::CAImageView*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_autogentestbindings_js_CAImageView_createWithFrame : wrong number of arguments");
    return false;
}

bool js_autogentestbindings_js_CAImageView_create(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    if (argc == 0) {
        CrossApp::CAImageView* ret = CrossApp::CAImageView::create();
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAImageView>(cx, (CrossApp::CAImageView*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_autogentestbindings_js_CAImageView_create : wrong number of arguments");
    return false;
}

bool js_autogentestbindings_js_CAImageView_createWithImage(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        CrossApp::CAImage* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAImage*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAImageView_createWithImage : Error processing arguments");
        CrossApp::CAImageView* ret = CrossApp::CAImageView::createWithImage(arg0);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAImageView>(cx, (CrossApp::CAImageView*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_autogentestbindings_js_CAImageView_createWithImage : wrong number of arguments");
    return false;
}

bool js_autogentestbindings_js_CAImageView_createWithLayout(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        CrossApp::DRectLayout arg0;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (const CrossApp::DRectLayout&)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAImageView_createWithLayout : Error processing arguments");
        CrossApp::CAImageView* ret = CrossApp::CAImageView::createWithLayout(arg0);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAImageView>(cx, (CrossApp::CAImageView*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_autogentestbindings_js_CAImageView_createWithLayout : wrong number of arguments");
    return false;
}

bool js_autogentestbindings_js_CAImageView_createWithCenter(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        CrossApp::DRect arg0;
        ok &= jsval_to_drect(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAImageView_createWithCenter : Error processing arguments");
        CrossApp::CAImageView* ret = CrossApp::CAImageView::createWithCenter(arg0);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAImageView>(cx, (CrossApp::CAImageView*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_autogentestbindings_js_CAImageView_createWithCenter : wrong number of arguments");
    return false;
}

bool js_autogentestbindings_js_CAImageView_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    CrossApp::CAImageView* cobj = new (std::nothrow) CrossApp::CAImageView();
    TypeTest<CrossApp::CAImageView> t;
    js_type_class_t *typeClass = nullptr;
    std::string typeName = t.s_name();
    auto typeMapIter = _js_global_type_map.find(typeName);
    CCAssert(typeMapIter != _js_global_type_map.end(), "Can't find the class type!");
    typeClass = typeMapIter->second;
    CCAssert(typeClass, "The value is null.");
    JS::RootedObject proto(cx, typeClass->proto.get());
    JS::RootedObject parent(cx, typeClass->parentProto.get());
    JS::RootedObject obj(cx, JS_NewObject(cx, typeClass->jsclass, proto, parent));
    args.rval().set(OBJECT_TO_JSVAL(obj));
    // link the native object with the javascript object
    js_proxy_t* p = jsb_new_proxy(cobj, obj);
    if (JS_HasProperty(cx, obj, "_ctor", &ok) && ok)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    return true;
}

extern JSObject *jsb_CrossApp_CAView_prototype;

void js_CrossApp_CAImageView_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOGINFO("jsbindings: finalizing JS object %p (CAImageView)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::CAImageView *nobj = static_cast<CrossApp::CAImageView *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
void js_register_autogentestbindings_js_CAImageView(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_CAImageView_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_CAImageView_class->name = "CAImageView";
    jsb_CrossApp_CAImageView_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_CAImageView_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_CAImageView_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_CAImageView_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_CAImageView_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_CAImageView_class->resolve = JS_ResolveStub;
    jsb_CrossApp_CAImageView_class->convert = JS_ConvertStub;
    jsb_CrossApp_CAImageView_class->finalize = js_CrossApp_CAImageView_finalize;
    jsb_CrossApp_CAImageView_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("isAnimating", js_autogentestbindings_js_CAImageView_isAnimating, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getAnimationRepeatCount", js_autogentestbindings_js_CAImageView_getAnimationRepeatCount, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("stopAnimating", js_autogentestbindings_js_CAImageView_stopAnimating, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setImage", js_autogentestbindings_js_CAImageView_setImage, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("copy", js_autogentestbindings_js_CAImageView_copy, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("initWithImage", js_autogentestbindings_js_CAImageView_initWithImage, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setAnimationImages", js_autogentestbindings_js_CAImageView_setAnimationImages, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setImageAsyncWithFile", js_autogentestbindings_js_CAImageView_setImageAsyncWithFile, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getImageViewScaleType", js_autogentestbindings_js_CAImageView_getImageViewScaleType, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("init", js_autogentestbindings_js_CAImageView_init, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setImageViewScaleType", js_autogentestbindings_js_CAImageView_setImageViewScaleType, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getAnimationImages", js_autogentestbindings_js_CAImageView_getAnimationImages, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getAnimationDuration", js_autogentestbindings_js_CAImageView_getAnimationDuration, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("startAnimating", js_autogentestbindings_js_CAImageView_startAnimating, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getImage", js_autogentestbindings_js_CAImageView_getImage, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setAnimationDuration", js_autogentestbindings_js_CAImageView_setAnimationDuration, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setAnimationRepeatCount", js_autogentestbindings_js_CAImageView_setAnimationRepeatCount, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    static JSFunctionSpec st_funcs[] = {
        JS_FN("createWithFrame", js_autogentestbindings_js_CAImageView_createWithFrame, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("create", js_autogentestbindings_js_CAImageView_create, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("createWithImage", js_autogentestbindings_js_CAImageView_createWithImage, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("createWithLayout", js_autogentestbindings_js_CAImageView_createWithLayout, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("createWithCenter", js_autogentestbindings_js_CAImageView_createWithCenter, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    jsb_CrossApp_CAImageView_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_CAView_prototype),
        jsb_CrossApp_CAImageView_class,
        js_autogentestbindings_js_CAImageView_constructor, 0, // constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27 
//  JS_SetPropertyAttributes(cx, global, "CAImageView", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::CAImageView> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_CAImageView_class;
        p->proto = jsb_CrossApp_CAImageView_prototype;
        p->parentProto = jsb_CrossApp_CAView_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
}

JSClass  *jsb_CrossApp_CAScale9ImageView_class;
JSObject *jsb_CrossApp_CAScale9ImageView_prototype;

bool js_autogentestbindings_js_CAScale9ImageView_setInsetBottom(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAScale9ImageView* cobj = (CrossApp::CAScale9ImageView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAScale9ImageView_setInsetBottom : Invalid Native Object");
    if (argc == 1) {
        double arg0 = 0;
        ok &= JS::ToNumber( cx, args.get(0), &arg0) && !isnan(arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAScale9ImageView_setInsetBottom : Error processing arguments");
        cobj->setInsetBottom(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAScale9ImageView_setInsetBottom : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAScale9ImageView_getOriginalSize(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAScale9ImageView* cobj = (CrossApp::CAScale9ImageView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAScale9ImageView_getOriginalSize : Invalid Native Object");
    if (argc == 0) {
        CrossApp::DSize ret = cobj->getOriginalSize();
        jsval jsret = JSVAL_NULL;
        jsret = dsize_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAScale9ImageView_getOriginalSize : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAScale9ImageView_draw(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAScale9ImageView* cobj = (CrossApp::CAScale9ImageView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAScale9ImageView_draw : Invalid Native Object");
    if (argc == 0) {
        cobj->draw();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAScale9ImageView_draw : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAScale9ImageView_setColor(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAScale9ImageView* cobj = (CrossApp::CAScale9ImageView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAScale9ImageView_setColor : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAColor4B arg0;
        ok &= jsval_to_cacolor4b(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAScale9ImageView_setColor : Error processing arguments");
        cobj->setColor(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAScale9ImageView_setColor : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAScale9ImageView_setImage(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAScale9ImageView* cobj = (CrossApp::CAScale9ImageView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAScale9ImageView_setImage : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAImage* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAImage*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAScale9ImageView_setImage : Error processing arguments");
        cobj->setImage(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAScale9ImageView_setImage : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAScale9ImageView_initWithImage(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAScale9ImageView* cobj = (CrossApp::CAScale9ImageView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAScale9ImageView_initWithImage : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAImage* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAImage*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAScale9ImageView_initWithImage : Error processing arguments");
        bool ret = cobj->initWithImage(arg0);
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAScale9ImageView_initWithImage : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAScale9ImageView_getInsetTop(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAScale9ImageView* cobj = (CrossApp::CAScale9ImageView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAScale9ImageView_getInsetTop : Invalid Native Object");
    if (argc == 0) {
        double ret = cobj->getInsetTop();
        jsval jsret = JSVAL_NULL;
        jsret = DOUBLE_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAScale9ImageView_getInsetTop : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAScale9ImageView_setInsetLeft(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAScale9ImageView* cobj = (CrossApp::CAScale9ImageView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAScale9ImageView_setInsetLeft : Invalid Native Object");
    if (argc == 1) {
        double arg0 = 0;
        ok &= JS::ToNumber( cx, args.get(0), &arg0) && !isnan(arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAScale9ImageView_setInsetLeft : Error processing arguments");
        cobj->setInsetLeft(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAScale9ImageView_setInsetLeft : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAScale9ImageView_setCapInsets(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAScale9ImageView* cobj = (CrossApp::CAScale9ImageView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAScale9ImageView_setCapInsets : Invalid Native Object");
    if (argc == 1) {
        CrossApp::DRect arg0;
        ok &= jsval_to_drect(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAScale9ImageView_setCapInsets : Error processing arguments");
        cobj->setCapInsets(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAScale9ImageView_setCapInsets : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAScale9ImageView_getCapInsets(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAScale9ImageView* cobj = (CrossApp::CAScale9ImageView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAScale9ImageView_getCapInsets : Invalid Native Object");
    if (argc == 0) {
        CrossApp::DRect ret = cobj->getCapInsets();
        jsval jsret = JSVAL_NULL;
        jsret = drect_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAScale9ImageView_getCapInsets : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAScale9ImageView_setInsetTop(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAScale9ImageView* cobj = (CrossApp::CAScale9ImageView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAScale9ImageView_setInsetTop : Invalid Native Object");
    if (argc == 1) {
        double arg0 = 0;
        ok &= JS::ToNumber( cx, args.get(0), &arg0) && !isnan(arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAScale9ImageView_setInsetTop : Error processing arguments");
        cobj->setInsetTop(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAScale9ImageView_setInsetTop : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAScale9ImageView_init(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAScale9ImageView* cobj = (CrossApp::CAScale9ImageView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAScale9ImageView_init : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->init();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAScale9ImageView_init : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAScale9ImageView_setAlpha(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAScale9ImageView* cobj = (CrossApp::CAScale9ImageView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAScale9ImageView_setAlpha : Invalid Native Object");
    if (argc == 1) {
        double arg0 = 0;
        ok &= JS::ToNumber( cx, args.get(0), &arg0) && !isnan(arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAScale9ImageView_setAlpha : Error processing arguments");
        cobj->setAlpha(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAScale9ImageView_setAlpha : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAScale9ImageView_getColor(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAScale9ImageView* cobj = (CrossApp::CAScale9ImageView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAScale9ImageView_getColor : Invalid Native Object");
    if (argc == 0) {
        const CrossApp::CAColor4B& ret = cobj->getColor();
        jsval jsret = JSVAL_NULL;
        jsret = cacolor4b_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAScale9ImageView_getColor : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAScale9ImageView_getInsetLeft(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAScale9ImageView* cobj = (CrossApp::CAScale9ImageView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAScale9ImageView_getInsetLeft : Invalid Native Object");
    if (argc == 0) {
        double ret = cobj->getInsetLeft();
        jsval jsret = JSVAL_NULL;
        jsret = DOUBLE_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAScale9ImageView_getInsetLeft : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAScale9ImageView_getInsetBottom(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAScale9ImageView* cobj = (CrossApp::CAScale9ImageView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAScale9ImageView_getInsetBottom : Invalid Native Object");
    if (argc == 0) {
        double ret = cobj->getInsetBottom();
        jsval jsret = JSVAL_NULL;
        jsret = DOUBLE_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAScale9ImageView_getInsetBottom : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAScale9ImageView_setInsetRight(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAScale9ImageView* cobj = (CrossApp::CAScale9ImageView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAScale9ImageView_setInsetRight : Invalid Native Object");
    if (argc == 1) {
        double arg0 = 0;
        ok &= JS::ToNumber( cx, args.get(0), &arg0) && !isnan(arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAScale9ImageView_setInsetRight : Error processing arguments");
        cobj->setInsetRight(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAScale9ImageView_setInsetRight : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAScale9ImageView_copy(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAScale9ImageView* cobj = (CrossApp::CAScale9ImageView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAScale9ImageView_copy : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CAView* ret = cobj->copy();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAView>(cx, (CrossApp::CAView*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAScale9ImageView_copy : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAScale9ImageView_getInsetRight(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAScale9ImageView* cobj = (CrossApp::CAScale9ImageView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAScale9ImageView_getInsetRight : Invalid Native Object");
    if (argc == 0) {
        double ret = cobj->getInsetRight();
        jsval jsret = JSVAL_NULL;
        jsret = DOUBLE_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAScale9ImageView_getInsetRight : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAScale9ImageView_createWithFrame(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        CrossApp::DRect arg0;
        ok &= jsval_to_drect(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAScale9ImageView_createWithFrame : Error processing arguments");
        CrossApp::CAScale9ImageView* ret = CrossApp::CAScale9ImageView::createWithFrame(arg0);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAScale9ImageView>(cx, (CrossApp::CAScale9ImageView*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_autogentestbindings_js_CAScale9ImageView_createWithFrame : wrong number of arguments");
    return false;
}

bool js_autogentestbindings_js_CAScale9ImageView_create(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    if (argc == 0) {
        CrossApp::CAScale9ImageView* ret = CrossApp::CAScale9ImageView::create();
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAScale9ImageView>(cx, (CrossApp::CAScale9ImageView*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_autogentestbindings_js_CAScale9ImageView_create : wrong number of arguments");
    return false;
}

bool js_autogentestbindings_js_CAScale9ImageView_createWithImage(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        CrossApp::CAImage* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAImage*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAScale9ImageView_createWithImage : Error processing arguments");
        CrossApp::CAScale9ImageView* ret = CrossApp::CAScale9ImageView::createWithImage(arg0);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAScale9ImageView>(cx, (CrossApp::CAScale9ImageView*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_autogentestbindings_js_CAScale9ImageView_createWithImage : wrong number of arguments");
    return false;
}

bool js_autogentestbindings_js_CAScale9ImageView_createWithLayout(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        CrossApp::DRectLayout arg0;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (const CrossApp::DRectLayout&)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAScale9ImageView_createWithLayout : Error processing arguments");
        CrossApp::CAScale9ImageView* ret = CrossApp::CAScale9ImageView::createWithLayout(arg0);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAScale9ImageView>(cx, (CrossApp::CAScale9ImageView*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_autogentestbindings_js_CAScale9ImageView_createWithLayout : wrong number of arguments");
    return false;
}

bool js_autogentestbindings_js_CAScale9ImageView_createWithCenter(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        CrossApp::DRect arg0;
        ok &= jsval_to_drect(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAScale9ImageView_createWithCenter : Error processing arguments");
        CrossApp::CAScale9ImageView* ret = CrossApp::CAScale9ImageView::createWithCenter(arg0);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAScale9ImageView>(cx, (CrossApp::CAScale9ImageView*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_autogentestbindings_js_CAScale9ImageView_createWithCenter : wrong number of arguments");
    return false;
}

bool js_autogentestbindings_js_CAScale9ImageView_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    CrossApp::CAScale9ImageView* cobj = new (std::nothrow) CrossApp::CAScale9ImageView();
    TypeTest<CrossApp::CAScale9ImageView> t;
    js_type_class_t *typeClass = nullptr;
    std::string typeName = t.s_name();
    auto typeMapIter = _js_global_type_map.find(typeName);
    CCAssert(typeMapIter != _js_global_type_map.end(), "Can't find the class type!");
    typeClass = typeMapIter->second;
    CCAssert(typeClass, "The value is null.");
    JS::RootedObject proto(cx, typeClass->proto.get());
    JS::RootedObject parent(cx, typeClass->parentProto.get());
    JS::RootedObject obj(cx, JS_NewObject(cx, typeClass->jsclass, proto, parent));
    args.rval().set(OBJECT_TO_JSVAL(obj));
    // link the native object with the javascript object
    js_proxy_t* p = jsb_new_proxy(cobj, obj);
    if (JS_HasProperty(cx, obj, "_ctor", &ok) && ok)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    return true;
}

extern JSObject *jsb_CrossApp_CAView_prototype;

void js_CrossApp_CAScale9ImageView_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOGINFO("jsbindings: finalizing JS object %p (CAScale9ImageView)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::CAScale9ImageView *nobj = static_cast<CrossApp::CAScale9ImageView *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
void js_register_autogentestbindings_js_CAScale9ImageView(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_CAScale9ImageView_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_CAScale9ImageView_class->name = "CAScale9ImageView";
    jsb_CrossApp_CAScale9ImageView_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_CAScale9ImageView_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_CAScale9ImageView_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_CAScale9ImageView_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_CAScale9ImageView_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_CAScale9ImageView_class->resolve = JS_ResolveStub;
    jsb_CrossApp_CAScale9ImageView_class->convert = JS_ConvertStub;
    jsb_CrossApp_CAScale9ImageView_class->finalize = js_CrossApp_CAScale9ImageView_finalize;
    jsb_CrossApp_CAScale9ImageView_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("setInsetBottom", js_autogentestbindings_js_CAScale9ImageView_setInsetBottom, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getOriginalSize", js_autogentestbindings_js_CAScale9ImageView_getOriginalSize, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("draw", js_autogentestbindings_js_CAScale9ImageView_draw, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setColor", js_autogentestbindings_js_CAScale9ImageView_setColor, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setImage", js_autogentestbindings_js_CAScale9ImageView_setImage, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("initWithImage", js_autogentestbindings_js_CAScale9ImageView_initWithImage, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getInsetTop", js_autogentestbindings_js_CAScale9ImageView_getInsetTop, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setInsetLeft", js_autogentestbindings_js_CAScale9ImageView_setInsetLeft, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setCapInsets", js_autogentestbindings_js_CAScale9ImageView_setCapInsets, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getCapInsets", js_autogentestbindings_js_CAScale9ImageView_getCapInsets, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setInsetTop", js_autogentestbindings_js_CAScale9ImageView_setInsetTop, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("init", js_autogentestbindings_js_CAScale9ImageView_init, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setAlpha", js_autogentestbindings_js_CAScale9ImageView_setAlpha, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getColor", js_autogentestbindings_js_CAScale9ImageView_getColor, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getInsetLeft", js_autogentestbindings_js_CAScale9ImageView_getInsetLeft, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getInsetBottom", js_autogentestbindings_js_CAScale9ImageView_getInsetBottom, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setInsetRight", js_autogentestbindings_js_CAScale9ImageView_setInsetRight, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("copy", js_autogentestbindings_js_CAScale9ImageView_copy, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getInsetRight", js_autogentestbindings_js_CAScale9ImageView_getInsetRight, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    static JSFunctionSpec st_funcs[] = {
        JS_FN("createWithFrame", js_autogentestbindings_js_CAScale9ImageView_createWithFrame, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("create", js_autogentestbindings_js_CAScale9ImageView_create, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("createWithImage", js_autogentestbindings_js_CAScale9ImageView_createWithImage, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("createWithLayout", js_autogentestbindings_js_CAScale9ImageView_createWithLayout, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("createWithCenter", js_autogentestbindings_js_CAScale9ImageView_createWithCenter, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    jsb_CrossApp_CAScale9ImageView_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_CAView_prototype),
        jsb_CrossApp_CAScale9ImageView_class,
        js_autogentestbindings_js_CAScale9ImageView_constructor, 0, // constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27 
//  JS_SetPropertyAttributes(cx, global, "CAScale9ImageView", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::CAScale9ImageView> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_CAScale9ImageView_class;
        p->proto = jsb_CrossApp_CAScale9ImageView_prototype;
        p->parentProto = jsb_CrossApp_CAView_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
}

JSClass  *jsb_CrossApp_CAViewAnimationModule_class;
JSObject *jsb_CrossApp_CAViewAnimationModule_prototype;

bool js_autogentestbindings_js_CAViewAnimationModule_setAlreadyRunning(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAViewAnimationModule* cobj = (CrossApp::CAViewAnimationModule *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAViewAnimationModule_setAlreadyRunning : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        arg0 = JS::ToBoolean(args.get(0));
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAViewAnimationModule_setAlreadyRunning : Error processing arguments");
        cobj->setAlreadyRunning(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAViewAnimationModule_setAlreadyRunning : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAViewAnimationModule_isAlreadyRunning(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAViewAnimationModule* cobj = (CrossApp::CAViewAnimationModule *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAViewAnimationModule_isAlreadyRunning : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->isAlreadyRunning();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAViewAnimationModule_isAlreadyRunning : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAViewAnimationModule_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    CrossApp::CAViewAnimationModule* cobj = new (std::nothrow) CrossApp::CAViewAnimationModule();
    TypeTest<CrossApp::CAViewAnimationModule> t;
    js_type_class_t *typeClass = nullptr;
    std::string typeName = t.s_name();
    auto typeMapIter = _js_global_type_map.find(typeName);
    CCAssert(typeMapIter != _js_global_type_map.end(), "Can't find the class type!");
    typeClass = typeMapIter->second;
    CCAssert(typeClass, "The value is null.");
    JS::RootedObject proto(cx, typeClass->proto.get());
    JS::RootedObject parent(cx, typeClass->parentProto.get());
    JS::RootedObject obj(cx, JS_NewObject(cx, typeClass->jsclass, proto, parent));
    args.rval().set(OBJECT_TO_JSVAL(obj));
    // link the native object with the javascript object
    js_proxy_t* p = jsb_new_proxy(cobj, obj);
    if (JS_HasProperty(cx, obj, "_ctor", &ok) && ok)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    return true;
}

extern JSObject *jsb_CrossApp_CAObject_prototype;

void js_CrossApp_CAViewAnimationModule_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOGINFO("jsbindings: finalizing JS object %p (CAViewAnimationModule)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::CAViewAnimationModule *nobj = static_cast<CrossApp::CAViewAnimationModule *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
void js_register_autogentestbindings_js_CAViewAnimationModule(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_CAViewAnimationModule_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_CAViewAnimationModule_class->name = "CAViewAnimationModule";
    jsb_CrossApp_CAViewAnimationModule_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_CAViewAnimationModule_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_CAViewAnimationModule_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_CAViewAnimationModule_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_CAViewAnimationModule_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_CAViewAnimationModule_class->resolve = JS_ResolveStub;
    jsb_CrossApp_CAViewAnimationModule_class->convert = JS_ConvertStub;
    jsb_CrossApp_CAViewAnimationModule_class->finalize = js_CrossApp_CAViewAnimationModule_finalize;
    jsb_CrossApp_CAViewAnimationModule_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("setAlreadyRunning", js_autogentestbindings_js_CAViewAnimationModule_setAlreadyRunning, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isAlreadyRunning", js_autogentestbindings_js_CAViewAnimationModule_isAlreadyRunning, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    JSFunctionSpec *st_funcs = NULL;

    jsb_CrossApp_CAViewAnimationModule_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_CAObject_prototype),
        jsb_CrossApp_CAViewAnimationModule_class,
        js_autogentestbindings_js_CAViewAnimationModule_constructor, 0, // constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27 
//  JS_SetPropertyAttributes(cx, global, "CAViewAnimationModule", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::CAViewAnimationModule> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_CAViewAnimationModule_class;
        p->proto = jsb_CrossApp_CAViewAnimationModule_prototype;
        p->parentProto = jsb_CrossApp_CAObject_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
}

JSClass  *jsb_CrossApp_CAViewAnimation_class;
JSObject *jsb_CrossApp_CAViewAnimation_prototype;

bool js_autogentestbindings_js_CAViewAnimation_setAnimationsEnabled(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        bool arg0;
        arg0 = JS::ToBoolean(args.get(0));
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAViewAnimation_setAnimationsEnabled : Error processing arguments");
        CrossApp::CAViewAnimation::setAnimationsEnabled(arg0);
        args.rval().setUndefined();
        return true;
    }
    JS_ReportError(cx, "js_autogentestbindings_js_CAViewAnimation_setAnimationsEnabled : wrong number of arguments");
    return false;
}

bool js_autogentestbindings_js_CAViewAnimation_beginAnimations(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 2) {
        std::string arg0;
        void* arg1 = nullptr;
        ok &= jsval_to_std_string(cx, args.get(0), &arg0);
        #pragma warning NO CONVERSION TO NATIVE FOR void*
		ok = false;
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAViewAnimation_beginAnimations : Error processing arguments");
        CrossApp::CAViewAnimation::beginAnimations(arg0, arg1);
        args.rval().setUndefined();
        return true;
    }
    JS_ReportError(cx, "js_autogentestbindings_js_CAViewAnimation_beginAnimations : wrong number of arguments");
    return false;
}

bool js_autogentestbindings_js_CAViewAnimation_areBeginAnimationsWithID(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        std::string arg0;
        ok &= jsval_to_std_string(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAViewAnimation_areBeginAnimationsWithID : Error processing arguments");
        bool ret = CrossApp::CAViewAnimation::areBeginAnimationsWithID(arg0);
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_autogentestbindings_js_CAViewAnimation_areBeginAnimationsWithID : wrong number of arguments");
    return false;
}

bool js_autogentestbindings_js_CAViewAnimation_setAnimationDelay(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        double arg0 = 0;
        ok &= JS::ToNumber( cx, args.get(0), &arg0) && !isnan(arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAViewAnimation_setAnimationDelay : Error processing arguments");
        CrossApp::CAViewAnimation::setAnimationDelay(arg0);
        args.rval().setUndefined();
        return true;
    }
    JS_ReportError(cx, "js_autogentestbindings_js_CAViewAnimation_setAnimationDelay : wrong number of arguments");
    return false;
}

bool js_autogentestbindings_js_CAViewAnimation_areAnimationsEnabled(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    if (argc == 0) {
        bool ret = CrossApp::CAViewAnimation::areAnimationsEnabled();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_autogentestbindings_js_CAViewAnimation_areAnimationsEnabled : wrong number of arguments");
    return false;
}

bool js_autogentestbindings_js_CAViewAnimation_removeAnimationsWithView(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        CrossApp::CAView* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAView*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAViewAnimation_removeAnimationsWithView : Error processing arguments");
        CrossApp::CAViewAnimation::removeAnimationsWithView(arg0);
        args.rval().setUndefined();
        return true;
    }
    JS_ReportError(cx, "js_autogentestbindings_js_CAViewAnimation_removeAnimationsWithView : wrong number of arguments");
    return false;
}

bool js_autogentestbindings_js_CAViewAnimation_setAnimationDuration(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        double arg0 = 0;
        ok &= JS::ToNumber( cx, args.get(0), &arg0) && !isnan(arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAViewAnimation_setAnimationDuration : Error processing arguments");
        CrossApp::CAViewAnimation::setAnimationDuration(arg0);
        args.rval().setUndefined();
        return true;
    }
    JS_ReportError(cx, "js_autogentestbindings_js_CAViewAnimation_setAnimationDuration : wrong number of arguments");
    return false;
}

bool js_autogentestbindings_js_CAViewAnimation_removeAnimations(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        std::string arg0;
        ok &= jsval_to_std_string(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAViewAnimation_removeAnimations : Error processing arguments");
        CrossApp::CAViewAnimation::removeAnimations(arg0);
        args.rval().setUndefined();
        return true;
    }
    JS_ReportError(cx, "js_autogentestbindings_js_CAViewAnimation_removeAnimations : wrong number of arguments");
    return false;
}

bool js_autogentestbindings_js_CAViewAnimation_commitAnimations(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    if (argc == 0) {
        CrossApp::CAViewAnimation::commitAnimations();
        args.rval().setUndefined();
        return true;
    }
    JS_ReportError(cx, "js_autogentestbindings_js_CAViewAnimation_commitAnimations : wrong number of arguments");
    return false;
}

bool js_autogentestbindings_js_CAViewAnimation_setAnimationRepeatAutoreverses(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        bool arg0;
        arg0 = JS::ToBoolean(args.get(0));
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAViewAnimation_setAnimationRepeatAutoreverses : Error processing arguments");
        CrossApp::CAViewAnimation::setAnimationRepeatAutoreverses(arg0);
        args.rval().setUndefined();
        return true;
    }
    JS_ReportError(cx, "js_autogentestbindings_js_CAViewAnimation_setAnimationRepeatAutoreverses : wrong number of arguments");
    return false;
}

bool js_autogentestbindings_js_CAViewAnimation_setAnimationCurve(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        CrossApp::CAViewAnimationCurve arg0;
        ok &= jsval_to_int32(cx, args.get(0), (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAViewAnimation_setAnimationCurve : Error processing arguments");
        CrossApp::CAViewAnimation::setAnimationCurve(arg0);
        args.rval().setUndefined();
        return true;
    }
    JS_ReportError(cx, "js_autogentestbindings_js_CAViewAnimation_setAnimationCurve : wrong number of arguments");
    return false;
}

bool js_autogentestbindings_js_CAViewAnimation_areBeginAnimations(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    if (argc == 0) {
        bool ret = CrossApp::CAViewAnimation::areBeginAnimations();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_autogentestbindings_js_CAViewAnimation_areBeginAnimations : wrong number of arguments");
    return false;
}

bool js_autogentestbindings_js_CAViewAnimation_setAnimationRepeatCount(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        double arg0 = 0;
        ok &= JS::ToNumber( cx, args.get(0), &arg0) && !isnan(arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAViewAnimation_setAnimationRepeatCount : Error processing arguments");
        CrossApp::CAViewAnimation::setAnimationRepeatCount(arg0);
        args.rval().setUndefined();
        return true;
    }
    JS_ReportError(cx, "js_autogentestbindings_js_CAViewAnimation_setAnimationRepeatCount : wrong number of arguments");
    return false;
}


extern JSObject *jsb_CrossApp_CAObject_prototype;

void js_CrossApp_CAViewAnimation_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOGINFO("jsbindings: finalizing JS object %p (CAViewAnimation)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::CAViewAnimation *nobj = static_cast<CrossApp::CAViewAnimation *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
void js_register_autogentestbindings_js_CAViewAnimation(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_CAViewAnimation_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_CAViewAnimation_class->name = "CAViewAnimation";
    jsb_CrossApp_CAViewAnimation_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_CAViewAnimation_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_CAViewAnimation_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_CAViewAnimation_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_CAViewAnimation_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_CAViewAnimation_class->resolve = JS_ResolveStub;
    jsb_CrossApp_CAViewAnimation_class->convert = JS_ConvertStub;
    jsb_CrossApp_CAViewAnimation_class->finalize = js_CrossApp_CAViewAnimation_finalize;
    jsb_CrossApp_CAViewAnimation_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FS_END
    };

    static JSFunctionSpec st_funcs[] = {
        JS_FN("setAnimationsEnabled", js_autogentestbindings_js_CAViewAnimation_setAnimationsEnabled, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("beginAnimations", js_autogentestbindings_js_CAViewAnimation_beginAnimations, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("areBeginAnimationsWithID", js_autogentestbindings_js_CAViewAnimation_areBeginAnimationsWithID, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setAnimationDelay", js_autogentestbindings_js_CAViewAnimation_setAnimationDelay, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("areAnimationsEnabled", js_autogentestbindings_js_CAViewAnimation_areAnimationsEnabled, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("removeAnimationsWithView", js_autogentestbindings_js_CAViewAnimation_removeAnimationsWithView, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setAnimationDuration", js_autogentestbindings_js_CAViewAnimation_setAnimationDuration, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("removeAnimations", js_autogentestbindings_js_CAViewAnimation_removeAnimations, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("commitAnimations", js_autogentestbindings_js_CAViewAnimation_commitAnimations, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setAnimationRepeatAutoreverses", js_autogentestbindings_js_CAViewAnimation_setAnimationRepeatAutoreverses, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setAnimationCurve", js_autogentestbindings_js_CAViewAnimation_setAnimationCurve, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("areBeginAnimations", js_autogentestbindings_js_CAViewAnimation_areBeginAnimations, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setAnimationRepeatCount", js_autogentestbindings_js_CAViewAnimation_setAnimationRepeatCount, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    jsb_CrossApp_CAViewAnimation_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_CAObject_prototype),
        jsb_CrossApp_CAViewAnimation_class,
        dummy_constructor<CrossApp::CAViewAnimation>, 0, // no constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27 
//  JS_SetPropertyAttributes(cx, global, "CAViewAnimation", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::CAViewAnimation> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_CAViewAnimation_class;
        p->proto = jsb_CrossApp_CAViewAnimation_prototype;
        p->parentProto = jsb_CrossApp_CAObject_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
}

JSClass  *jsb_CrossApp_CAControl_class;
JSObject *jsb_CrossApp_CAControl_prototype;

bool js_autogentestbindings_js_CAControl_setControlStateSelected(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAControl* cobj = (CrossApp::CAControl *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAControl_setControlStateSelected : Invalid Native Object");
    if (argc == 0) {
        cobj->setControlStateSelected();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAControl_setControlStateSelected : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAControl_setControlStateHighlighted(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAControl* cobj = (CrossApp::CAControl *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAControl_setControlStateHighlighted : Invalid Native Object");
    if (argc == 0) {
        cobj->setControlStateHighlighted();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAControl_setControlStateHighlighted : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAControl_getControlState(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAControl* cobj = (CrossApp::CAControl *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAControl_getControlState : Invalid Native Object");
    if (argc == 0) {
        int ret = (int)cobj->getControlState();
        jsval jsret = JSVAL_NULL;
        jsret = int32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAControl_getControlState : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAControl_setControlStateNormal(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAControl* cobj = (CrossApp::CAControl *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAControl_setControlStateNormal : Invalid Native Object");
    if (argc == 0) {
        cobj->setControlStateNormal();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAControl_setControlStateNormal : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAControl_setControlState(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAControl* cobj = (CrossApp::CAControl *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAControl_setControlState : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAControlState arg0;
        ok &= jsval_to_int32(cx, args.get(0), (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAControl_setControlState : Error processing arguments");
        cobj->setControlState(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAControl_setControlState : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAControl_setControlStateLocked(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAControl* cobj = (CrossApp::CAControl *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAControl_setControlStateLocked : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        arg0 = JS::ToBoolean(args.get(0));
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAControl_setControlStateLocked : Error processing arguments");
        cobj->setControlStateLocked(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAControl_setControlStateLocked : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAControl_init(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAControl* cobj = (CrossApp::CAControl *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAControl_init : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->init();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAControl_init : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAControl_getControlStateLocked(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAControl* cobj = (CrossApp::CAControl *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAControl_getControlStateLocked : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->getControlStateLocked();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAControl_getControlStateLocked : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAControl_setControlStateDisabled(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAControl* cobj = (CrossApp::CAControl *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAControl_setControlStateDisabled : Invalid Native Object");
    if (argc == 0) {
        cobj->setControlStateDisabled();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAControl_setControlStateDisabled : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAControl_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    CrossApp::CAControl* cobj = new (std::nothrow) CrossApp::CAControl();
    TypeTest<CrossApp::CAControl> t;
    js_type_class_t *typeClass = nullptr;
    std::string typeName = t.s_name();
    auto typeMapIter = _js_global_type_map.find(typeName);
    CCAssert(typeMapIter != _js_global_type_map.end(), "Can't find the class type!");
    typeClass = typeMapIter->second;
    CCAssert(typeClass, "The value is null.");
    JS::RootedObject proto(cx, typeClass->proto.get());
    JS::RootedObject parent(cx, typeClass->parentProto.get());
    JS::RootedObject obj(cx, JS_NewObject(cx, typeClass->jsclass, proto, parent));
    args.rval().set(OBJECT_TO_JSVAL(obj));
    // link the native object with the javascript object
    js_proxy_t* p = jsb_new_proxy(cobj, obj);
    if (JS_HasProperty(cx, obj, "_ctor", &ok) && ok)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    return true;
}

extern JSObject *jsb_CrossApp_CAView_prototype;

void js_CrossApp_CAControl_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOGINFO("jsbindings: finalizing JS object %p (CAControl)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::CAControl *nobj = static_cast<CrossApp::CAControl *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
void js_register_autogentestbindings_js_CAControl(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_CAControl_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_CAControl_class->name = "CAControl";
    jsb_CrossApp_CAControl_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_CAControl_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_CAControl_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_CAControl_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_CAControl_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_CAControl_class->resolve = JS_ResolveStub;
    jsb_CrossApp_CAControl_class->convert = JS_ConvertStub;
    jsb_CrossApp_CAControl_class->finalize = js_CrossApp_CAControl_finalize;
    jsb_CrossApp_CAControl_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("setControlStateSelected", js_autogentestbindings_js_CAControl_setControlStateSelected, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setControlStateHighlighted", js_autogentestbindings_js_CAControl_setControlStateHighlighted, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getControlState", js_autogentestbindings_js_CAControl_getControlState, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setControlStateNormal", js_autogentestbindings_js_CAControl_setControlStateNormal, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setControlState", js_autogentestbindings_js_CAControl_setControlState, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setControlStateLocked", js_autogentestbindings_js_CAControl_setControlStateLocked, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("init", js_autogentestbindings_js_CAControl_init, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getControlStateLocked", js_autogentestbindings_js_CAControl_getControlStateLocked, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setControlStateDisabled", js_autogentestbindings_js_CAControl_setControlStateDisabled, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    JSFunctionSpec *st_funcs = NULL;

    jsb_CrossApp_CAControl_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_CAView_prototype),
        jsb_CrossApp_CAControl_class,
        js_autogentestbindings_js_CAControl_constructor, 0, // constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27 
//  JS_SetPropertyAttributes(cx, global, "CAControl", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::CAControl> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_CAControl_class;
        p->proto = jsb_CrossApp_CAControl_prototype;
        p->parentProto = jsb_CrossApp_CAView_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
}

JSClass  *jsb_CrossApp_CATouchView_class;
JSObject *jsb_CrossApp_CATouchView_prototype;

bool js_autogentestbindings_js_CATouchView_ccTouchBegan(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATouchView* cobj = (CrossApp::CATouchView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CATouchView_ccTouchBegan : Invalid Native Object");
    if (argc == 2) {
        CrossApp::CATouch* arg0 = nullptr;
        CrossApp::CAEvent* arg1 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CATouch*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        do {
            if (args.get(1).isNull()) { arg1 = nullptr; break; }
            if (!args.get(1).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(1).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg1 = (CrossApp::CAEvent*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg1, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CATouchView_ccTouchBegan : Error processing arguments");
        bool ret = cobj->ccTouchBegan(arg0, arg1);
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CATouchView_ccTouchBegan : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_autogentestbindings_js_CATouchView_ccTouchPress(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATouchView* cobj = (CrossApp::CATouchView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CATouchView_ccTouchPress : Invalid Native Object");
    if (argc == 2) {
        CrossApp::CATouch* arg0 = nullptr;
        CrossApp::CAEvent* arg1 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CATouch*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        do {
            if (args.get(1).isNull()) { arg1 = nullptr; break; }
            if (!args.get(1).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(1).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg1 = (CrossApp::CAEvent*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg1, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CATouchView_ccTouchPress : Error processing arguments");
        cobj->ccTouchPress(arg0, arg1);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CATouchView_ccTouchPress : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_autogentestbindings_js_CATouchView_ccTouchCancelled(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATouchView* cobj = (CrossApp::CATouchView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CATouchView_ccTouchCancelled : Invalid Native Object");
    if (argc == 2) {
        CrossApp::CATouch* arg0 = nullptr;
        CrossApp::CAEvent* arg1 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CATouch*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        do {
            if (args.get(1).isNull()) { arg1 = nullptr; break; }
            if (!args.get(1).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(1).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg1 = (CrossApp::CAEvent*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg1, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CATouchView_ccTouchCancelled : Error processing arguments");
        cobj->ccTouchCancelled(arg0, arg1);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CATouchView_ccTouchCancelled : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_autogentestbindings_js_CATouchView_ccTouchEnded(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATouchView* cobj = (CrossApp::CATouchView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CATouchView_ccTouchEnded : Invalid Native Object");
    if (argc == 2) {
        CrossApp::CATouch* arg0 = nullptr;
        CrossApp::CAEvent* arg1 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CATouch*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        do {
            if (args.get(1).isNull()) { arg1 = nullptr; break; }
            if (!args.get(1).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(1).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg1 = (CrossApp::CAEvent*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg1, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CATouchView_ccTouchEnded : Error processing arguments");
        cobj->ccTouchEnded(arg0, arg1);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CATouchView_ccTouchEnded : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_autogentestbindings_js_CATouchView_ccTouchMoved(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATouchView* cobj = (CrossApp::CATouchView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CATouchView_ccTouchMoved : Invalid Native Object");
    if (argc == 2) {
        CrossApp::CATouch* arg0 = nullptr;
        CrossApp::CAEvent* arg1 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CATouch*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        do {
            if (args.get(1).isNull()) { arg1 = nullptr; break; }
            if (!args.get(1).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(1).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg1 = (CrossApp::CAEvent*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg1, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CATouchView_ccTouchMoved : Error processing arguments");
        cobj->ccTouchMoved(arg0, arg1);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CATouchView_ccTouchMoved : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_autogentestbindings_js_CATouchView_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    CrossApp::CATouchView* cobj = new (std::nothrow) CrossApp::CATouchView();
    TypeTest<CrossApp::CATouchView> t;
    js_type_class_t *typeClass = nullptr;
    std::string typeName = t.s_name();
    auto typeMapIter = _js_global_type_map.find(typeName);
    CCAssert(typeMapIter != _js_global_type_map.end(), "Can't find the class type!");
    typeClass = typeMapIter->second;
    CCAssert(typeClass, "The value is null.");
    JS::RootedObject proto(cx, typeClass->proto.get());
    JS::RootedObject parent(cx, typeClass->parentProto.get());
    JS::RootedObject obj(cx, JS_NewObject(cx, typeClass->jsclass, proto, parent));
    args.rval().set(OBJECT_TO_JSVAL(obj));
    // link the native object with the javascript object
    js_proxy_t* p = jsb_new_proxy(cobj, obj);
    if (JS_HasProperty(cx, obj, "_ctor", &ok) && ok)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    return true;
}

extern JSObject *jsb_CrossApp_CAView_prototype;

void js_CrossApp_CATouchView_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOGINFO("jsbindings: finalizing JS object %p (CATouchView)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::CATouchView *nobj = static_cast<CrossApp::CATouchView *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
void js_register_autogentestbindings_js_CATouchView(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_CATouchView_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_CATouchView_class->name = "CATouchView";
    jsb_CrossApp_CATouchView_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_CATouchView_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_CATouchView_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_CATouchView_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_CATouchView_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_CATouchView_class->resolve = JS_ResolveStub;
    jsb_CrossApp_CATouchView_class->convert = JS_ConvertStub;
    jsb_CrossApp_CATouchView_class->finalize = js_CrossApp_CATouchView_finalize;
    jsb_CrossApp_CATouchView_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("ccTouchBegan", js_autogentestbindings_js_CATouchView_ccTouchBegan, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("ccTouchPress", js_autogentestbindings_js_CATouchView_ccTouchPress, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("ccTouchCancelled", js_autogentestbindings_js_CATouchView_ccTouchCancelled, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("ccTouchEnded", js_autogentestbindings_js_CATouchView_ccTouchEnded, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("ccTouchMoved", js_autogentestbindings_js_CATouchView_ccTouchMoved, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    JSFunctionSpec *st_funcs = NULL;

    jsb_CrossApp_CATouchView_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_CAView_prototype),
        jsb_CrossApp_CATouchView_class,
        js_autogentestbindings_js_CATouchView_constructor, 0, // constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27 
//  JS_SetPropertyAttributes(cx, global, "CATouchView", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::CATouchView> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_CATouchView_class;
        p->proto = jsb_CrossApp_CATouchView_prototype;
        p->parentProto = jsb_CrossApp_CAView_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
}

JSClass  *jsb_CrossApp_CATextToolBarView_class;
JSObject *jsb_CrossApp_CATextToolBarView_prototype;

bool js_autogentestbindings_js_CATextToolBarView_show(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATextToolBarView* cobj = (CrossApp::CATextToolBarView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CATextToolBarView_show : Invalid Native Object");
    if (argc == 0) {
        cobj->show();
        args.rval().setUndefined();
        return true;
    }
    if (argc == 1) {
        CrossApp::CAView* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAView*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CATextToolBarView_show : Error processing arguments");
        cobj->show(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CATextToolBarView_show : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CATextToolBarView_isTextToolBarShow(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    if (argc == 0) {
        bool ret = CrossApp::CATextToolBarView::isTextToolBarShow();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_autogentestbindings_js_CATextToolBarView_isTextToolBarShow : wrong number of arguments");
    return false;
}

bool js_autogentestbindings_js_CATextToolBarView_create(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    if (argc == 0) {
        CrossApp::CATextToolBarView* ret = CrossApp::CATextToolBarView::create();
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CATextToolBarView>(cx, (CrossApp::CATextToolBarView*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_autogentestbindings_js_CATextToolBarView_create : wrong number of arguments");
    return false;
}

bool js_autogentestbindings_js_CATextToolBarView_hideTextToolBar(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    if (argc == 0) {
        CrossApp::CATextToolBarView::hideTextToolBar();
        args.rval().setUndefined();
        return true;
    }
    JS_ReportError(cx, "js_autogentestbindings_js_CATextToolBarView_hideTextToolBar : wrong number of arguments");
    return false;
}

bool js_autogentestbindings_js_CATextToolBarView_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    CrossApp::CATextToolBarView* cobj = new (std::nothrow) CrossApp::CATextToolBarView();
    TypeTest<CrossApp::CATextToolBarView> t;
    js_type_class_t *typeClass = nullptr;
    std::string typeName = t.s_name();
    auto typeMapIter = _js_global_type_map.find(typeName);
    CCAssert(typeMapIter != _js_global_type_map.end(), "Can't find the class type!");
    typeClass = typeMapIter->second;
    CCAssert(typeClass, "The value is null.");
    JS::RootedObject proto(cx, typeClass->proto.get());
    JS::RootedObject parent(cx, typeClass->parentProto.get());
    JS::RootedObject obj(cx, JS_NewObject(cx, typeClass->jsclass, proto, parent));
    args.rval().set(OBJECT_TO_JSVAL(obj));
    // link the native object with the javascript object
    js_proxy_t* p = jsb_new_proxy(cobj, obj);
    if (JS_HasProperty(cx, obj, "_ctor", &ok) && ok)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    return true;
}

extern JSObject *jsb_CrossApp_CAView_prototype;

void js_CrossApp_CATextToolBarView_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOGINFO("jsbindings: finalizing JS object %p (CATextToolBarView)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::CATextToolBarView *nobj = static_cast<CrossApp::CATextToolBarView *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
void js_register_autogentestbindings_js_CATextToolBarView(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_CATextToolBarView_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_CATextToolBarView_class->name = "CATextToolBarView";
    jsb_CrossApp_CATextToolBarView_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_CATextToolBarView_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_CATextToolBarView_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_CATextToolBarView_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_CATextToolBarView_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_CATextToolBarView_class->resolve = JS_ResolveStub;
    jsb_CrossApp_CATextToolBarView_class->convert = JS_ConvertStub;
    jsb_CrossApp_CATextToolBarView_class->finalize = js_CrossApp_CATextToolBarView_finalize;
    jsb_CrossApp_CATextToolBarView_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("show", js_autogentestbindings_js_CATextToolBarView_show, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    static JSFunctionSpec st_funcs[] = {
        JS_FN("isTextToolBarShow", js_autogentestbindings_js_CATextToolBarView_isTextToolBarShow, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("create", js_autogentestbindings_js_CATextToolBarView_create, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("hideTextToolBar", js_autogentestbindings_js_CATextToolBarView_hideTextToolBar, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    jsb_CrossApp_CATextToolBarView_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_CAView_prototype),
        jsb_CrossApp_CATextToolBarView_class,
        js_autogentestbindings_js_CATextToolBarView_constructor, 0, // constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27 
//  JS_SetPropertyAttributes(cx, global, "CATextToolBarView", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::CATextToolBarView> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_CATextToolBarView_class;
        p->proto = jsb_CrossApp_CATextToolBarView_prototype;
        p->parentProto = jsb_CrossApp_CAView_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
}

JSClass  *jsb_CrossApp_CATextResponder_class;
JSObject *jsb_CrossApp_CATextResponder_prototype;

bool js_autogentestbindings_js_CATextResponder_resignAllResponder(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATextResponder* cobj = (CrossApp::CATextResponder *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CATextResponder_resignAllResponder : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CATextResponder* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CATextResponder*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CATextResponder_resignAllResponder : Error processing arguments");
        cobj->resignAllResponder(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CATextResponder_resignAllResponder : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CATextResponder_resignResponder(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATextResponder* cobj = (CrossApp::CATextResponder *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CATextResponder_resignResponder : Invalid Native Object");
    if (argc == 0) {
        cobj->resignResponder();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CATextResponder_resignResponder : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CATextResponder_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    CrossApp::CATextResponder* cobj = new (std::nothrow) CrossApp::CATextResponder();
    TypeTest<CrossApp::CATextResponder> t;
    js_type_class_t *typeClass = nullptr;
    std::string typeName = t.s_name();
    auto typeMapIter = _js_global_type_map.find(typeName);
    CCAssert(typeMapIter != _js_global_type_map.end(), "Can't find the class type!");
    typeClass = typeMapIter->second;
    CCAssert(typeClass, "The value is null.");
    JS::RootedObject proto(cx, typeClass->proto.get());
    JS::RootedObject parent(cx, typeClass->parentProto.get());
    JS::RootedObject obj(cx, JS_NewObject(cx, typeClass->jsclass, proto, parent));
    args.rval().set(OBJECT_TO_JSVAL(obj));
    // link the native object with the javascript object
    js_proxy_t* p = jsb_new_proxy(cobj, obj);
    if (JS_HasProperty(cx, obj, "_ctor", &ok) && ok)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    return true;
}

void js_CrossApp_CATextResponder_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOGINFO("jsbindings: finalizing JS object %p (CATextResponder)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::CATextResponder *nobj = static_cast<CrossApp::CATextResponder *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
void js_register_autogentestbindings_js_CATextResponder(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_CATextResponder_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_CATextResponder_class->name = "CATextResponder";
    jsb_CrossApp_CATextResponder_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_CATextResponder_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_CATextResponder_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_CATextResponder_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_CATextResponder_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_CATextResponder_class->resolve = JS_ResolveStub;
    jsb_CrossApp_CATextResponder_class->convert = JS_ConvertStub;
    jsb_CrossApp_CATextResponder_class->finalize = js_CrossApp_CATextResponder_finalize;
    jsb_CrossApp_CATextResponder_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("resignAllResponder", js_autogentestbindings_js_CATextResponder_resignAllResponder, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("resignResponder", js_autogentestbindings_js_CATextResponder_resignResponder, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    JSFunctionSpec *st_funcs = NULL;

    jsb_CrossApp_CATextResponder_prototype = JS_InitClass(
        cx, global,
        JS::NullPtr(), // parent proto
        jsb_CrossApp_CATextResponder_class,
        js_autogentestbindings_js_CATextResponder_constructor, 0, // constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27 
//  JS_SetPropertyAttributes(cx, global, "CATextResponder", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::CATextResponder> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_CATextResponder_class;
        p->proto = jsb_CrossApp_CATextResponder_prototype;
        p->parentProto = NULL;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
}

JSClass  *jsb_CrossApp_CALabel_class;
JSObject *jsb_CrossApp_CALabel_prototype;

bool js_autogentestbindings_js_CALabel_setTextAlignment(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CALabel* cobj = (CrossApp::CALabel *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CALabel_setTextAlignment : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CATextAlignment arg0;
        ok &= jsval_to_int32(cx, args.get(0), (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CALabel_setTextAlignment : Error processing arguments");
        cobj->setTextAlignment(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CALabel_setTextAlignment : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CALabel_setDimensions(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CALabel* cobj = (CrossApp::CALabel *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CALabel_setDimensions : Invalid Native Object");
    if (argc == 1) {
        CrossApp::DSize arg0;
        ok &= jsval_to_dsize(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CALabel_setDimensions : Error processing arguments");
        cobj->setDimensions(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CALabel_setDimensions : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CALabel_getFontSize(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CALabel* cobj = (CrossApp::CALabel *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CALabel_getFontSize : Invalid Native Object");
    if (argc == 0) {
        unsigned int ret = cobj->getFontSize();
        jsval jsret = JSVAL_NULL;
        jsret = uint32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CALabel_getFontSize : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CALabel_getText(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CALabel* cobj = (CrossApp::CALabel *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CALabel_getText : Invalid Native Object");
    if (argc == 0) {
        const std::string& ret = cobj->getText();
        jsval jsret = JSVAL_NULL;
        jsret = std_string_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CALabel_getText : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CALabel_isBold(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CALabel* cobj = (CrossApp::CALabel *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CALabel_isBold : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->isBold();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CALabel_isBold : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CALabel_setUnderLine(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CALabel* cobj = (CrossApp::CALabel *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CALabel_setUnderLine : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        arg0 = JS::ToBoolean(args.get(0));
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CALabel_setUnderLine : Error processing arguments");
        cobj->setUnderLine(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CALabel_setUnderLine : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CALabel_isDeleteLine(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CALabel* cobj = (CrossApp::CALabel *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CALabel_isDeleteLine : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->isDeleteLine();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CALabel_isDeleteLine : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CALabel_setFontName(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CALabel* cobj = (CrossApp::CALabel *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CALabel_setFontName : Invalid Native Object");
    if (argc == 1) {
        std::string arg0;
        ok &= jsval_to_std_string(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CALabel_setFontName : Error processing arguments");
        cobj->setFontName(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CALabel_setFontName : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CALabel_isItalics(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CALabel* cobj = (CrossApp::CALabel *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CALabel_isItalics : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->isItalics();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CALabel_isItalics : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CALabel_setLineSpacing(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CALabel* cobj = (CrossApp::CALabel *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CALabel_setLineSpacing : Invalid Native Object");
    if (argc == 1) {
        int arg0 = 0;
        ok &= jsval_to_int32(cx, args.get(0), (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CALabel_setLineSpacing : Error processing arguments");
        cobj->setLineSpacing(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CALabel_setLineSpacing : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CALabel_setBold(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CALabel* cobj = (CrossApp::CALabel *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CALabel_setBold : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        arg0 = JS::ToBoolean(args.get(0));
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CALabel_setBold : Error processing arguments");
        cobj->setBold(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CALabel_setBold : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CALabel_isUnderLine(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CALabel* cobj = (CrossApp::CALabel *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CALabel_isUnderLine : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->isUnderLine();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CALabel_isUnderLine : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CALabel_sizeToFit(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CALabel* cobj = (CrossApp::CALabel *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CALabel_sizeToFit : Invalid Native Object");
    if (argc == 0) {
        cobj->sizeToFit();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CALabel_sizeToFit : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CALabel_getLabelSize(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CALabel* cobj = (CrossApp::CALabel *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CALabel_getLabelSize : Invalid Native Object");
    if (argc == 0) {
        const CrossApp::DSize& ret = cobj->getLabelSize();
        jsval jsret = JSVAL_NULL;
        jsret = dsize_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CALabel_getLabelSize : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CALabel_visitEve(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CALabel* cobj = (CrossApp::CALabel *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CALabel_visitEve : Invalid Native Object");
    if (argc == 0) {
        cobj->visitEve();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CALabel_visitEve : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CALabel_getColor(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CALabel* cobj = (CrossApp::CALabel *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CALabel_getColor : Invalid Native Object");
    if (argc == 0) {
        const CrossApp::CAColor4B& ret = cobj->getColor();
        jsval jsret = JSVAL_NULL;
        jsret = cacolor4b_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CALabel_getColor : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CALabel_getEnableCopy(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CALabel* cobj = (CrossApp::CALabel *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CALabel_getEnableCopy : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->getEnableCopy();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CALabel_getEnableCopy : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CALabel_getFontName(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CALabel* cobj = (CrossApp::CALabel *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CALabel_getFontName : Invalid Native Object");
    if (argc == 0) {
        const std::string& ret = cobj->getFontName();
        jsval jsret = JSVAL_NULL;
        jsret = std_string_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CALabel_getFontName : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CALabel_getLineSpacing(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CALabel* cobj = (CrossApp::CALabel *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CALabel_getLineSpacing : Invalid Native Object");
    if (argc == 0) {
        int ret = cobj->getLineSpacing();
        jsval jsret = JSVAL_NULL;
        jsret = int32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CALabel_getLineSpacing : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CALabel_setVerticalTextAlignmet(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CALabel* cobj = (CrossApp::CALabel *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CALabel_setVerticalTextAlignmet : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAVerticalTextAlignment arg0;
        ok &= jsval_to_int32(cx, args.get(0), (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CALabel_setVerticalTextAlignmet : Error processing arguments");
        cobj->setVerticalTextAlignmet(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CALabel_setVerticalTextAlignmet : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CALabel_getFont(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CALabel* cobj = (CrossApp::CALabel *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CALabel_getFont : Invalid Native Object");
    if (argc == 0) {
        const CrossApp::CAFont& ret = cobj->getFont();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAFont&>(cx, (CrossApp::CAFont&)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CALabel_getFont : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CALabel_getVerticalTextAlignmet(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CALabel* cobj = (CrossApp::CALabel *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CALabel_getVerticalTextAlignmet : Invalid Native Object");
    if (argc == 0) {
        int ret = (int)cobj->getVerticalTextAlignmet();
        jsval jsret = JSVAL_NULL;
        jsret = int32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CALabel_getVerticalTextAlignmet : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CALabel_setItalics(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CALabel* cobj = (CrossApp::CALabel *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CALabel_setItalics : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        arg0 = JS::ToBoolean(args.get(0));
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CALabel_setItalics : Error processing arguments");
        cobj->setItalics(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CALabel_setItalics : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CALabel_setWordWrap(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CALabel* cobj = (CrossApp::CALabel *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CALabel_setWordWrap : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        arg0 = JS::ToBoolean(args.get(0));
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CALabel_setWordWrap : Error processing arguments");
        cobj->setWordWrap(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CALabel_setWordWrap : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CALabel_getDimensions(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CALabel* cobj = (CrossApp::CALabel *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CALabel_getDimensions : Invalid Native Object");
    if (argc == 0) {
        const CrossApp::DSize& ret = cobj->getDimensions();
        jsval jsret = JSVAL_NULL;
        jsret = dsize_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CALabel_getDimensions : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CALabel_getNumberOfLine(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CALabel* cobj = (CrossApp::CALabel *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CALabel_getNumberOfLine : Invalid Native Object");
    if (argc == 0) {
        unsigned int ret = cobj->getNumberOfLine();
        jsval jsret = JSVAL_NULL;
        jsret = uint32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CALabel_getNumberOfLine : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CALabel_setFontSize(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CALabel* cobj = (CrossApp::CALabel *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CALabel_setFontSize : Invalid Native Object");
    if (argc == 1) {
        unsigned int arg0 = 0;
        ok &= jsval_to_uint32(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CALabel_setFontSize : Error processing arguments");
        cobj->setFontSize(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CALabel_setFontSize : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CALabel_isWordWrap(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CALabel* cobj = (CrossApp::CALabel *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CALabel_isWordWrap : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->isWordWrap();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CALabel_isWordWrap : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CALabel_setColor(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CALabel* cobj = (CrossApp::CALabel *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CALabel_setColor : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAColor4B arg0;
        ok &= jsval_to_cacolor4b(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CALabel_setColor : Error processing arguments");
        cobj->setColor(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CALabel_setColor : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CALabel_setDeleteLine(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CALabel* cobj = (CrossApp::CALabel *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CALabel_setDeleteLine : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        arg0 = JS::ToBoolean(args.get(0));
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CALabel_setDeleteLine : Error processing arguments");
        cobj->setDeleteLine(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CALabel_setDeleteLine : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CALabel_unsizeToFit(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CALabel* cobj = (CrossApp::CALabel *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CALabel_unsizeToFit : Invalid Native Object");
    if (argc == 0) {
        cobj->unsizeToFit();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CALabel_unsizeToFit : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CALabel_setText(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CALabel* cobj = (CrossApp::CALabel *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CALabel_setText : Invalid Native Object");
    if (argc == 1) {
        std::string arg0;
        ok &= jsval_to_std_string(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CALabel_setText : Error processing arguments");
        cobj->setText(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CALabel_setText : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CALabel_setEnableCopy(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CALabel* cobj = (CrossApp::CALabel *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CALabel_setEnableCopy : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        arg0 = JS::ToBoolean(args.get(0));
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CALabel_setEnableCopy : Error processing arguments");
        cobj->setEnableCopy(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CALabel_setEnableCopy : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CALabel_getTextAlignment(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CALabel* cobj = (CrossApp::CALabel *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CALabel_getTextAlignment : Invalid Native Object");
    if (argc == 0) {
        int ret = (int)cobj->getTextAlignment();
        jsval jsret = JSVAL_NULL;
        jsret = int32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CALabel_getTextAlignment : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CALabel_setNumberOfLine(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CALabel* cobj = (CrossApp::CALabel *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CALabel_setNumberOfLine : Invalid Native Object");
    if (argc == 1) {
        unsigned int arg0 = 0;
        ok &= jsval_to_uint32(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CALabel_setNumberOfLine : Error processing arguments");
        cobj->setNumberOfLine(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CALabel_setNumberOfLine : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CALabel_setFont(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CALabel* cobj = (CrossApp::CALabel *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CALabel_setFont : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAFont arg0;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (const CrossApp::CAFont&)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CALabel_setFont : Error processing arguments");
        cobj->setFont(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CALabel_setFont : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CALabel_create(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    if (argc == 0) {
        CrossApp::CALabel* ret = CrossApp::CALabel::create();
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CALabel>(cx, (CrossApp::CALabel*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_autogentestbindings_js_CALabel_create : wrong number of arguments");
    return false;
}

bool js_autogentestbindings_js_CALabel_createWithFrame(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        CrossApp::DRect arg0;
        ok &= jsval_to_drect(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CALabel_createWithFrame : Error processing arguments");
        CrossApp::CALabel* ret = CrossApp::CALabel::createWithFrame(arg0);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CALabel>(cx, (CrossApp::CALabel*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_autogentestbindings_js_CALabel_createWithFrame : wrong number of arguments");
    return false;
}

bool js_autogentestbindings_js_CALabel_createWithLayout(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        CrossApp::DRectLayout arg0;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (const CrossApp::DRectLayout&)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CALabel_createWithLayout : Error processing arguments");
        CrossApp::CALabel* ret = CrossApp::CALabel::createWithLayout(arg0);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CALabel>(cx, (CrossApp::CALabel*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_autogentestbindings_js_CALabel_createWithLayout : wrong number of arguments");
    return false;
}

bool js_autogentestbindings_js_CALabel_createWithCenter(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        CrossApp::DRect arg0;
        ok &= jsval_to_drect(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CALabel_createWithCenter : Error processing arguments");
        CrossApp::CALabel* ret = CrossApp::CALabel::createWithCenter(arg0);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CALabel>(cx, (CrossApp::CALabel*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_autogentestbindings_js_CALabel_createWithCenter : wrong number of arguments");
    return false;
}

bool js_autogentestbindings_js_CALabel_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    CrossApp::CALabel* cobj = new (std::nothrow) CrossApp::CALabel();
    TypeTest<CrossApp::CALabel> t;
    js_type_class_t *typeClass = nullptr;
    std::string typeName = t.s_name();
    auto typeMapIter = _js_global_type_map.find(typeName);
    CCAssert(typeMapIter != _js_global_type_map.end(), "Can't find the class type!");
    typeClass = typeMapIter->second;
    CCAssert(typeClass, "The value is null.");
    JS::RootedObject proto(cx, typeClass->proto.get());
    JS::RootedObject parent(cx, typeClass->parentProto.get());
    JS::RootedObject obj(cx, JS_NewObject(cx, typeClass->jsclass, proto, parent));
    args.rval().set(OBJECT_TO_JSVAL(obj));
    // link the native object with the javascript object
    js_proxy_t* p = jsb_new_proxy(cobj, obj);
    if (JS_HasProperty(cx, obj, "_ctor", &ok) && ok)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    return true;
}

extern JSObject *jsb_CrossApp_CATouchView_prototype;

void js_CrossApp_CALabel_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOGINFO("jsbindings: finalizing JS object %p (CALabel)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::CALabel *nobj = static_cast<CrossApp::CALabel *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
void js_register_autogentestbindings_js_CALabel(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_CALabel_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_CALabel_class->name = "CALabel";
    jsb_CrossApp_CALabel_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_CALabel_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_CALabel_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_CALabel_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_CALabel_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_CALabel_class->resolve = JS_ResolveStub;
    jsb_CrossApp_CALabel_class->convert = JS_ConvertStub;
    jsb_CrossApp_CALabel_class->finalize = js_CrossApp_CALabel_finalize;
    jsb_CrossApp_CALabel_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("setTextAlignment", js_autogentestbindings_js_CALabel_setTextAlignment, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setDimensions", js_autogentestbindings_js_CALabel_setDimensions, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getFontSize", js_autogentestbindings_js_CALabel_getFontSize, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getText", js_autogentestbindings_js_CALabel_getText, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isBold", js_autogentestbindings_js_CALabel_isBold, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setUnderLine", js_autogentestbindings_js_CALabel_setUnderLine, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isDeleteLine", js_autogentestbindings_js_CALabel_isDeleteLine, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setFontName", js_autogentestbindings_js_CALabel_setFontName, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isItalics", js_autogentestbindings_js_CALabel_isItalics, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setLineSpacing", js_autogentestbindings_js_CALabel_setLineSpacing, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setBold", js_autogentestbindings_js_CALabel_setBold, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isUnderLine", js_autogentestbindings_js_CALabel_isUnderLine, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("sizeToFit", js_autogentestbindings_js_CALabel_sizeToFit, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getLabelSize", js_autogentestbindings_js_CALabel_getLabelSize, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("visitEve", js_autogentestbindings_js_CALabel_visitEve, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getColor", js_autogentestbindings_js_CALabel_getColor, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getEnableCopy", js_autogentestbindings_js_CALabel_getEnableCopy, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getFontName", js_autogentestbindings_js_CALabel_getFontName, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getLineSpacing", js_autogentestbindings_js_CALabel_getLineSpacing, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setVerticalTextAlignmet", js_autogentestbindings_js_CALabel_setVerticalTextAlignmet, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getFont", js_autogentestbindings_js_CALabel_getFont, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getVerticalTextAlignmet", js_autogentestbindings_js_CALabel_getVerticalTextAlignmet, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setItalics", js_autogentestbindings_js_CALabel_setItalics, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setWordWrap", js_autogentestbindings_js_CALabel_setWordWrap, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getDimensions", js_autogentestbindings_js_CALabel_getDimensions, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getNumberOfLine", js_autogentestbindings_js_CALabel_getNumberOfLine, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setFontSize", js_autogentestbindings_js_CALabel_setFontSize, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isWordWrap", js_autogentestbindings_js_CALabel_isWordWrap, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setColor", js_autogentestbindings_js_CALabel_setColor, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setDeleteLine", js_autogentestbindings_js_CALabel_setDeleteLine, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("unsizeToFit", js_autogentestbindings_js_CALabel_unsizeToFit, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setText", js_autogentestbindings_js_CALabel_setText, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setEnableCopy", js_autogentestbindings_js_CALabel_setEnableCopy, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getTextAlignment", js_autogentestbindings_js_CALabel_getTextAlignment, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setNumberOfLine", js_autogentestbindings_js_CALabel_setNumberOfLine, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setFont", js_autogentestbindings_js_CALabel_setFont, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    static JSFunctionSpec st_funcs[] = {
        JS_FN("create", js_autogentestbindings_js_CALabel_create, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("createWithFrame", js_autogentestbindings_js_CALabel_createWithFrame, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("createWithLayout", js_autogentestbindings_js_CALabel_createWithLayout, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("createWithCenter", js_autogentestbindings_js_CALabel_createWithCenter, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    jsb_CrossApp_CALabel_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_CATouchView_prototype),
        jsb_CrossApp_CALabel_class,
        js_autogentestbindings_js_CALabel_constructor, 0, // constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27 
//  JS_SetPropertyAttributes(cx, global, "CALabel", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::CALabel> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_CALabel_class;
        p->proto = jsb_CrossApp_CALabel_prototype;
        p->parentProto = jsb_CrossApp_CATouchView_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
}

JSClass  *jsb_CrossApp_CAApplication_class;
JSObject *jsb_CrossApp_CAApplication_prototype;

bool js_autogentestbindings_js_CAApplication_setDefaultValues(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAApplication* cobj = (CrossApp::CAApplication *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAApplication_setDefaultValues : Invalid Native Object");
    if (argc == 0) {
        cobj->setDefaultValues();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAApplication_setDefaultValues : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAApplication_getDeltaTime(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAApplication* cobj = (CrossApp::CAApplication *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAApplication_getDeltaTime : Invalid Native Object");
    if (argc == 0) {
        double ret = cobj->getDeltaTime();
        jsval jsret = JSVAL_NULL;
        jsret = DOUBLE_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAApplication_getDeltaTime : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAApplication_setGLDefaultValues(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAApplication* cobj = (CrossApp::CAApplication *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAApplication_setGLDefaultValues : Invalid Native Object");
    if (argc == 0) {
        cobj->setGLDefaultValues();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAApplication_setGLDefaultValues : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAApplication_setAlphaBlending(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAApplication* cobj = (CrossApp::CAApplication *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAApplication_setAlphaBlending : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        arg0 = JS::ToBoolean(args.get(0));
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAApplication_setAlphaBlending : Error processing arguments");
        cobj->setAlphaBlending(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAApplication_setAlphaBlending : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAApplication_updateDraw(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAApplication* cobj = (CrossApp::CAApplication *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAApplication_updateDraw : Invalid Native Object");
    if (argc == 0) {
        cobj->updateDraw();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAApplication_updateDraw : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAApplication_getKeypadDispatcher(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAApplication* cobj = (CrossApp::CAApplication *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAApplication_getKeypadDispatcher : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CAKeypadDispatcher* ret = cobj->getKeypadDispatcher();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAKeypadDispatcher>(cx, (CrossApp::CAKeypadDispatcher*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAApplication_getKeypadDispatcher : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAApplication_getWinSize(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAApplication* cobj = (CrossApp::CAApplication *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAApplication_getWinSize : Invalid Native Object");
    if (argc == 0) {
        CrossApp::DSize ret = cobj->getWinSize();
        jsval jsret = JSVAL_NULL;
        jsret = dsize_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAApplication_getWinSize : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAApplication_end(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAApplication* cobj = (CrossApp::CAApplication *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAApplication_end : Invalid Native Object");
    if (argc == 0) {
        cobj->end();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAApplication_end : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAApplication_runWindow(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAApplication* cobj = (CrossApp::CAApplication *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAApplication_runWindow : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAWindow* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAWindow*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAApplication_runWindow : Error processing arguments");
        cobj->runWindow(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAApplication_runWindow : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAApplication_getAnimationInterval(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAApplication* cobj = (CrossApp::CAApplication *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAApplication_getAnimationInterval : Invalid Native Object");
    if (argc == 0) {
        double ret = cobj->getAnimationInterval();
        jsval jsret = JSVAL_NULL;
        jsret = DOUBLE_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAApplication_getAnimationInterval : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAApplication_getVisibleOrigin(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAApplication* cobj = (CrossApp::CAApplication *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAApplication_getVisibleOrigin : Invalid Native Object");
    if (argc == 0) {
        CrossApp::DPoint ret = cobj->getVisibleOrigin();
        jsval jsret = JSVAL_NULL;
        jsret = dpoint_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAApplication_getVisibleOrigin : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAApplication_mainLoop(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAApplication* cobj = (CrossApp::CAApplication *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAApplication_mainLoop : Invalid Native Object");
    if (argc == 0) {
        cobj->mainLoop();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAApplication_mainLoop : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAApplication_isDrawing(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAApplication* cobj = (CrossApp::CAApplication *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAApplication_isDrawing : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->isDrawing();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAApplication_isDrawing : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAApplication_setDepthTest(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAApplication* cobj = (CrossApp::CAApplication *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAApplication_setDepthTest : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        arg0 = JS::ToBoolean(args.get(0));
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAApplication_setDepthTest : Error processing arguments");
        cobj->setDepthTest(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAApplication_setDepthTest : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAApplication_getSecondsPerFrame(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAApplication* cobj = (CrossApp::CAApplication *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAApplication_getSecondsPerFrame : Invalid Native Object");
    if (argc == 0) {
        double ret = cobj->getSecondsPerFrame();
        jsval jsret = JSVAL_NULL;
        jsret = DOUBLE_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAApplication_getSecondsPerFrame : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAApplication_convertToUI(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAApplication* cobj = (CrossApp::CAApplication *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAApplication_convertToUI : Invalid Native Object");
    if (argc == 1) {
        CrossApp::DPoint arg0 = 0;
        ok &= jsval_to_dpoint(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAApplication_convertToUI : Error processing arguments");
        CrossApp::DPoint ret = cobj->convertToUI(arg0);
        jsval jsret = JSVAL_NULL;
        jsret = dpoint_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAApplication_convertToUI : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAApplication_setAccelerometer(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAApplication* cobj = (CrossApp::CAApplication *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAApplication_setAccelerometer : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CCAccelerometer* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CCAccelerometer*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAApplication_setAccelerometer : Error processing arguments");
        cobj->setAccelerometer(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAApplication_setAccelerometer : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAApplication_getStatusBarStyle(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAApplication* cobj = (CrossApp::CAApplication *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAApplication_getStatusBarStyle : Invalid Native Object");
    if (argc == 0) {
        int ret = (int)cobj->getStatusBarStyle();
        jsval jsret = JSVAL_NULL;
        jsret = int32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAApplication_getStatusBarStyle : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAApplication_init(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAApplication* cobj = (CrossApp::CAApplication *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAApplication_init : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->init();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAApplication_init : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAApplication_reshapeProjection(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAApplication* cobj = (CrossApp::CAApplication *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAApplication_reshapeProjection : Invalid Native Object");
    if (argc == 1) {
        CrossApp::DSize arg0;
        ok &= jsval_to_dsize(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAApplication_reshapeProjection : Error processing arguments");
        cobj->reshapeProjection(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAApplication_reshapeProjection : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAApplication_startAnimation(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAApplication* cobj = (CrossApp::CAApplication *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAApplication_startAnimation : Invalid Native Object");
    if (argc == 0) {
        cobj->startAnimation();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAApplication_startAnimation : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAApplication_getAdaptationRatio(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAApplication* cobj = (CrossApp::CAApplication *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAApplication_getAdaptationRatio : Invalid Native Object");
    if (argc == 0) {
        double ret = cobj->getAdaptationRatio();
        jsval jsret = JSVAL_NULL;
        jsret = DOUBLE_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAApplication_getAdaptationRatio : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAApplication_getOpenGLView(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAApplication* cobj = (CrossApp::CAApplication *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAApplication_getOpenGLView : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CCEGLView* ret = cobj->getOpenGLView();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CCEGLView>(cx, (CrossApp::CCEGLView*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAApplication_getOpenGLView : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAApplication_setViewport(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAApplication* cobj = (CrossApp::CAApplication *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAApplication_setViewport : Invalid Native Object");
    if (argc == 0) {
        cobj->setViewport();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAApplication_setViewport : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAApplication_stopAnimation(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAApplication* cobj = (CrossApp::CAApplication *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAApplication_stopAnimation : Invalid Native Object");
    if (argc == 0) {
        cobj->stopAnimation();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAApplication_stopAnimation : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAApplication_getNumberOfDraws(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAApplication* cobj = (CrossApp::CAApplication *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAApplication_getNumberOfDraws : Invalid Native Object");
    if (argc == 0) {
        unsigned long ret = cobj->getNumberOfDraws();
        jsval jsret = JSVAL_NULL;
        jsret = ulong_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAApplication_getNumberOfDraws : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAApplication_setKeypadDispatcher(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAApplication* cobj = (CrossApp::CAApplication *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAApplication_setKeypadDispatcher : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAKeypadDispatcher* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAKeypadDispatcher*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAApplication_setKeypadDispatcher : Error processing arguments");
        cobj->setKeypadDispatcher(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAApplication_setKeypadDispatcher : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAApplication_run(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAApplication* cobj = (CrossApp::CAApplication *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAApplication_run : Invalid Native Object");
    if (argc == 1) {
        double arg0 = 0;
        ok &= JS::ToNumber( cx, args.get(0), &arg0) && !isnan(arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAApplication_run : Error processing arguments");
        cobj->run(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAApplication_run : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAApplication_getProjection(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAApplication* cobj = (CrossApp::CAApplication *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAApplication_getProjection : Invalid Native Object");
    if (argc == 0) {
        int ret = (int)cobj->getProjection();
        jsval jsret = JSVAL_NULL;
        jsret = int32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAApplication_getProjection : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAApplication_resume(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAApplication* cobj = (CrossApp::CAApplication *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAApplication_resume : Invalid Native Object");
    if (argc == 0) {
        cobj->resume();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAApplication_resume : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAApplication_isStatusBarHidden(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAApplication* cobj = (CrossApp::CAApplication *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAApplication_isStatusBarHidden : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->isStatusBarHidden();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAApplication_isStatusBarHidden : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAApplication_isNextDeltaTimeZero(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAApplication* cobj = (CrossApp::CAApplication *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAApplication_isNextDeltaTimeZero : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->isNextDeltaTimeZero();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAApplication_isNextDeltaTimeZero : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAApplication_getCurrentNumberOfDraws(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAApplication* cobj = (CrossApp::CAApplication *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAApplication_getCurrentNumberOfDraws : Invalid Native Object");
    if (argc == 0) {
        unsigned long ret = cobj->getCurrentNumberOfDraws();
        jsval jsret = JSVAL_NULL;
        jsret = ulong_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAApplication_getCurrentNumberOfDraws : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAApplication_setStatusBarStyle(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAApplication* cobj = (CrossApp::CAApplication *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAApplication_setStatusBarStyle : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAStatusBarStyle arg0;
        ok &= jsval_to_int32(cx, args.get(0), (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAApplication_setStatusBarStyle : Error processing arguments");
        cobj->setStatusBarStyle(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAApplication_setStatusBarStyle : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAApplication_setOpenGLView(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAApplication* cobj = (CrossApp::CAApplication *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAApplication_setOpenGLView : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CCEGLView* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CCEGLView*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAApplication_setOpenGLView : Error processing arguments");
        cobj->setOpenGLView(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAApplication_setOpenGLView : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAApplication_convertToGL(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAApplication* cobj = (CrossApp::CAApplication *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAApplication_convertToGL : Invalid Native Object");
    if (argc == 1) {
        CrossApp::DPoint arg0 = 0;
        ok &= jsval_to_dpoint(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAApplication_convertToGL : Error processing arguments");
        CrossApp::DPoint ret = cobj->convertToGL(arg0);
        jsval jsret = JSVAL_NULL;
        jsret = dpoint_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAApplication_convertToGL : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAApplication_purgeCachedData(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAApplication* cobj = (CrossApp::CAApplication *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAApplication_purgeCachedData : Invalid Native Object");
    if (argc == 0) {
        cobj->purgeCachedData();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAApplication_purgeCachedData : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAApplication_getTotalFrames(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAApplication* cobj = (CrossApp::CAApplication *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAApplication_getTotalFrames : Invalid Native Object");
    if (argc == 0) {
        unsigned int ret = cobj->getTotalFrames();
        jsval jsret = JSVAL_NULL;
        jsret = uint32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAApplication_getTotalFrames : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAApplication_pause(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAApplication* cobj = (CrossApp::CAApplication *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAApplication_pause : Invalid Native Object");
    if (argc == 0) {
        cobj->pause();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAApplication_pause : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAApplication_drawScene(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAApplication* cobj = (CrossApp::CAApplication *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAApplication_drawScene : Invalid Native Object");
    if (argc == 0) {
        cobj->drawScene();
        args.rval().setUndefined();
        return true;
    }
    if (argc == 1) {
        double arg0 = 0;
        ok &= JS::ToNumber( cx, args.get(0), &arg0) && !isnan(arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAApplication_drawScene : Error processing arguments");
        cobj->drawScene(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAApplication_drawScene : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAApplication_setTouchDispatcher(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAApplication* cobj = (CrossApp::CAApplication *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAApplication_setTouchDispatcher : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CATouchDispatcher* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CATouchDispatcher*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAApplication_setTouchDispatcher : Error processing arguments");
        cobj->setTouchDispatcher(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAApplication_setTouchDispatcher : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAApplication_isDisplayStats(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAApplication* cobj = (CrossApp::CAApplication *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAApplication_isDisplayStats : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->isDisplayStats();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAApplication_isDisplayStats : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAApplication_setProjection(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAApplication* cobj = (CrossApp::CAApplication *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAApplication_setProjection : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAApplication::Projection arg0;
        ok &= jsval_to_int32(cx, args.get(0), (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAApplication_setProjection : Error processing arguments");
        cobj->setProjection(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAApplication_setProjection : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAApplication_getTouchDispatcher(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAApplication* cobj = (CrossApp::CAApplication *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAApplication_getTouchDispatcher : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CATouchDispatcher* ret = cobj->getTouchDispatcher();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CATouchDispatcher>(cx, (CrossApp::CATouchDispatcher*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAApplication_getTouchDispatcher : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAApplication_getZEye(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAApplication* cobj = (CrossApp::CAApplication *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAApplication_getZEye : Invalid Native Object");
    if (argc == 0) {
        double ret = cobj->getZEye();
        jsval jsret = JSVAL_NULL;
        jsret = DOUBLE_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAApplication_getZEye : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAApplication_setNextDeltaTimeZero(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAApplication* cobj = (CrossApp::CAApplication *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAApplication_setNextDeltaTimeZero : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        arg0 = JS::ToBoolean(args.get(0));
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAApplication_setNextDeltaTimeZero : Error processing arguments");
        cobj->setNextDeltaTimeZero(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAApplication_setNextDeltaTimeZero : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAApplication_getAccelerometer(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAApplication* cobj = (CrossApp::CAApplication *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAApplication_getAccelerometer : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CCAccelerometer* ret = cobj->getAccelerometer();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CCAccelerometer>(cx, (CrossApp::CCAccelerometer*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAApplication_getAccelerometer : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAApplication_getVisibleSize(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAApplication* cobj = (CrossApp::CAApplication *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAApplication_getVisibleSize : Invalid Native Object");
    if (argc == 0) {
        CrossApp::DSize ret = cobj->getVisibleSize();
        jsval jsret = JSVAL_NULL;
        jsret = dsize_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAApplication_getVisibleSize : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAApplication_setNotificationView(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAApplication* cobj = (CrossApp::CAApplication *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAApplication_setNotificationView : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAView* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAView*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAApplication_setNotificationView : Error processing arguments");
        cobj->setNotificationView(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAApplication_setNotificationView : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAApplication_setAnimationInterval(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAApplication* cobj = (CrossApp::CAApplication *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAApplication_setAnimationInterval : Invalid Native Object");
    if (argc == 1) {
        double arg0 = 0;
        ok &= JS::ToNumber( cx, args.get(0), &arg0) && !isnan(arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAApplication_setAnimationInterval : Error processing arguments");
        cobj->setAnimationInterval(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAApplication_setAnimationInterval : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAApplication_getClassTypeInfo(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAApplication* cobj = (CrossApp::CAApplication *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAApplication_getClassTypeInfo : Invalid Native Object");
    if (argc == 0) {
        long ret = cobj->getClassTypeInfo();
        jsval jsret = JSVAL_NULL;
        jsret = long_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAApplication_getClassTypeInfo : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAApplication_getNotificationView(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAApplication* cobj = (CrossApp::CAApplication *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAApplication_getNotificationView : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CAView* ret = cobj->getNotificationView();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAView>(cx, (CrossApp::CAView*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAApplication_getNotificationView : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAApplication_isPaused(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAApplication* cobj = (CrossApp::CAApplication *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAApplication_isPaused : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->isPaused();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAApplication_isPaused : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAApplication_setDisplayStats(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAApplication* cobj = (CrossApp::CAApplication *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAApplication_setDisplayStats : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        arg0 = JS::ToBoolean(args.get(0));
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAApplication_setDisplayStats : Error processing arguments");
        cobj->setDisplayStats(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAApplication_setDisplayStats : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAApplication_getRootWindow(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAApplication* cobj = (CrossApp::CAApplication *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAApplication_getRootWindow : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CAWindow* ret = cobj->getRootWindow();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAWindow>(cx, (CrossApp::CAWindow*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAApplication_getRootWindow : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAApplication_getApplication(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    if (argc == 0) {
        CrossApp::CAApplication* ret = CrossApp::CAApplication::getApplication();
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAApplication>(cx, (CrossApp::CAApplication*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_autogentestbindings_js_CAApplication_getApplication : wrong number of arguments");
    return false;
}

bool js_autogentestbindings_js_CAApplication_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    CrossApp::CAApplication* cobj = new (std::nothrow) CrossApp::CAApplication();
    TypeTest<CrossApp::CAApplication> t;
    js_type_class_t *typeClass = nullptr;
    std::string typeName = t.s_name();
    auto typeMapIter = _js_global_type_map.find(typeName);
    CCAssert(typeMapIter != _js_global_type_map.end(), "Can't find the class type!");
    typeClass = typeMapIter->second;
    CCAssert(typeClass, "The value is null.");
    JS::RootedObject proto(cx, typeClass->proto.get());
    JS::RootedObject parent(cx, typeClass->parentProto.get());
    JS::RootedObject obj(cx, JS_NewObject(cx, typeClass->jsclass, proto, parent));
    args.rval().set(OBJECT_TO_JSVAL(obj));
    // link the native object with the javascript object
    js_proxy_t* p = jsb_new_proxy(cobj, obj);
    if (JS_HasProperty(cx, obj, "_ctor", &ok) && ok)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    return true;
}

extern JSObject *jsb_CrossApp_CAObject_prototype;

void js_CrossApp_CAApplication_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOGINFO("jsbindings: finalizing JS object %p (CAApplication)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::CAApplication *nobj = static_cast<CrossApp::CAApplication *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
void js_register_autogentestbindings_js_CAApplication(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_CAApplication_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_CAApplication_class->name = "CAApplication";
    jsb_CrossApp_CAApplication_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_CAApplication_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_CAApplication_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_CAApplication_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_CAApplication_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_CAApplication_class->resolve = JS_ResolveStub;
    jsb_CrossApp_CAApplication_class->convert = JS_ConvertStub;
    jsb_CrossApp_CAApplication_class->finalize = js_CrossApp_CAApplication_finalize;
    jsb_CrossApp_CAApplication_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("setDefaultValues", js_autogentestbindings_js_CAApplication_setDefaultValues, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getDeltaTime", js_autogentestbindings_js_CAApplication_getDeltaTime, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setGLDefaultValues", js_autogentestbindings_js_CAApplication_setGLDefaultValues, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setAlphaBlending", js_autogentestbindings_js_CAApplication_setAlphaBlending, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("updateDraw", js_autogentestbindings_js_CAApplication_updateDraw, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getKeypadDispatcher", js_autogentestbindings_js_CAApplication_getKeypadDispatcher, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getWinSize", js_autogentestbindings_js_CAApplication_getWinSize, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("end", js_autogentestbindings_js_CAApplication_end, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("runWindow", js_autogentestbindings_js_CAApplication_runWindow, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getAnimationInterval", js_autogentestbindings_js_CAApplication_getAnimationInterval, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getVisibleOrigin", js_autogentestbindings_js_CAApplication_getVisibleOrigin, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("mainLoop", js_autogentestbindings_js_CAApplication_mainLoop, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isDrawing", js_autogentestbindings_js_CAApplication_isDrawing, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setDepthTest", js_autogentestbindings_js_CAApplication_setDepthTest, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getSecondsPerFrame", js_autogentestbindings_js_CAApplication_getSecondsPerFrame, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("convertToUI", js_autogentestbindings_js_CAApplication_convertToUI, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setAccelerometer", js_autogentestbindings_js_CAApplication_setAccelerometer, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getStatusBarStyle", js_autogentestbindings_js_CAApplication_getStatusBarStyle, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("init", js_autogentestbindings_js_CAApplication_init, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("reshapeProjection", js_autogentestbindings_js_CAApplication_reshapeProjection, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("startAnimation", js_autogentestbindings_js_CAApplication_startAnimation, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getAdaptationRatio", js_autogentestbindings_js_CAApplication_getAdaptationRatio, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getOpenGLView", js_autogentestbindings_js_CAApplication_getOpenGLView, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setViewport", js_autogentestbindings_js_CAApplication_setViewport, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("stopAnimation", js_autogentestbindings_js_CAApplication_stopAnimation, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getNumberOfDraws", js_autogentestbindings_js_CAApplication_getNumberOfDraws, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setKeypadDispatcher", js_autogentestbindings_js_CAApplication_setKeypadDispatcher, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("run", js_autogentestbindings_js_CAApplication_run, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getProjection", js_autogentestbindings_js_CAApplication_getProjection, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("resume", js_autogentestbindings_js_CAApplication_resume, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isStatusBarHidden", js_autogentestbindings_js_CAApplication_isStatusBarHidden, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isNextDeltaTimeZero", js_autogentestbindings_js_CAApplication_isNextDeltaTimeZero, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getCurrentNumberOfDraws", js_autogentestbindings_js_CAApplication_getCurrentNumberOfDraws, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setStatusBarStyle", js_autogentestbindings_js_CAApplication_setStatusBarStyle, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setOpenGLView", js_autogentestbindings_js_CAApplication_setOpenGLView, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("convertToGL", js_autogentestbindings_js_CAApplication_convertToGL, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("purgeCachedData", js_autogentestbindings_js_CAApplication_purgeCachedData, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getTotalFrames", js_autogentestbindings_js_CAApplication_getTotalFrames, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("pause", js_autogentestbindings_js_CAApplication_pause, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("drawScene", js_autogentestbindings_js_CAApplication_drawScene, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setTouchDispatcher", js_autogentestbindings_js_CAApplication_setTouchDispatcher, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isDisplayStats", js_autogentestbindings_js_CAApplication_isDisplayStats, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setProjection", js_autogentestbindings_js_CAApplication_setProjection, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getTouchDispatcher", js_autogentestbindings_js_CAApplication_getTouchDispatcher, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getZEye", js_autogentestbindings_js_CAApplication_getZEye, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setNextDeltaTimeZero", js_autogentestbindings_js_CAApplication_setNextDeltaTimeZero, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getAccelerometer", js_autogentestbindings_js_CAApplication_getAccelerometer, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getVisibleSize", js_autogentestbindings_js_CAApplication_getVisibleSize, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setNotificationView", js_autogentestbindings_js_CAApplication_setNotificationView, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setAnimationInterval", js_autogentestbindings_js_CAApplication_setAnimationInterval, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getClassTypeInfo", js_autogentestbindings_js_CAApplication_getClassTypeInfo, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getNotificationView", js_autogentestbindings_js_CAApplication_getNotificationView, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isPaused", js_autogentestbindings_js_CAApplication_isPaused, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setDisplayStats", js_autogentestbindings_js_CAApplication_setDisplayStats, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getRootWindow", js_autogentestbindings_js_CAApplication_getRootWindow, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    static JSFunctionSpec st_funcs[] = {
        JS_FN("getApplication", js_autogentestbindings_js_CAApplication_getApplication, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    jsb_CrossApp_CAApplication_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_CAObject_prototype),
        jsb_CrossApp_CAApplication_class,
        js_autogentestbindings_js_CAApplication_constructor, 0, // constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27 
//  JS_SetPropertyAttributes(cx, global, "CAApplication", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::CAApplication> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_CAApplication_class;
        p->proto = jsb_CrossApp_CAApplication_prototype;
        p->parentProto = jsb_CrossApp_CAObject_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
}

JSClass  *jsb_CrossApp_CCDisplayLinkDirector_class;
JSObject *jsb_CrossApp_CCDisplayLinkDirector_prototype;

bool js_autogentestbindings_js_CCDisplayLinkDirector_startAnimation(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CCDisplayLinkDirector* cobj = (CrossApp::CCDisplayLinkDirector *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CCDisplayLinkDirector_startAnimation : Invalid Native Object");
    if (argc == 0) {
        cobj->startAnimation();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CCDisplayLinkDirector_startAnimation : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CCDisplayLinkDirector_mainLoop(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CCDisplayLinkDirector* cobj = (CrossApp::CCDisplayLinkDirector *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CCDisplayLinkDirector_mainLoop : Invalid Native Object");
    if (argc == 0) {
        cobj->mainLoop();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CCDisplayLinkDirector_mainLoop : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CCDisplayLinkDirector_stopAnimation(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CCDisplayLinkDirector* cobj = (CrossApp::CCDisplayLinkDirector *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CCDisplayLinkDirector_stopAnimation : Invalid Native Object");
    if (argc == 0) {
        cobj->stopAnimation();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CCDisplayLinkDirector_stopAnimation : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CCDisplayLinkDirector_setAnimationInterval(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CCDisplayLinkDirector* cobj = (CrossApp::CCDisplayLinkDirector *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CCDisplayLinkDirector_setAnimationInterval : Invalid Native Object");
    if (argc == 1) {
        double arg0 = 0;
        ok &= JS::ToNumber( cx, args.get(0), &arg0) && !isnan(arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CCDisplayLinkDirector_setAnimationInterval : Error processing arguments");
        cobj->setAnimationInterval(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CCDisplayLinkDirector_setAnimationInterval : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CCDisplayLinkDirector_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    CrossApp::CCDisplayLinkDirector* cobj = new (std::nothrow) CrossApp::CCDisplayLinkDirector();
    TypeTest<CrossApp::CCDisplayLinkDirector> t;
    js_type_class_t *typeClass = nullptr;
    std::string typeName = t.s_name();
    auto typeMapIter = _js_global_type_map.find(typeName);
    CCAssert(typeMapIter != _js_global_type_map.end(), "Can't find the class type!");
    typeClass = typeMapIter->second;
    CCAssert(typeClass, "The value is null.");
    JS::RootedObject proto(cx, typeClass->proto.get());
    JS::RootedObject parent(cx, typeClass->parentProto.get());
    JS::RootedObject obj(cx, JS_NewObject(cx, typeClass->jsclass, proto, parent));
    args.rval().set(OBJECT_TO_JSVAL(obj));
    // link the native object with the javascript object
    js_proxy_t* p = jsb_new_proxy(cobj, obj);
    if (JS_HasProperty(cx, obj, "_ctor", &ok) && ok)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    return true;
}

extern JSObject *jsb_CrossApp_CAApplication_prototype;

void js_CrossApp_CCDisplayLinkDirector_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOGINFO("jsbindings: finalizing JS object %p (CCDisplayLinkDirector)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::CCDisplayLinkDirector *nobj = static_cast<CrossApp::CCDisplayLinkDirector *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
void js_register_autogentestbindings_js_CCDisplayLinkDirector(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_CCDisplayLinkDirector_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_CCDisplayLinkDirector_class->name = "CCDisplayLinkDirector";
    jsb_CrossApp_CCDisplayLinkDirector_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_CCDisplayLinkDirector_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_CCDisplayLinkDirector_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_CCDisplayLinkDirector_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_CCDisplayLinkDirector_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_CCDisplayLinkDirector_class->resolve = JS_ResolveStub;
    jsb_CrossApp_CCDisplayLinkDirector_class->convert = JS_ConvertStub;
    jsb_CrossApp_CCDisplayLinkDirector_class->finalize = js_CrossApp_CCDisplayLinkDirector_finalize;
    jsb_CrossApp_CCDisplayLinkDirector_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("startAnimation", js_autogentestbindings_js_CCDisplayLinkDirector_startAnimation, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("mainLoop", js_autogentestbindings_js_CCDisplayLinkDirector_mainLoop, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("stopAnimation", js_autogentestbindings_js_CCDisplayLinkDirector_stopAnimation, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setAnimationInterval", js_autogentestbindings_js_CCDisplayLinkDirector_setAnimationInterval, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    JSFunctionSpec *st_funcs = NULL;

    jsb_CrossApp_CCDisplayLinkDirector_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_CAApplication_prototype),
        jsb_CrossApp_CCDisplayLinkDirector_class,
        js_autogentestbindings_js_CCDisplayLinkDirector_constructor, 0, // constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27 
//  JS_SetPropertyAttributes(cx, global, "CCDisplayLinkDirector", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::CCDisplayLinkDirector> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_CCDisplayLinkDirector_class;
        p->proto = jsb_CrossApp_CCDisplayLinkDirector_prototype;
        p->parentProto = jsb_CrossApp_CAApplication_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
}

JSClass  *jsb_CrossApp_CAAutoreleasePool_class;
JSObject *jsb_CrossApp_CAAutoreleasePool_prototype;

bool js_autogentestbindings_js_CAAutoreleasePool_addObject(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAAutoreleasePool* cobj = (CrossApp::CAAutoreleasePool *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAAutoreleasePool_addObject : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAObject* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAObject*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAAutoreleasePool_addObject : Error processing arguments");
        cobj->addObject(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAAutoreleasePool_addObject : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAAutoreleasePool_clear(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAAutoreleasePool* cobj = (CrossApp::CAAutoreleasePool *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAAutoreleasePool_clear : Invalid Native Object");
    if (argc == 0) {
        cobj->clear();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAAutoreleasePool_clear : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAAutoreleasePool_removeObject(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAAutoreleasePool* cobj = (CrossApp::CAAutoreleasePool *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAAutoreleasePool_removeObject : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAObject* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAObject*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAAutoreleasePool_removeObject : Error processing arguments");
        cobj->removeObject(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAAutoreleasePool_removeObject : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAAutoreleasePool_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    CrossApp::CAAutoreleasePool* cobj = new (std::nothrow) CrossApp::CAAutoreleasePool();
    TypeTest<CrossApp::CAAutoreleasePool> t;
    js_type_class_t *typeClass = nullptr;
    std::string typeName = t.s_name();
    auto typeMapIter = _js_global_type_map.find(typeName);
    CCAssert(typeMapIter != _js_global_type_map.end(), "Can't find the class type!");
    typeClass = typeMapIter->second;
    CCAssert(typeClass, "The value is null.");
    JS::RootedObject proto(cx, typeClass->proto.get());
    JS::RootedObject parent(cx, typeClass->parentProto.get());
    JS::RootedObject obj(cx, JS_NewObject(cx, typeClass->jsclass, proto, parent));
    args.rval().set(OBJECT_TO_JSVAL(obj));
    // link the native object with the javascript object
    js_proxy_t* p = jsb_new_proxy(cobj, obj);
    if (JS_HasProperty(cx, obj, "_ctor", &ok) && ok)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    return true;
}

extern JSObject *jsb_CrossApp_CAObject_prototype;

void js_CrossApp_CAAutoreleasePool_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOGINFO("jsbindings: finalizing JS object %p (CAAutoreleasePool)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::CAAutoreleasePool *nobj = static_cast<CrossApp::CAAutoreleasePool *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
void js_register_autogentestbindings_js_CAAutoreleasePool(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_CAAutoreleasePool_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_CAAutoreleasePool_class->name = "CAAutoreleasePool";
    jsb_CrossApp_CAAutoreleasePool_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_CAAutoreleasePool_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_CAAutoreleasePool_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_CAAutoreleasePool_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_CAAutoreleasePool_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_CAAutoreleasePool_class->resolve = JS_ResolveStub;
    jsb_CrossApp_CAAutoreleasePool_class->convert = JS_ConvertStub;
    jsb_CrossApp_CAAutoreleasePool_class->finalize = js_CrossApp_CAAutoreleasePool_finalize;
    jsb_CrossApp_CAAutoreleasePool_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("addObject", js_autogentestbindings_js_CAAutoreleasePool_addObject, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("clear", js_autogentestbindings_js_CAAutoreleasePool_clear, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("removeObject", js_autogentestbindings_js_CAAutoreleasePool_removeObject, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    JSFunctionSpec *st_funcs = NULL;

    jsb_CrossApp_CAAutoreleasePool_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_CAObject_prototype),
        jsb_CrossApp_CAAutoreleasePool_class,
        js_autogentestbindings_js_CAAutoreleasePool_constructor, 0, // constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27 
//  JS_SetPropertyAttributes(cx, global, "CAAutoreleasePool", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::CAAutoreleasePool> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_CAAutoreleasePool_class;
        p->proto = jsb_CrossApp_CAAutoreleasePool_prototype;
        p->parentProto = jsb_CrossApp_CAObject_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
}

JSClass  *jsb_CrossApp_CAPoolManager_class;
JSObject *jsb_CrossApp_CAPoolManager_prototype;

bool js_autogentestbindings_js_CAPoolManager_addObject(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAPoolManager* cobj = (CrossApp::CAPoolManager *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAPoolManager_addObject : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAObject* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAObject*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAPoolManager_addObject : Error processing arguments");
        cobj->addObject(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAPoolManager_addObject : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAPoolManager_finalize(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAPoolManager* cobj = (CrossApp::CAPoolManager *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAPoolManager_finalize : Invalid Native Object");
    if (argc == 0) {
        cobj->finalize();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAPoolManager_finalize : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAPoolManager_pop(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAPoolManager* cobj = (CrossApp::CAPoolManager *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAPoolManager_pop : Invalid Native Object");
    if (argc == 0) {
        cobj->pop();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAPoolManager_pop : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAPoolManager_push(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAPoolManager* cobj = (CrossApp::CAPoolManager *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAPoolManager_push : Invalid Native Object");
    if (argc == 0) {
        cobj->push();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAPoolManager_push : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAPoolManager_removeObject(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAPoolManager* cobj = (CrossApp::CAPoolManager *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAPoolManager_removeObject : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAObject* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAObject*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAPoolManager_removeObject : Error processing arguments");
        cobj->removeObject(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAPoolManager_removeObject : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAPoolManager_purgePoolManager(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    if (argc == 0) {
        CrossApp::CAPoolManager::purgePoolManager();
        args.rval().setUndefined();
        return true;
    }
    JS_ReportError(cx, "js_autogentestbindings_js_CAPoolManager_purgePoolManager : wrong number of arguments");
    return false;
}

bool js_autogentestbindings_js_CAPoolManager_sharedPoolManager(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    if (argc == 0) {
        CrossApp::CAPoolManager* ret = CrossApp::CAPoolManager::sharedPoolManager();
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAPoolManager>(cx, (CrossApp::CAPoolManager*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_autogentestbindings_js_CAPoolManager_sharedPoolManager : wrong number of arguments");
    return false;
}

bool js_autogentestbindings_js_CAPoolManager_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    CrossApp::CAPoolManager* cobj = new (std::nothrow) CrossApp::CAPoolManager();
    TypeTest<CrossApp::CAPoolManager> t;
    js_type_class_t *typeClass = nullptr;
    std::string typeName = t.s_name();
    auto typeMapIter = _js_global_type_map.find(typeName);
    CCAssert(typeMapIter != _js_global_type_map.end(), "Can't find the class type!");
    typeClass = typeMapIter->second;
    CCAssert(typeClass, "The value is null.");
    JS::RootedObject proto(cx, typeClass->proto.get());
    JS::RootedObject parent(cx, typeClass->parentProto.get());
    JS::RootedObject obj(cx, JS_NewObject(cx, typeClass->jsclass, proto, parent));
    args.rval().set(OBJECT_TO_JSVAL(obj));
    // link the native object with the javascript object
    js_proxy_t* p = jsb_new_proxy(cobj, obj);
    if (JS_HasProperty(cx, obj, "_ctor", &ok) && ok)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    return true;
}

void js_CrossApp_CAPoolManager_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOGINFO("jsbindings: finalizing JS object %p (CAPoolManager)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::CAPoolManager *nobj = static_cast<CrossApp::CAPoolManager *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
void js_register_autogentestbindings_js_CAPoolManager(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_CAPoolManager_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_CAPoolManager_class->name = "CAPoolManager";
    jsb_CrossApp_CAPoolManager_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_CAPoolManager_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_CAPoolManager_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_CAPoolManager_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_CAPoolManager_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_CAPoolManager_class->resolve = JS_ResolveStub;
    jsb_CrossApp_CAPoolManager_class->convert = JS_ConvertStub;
    jsb_CrossApp_CAPoolManager_class->finalize = js_CrossApp_CAPoolManager_finalize;
    jsb_CrossApp_CAPoolManager_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("addObject", js_autogentestbindings_js_CAPoolManager_addObject, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("finalize", js_autogentestbindings_js_CAPoolManager_finalize, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("pop", js_autogentestbindings_js_CAPoolManager_pop, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("push", js_autogentestbindings_js_CAPoolManager_push, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("removeObject", js_autogentestbindings_js_CAPoolManager_removeObject, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    static JSFunctionSpec st_funcs[] = {
        JS_FN("purgePoolManager", js_autogentestbindings_js_CAPoolManager_purgePoolManager, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("sharedPoolManager", js_autogentestbindings_js_CAPoolManager_sharedPoolManager, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    jsb_CrossApp_CAPoolManager_prototype = JS_InitClass(
        cx, global,
        JS::NullPtr(), // parent proto
        jsb_CrossApp_CAPoolManager_class,
        js_autogentestbindings_js_CAPoolManager_constructor, 0, // constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27 
//  JS_SetPropertyAttributes(cx, global, "CAPoolManager", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::CAPoolManager> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_CAPoolManager_class;
        p->proto = jsb_CrossApp_CAPoolManager_prototype;
        p->parentProto = NULL;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
}

JSClass  *jsb_CrossApp_CACamera_class;
JSObject *jsb_CrossApp_CACamera_prototype;

bool js_autogentestbindings_js_CACamera_locate(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CACamera* cobj = (CrossApp::CACamera *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CACamera_locate : Invalid Native Object");
    if (argc == 0) {
        cobj->locate();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CACamera_locate : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CACamera_restore(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CACamera* cobj = (CrossApp::CACamera *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CACamera_restore : Invalid Native Object");
    if (argc == 0) {
        cobj->restore();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CACamera_restore : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CACamera_setUpXYZ(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CACamera* cobj = (CrossApp::CACamera *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CACamera_setUpXYZ : Invalid Native Object");
    if (argc == 3) {
        double arg0 = 0;
        double arg1 = 0;
        double arg2 = 0;
        ok &= JS::ToNumber( cx, args.get(0), &arg0) && !isnan(arg0);
        ok &= JS::ToNumber( cx, args.get(1), &arg1) && !isnan(arg1);
        ok &= JS::ToNumber( cx, args.get(2), &arg2) && !isnan(arg2);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CACamera_setUpXYZ : Error processing arguments");
        cobj->setUpXYZ(arg0, arg1, arg2);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CACamera_setUpXYZ : wrong number of arguments: %d, was expecting %d", argc, 3);
    return false;
}
bool js_autogentestbindings_js_CACamera_description(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CACamera* cobj = (CrossApp::CACamera *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CACamera_description : Invalid Native Object");
    if (argc == 0) {
        const char* ret = cobj->description();
        jsval jsret = JSVAL_NULL;
        jsret = c_string_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CACamera_description : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CACamera_setCenterXYZ(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CACamera* cobj = (CrossApp::CACamera *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CACamera_setCenterXYZ : Invalid Native Object");
    if (argc == 3) {
        double arg0 = 0;
        double arg1 = 0;
        double arg2 = 0;
        ok &= JS::ToNumber( cx, args.get(0), &arg0) && !isnan(arg0);
        ok &= JS::ToNumber( cx, args.get(1), &arg1) && !isnan(arg1);
        ok &= JS::ToNumber( cx, args.get(2), &arg2) && !isnan(arg2);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CACamera_setCenterXYZ : Error processing arguments");
        cobj->setCenterXYZ(arg0, arg1, arg2);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CACamera_setCenterXYZ : wrong number of arguments: %d, was expecting %d", argc, 3);
    return false;
}
bool js_autogentestbindings_js_CACamera_setEyeXYZ(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CACamera* cobj = (CrossApp::CACamera *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CACamera_setEyeXYZ : Invalid Native Object");
    if (argc == 3) {
        double arg0 = 0;
        double arg1 = 0;
        double arg2 = 0;
        ok &= JS::ToNumber( cx, args.get(0), &arg0) && !isnan(arg0);
        ok &= JS::ToNumber( cx, args.get(1), &arg1) && !isnan(arg1);
        ok &= JS::ToNumber( cx, args.get(2), &arg2) && !isnan(arg2);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CACamera_setEyeXYZ : Error processing arguments");
        cobj->setEyeXYZ(arg0, arg1, arg2);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CACamera_setEyeXYZ : wrong number of arguments: %d, was expecting %d", argc, 3);
    return false;
}
bool js_autogentestbindings_js_CACamera_getCenterXYZ(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CACamera* cobj = (CrossApp::CACamera *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CACamera_getCenterXYZ : Invalid Native Object");
    if (argc == 3) {
        float* arg0 = 0;
        float* arg1 = 0;
        float* arg2 = 0;
        #pragma warning NO CONVERSION TO NATIVE FOR float*
		ok = false;
        #pragma warning NO CONVERSION TO NATIVE FOR float*
		ok = false;
        #pragma warning NO CONVERSION TO NATIVE FOR float*
		ok = false;
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CACamera_getCenterXYZ : Error processing arguments");
        cobj->getCenterXYZ(arg0, arg1, arg2);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CACamera_getCenterXYZ : wrong number of arguments: %d, was expecting %d", argc, 3);
    return false;
}
bool js_autogentestbindings_js_CACamera_getEyeXYZ(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CACamera* cobj = (CrossApp::CACamera *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CACamera_getEyeXYZ : Invalid Native Object");
    if (argc == 3) {
        float* arg0 = 0;
        float* arg1 = 0;
        float* arg2 = 0;
        #pragma warning NO CONVERSION TO NATIVE FOR float*
		ok = false;
        #pragma warning NO CONVERSION TO NATIVE FOR float*
		ok = false;
        #pragma warning NO CONVERSION TO NATIVE FOR float*
		ok = false;
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CACamera_getEyeXYZ : Error processing arguments");
        cobj->getEyeXYZ(arg0, arg1, arg2);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CACamera_getEyeXYZ : wrong number of arguments: %d, was expecting %d", argc, 3);
    return false;
}
bool js_autogentestbindings_js_CACamera_isDirty(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CACamera* cobj = (CrossApp::CACamera *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CACamera_isDirty : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->isDirty();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CACamera_isDirty : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CACamera_init(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CACamera* cobj = (CrossApp::CACamera *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CACamera_init : Invalid Native Object");
    if (argc == 0) {
        cobj->init();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CACamera_init : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CACamera_getUpXYZ(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CACamera* cobj = (CrossApp::CACamera *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CACamera_getUpXYZ : Invalid Native Object");
    if (argc == 3) {
        float* arg0 = 0;
        float* arg1 = 0;
        float* arg2 = 0;
        #pragma warning NO CONVERSION TO NATIVE FOR float*
		ok = false;
        #pragma warning NO CONVERSION TO NATIVE FOR float*
		ok = false;
        #pragma warning NO CONVERSION TO NATIVE FOR float*
		ok = false;
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CACamera_getUpXYZ : Error processing arguments");
        cobj->getUpXYZ(arg0, arg1, arg2);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CACamera_getUpXYZ : wrong number of arguments: %d, was expecting %d", argc, 3);
    return false;
}
bool js_autogentestbindings_js_CACamera_setDirty(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CACamera* cobj = (CrossApp::CACamera *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CACamera_setDirty : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        arg0 = JS::ToBoolean(args.get(0));
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CACamera_setDirty : Error processing arguments");
        cobj->setDirty(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CACamera_setDirty : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CACamera_getZEye(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    if (argc == 0) {
        double ret = CrossApp::CACamera::getZEye();
        jsval jsret = JSVAL_NULL;
        jsret = DOUBLE_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_autogentestbindings_js_CACamera_getZEye : wrong number of arguments");
    return false;
}

bool js_autogentestbindings_js_CACamera_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    CrossApp::CACamera* cobj = new (std::nothrow) CrossApp::CACamera();
    TypeTest<CrossApp::CACamera> t;
    js_type_class_t *typeClass = nullptr;
    std::string typeName = t.s_name();
    auto typeMapIter = _js_global_type_map.find(typeName);
    CCAssert(typeMapIter != _js_global_type_map.end(), "Can't find the class type!");
    typeClass = typeMapIter->second;
    CCAssert(typeClass, "The value is null.");
    JS::RootedObject proto(cx, typeClass->proto.get());
    JS::RootedObject parent(cx, typeClass->parentProto.get());
    JS::RootedObject obj(cx, JS_NewObject(cx, typeClass->jsclass, proto, parent));
    args.rval().set(OBJECT_TO_JSVAL(obj));
    // link the native object with the javascript object
    js_proxy_t* p = jsb_new_proxy(cobj, obj);
    if (JS_HasProperty(cx, obj, "_ctor", &ok) && ok)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    return true;
}

extern JSObject *jsb_CrossApp_CAObject_prototype;

void js_CrossApp_CACamera_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOGINFO("jsbindings: finalizing JS object %p (CACamera)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::CACamera *nobj = static_cast<CrossApp::CACamera *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
void js_register_autogentestbindings_js_CACamera(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_CACamera_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_CACamera_class->name = "CACamera";
    jsb_CrossApp_CACamera_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_CACamera_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_CACamera_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_CACamera_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_CACamera_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_CACamera_class->resolve = JS_ResolveStub;
    jsb_CrossApp_CACamera_class->convert = JS_ConvertStub;
    jsb_CrossApp_CACamera_class->finalize = js_CrossApp_CACamera_finalize;
    jsb_CrossApp_CACamera_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("locate", js_autogentestbindings_js_CACamera_locate, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("restore", js_autogentestbindings_js_CACamera_restore, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setUpXYZ", js_autogentestbindings_js_CACamera_setUpXYZ, 3, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("description", js_autogentestbindings_js_CACamera_description, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setCenterXYZ", js_autogentestbindings_js_CACamera_setCenterXYZ, 3, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setEyeXYZ", js_autogentestbindings_js_CACamera_setEyeXYZ, 3, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getCenterXYZ", js_autogentestbindings_js_CACamera_getCenterXYZ, 3, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getEyeXYZ", js_autogentestbindings_js_CACamera_getEyeXYZ, 3, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isDirty", js_autogentestbindings_js_CACamera_isDirty, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("init", js_autogentestbindings_js_CACamera_init, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getUpXYZ", js_autogentestbindings_js_CACamera_getUpXYZ, 3, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setDirty", js_autogentestbindings_js_CACamera_setDirty, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    static JSFunctionSpec st_funcs[] = {
        JS_FN("getZEye", js_autogentestbindings_js_CACamera_getZEye, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    jsb_CrossApp_CACamera_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_CAObject_prototype),
        jsb_CrossApp_CACamera_class,
        js_autogentestbindings_js_CACamera_constructor, 0, // constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27 
//  JS_SetPropertyAttributes(cx, global, "CACamera", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::CACamera> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_CACamera_class;
        p->proto = jsb_CrossApp_CACamera_prototype;
        p->parentProto = jsb_CrossApp_CAObject_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
}

JSClass  *jsb_CrossApp_CALock_class;
JSObject *jsb_CrossApp_CALock_prototype;

bool js_autogentestbindings_js_CALock_Lock(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CALock* cobj = (CrossApp::CALock *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CALock_Lock : Invalid Native Object");
    if (argc == 0) {
        cobj->Lock();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CALock_Lock : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CALock_UnLock(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CALock* cobj = (CrossApp::CALock *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CALock_UnLock : Invalid Native Object");
    if (argc == 0) {
        cobj->UnLock();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CALock_UnLock : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CALock_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    CrossApp::CALock* cobj = new (std::nothrow) CrossApp::CALock();
    TypeTest<CrossApp::CALock> t;
    js_type_class_t *typeClass = nullptr;
    std::string typeName = t.s_name();
    auto typeMapIter = _js_global_type_map.find(typeName);
    CCAssert(typeMapIter != _js_global_type_map.end(), "Can't find the class type!");
    typeClass = typeMapIter->second;
    CCAssert(typeClass, "The value is null.");
    JS::RootedObject proto(cx, typeClass->proto.get());
    JS::RootedObject parent(cx, typeClass->parentProto.get());
    JS::RootedObject obj(cx, JS_NewObject(cx, typeClass->jsclass, proto, parent));
    args.rval().set(OBJECT_TO_JSVAL(obj));
    // link the native object with the javascript object
    js_proxy_t* p = jsb_new_proxy(cobj, obj);
    if (JS_HasProperty(cx, obj, "_ctor", &ok) && ok)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    return true;
}

void js_CrossApp_CALock_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOGINFO("jsbindings: finalizing JS object %p (CALock)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::CALock *nobj = static_cast<CrossApp::CALock *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
void js_register_autogentestbindings_js_CALock(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_CALock_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_CALock_class->name = "CALock";
    jsb_CrossApp_CALock_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_CALock_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_CALock_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_CALock_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_CALock_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_CALock_class->resolve = JS_ResolveStub;
    jsb_CrossApp_CALock_class->convert = JS_ConvertStub;
    jsb_CrossApp_CALock_class->finalize = js_CrossApp_CALock_finalize;
    jsb_CrossApp_CALock_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("Lock", js_autogentestbindings_js_CALock_Lock, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("UnLock", js_autogentestbindings_js_CALock_UnLock, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    JSFunctionSpec *st_funcs = NULL;

    jsb_CrossApp_CALock_prototype = JS_InitClass(
        cx, global,
        JS::NullPtr(), // parent proto
        jsb_CrossApp_CALock_class,
        js_autogentestbindings_js_CALock_constructor, 0, // constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27 
//  JS_SetPropertyAttributes(cx, global, "CALock", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::CALock> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_CALock_class;
        p->proto = jsb_CrossApp_CALock_prototype;
        p->parentProto = NULL;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
}

JSClass  *jsb_CrossApp_CAAutoLock_class;
JSObject *jsb_CrossApp_CAAutoLock_prototype;

bool js_autogentestbindings_js_CAAutoLock_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    CrossApp::CALock arg0;
    do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CALock&)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
    JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAAutoLock_constructor : Error processing arguments");
    CrossApp::CAAutoLock* cobj = new (std::nothrow) CrossApp::CAAutoLock(arg0);
    TypeTest<CrossApp::CAAutoLock> t;
    js_type_class_t *typeClass = nullptr;
    std::string typeName = t.s_name();
    auto typeMapIter = _js_global_type_map.find(typeName);
    CCAssert(typeMapIter != _js_global_type_map.end(), "Can't find the class type!");
    typeClass = typeMapIter->second;
    CCAssert(typeClass, "The value is null.");
    JS::RootedObject proto(cx, typeClass->proto.get());
    JS::RootedObject parent(cx, typeClass->parentProto.get());
    JS::RootedObject obj(cx, JS_NewObject(cx, typeClass->jsclass, proto, parent));
    args.rval().set(OBJECT_TO_JSVAL(obj));
    // link the native object with the javascript object
    js_proxy_t* p = jsb_new_proxy(cobj, obj);
    if (JS_HasProperty(cx, obj, "_ctor", &ok) && ok)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    return true;
}

void js_CrossApp_CAAutoLock_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOGINFO("jsbindings: finalizing JS object %p (CAAutoLock)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::CAAutoLock *nobj = static_cast<CrossApp::CAAutoLock *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
void js_register_autogentestbindings_js_CAAutoLock(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_CAAutoLock_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_CAAutoLock_class->name = "CAAutoLock";
    jsb_CrossApp_CAAutoLock_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_CAAutoLock_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_CAAutoLock_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_CAAutoLock_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_CAAutoLock_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_CAAutoLock_class->resolve = JS_ResolveStub;
    jsb_CrossApp_CAAutoLock_class->convert = JS_ConvertStub;
    jsb_CrossApp_CAAutoLock_class->finalize = js_CrossApp_CAAutoLock_finalize;
    jsb_CrossApp_CAAutoLock_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FS_END
    };

    JSFunctionSpec *st_funcs = NULL;

    jsb_CrossApp_CAAutoLock_prototype = JS_InitClass(
        cx, global,
        JS::NullPtr(), // parent proto
        jsb_CrossApp_CAAutoLock_class,
        js_autogentestbindings_js_CAAutoLock_constructor, 0, // constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27 
//  JS_SetPropertyAttributes(cx, global, "CAAutoLock", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::CAAutoLock> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_CAAutoLock_class;
        p->proto = jsb_CrossApp_CAAutoLock_prototype;
        p->parentProto = NULL;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
}

JSClass  *jsb_CrossApp_CAThread_class;
JSObject *jsb_CrossApp_CAThread_prototype;

bool js_autogentestbindings_js_CAThread_setMaxMsgCount(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAThread* cobj = (CrossApp::CAThread *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAThread_setMaxMsgCount : Invalid Native Object");
    if (argc == 1) {
        int arg0 = 0;
        ok &= jsval_to_int32(cx, args.get(0), (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAThread_setMaxMsgCount : Error processing arguments");
        cobj->setMaxMsgCount(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAThread_setMaxMsgCount : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAThread_closeAtOnce(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAThread* cobj = (CrossApp::CAThread *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAThread_closeAtOnce : Invalid Native Object");
    if (argc == 0) {
        cobj->closeAtOnce();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAThread_closeAtOnce : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAThread_isRunning(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAThread* cobj = (CrossApp::CAThread *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAThread_isRunning : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->isRunning();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAThread_isRunning : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAThread_OnRunning(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAThread* cobj = (CrossApp::CAThread *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAThread_OnRunning : Invalid Native Object");
    if (argc == 0) {
        cobj->OnRunning();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAThread_OnRunning : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAThread_clear(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAThread* cobj = (CrossApp::CAThread *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAThread_clear : Invalid Native Object");
    if (argc == 0) {
        cobj->clear();
        args.rval().setUndefined();
        return true;
    }
    if (argc == 1) {
        bool arg0;
        arg0 = JS::ToBoolean(args.get(0));
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAThread_clear : Error processing arguments");
        cobj->clear(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAThread_clear : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAThread_OnExitInstance(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAThread* cobj = (CrossApp::CAThread *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAThread_OnExitInstance : Invalid Native Object");
    if (argc == 0) {
        cobj->OnExitInstance();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAThread_OnExitInstance : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAThread_start(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAThread* cobj = (CrossApp::CAThread *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAThread_start : Invalid Native Object");
    if (argc == 0) {
        cobj->start();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAThread_start : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAThread_OnInitInstance(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAThread* cobj = (CrossApp::CAThread *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAThread_OnInitInstance : Invalid Native Object");
    if (argc == 0) {
        cobj->OnInitInstance();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAThread_OnInitInstance : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAThread_close(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAThread* cobj = (CrossApp::CAThread *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAThread_close : Invalid Native Object");
    if (argc == 0) {
        cobj->close();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAThread_close : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAThread_notifyRun(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAThread* cobj = (CrossApp::CAThread *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAThread_notifyRun : Invalid Native Object");
    if (argc == 1) {
        void* arg0 = nullptr;
        #pragma warning NO CONVERSION TO NATIVE FOR void*
		ok = false;
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAThread_notifyRun : Error processing arguments");
        cobj->notifyRun(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAThread_notifyRun : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAThread_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    CrossApp::CAThread* cobj = new (std::nothrow) CrossApp::CAThread();
    TypeTest<CrossApp::CAThread> t;
    js_type_class_t *typeClass = nullptr;
    std::string typeName = t.s_name();
    auto typeMapIter = _js_global_type_map.find(typeName);
    CCAssert(typeMapIter != _js_global_type_map.end(), "Can't find the class type!");
    typeClass = typeMapIter->second;
    CCAssert(typeClass, "The value is null.");
    JS::RootedObject proto(cx, typeClass->proto.get());
    JS::RootedObject parent(cx, typeClass->parentProto.get());
    JS::RootedObject obj(cx, JS_NewObject(cx, typeClass->jsclass, proto, parent));
    args.rval().set(OBJECT_TO_JSVAL(obj));
    // link the native object with the javascript object
    js_proxy_t* p = jsb_new_proxy(cobj, obj);
    if (JS_HasProperty(cx, obj, "_ctor", &ok) && ok)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    return true;
}

void js_CrossApp_CAThread_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOGINFO("jsbindings: finalizing JS object %p (CAThread)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::CAThread *nobj = static_cast<CrossApp::CAThread *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
void js_register_autogentestbindings_js_CAThread(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_CAThread_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_CAThread_class->name = "CAThread";
    jsb_CrossApp_CAThread_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_CAThread_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_CAThread_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_CAThread_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_CAThread_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_CAThread_class->resolve = JS_ResolveStub;
    jsb_CrossApp_CAThread_class->convert = JS_ConvertStub;
    jsb_CrossApp_CAThread_class->finalize = js_CrossApp_CAThread_finalize;
    jsb_CrossApp_CAThread_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("setMaxMsgCount", js_autogentestbindings_js_CAThread_setMaxMsgCount, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("closeAtOnce", js_autogentestbindings_js_CAThread_closeAtOnce, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isRunning", js_autogentestbindings_js_CAThread_isRunning, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("OnRunning", js_autogentestbindings_js_CAThread_OnRunning, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("clear", js_autogentestbindings_js_CAThread_clear, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("OnExitInstance", js_autogentestbindings_js_CAThread_OnExitInstance, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("start", js_autogentestbindings_js_CAThread_start, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("OnInitInstance", js_autogentestbindings_js_CAThread_OnInitInstance, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("close", js_autogentestbindings_js_CAThread_close, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("notifyRun", js_autogentestbindings_js_CAThread_notifyRun, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    JSFunctionSpec *st_funcs = NULL;

    jsb_CrossApp_CAThread_prototype = JS_InitClass(
        cx, global,
        JS::NullPtr(), // parent proto
        jsb_CrossApp_CAThread_class,
        js_autogentestbindings_js_CAThread_constructor, 0, // constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27 
//  JS_SetPropertyAttributes(cx, global, "CAThread", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::CAThread> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_CAThread_class;
        p->proto = jsb_CrossApp_CAThread_prototype;
        p->parentProto = NULL;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
}

JSClass  *jsb_CrossApp_CAButton_class;
JSObject *jsb_CrossApp_CAButton_prototype;

bool js_autogentestbindings_js_CAButton_setImageSize(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAButton* cobj = (CrossApp::CAButton *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAButton_setImageSize : Invalid Native Object");
    if (argc == 1) {
        CrossApp::DSize arg0;
        ok &= jsval_to_dsize(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAButton_setImageSize : Error processing arguments");
        cobj->setImageSize(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAButton_setImageSize : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAButton_setTitleFontSize(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAButton* cobj = (CrossApp::CAButton *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAButton_setTitleFontSize : Invalid Native Object");
    if (argc == 1) {
        double arg0 = 0;
        ok &= JS::ToNumber( cx, args.get(0), &arg0) && !isnan(arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAButton_setTitleFontSize : Error processing arguments");
        cobj->setTitleFontSize(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAButton_setTitleFontSize : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAButton_ccTouchEnded(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAButton* cobj = (CrossApp::CAButton *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAButton_ccTouchEnded : Invalid Native Object");
    if (argc == 2) {
        CrossApp::CATouch* arg0 = nullptr;
        CrossApp::CAEvent* arg1 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CATouch*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        do {
            if (args.get(1).isNull()) { arg1 = nullptr; break; }
            if (!args.get(1).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(1).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg1 = (CrossApp::CAEvent*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg1, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAButton_ccTouchEnded : Error processing arguments");
        cobj->ccTouchEnded(arg0, arg1);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAButton_ccTouchEnded : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_autogentestbindings_js_CAButton_setTitleForState(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAButton* cobj = (CrossApp::CAButton *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAButton_setTitleForState : Invalid Native Object");
    if (argc == 2) {
        CrossApp::CAControlState arg0;
        std::string arg1;
        ok &= jsval_to_int32(cx, args.get(0), (int32_t *)&arg0);
        ok &= jsval_to_std_string(cx, args.get(1), &arg1);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAButton_setTitleForState : Error processing arguments");
        cobj->setTitleForState(arg0, arg1);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAButton_setTitleForState : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_autogentestbindings_js_CAButton_isAllowsSelected(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAButton* cobj = (CrossApp::CAButton *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAButton_isAllowsSelected : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->isAllowsSelected();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAButton_isAllowsSelected : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAButton_setBackgroundViewForState(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAButton* cobj = (CrossApp::CAButton *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAButton_setBackgroundViewForState : Invalid Native Object");
    if (argc == 2) {
        CrossApp::CAControlState arg0;
        CrossApp::CAView* arg1 = nullptr;
        ok &= jsval_to_int32(cx, args.get(0), (int32_t *)&arg0);
        do {
            if (args.get(1).isNull()) { arg1 = nullptr; break; }
            if (!args.get(1).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(1).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg1 = (CrossApp::CAView*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg1, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAButton_setBackgroundViewForState : Error processing arguments");
        cobj->setBackgroundViewForState(arg0, arg1);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAButton_setBackgroundViewForState : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_autogentestbindings_js_CAButton_isSelected(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAButton* cobj = (CrossApp::CAButton *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAButton_isSelected : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->isSelected();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAButton_isSelected : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAButton_init(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAButton* cobj = (CrossApp::CAButton *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAButton_init : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->init();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAButton_init : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAButton_setImageColorForState(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAButton* cobj = (CrossApp::CAButton *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAButton_setImageColorForState : Invalid Native Object");
    if (argc == 2) {
        CrossApp::CAControlState arg0;
        CrossApp::CAColor4B arg1;
        ok &= jsval_to_int32(cx, args.get(0), (int32_t *)&arg0);
        ok &= jsval_to_cacolor4b(cx, args.get(1), &arg1);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAButton_setImageColorForState : Error processing arguments");
        cobj->setImageColorForState(arg0, arg1);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAButton_setImageColorForState : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_autogentestbindings_js_CAButton_ccTouchMoved(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAButton* cobj = (CrossApp::CAButton *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAButton_ccTouchMoved : Invalid Native Object");
    if (argc == 2) {
        CrossApp::CATouch* arg0 = nullptr;
        CrossApp::CAEvent* arg1 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CATouch*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        do {
            if (args.get(1).isNull()) { arg1 = nullptr; break; }
            if (!args.get(1).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(1).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg1 = (CrossApp::CAEvent*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg1, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAButton_ccTouchMoved : Error processing arguments");
        cobj->ccTouchMoved(arg0, arg1);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAButton_ccTouchMoved : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_autogentestbindings_js_CAButton_getImageForState(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAButton* cobj = (CrossApp::CAButton *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAButton_getImageForState : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAControlState arg0;
        ok &= jsval_to_int32(cx, args.get(0), (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAButton_getImageForState : Error processing arguments");
        CrossApp::CAImage* ret = cobj->getImageForState(arg0);
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAImage>(cx, (CrossApp::CAImage*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAButton_getImageForState : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAButton_ccTouchBegan(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAButton* cobj = (CrossApp::CAButton *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAButton_ccTouchBegan : Invalid Native Object");
    if (argc == 2) {
        CrossApp::CATouch* arg0 = nullptr;
        CrossApp::CAEvent* arg1 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CATouch*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        do {
            if (args.get(1).isNull()) { arg1 = nullptr; break; }
            if (!args.get(1).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(1).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg1 = (CrossApp::CAEvent*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg1, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAButton_ccTouchBegan : Error processing arguments");
        bool ret = cobj->ccTouchBegan(arg0, arg1);
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAButton_ccTouchBegan : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_autogentestbindings_js_CAButton_setTitleLabelSize(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAButton* cobj = (CrossApp::CAButton *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAButton_setTitleLabelSize : Invalid Native Object");
    if (argc == 1) {
        CrossApp::DSize arg0;
        ok &= jsval_to_dsize(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAButton_setTitleLabelSize : Error processing arguments");
        cobj->setTitleLabelSize(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAButton_setTitleLabelSize : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAButton_isTouchClick(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAButton* cobj = (CrossApp::CAButton *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAButton_isTouchClick : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->isTouchClick();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAButton_isTouchClick : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAButton_setTitleFontName(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAButton* cobj = (CrossApp::CAButton *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAButton_setTitleFontName : Invalid Native Object");
    if (argc == 1) {
        std::string arg0;
        ok &= jsval_to_std_string(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAButton_setTitleFontName : Error processing arguments");
        cobj->setTitleFontName(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAButton_setTitleFontName : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAButton_onExitTransitionDidStart(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAButton* cobj = (CrossApp::CAButton *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAButton_onExitTransitionDidStart : Invalid Native Object");
    if (argc == 0) {
        cobj->onExitTransitionDidStart();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAButton_onExitTransitionDidStart : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAButton_setTitleOffset(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAButton* cobj = (CrossApp::CAButton *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAButton_setTitleOffset : Invalid Native Object");
    if (argc == 1) {
        CrossApp::DSize arg0;
        ok &= jsval_to_dsize(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAButton_setTitleOffset : Error processing arguments");
        cobj->setTitleOffset(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAButton_setTitleOffset : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAButton_setTitleColorForState(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAButton* cobj = (CrossApp::CAButton *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAButton_setTitleColorForState : Invalid Native Object");
    if (argc == 2) {
        CrossApp::CAControlState arg0;
        CrossApp::CAColor4B arg1;
        ok &= jsval_to_int32(cx, args.get(0), (int32_t *)&arg0);
        ok &= jsval_to_cacolor4b(cx, args.get(1), &arg1);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAButton_setTitleColorForState : Error processing arguments");
        cobj->setTitleColorForState(arg0, arg1);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAButton_setTitleColorForState : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_autogentestbindings_js_CAButton_getBackgroundViewForState(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAButton* cobj = (CrossApp::CAButton *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAButton_getBackgroundViewForState : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAControlState arg0;
        ok &= jsval_to_int32(cx, args.get(0), (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAButton_getBackgroundViewForState : Error processing arguments");
        CrossApp::CAView* ret = cobj->getBackgroundViewForState(arg0);
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAView>(cx, (CrossApp::CAView*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAButton_getBackgroundViewForState : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAButton_interruptTouchState(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAButton* cobj = (CrossApp::CAButton *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAButton_interruptTouchState : Invalid Native Object");
    if (argc == 0) {
        cobj->interruptTouchState();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAButton_interruptTouchState : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAButton_setImageOffset(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAButton* cobj = (CrossApp::CAButton *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAButton_setImageOffset : Invalid Native Object");
    if (argc == 1) {
        CrossApp::DSize arg0;
        ok &= jsval_to_dsize(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAButton_setImageOffset : Error processing arguments");
        cobj->setImageOffset(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAButton_setImageOffset : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAButton_setControlState(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAButton* cobj = (CrossApp::CAButton *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAButton_setControlState : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAControlState arg0;
        ok &= jsval_to_int32(cx, args.get(0), (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAButton_setControlState : Error processing arguments");
        cobj->setControlState(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAButton_setControlState : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAButton_setImageForState(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAButton* cobj = (CrossApp::CAButton *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAButton_setImageForState : Invalid Native Object");
    if (argc == 2) {
        CrossApp::CAControlState arg0;
        CrossApp::CAImage* arg1 = nullptr;
        ok &= jsval_to_int32(cx, args.get(0), (int32_t *)&arg0);
        do {
            if (args.get(1).isNull()) { arg1 = nullptr; break; }
            if (!args.get(1).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(1).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg1 = (CrossApp::CAImage*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg1, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAButton_setImageForState : Error processing arguments");
        cobj->setImageForState(arg0, arg1);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAButton_setImageForState : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_autogentestbindings_js_CAButton_ccTouchCancelled(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAButton* cobj = (CrossApp::CAButton *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAButton_ccTouchCancelled : Invalid Native Object");
    if (argc == 2) {
        CrossApp::CATouch* arg0 = nullptr;
        CrossApp::CAEvent* arg1 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CATouch*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        do {
            if (args.get(1).isNull()) { arg1 = nullptr; break; }
            if (!args.get(1).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(1).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg1 = (CrossApp::CAEvent*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg1, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAButton_ccTouchCancelled : Error processing arguments");
        cobj->ccTouchCancelled(arg0, arg1);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAButton_ccTouchCancelled : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_autogentestbindings_js_CAButton_onEnterTransitionDidFinish(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAButton* cobj = (CrossApp::CAButton *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAButton_onEnterTransitionDidFinish : Invalid Native Object");
    if (argc == 0) {
        cobj->onEnterTransitionDidFinish();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAButton_onEnterTransitionDidFinish : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAButton_setAllowsSelected(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAButton* cobj = (CrossApp::CAButton *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAButton_setAllowsSelected : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        arg0 = JS::ToBoolean(args.get(0));
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAButton_setAllowsSelected : Error processing arguments");
        cobj->setAllowsSelected(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAButton_setAllowsSelected : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAButton_getTitleForState(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAButton* cobj = (CrossApp::CAButton *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAButton_getTitleForState : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAControlState arg0;
        ok &= jsval_to_int32(cx, args.get(0), (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAButton_getTitleForState : Error processing arguments");
        const std::string& ret = cobj->getTitleForState(arg0);
        jsval jsret = JSVAL_NULL;
        jsret = std_string_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAButton_getTitleForState : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAButton_create(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        CrossApp::CAButtonType arg0;
        ok &= jsval_to_int32(cx, args.get(0), (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAButton_create : Error processing arguments");
        CrossApp::CAButton* ret = CrossApp::CAButton::create(arg0);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAButton>(cx, (CrossApp::CAButton*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_autogentestbindings_js_CAButton_create : wrong number of arguments");
    return false;
}

bool js_autogentestbindings_js_CAButton_createWithFrame(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 2) {
        CrossApp::DRect arg0;
        CrossApp::CAButtonType arg1;
        ok &= jsval_to_drect(cx, args.get(0), &arg0);
        ok &= jsval_to_int32(cx, args.get(1), (int32_t *)&arg1);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAButton_createWithFrame : Error processing arguments");
        CrossApp::CAButton* ret = CrossApp::CAButton::createWithFrame(arg0, arg1);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAButton>(cx, (CrossApp::CAButton*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_autogentestbindings_js_CAButton_createWithFrame : wrong number of arguments");
    return false;
}

bool js_autogentestbindings_js_CAButton_createWithLayout(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 2) {
        CrossApp::DRectLayout arg0;
        CrossApp::CAButtonType arg1;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (const CrossApp::DRectLayout&)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        ok &= jsval_to_int32(cx, args.get(1), (int32_t *)&arg1);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAButton_createWithLayout : Error processing arguments");
        CrossApp::CAButton* ret = CrossApp::CAButton::createWithLayout(arg0, arg1);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAButton>(cx, (CrossApp::CAButton*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_autogentestbindings_js_CAButton_createWithLayout : wrong number of arguments");
    return false;
}

bool js_autogentestbindings_js_CAButton_createWithCenter(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 2) {
        CrossApp::DRect arg0;
        CrossApp::CAButtonType arg1;
        ok &= jsval_to_drect(cx, args.get(0), &arg0);
        ok &= jsval_to_int32(cx, args.get(1), (int32_t *)&arg1);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAButton_createWithCenter : Error processing arguments");
        CrossApp::CAButton* ret = CrossApp::CAButton::createWithCenter(arg0, arg1);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAButton>(cx, (CrossApp::CAButton*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_autogentestbindings_js_CAButton_createWithCenter : wrong number of arguments");
    return false;
}

bool js_autogentestbindings_js_CAButton_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    CrossApp::CAButtonType arg0;
    ok &= jsval_to_int32(cx, args.get(0), (int32_t *)&arg0);
    JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAButton_constructor : Error processing arguments");
    CrossApp::CAButton* cobj = new (std::nothrow) CrossApp::CAButton(arg0);
    TypeTest<CrossApp::CAButton> t;
    js_type_class_t *typeClass = nullptr;
    std::string typeName = t.s_name();
    auto typeMapIter = _js_global_type_map.find(typeName);
    CCAssert(typeMapIter != _js_global_type_map.end(), "Can't find the class type!");
    typeClass = typeMapIter->second;
    CCAssert(typeClass, "The value is null.");
    JS::RootedObject proto(cx, typeClass->proto.get());
    JS::RootedObject parent(cx, typeClass->parentProto.get());
    JS::RootedObject obj(cx, JS_NewObject(cx, typeClass->jsclass, proto, parent));
    args.rval().set(OBJECT_TO_JSVAL(obj));
    // link the native object with the javascript object
    js_proxy_t* p = jsb_new_proxy(cobj, obj);
    if (JS_HasProperty(cx, obj, "_ctor", &ok) && ok)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    return true;
}

extern JSObject *jsb_CrossApp_CAControl_prototype;

void js_CrossApp_CAButton_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOGINFO("jsbindings: finalizing JS object %p (CAButton)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::CAButton *nobj = static_cast<CrossApp::CAButton *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
void js_register_autogentestbindings_js_CAButton(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_CAButton_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_CAButton_class->name = "CAButton";
    jsb_CrossApp_CAButton_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_CAButton_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_CAButton_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_CAButton_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_CAButton_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_CAButton_class->resolve = JS_ResolveStub;
    jsb_CrossApp_CAButton_class->convert = JS_ConvertStub;
    jsb_CrossApp_CAButton_class->finalize = js_CrossApp_CAButton_finalize;
    jsb_CrossApp_CAButton_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("setImageSize", js_autogentestbindings_js_CAButton_setImageSize, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setTitleFontSize", js_autogentestbindings_js_CAButton_setTitleFontSize, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("ccTouchEnded", js_autogentestbindings_js_CAButton_ccTouchEnded, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setTitleForState", js_autogentestbindings_js_CAButton_setTitleForState, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isAllowsSelected", js_autogentestbindings_js_CAButton_isAllowsSelected, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setBackgroundViewForState", js_autogentestbindings_js_CAButton_setBackgroundViewForState, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isSelected", js_autogentestbindings_js_CAButton_isSelected, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("init", js_autogentestbindings_js_CAButton_init, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setImageColorForState", js_autogentestbindings_js_CAButton_setImageColorForState, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("ccTouchMoved", js_autogentestbindings_js_CAButton_ccTouchMoved, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getImageForState", js_autogentestbindings_js_CAButton_getImageForState, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("ccTouchBegan", js_autogentestbindings_js_CAButton_ccTouchBegan, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setTitleLabelSize", js_autogentestbindings_js_CAButton_setTitleLabelSize, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isTouchClick", js_autogentestbindings_js_CAButton_isTouchClick, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setTitleFontName", js_autogentestbindings_js_CAButton_setTitleFontName, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("onExitTransitionDidStart", js_autogentestbindings_js_CAButton_onExitTransitionDidStart, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setTitleOffset", js_autogentestbindings_js_CAButton_setTitleOffset, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setTitleColorForState", js_autogentestbindings_js_CAButton_setTitleColorForState, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getBackgroundViewForState", js_autogentestbindings_js_CAButton_getBackgroundViewForState, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("interruptTouchState", js_autogentestbindings_js_CAButton_interruptTouchState, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setImageOffset", js_autogentestbindings_js_CAButton_setImageOffset, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setControlState", js_autogentestbindings_js_CAButton_setControlState, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setImageForState", js_autogentestbindings_js_CAButton_setImageForState, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("ccTouchCancelled", js_autogentestbindings_js_CAButton_ccTouchCancelled, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("onEnterTransitionDidFinish", js_autogentestbindings_js_CAButton_onEnterTransitionDidFinish, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setAllowsSelected", js_autogentestbindings_js_CAButton_setAllowsSelected, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getTitleForState", js_autogentestbindings_js_CAButton_getTitleForState, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    static JSFunctionSpec st_funcs[] = {
        JS_FN("create", js_autogentestbindings_js_CAButton_create, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("createWithFrame", js_autogentestbindings_js_CAButton_createWithFrame, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("createWithLayout", js_autogentestbindings_js_CAButton_createWithLayout, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("createWithCenter", js_autogentestbindings_js_CAButton_createWithCenter, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    jsb_CrossApp_CAButton_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_CAControl_prototype),
        jsb_CrossApp_CAButton_class,
        js_autogentestbindings_js_CAButton_constructor, 0, // constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27 
//  JS_SetPropertyAttributes(cx, global, "CAButton", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::CAButton> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_CAButton_class;
        p->proto = jsb_CrossApp_CAButton_prototype;
        p->parentProto = jsb_CrossApp_CAControl_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
}

JSClass  *jsb_CrossApp_CASegmentedControl_class;
JSObject *jsb_CrossApp_CASegmentedControl_prototype;

bool js_autogentestbindings_js_CASegmentedControl_setTitleFontSize(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CASegmentedControl* cobj = (CrossApp::CASegmentedControl *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CASegmentedControl_setTitleFontSize : Invalid Native Object");
    if (argc == 1) {
        double arg0 = 0;
        ok &= JS::ToNumber( cx, args.get(0), &arg0) && !isnan(arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CASegmentedControl_setTitleFontSize : Error processing arguments");
        cobj->setTitleFontSize(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CASegmentedControl_setTitleFontSize : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CASegmentedControl_setSegmentItemBackgroundImage(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CASegmentedControl* cobj = (CrossApp::CASegmentedControl *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CASegmentedControl_setSegmentItemBackgroundImage : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAImage* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAImage*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CASegmentedControl_setSegmentItemBackgroundImage : Error processing arguments");
        cobj->setSegmentItemBackgroundImage(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CASegmentedControl_setSegmentItemBackgroundImage : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CASegmentedControl_setTitleColor(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CASegmentedControl* cobj = (CrossApp::CASegmentedControl *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CASegmentedControl_setTitleColor : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAColor4B arg0;
        ok &= jsval_to_cacolor4b(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CASegmentedControl_setTitleColor : Error processing arguments");
        cobj->setTitleColor(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CASegmentedControl_setTitleColor : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CASegmentedControl_setSelectedAtIndex(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CASegmentedControl* cobj = (CrossApp::CASegmentedControl *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CASegmentedControl_setSelectedAtIndex : Invalid Native Object");
    if (argc == 1) {
        int arg0 = 0;
        ok &= jsval_to_int32(cx, args.get(0), (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CASegmentedControl_setSelectedAtIndex : Error processing arguments");
        cobj->setSelectedAtIndex(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CASegmentedControl_setSelectedAtIndex : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CASegmentedControl_setImageForSegmentAtIndex(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CASegmentedControl* cobj = (CrossApp::CASegmentedControl *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CASegmentedControl_setImageForSegmentAtIndex : Invalid Native Object");
    if (argc == 3) {
        CrossApp::CAImage* arg0 = nullptr;
        int arg1 = 0;
        CrossApp::CAControlState arg2;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAImage*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        ok &= jsval_to_int32(cx, args.get(1), (int32_t *)&arg1);
        ok &= jsval_to_int32(cx, args.get(2), (int32_t *)&arg2);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CASegmentedControl_setImageForSegmentAtIndex : Error processing arguments");
        cobj->setImageForSegmentAtIndex(arg0, arg1, arg2);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CASegmentedControl_setImageForSegmentAtIndex : wrong number of arguments: %d, was expecting %d", argc, 3);
    return false;
}
bool js_autogentestbindings_js_CASegmentedControl_setImageColor(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CASegmentedControl* cobj = (CrossApp::CASegmentedControl *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CASegmentedControl_setImageColor : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAColor4B arg0;
        ok &= jsval_to_cacolor4b(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CASegmentedControl_setImageColor : Error processing arguments");
        cobj->setImageColor(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CASegmentedControl_setImageColor : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CASegmentedControl_getSelectedAtIndex(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CASegmentedControl* cobj = (CrossApp::CASegmentedControl *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CASegmentedControl_getSelectedAtIndex : Invalid Native Object");
    if (argc == 0) {
        int ret = cobj->getSelectedAtIndex();
        jsval jsret = JSVAL_NULL;
        jsret = int32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CASegmentedControl_getSelectedAtIndex : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CASegmentedControl_setTitleSelectedColor(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CASegmentedControl* cobj = (CrossApp::CASegmentedControl *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CASegmentedControl_setTitleSelectedColor : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAColor4B arg0;
        ok &= jsval_to_cacolor4b(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CASegmentedControl_setTitleSelectedColor : Error processing arguments");
        cobj->setTitleSelectedColor(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CASegmentedControl_setTitleSelectedColor : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CASegmentedControl_getNumberOfSegments(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CASegmentedControl* cobj = (CrossApp::CASegmentedControl *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CASegmentedControl_getNumberOfSegments : Invalid Native Object");
    if (argc == 0) {
        unsigned int ret = cobj->getNumberOfSegments();
        jsval jsret = JSVAL_NULL;
        jsret = uint32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CASegmentedControl_getNumberOfSegments : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CASegmentedControl_setTitleForSegmentAtIndex(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CASegmentedControl* cobj = (CrossApp::CASegmentedControl *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CASegmentedControl_setTitleForSegmentAtIndex : Invalid Native Object");
    if (argc == 2) {
        std::string arg0;
        int arg1 = 0;
        ok &= jsval_to_std_string(cx, args.get(0), &arg0);
        ok &= jsval_to_int32(cx, args.get(1), (int32_t *)&arg1);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CASegmentedControl_setTitleForSegmentAtIndex : Error processing arguments");
        cobj->setTitleForSegmentAtIndex(arg0, arg1);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CASegmentedControl_setTitleForSegmentAtIndex : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_autogentestbindings_js_CASegmentedControl_setImageSizeAtIndex(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CASegmentedControl* cobj = (CrossApp::CASegmentedControl *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CASegmentedControl_setImageSizeAtIndex : Invalid Native Object");
    if (argc == 2) {
        CrossApp::DSize arg0;
        int arg1 = 0;
        ok &= jsval_to_dsize(cx, args.get(0), &arg0);
        ok &= jsval_to_int32(cx, args.get(1), (int32_t *)&arg1);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CASegmentedControl_setImageSizeAtIndex : Error processing arguments");
        cobj->setImageSizeAtIndex(arg0, arg1);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CASegmentedControl_setImageSizeAtIndex : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_autogentestbindings_js_CASegmentedControl_isEnabledForSegmentAtIndex(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CASegmentedControl* cobj = (CrossApp::CASegmentedControl *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CASegmentedControl_isEnabledForSegmentAtIndex : Invalid Native Object");
    if (argc == 1) {
        int arg0 = 0;
        ok &= jsval_to_int32(cx, args.get(0), (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CASegmentedControl_isEnabledForSegmentAtIndex : Error processing arguments");
        bool ret = cobj->isEnabledForSegmentAtIndex(arg0);
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CASegmentedControl_isEnabledForSegmentAtIndex : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CASegmentedControl_setBackgroundImage(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CASegmentedControl* cobj = (CrossApp::CASegmentedControl *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CASegmentedControl_setBackgroundImage : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAImage* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAImage*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CASegmentedControl_setBackgroundImage : Error processing arguments");
        cobj->setBackgroundImage(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CASegmentedControl_setBackgroundImage : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CASegmentedControl_setTitleFontName(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CASegmentedControl* cobj = (CrossApp::CASegmentedControl *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CASegmentedControl_setTitleFontName : Invalid Native Object");
    if (argc == 1) {
        std::string arg0;
        ok &= jsval_to_std_string(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CASegmentedControl_setTitleFontName : Error processing arguments");
        cobj->setTitleFontName(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CASegmentedControl_setTitleFontName : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CASegmentedControl_getTitleSelectedColor(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CASegmentedControl* cobj = (CrossApp::CASegmentedControl *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CASegmentedControl_getTitleSelectedColor : Invalid Native Object");
    if (argc == 0) {
        const CrossApp::CAColor4B& ret = cobj->getTitleSelectedColor();
        jsval jsret = JSVAL_NULL;
        jsret = cacolor4b_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CASegmentedControl_getTitleSelectedColor : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CASegmentedControl_setImageSelectedColor(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CASegmentedControl* cobj = (CrossApp::CASegmentedControl *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CASegmentedControl_setImageSelectedColor : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAColor4B arg0;
        ok &= jsval_to_cacolor4b(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CASegmentedControl_setImageSelectedColor : Error processing arguments");
        cobj->setImageSelectedColor(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CASegmentedControl_setImageSelectedColor : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CASegmentedControl_getContentOffsetForSegmentAtIndex(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CASegmentedControl* cobj = (CrossApp::CASegmentedControl *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CASegmentedControl_getContentOffsetForSegmentAtIndex : Invalid Native Object");
    if (argc == 1) {
        int arg0 = 0;
        ok &= jsval_to_int32(cx, args.get(0), (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CASegmentedControl_getContentOffsetForSegmentAtIndex : Error processing arguments");
        CrossApp::DSize ret = cobj->getContentOffsetForSegmentAtIndex(arg0);
        jsval jsret = JSVAL_NULL;
        jsret = dsize_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CASegmentedControl_getContentOffsetForSegmentAtIndex : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CASegmentedControl_getImageSelectedColor(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CASegmentedControl* cobj = (CrossApp::CASegmentedControl *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CASegmentedControl_getImageSelectedColor : Invalid Native Object");
    if (argc == 0) {
        const CrossApp::CAColor4B& ret = cobj->getImageSelectedColor();
        jsval jsret = JSVAL_NULL;
        jsret = cacolor4b_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CASegmentedControl_getImageSelectedColor : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CASegmentedControl_init(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CASegmentedControl* cobj = (CrossApp::CASegmentedControl *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CASegmentedControl_init : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->init();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CASegmentedControl_init : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CASegmentedControl_getImageForSegmentAtIndex(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CASegmentedControl* cobj = (CrossApp::CASegmentedControl *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CASegmentedControl_getImageForSegmentAtIndex : Invalid Native Object");
    if (argc == 1) {
        int arg0 = 0;
        ok &= jsval_to_int32(cx, args.get(0), (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CASegmentedControl_getImageForSegmentAtIndex : Error processing arguments");
        CrossApp::CAImage* ret = cobj->getImageForSegmentAtIndex(arg0);
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAImage>(cx, (CrossApp::CAImage*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CASegmentedControl_getImageForSegmentAtIndex : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CASegmentedControl_setContentOffsetForSegmentAtIndex(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CASegmentedControl* cobj = (CrossApp::CASegmentedControl *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CASegmentedControl_setContentOffsetForSegmentAtIndex : Invalid Native Object");
    if (argc == 2) {
        CrossApp::DSize arg0;
        int arg1 = 0;
        ok &= jsval_to_dsize(cx, args.get(0), &arg0);
        ok &= jsval_to_int32(cx, args.get(1), (int32_t *)&arg1);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CASegmentedControl_setContentOffsetForSegmentAtIndex : Error processing arguments");
        cobj->setContentOffsetForSegmentAtIndex(arg0, arg1);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CASegmentedControl_setContentOffsetForSegmentAtIndex : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_autogentestbindings_js_CASegmentedControl_getTitleColor(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CASegmentedControl* cobj = (CrossApp::CASegmentedControl *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CASegmentedControl_getTitleColor : Invalid Native Object");
    if (argc == 0) {
        const CrossApp::CAColor4B& ret = cobj->getTitleColor();
        jsval jsret = JSVAL_NULL;
        jsret = cacolor4b_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CASegmentedControl_getTitleColor : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CASegmentedControl_onExitTransitionDidStart(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CASegmentedControl* cobj = (CrossApp::CASegmentedControl *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CASegmentedControl_onExitTransitionDidStart : Invalid Native Object");
    if (argc == 0) {
        cobj->onExitTransitionDidStart();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CASegmentedControl_onExitTransitionDidStart : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CASegmentedControl_setTintColor(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CASegmentedControl* cobj = (CrossApp::CASegmentedControl *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CASegmentedControl_setTintColor : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAColor4B arg0;
        ok &= jsval_to_cacolor4b(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CASegmentedControl_setTintColor : Error processing arguments");
        cobj->setTintColor(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CASegmentedControl_setTintColor : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CASegmentedControl_getTitleForSegmentAtIndex(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CASegmentedControl* cobj = (CrossApp::CASegmentedControl *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CASegmentedControl_getTitleForSegmentAtIndex : Invalid Native Object");
    if (argc == 1) {
        int arg0 = 0;
        ok &= jsval_to_int32(cx, args.get(0), (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CASegmentedControl_getTitleForSegmentAtIndex : Error processing arguments");
        std::string ret = cobj->getTitleForSegmentAtIndex(arg0);
        jsval jsret = JSVAL_NULL;
        jsret = std_string_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CASegmentedControl_getTitleForSegmentAtIndex : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CASegmentedControl_getImageColor(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CASegmentedControl* cobj = (CrossApp::CASegmentedControl *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CASegmentedControl_getImageColor : Invalid Native Object");
    if (argc == 0) {
        const CrossApp::CAColor4B& ret = cobj->getImageColor();
        jsval jsret = JSVAL_NULL;
        jsret = cacolor4b_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CASegmentedControl_getImageColor : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CASegmentedControl_onEnterTransitionDidFinish(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CASegmentedControl* cobj = (CrossApp::CASegmentedControl *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CASegmentedControl_onEnterTransitionDidFinish : Invalid Native Object");
    if (argc == 0) {
        cobj->onEnterTransitionDidFinish();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CASegmentedControl_onEnterTransitionDidFinish : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CASegmentedControl_setEnabledForSegmentAtIndex(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CASegmentedControl* cobj = (CrossApp::CASegmentedControl *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CASegmentedControl_setEnabledForSegmentAtIndex : Invalid Native Object");
    if (argc == 2) {
        bool arg0;
        int arg1 = 0;
        arg0 = JS::ToBoolean(args.get(0));
        ok &= jsval_to_int32(cx, args.get(1), (int32_t *)&arg1);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CASegmentedControl_setEnabledForSegmentAtIndex : Error processing arguments");
        cobj->setEnabledForSegmentAtIndex(arg0, arg1);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CASegmentedControl_setEnabledForSegmentAtIndex : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_autogentestbindings_js_CASegmentedControl_create(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        unsigned int arg0 = 0;
        ok &= jsval_to_uint32(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CASegmentedControl_create : Error processing arguments");
        CrossApp::CASegmentedControl* ret = CrossApp::CASegmentedControl::create(arg0);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CASegmentedControl>(cx, (CrossApp::CASegmentedControl*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_autogentestbindings_js_CASegmentedControl_create : wrong number of arguments");
    return false;
}

bool js_autogentestbindings_js_CASegmentedControl_createWithFrame(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 2) {
        CrossApp::DRect arg0;
        unsigned int arg1 = 0;
        ok &= jsval_to_drect(cx, args.get(0), &arg0);
        ok &= jsval_to_uint32(cx, args.get(1), &arg1);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CASegmentedControl_createWithFrame : Error processing arguments");
        CrossApp::CASegmentedControl* ret = CrossApp::CASegmentedControl::createWithFrame(arg0, arg1);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CASegmentedControl>(cx, (CrossApp::CASegmentedControl*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_autogentestbindings_js_CASegmentedControl_createWithFrame : wrong number of arguments");
    return false;
}

bool js_autogentestbindings_js_CASegmentedControl_createWithLayout(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 2) {
        CrossApp::DRectLayout arg0;
        unsigned int arg1 = 0;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (const CrossApp::DRectLayout&)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        ok &= jsval_to_uint32(cx, args.get(1), &arg1);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CASegmentedControl_createWithLayout : Error processing arguments");
        CrossApp::CASegmentedControl* ret = CrossApp::CASegmentedControl::createWithLayout(arg0, arg1);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CASegmentedControl>(cx, (CrossApp::CASegmentedControl*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_autogentestbindings_js_CASegmentedControl_createWithLayout : wrong number of arguments");
    return false;
}

bool js_autogentestbindings_js_CASegmentedControl_createWithCenter(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 2) {
        CrossApp::DRect arg0;
        unsigned int arg1 = 0;
        ok &= jsval_to_drect(cx, args.get(0), &arg0);
        ok &= jsval_to_uint32(cx, args.get(1), &arg1);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CASegmentedControl_createWithCenter : Error processing arguments");
        CrossApp::CASegmentedControl* ret = CrossApp::CASegmentedControl::createWithCenter(arg0, arg1);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CASegmentedControl>(cx, (CrossApp::CASegmentedControl*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_autogentestbindings_js_CASegmentedControl_createWithCenter : wrong number of arguments");
    return false;
}

bool js_autogentestbindings_js_CASegmentedControl_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    unsigned int arg0 = 0;
    ok &= jsval_to_uint32(cx, args.get(0), &arg0);
    JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CASegmentedControl_constructor : Error processing arguments");
    CrossApp::CASegmentedControl* cobj = new (std::nothrow) CrossApp::CASegmentedControl(arg0);
    TypeTest<CrossApp::CASegmentedControl> t;
    js_type_class_t *typeClass = nullptr;
    std::string typeName = t.s_name();
    auto typeMapIter = _js_global_type_map.find(typeName);
    CCAssert(typeMapIter != _js_global_type_map.end(), "Can't find the class type!");
    typeClass = typeMapIter->second;
    CCAssert(typeClass, "The value is null.");
    JS::RootedObject proto(cx, typeClass->proto.get());
    JS::RootedObject parent(cx, typeClass->parentProto.get());
    JS::RootedObject obj(cx, JS_NewObject(cx, typeClass->jsclass, proto, parent));
    args.rval().set(OBJECT_TO_JSVAL(obj));
    // link the native object with the javascript object
    js_proxy_t* p = jsb_new_proxy(cobj, obj);
    if (JS_HasProperty(cx, obj, "_ctor", &ok) && ok)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    return true;
}

extern JSObject *jsb_CrossApp_CAControl_prototype;

void js_CrossApp_CASegmentedControl_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOGINFO("jsbindings: finalizing JS object %p (CASegmentedControl)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::CASegmentedControl *nobj = static_cast<CrossApp::CASegmentedControl *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
void js_register_autogentestbindings_js_CASegmentedControl(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_CASegmentedControl_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_CASegmentedControl_class->name = "CASegmentedControl";
    jsb_CrossApp_CASegmentedControl_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_CASegmentedControl_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_CASegmentedControl_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_CASegmentedControl_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_CASegmentedControl_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_CASegmentedControl_class->resolve = JS_ResolveStub;
    jsb_CrossApp_CASegmentedControl_class->convert = JS_ConvertStub;
    jsb_CrossApp_CASegmentedControl_class->finalize = js_CrossApp_CASegmentedControl_finalize;
    jsb_CrossApp_CASegmentedControl_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("setTitleFontSize", js_autogentestbindings_js_CASegmentedControl_setTitleFontSize, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setSegmentItemBackgroundImage", js_autogentestbindings_js_CASegmentedControl_setSegmentItemBackgroundImage, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setTitleColor", js_autogentestbindings_js_CASegmentedControl_setTitleColor, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setSelectedAtIndex", js_autogentestbindings_js_CASegmentedControl_setSelectedAtIndex, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setImageForSegmentAtIndex", js_autogentestbindings_js_CASegmentedControl_setImageForSegmentAtIndex, 3, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setImageColor", js_autogentestbindings_js_CASegmentedControl_setImageColor, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getSelectedAtIndex", js_autogentestbindings_js_CASegmentedControl_getSelectedAtIndex, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setTitleSelectedColor", js_autogentestbindings_js_CASegmentedControl_setTitleSelectedColor, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getNumberOfSegments", js_autogentestbindings_js_CASegmentedControl_getNumberOfSegments, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setTitleForSegmentAtIndex", js_autogentestbindings_js_CASegmentedControl_setTitleForSegmentAtIndex, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setImageSizeAtIndex", js_autogentestbindings_js_CASegmentedControl_setImageSizeAtIndex, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isEnabledForSegmentAtIndex", js_autogentestbindings_js_CASegmentedControl_isEnabledForSegmentAtIndex, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setBackgroundImage", js_autogentestbindings_js_CASegmentedControl_setBackgroundImage, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setTitleFontName", js_autogentestbindings_js_CASegmentedControl_setTitleFontName, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getTitleSelectedColor", js_autogentestbindings_js_CASegmentedControl_getTitleSelectedColor, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setImageSelectedColor", js_autogentestbindings_js_CASegmentedControl_setImageSelectedColor, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getContentOffsetForSegmentAtIndex", js_autogentestbindings_js_CASegmentedControl_getContentOffsetForSegmentAtIndex, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getImageSelectedColor", js_autogentestbindings_js_CASegmentedControl_getImageSelectedColor, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("init", js_autogentestbindings_js_CASegmentedControl_init, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getImageForSegmentAtIndex", js_autogentestbindings_js_CASegmentedControl_getImageForSegmentAtIndex, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setContentOffsetForSegmentAtIndex", js_autogentestbindings_js_CASegmentedControl_setContentOffsetForSegmentAtIndex, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getTitleColor", js_autogentestbindings_js_CASegmentedControl_getTitleColor, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("onExitTransitionDidStart", js_autogentestbindings_js_CASegmentedControl_onExitTransitionDidStart, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setTintColor", js_autogentestbindings_js_CASegmentedControl_setTintColor, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getTitleForSegmentAtIndex", js_autogentestbindings_js_CASegmentedControl_getTitleForSegmentAtIndex, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getImageColor", js_autogentestbindings_js_CASegmentedControl_getImageColor, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("onEnterTransitionDidFinish", js_autogentestbindings_js_CASegmentedControl_onEnterTransitionDidFinish, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setEnabledForSegmentAtIndex", js_autogentestbindings_js_CASegmentedControl_setEnabledForSegmentAtIndex, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    static JSFunctionSpec st_funcs[] = {
        JS_FN("create", js_autogentestbindings_js_CASegmentedControl_create, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("createWithFrame", js_autogentestbindings_js_CASegmentedControl_createWithFrame, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("createWithLayout", js_autogentestbindings_js_CASegmentedControl_createWithLayout, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("createWithCenter", js_autogentestbindings_js_CASegmentedControl_createWithCenter, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    jsb_CrossApp_CASegmentedControl_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_CAControl_prototype),
        jsb_CrossApp_CASegmentedControl_class,
        js_autogentestbindings_js_CASegmentedControl_constructor, 0, // constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27 
//  JS_SetPropertyAttributes(cx, global, "CASegmentedControl", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::CASegmentedControl> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_CASegmentedControl_class;
        p->proto = jsb_CrossApp_CASegmentedControl_prototype;
        p->parentProto = jsb_CrossApp_CAControl_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
}

JSClass  *jsb_CrossApp_CABarItem_class;
JSObject *jsb_CrossApp_CABarItem_prototype;

bool js_autogentestbindings_js_CABarItem_setImage(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CABarItem* cobj = (CrossApp::CABarItem *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CABarItem_setImage : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAImage* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAImage*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CABarItem_setImage : Error processing arguments");
        cobj->setImage(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CABarItem_setImage : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CABarItem_setTitle(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CABarItem* cobj = (CrossApp::CABarItem *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CABarItem_setTitle : Invalid Native Object");
    if (argc == 1) {
        std::string arg0;
        ok &= jsval_to_std_string(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CABarItem_setTitle : Error processing arguments");
        cobj->setTitle(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CABarItem_setTitle : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CABarItem_getImage(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CABarItem* cobj = (CrossApp::CABarItem *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CABarItem_getImage : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CAImage* ret = cobj->getImage();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAImage>(cx, (CrossApp::CAImage*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CABarItem_getImage : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CABarItem_getTitle(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CABarItem* cobj = (CrossApp::CABarItem *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CABarItem_getTitle : Invalid Native Object");
    if (argc == 0) {
        const std::string& ret = cobj->getTitle();
        jsval jsret = JSVAL_NULL;
        jsret = std_string_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CABarItem_getTitle : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CABarItem_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    CrossApp::CABarItem* cobj = new (std::nothrow) CrossApp::CABarItem();
    TypeTest<CrossApp::CABarItem> t;
    js_type_class_t *typeClass = nullptr;
    std::string typeName = t.s_name();
    auto typeMapIter = _js_global_type_map.find(typeName);
    CCAssert(typeMapIter != _js_global_type_map.end(), "Can't find the class type!");
    typeClass = typeMapIter->second;
    CCAssert(typeClass, "The value is null.");
    JS::RootedObject proto(cx, typeClass->proto.get());
    JS::RootedObject parent(cx, typeClass->parentProto.get());
    JS::RootedObject obj(cx, JS_NewObject(cx, typeClass->jsclass, proto, parent));
    args.rval().set(OBJECT_TO_JSVAL(obj));
    // link the native object with the javascript object
    js_proxy_t* p = jsb_new_proxy(cobj, obj);
    if (JS_HasProperty(cx, obj, "_ctor", &ok) && ok)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    return true;
}

extern JSObject *jsb_CrossApp_CAObject_prototype;

void js_CrossApp_CABarItem_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOGINFO("jsbindings: finalizing JS object %p (CABarItem)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::CABarItem *nobj = static_cast<CrossApp::CABarItem *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
void js_register_autogentestbindings_js_CABarItem(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_CABarItem_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_CABarItem_class->name = "CABarItem";
    jsb_CrossApp_CABarItem_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_CABarItem_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_CABarItem_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_CABarItem_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_CABarItem_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_CABarItem_class->resolve = JS_ResolveStub;
    jsb_CrossApp_CABarItem_class->convert = JS_ConvertStub;
    jsb_CrossApp_CABarItem_class->finalize = js_CrossApp_CABarItem_finalize;
    jsb_CrossApp_CABarItem_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("setImage", js_autogentestbindings_js_CABarItem_setImage, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setTitle", js_autogentestbindings_js_CABarItem_setTitle, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getImage", js_autogentestbindings_js_CABarItem_getImage, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getTitle", js_autogentestbindings_js_CABarItem_getTitle, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    JSFunctionSpec *st_funcs = NULL;

    jsb_CrossApp_CABarItem_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_CAObject_prototype),
        jsb_CrossApp_CABarItem_class,
        js_autogentestbindings_js_CABarItem_constructor, 0, // constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27 
//  JS_SetPropertyAttributes(cx, global, "CABarItem", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::CABarItem> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_CABarItem_class;
        p->proto = jsb_CrossApp_CABarItem_prototype;
        p->parentProto = jsb_CrossApp_CAObject_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
}

JSClass  *jsb_CrossApp_CABarButtonItem_class;
JSObject *jsb_CrossApp_CABarButtonItem_prototype;

bool js_autogentestbindings_js_CABarButtonItem_getSel(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CABarButtonItem* cobj = (CrossApp::CABarButtonItem *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CABarButtonItem_getSel : Invalid Native Object");
    if (argc == 0) {
        ?? ret = cobj->getSel();
        jsval jsret = JSVAL_NULL;
        #pragma warning NO CONVERSION FROM NATIVE FOR ??;
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CABarButtonItem_getSel : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CABarButtonItem_getCustomView(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CABarButtonItem* cobj = (CrossApp::CABarButtonItem *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CABarButtonItem_getCustomView : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CAView* ret = cobj->getCustomView();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAView>(cx, (CrossApp::CAView*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CABarButtonItem_getCustomView : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CABarButtonItem_initWithCustomView(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CABarButtonItem* cobj = (CrossApp::CABarButtonItem *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CABarButtonItem_initWithCustomView : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAView* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAView*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CABarButtonItem_initWithCustomView : Error processing arguments");
        bool ret = cobj->initWithCustomView(arg0);
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CABarButtonItem_initWithCustomView : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CABarButtonItem_setItemWidth(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CABarButtonItem* cobj = (CrossApp::CABarButtonItem *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CABarButtonItem_setItemWidth : Invalid Native Object");
    if (argc == 1) {
        unsigned int arg0 = 0;
        ok &= jsval_to_uint32(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CABarButtonItem_setItemWidth : Error processing arguments");
        cobj->setItemWidth(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CABarButtonItem_setItemWidth : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CABarButtonItem_initWithImage(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CABarButtonItem* cobj = (CrossApp::CABarButtonItem *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CABarButtonItem_initWithImage : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAImage* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAImage*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CABarButtonItem_initWithImage : Error processing arguments");
        bool ret = cobj->initWithImage(arg0);
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }
    if (argc == 2) {
        CrossApp::CAImage* arg0 = nullptr;
        CrossApp::CAImage* arg1 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAImage*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        do {
            if (args.get(1).isNull()) { arg1 = nullptr; break; }
            if (!args.get(1).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(1).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg1 = (CrossApp::CAImage*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg1, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CABarButtonItem_initWithImage : Error processing arguments");
        bool ret = cobj->initWithImage(arg0, arg1);
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CABarButtonItem_initWithImage : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CABarButtonItem_getHighlightedImage(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CABarButtonItem* cobj = (CrossApp::CABarButtonItem *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CABarButtonItem_getHighlightedImage : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CAImage* ret = cobj->getHighlightedImage();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAImage>(cx, (CrossApp::CAImage*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CABarButtonItem_getHighlightedImage : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CABarButtonItem_getTarget(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CABarButtonItem* cobj = (CrossApp::CABarButtonItem *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CABarButtonItem_getTarget : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CAObject* ret = cobj->getTarget();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAObject>(cx, (CrossApp::CAObject*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CABarButtonItem_getTarget : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CABarButtonItem_setHighlightedImage(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CABarButtonItem* cobj = (CrossApp::CABarButtonItem *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CABarButtonItem_setHighlightedImage : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAImage* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAImage*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CABarButtonItem_setHighlightedImage : Error processing arguments");
        cobj->setHighlightedImage(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CABarButtonItem_setHighlightedImage : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CABarButtonItem_init(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CABarButtonItem* cobj = (CrossApp::CABarButtonItem *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CABarButtonItem_init : Invalid Native Object");
    if (argc == 1) {
        std::string arg0;
        ok &= jsval_to_std_string(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CABarButtonItem_init : Error processing arguments");
        bool ret = cobj->init(arg0);
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }
    if (argc == 2) {
        std::string arg0;
        CrossApp::CAImage* arg1 = nullptr;
        ok &= jsval_to_std_string(cx, args.get(0), &arg0);
        do {
            if (args.get(1).isNull()) { arg1 = nullptr; break; }
            if (!args.get(1).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(1).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg1 = (CrossApp::CAImage*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg1, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CABarButtonItem_init : Error processing arguments");
        bool ret = cobj->init(arg0, arg1);
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }
    if (argc == 3) {
        std::string arg0;
        CrossApp::CAImage* arg1 = nullptr;
        CrossApp::CAImage* arg2 = nullptr;
        ok &= jsval_to_std_string(cx, args.get(0), &arg0);
        do {
            if (args.get(1).isNull()) { arg1 = nullptr; break; }
            if (!args.get(1).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(1).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg1 = (CrossApp::CAImage*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg1, cx, false, "Invalid Native Object");
        } while (0);
        do {
            if (args.get(2).isNull()) { arg2 = nullptr; break; }
            if (!args.get(2).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(2).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg2 = (CrossApp::CAImage*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg2, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CABarButtonItem_init : Error processing arguments");
        bool ret = cobj->init(arg0, arg1, arg2);
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CABarButtonItem_init : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CABarButtonItem_initWithTitle(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CABarButtonItem* cobj = (CrossApp::CABarButtonItem *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CABarButtonItem_initWithTitle : Invalid Native Object");
    if (argc == 1) {
        std::string arg0;
        ok &= jsval_to_std_string(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CABarButtonItem_initWithTitle : Error processing arguments");
        bool ret = cobj->initWithTitle(arg0);
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }
    if (argc == 2) {
        std::string arg0;
        CrossApp::CAImage* arg1 = nullptr;
        ok &= jsval_to_std_string(cx, args.get(0), &arg0);
        do {
            if (args.get(1).isNull()) { arg1 = nullptr; break; }
            if (!args.get(1).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(1).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg1 = (CrossApp::CAImage*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg1, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CABarButtonItem_initWithTitle : Error processing arguments");
        bool ret = cobj->initWithTitle(arg0, arg1);
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }
    if (argc == 3) {
        std::string arg0;
        CrossApp::CAImage* arg1 = nullptr;
        CrossApp::CAImage* arg2 = nullptr;
        ok &= jsval_to_std_string(cx, args.get(0), &arg0);
        do {
            if (args.get(1).isNull()) { arg1 = nullptr; break; }
            if (!args.get(1).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(1).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg1 = (CrossApp::CAImage*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg1, cx, false, "Invalid Native Object");
        } while (0);
        do {
            if (args.get(2).isNull()) { arg2 = nullptr; break; }
            if (!args.get(2).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(2).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg2 = (CrossApp::CAImage*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg2, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CABarButtonItem_initWithTitle : Error processing arguments");
        bool ret = cobj->initWithTitle(arg0, arg1, arg2);
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CABarButtonItem_initWithTitle : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CABarButtonItem_getItemWidth(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CABarButtonItem* cobj = (CrossApp::CABarButtonItem *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CABarButtonItem_getItemWidth : Invalid Native Object");
    if (argc == 0) {
        unsigned int ret = cobj->getItemWidth();
        jsval jsret = JSVAL_NULL;
        jsret = uint32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CABarButtonItem_getItemWidth : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CABarButtonItem_create(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 3) {
        std::string arg0;
        CrossApp::CAImage* arg1 = nullptr;
        CrossApp::CAImage* arg2 = nullptr;
        ok &= jsval_to_std_string(cx, args.get(0), &arg0);
        do {
            if (args.get(1).isNull()) { arg1 = nullptr; break; }
            if (!args.get(1).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(1).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg1 = (CrossApp::CAImage*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg1, cx, false, "Invalid Native Object");
        } while (0);
        do {
            if (args.get(2).isNull()) { arg2 = nullptr; break; }
            if (!args.get(2).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(2).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg2 = (CrossApp::CAImage*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg2, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CABarButtonItem_create : Error processing arguments");
        CrossApp::CABarButtonItem* ret = CrossApp::CABarButtonItem::create(arg0, arg1, arg2);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CABarButtonItem>(cx, (CrossApp::CABarButtonItem*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_autogentestbindings_js_CABarButtonItem_create : wrong number of arguments");
    return false;
}

bool js_autogentestbindings_js_CABarButtonItem_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    CrossApp::CABarButtonItem* cobj = new (std::nothrow) CrossApp::CABarButtonItem();
    TypeTest<CrossApp::CABarButtonItem> t;
    js_type_class_t *typeClass = nullptr;
    std::string typeName = t.s_name();
    auto typeMapIter = _js_global_type_map.find(typeName);
    CCAssert(typeMapIter != _js_global_type_map.end(), "Can't find the class type!");
    typeClass = typeMapIter->second;
    CCAssert(typeClass, "The value is null.");
    JS::RootedObject proto(cx, typeClass->proto.get());
    JS::RootedObject parent(cx, typeClass->parentProto.get());
    JS::RootedObject obj(cx, JS_NewObject(cx, typeClass->jsclass, proto, parent));
    args.rval().set(OBJECT_TO_JSVAL(obj));
    // link the native object with the javascript object
    js_proxy_t* p = jsb_new_proxy(cobj, obj);
    if (JS_HasProperty(cx, obj, "_ctor", &ok) && ok)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    return true;
}

extern JSObject *jsb_CrossApp_CABarItem_prototype;

void js_CrossApp_CABarButtonItem_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOGINFO("jsbindings: finalizing JS object %p (CABarButtonItem)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::CABarButtonItem *nobj = static_cast<CrossApp::CABarButtonItem *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
void js_register_autogentestbindings_js_CABarButtonItem(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_CABarButtonItem_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_CABarButtonItem_class->name = "CABarButtonItem";
    jsb_CrossApp_CABarButtonItem_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_CABarButtonItem_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_CABarButtonItem_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_CABarButtonItem_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_CABarButtonItem_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_CABarButtonItem_class->resolve = JS_ResolveStub;
    jsb_CrossApp_CABarButtonItem_class->convert = JS_ConvertStub;
    jsb_CrossApp_CABarButtonItem_class->finalize = js_CrossApp_CABarButtonItem_finalize;
    jsb_CrossApp_CABarButtonItem_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("getSel", js_autogentestbindings_js_CABarButtonItem_getSel, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getCustomView", js_autogentestbindings_js_CABarButtonItem_getCustomView, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("initWithCustomView", js_autogentestbindings_js_CABarButtonItem_initWithCustomView, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setItemWidth", js_autogentestbindings_js_CABarButtonItem_setItemWidth, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("initWithImage", js_autogentestbindings_js_CABarButtonItem_initWithImage, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getHighlightedImage", js_autogentestbindings_js_CABarButtonItem_getHighlightedImage, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getTarget", js_autogentestbindings_js_CABarButtonItem_getTarget, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setHighlightedImage", js_autogentestbindings_js_CABarButtonItem_setHighlightedImage, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("init", js_autogentestbindings_js_CABarButtonItem_init, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("initWithTitle", js_autogentestbindings_js_CABarButtonItem_initWithTitle, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getItemWidth", js_autogentestbindings_js_CABarButtonItem_getItemWidth, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    static JSFunctionSpec st_funcs[] = {
        JS_FN("create", js_autogentestbindings_js_CABarButtonItem_create, 3, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    jsb_CrossApp_CABarButtonItem_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_CABarItem_prototype),
        jsb_CrossApp_CABarButtonItem_class,
        js_autogentestbindings_js_CABarButtonItem_constructor, 0, // constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27 
//  JS_SetPropertyAttributes(cx, global, "CABarButtonItem", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::CABarButtonItem> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_CABarButtonItem_class;
        p->proto = jsb_CrossApp_CABarButtonItem_prototype;
        p->parentProto = jsb_CrossApp_CABarItem_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
}

JSClass  *jsb_CrossApp_CANavigationBarItem_class;
JSObject *jsb_CrossApp_CANavigationBarItem_prototype;

bool js_autogentestbindings_js_CANavigationBarItem_addLeftButtonItem(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CANavigationBarItem* cobj = (CrossApp::CANavigationBarItem *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CANavigationBarItem_addLeftButtonItem : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CABarButtonItem* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CABarButtonItem*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CANavigationBarItem_addLeftButtonItem : Error processing arguments");
        cobj->addLeftButtonItem(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CANavigationBarItem_addLeftButtonItem : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CANavigationBarItem_getRightButtonItems(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CANavigationBarItem* cobj = (CrossApp::CANavigationBarItem *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CANavigationBarItem_getRightButtonItems : Invalid Native Object");
    if (argc == 0) {
        const CrossApp::CAVector<CrossApp::CAObject *>& ret = cobj->getRightButtonItems();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAVector<CrossApp::CAObject >&>(cx, (CrossApp::CAVector<CrossApp::CAObject *>&)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CANavigationBarItem_getRightButtonItems : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CANavigationBarItem_setNagigationBarHidden(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CANavigationBarItem* cobj = (CrossApp::CANavigationBarItem *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CANavigationBarItem_setNagigationBarHidden : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        arg0 = JS::ToBoolean(args.get(0));
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CANavigationBarItem_setNagigationBarHidden : Error processing arguments");
        cobj->setNagigationBarHidden(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CANavigationBarItem_setNagigationBarHidden : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CANavigationBarItem_getTitleViewImage(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CANavigationBarItem* cobj = (CrossApp::CANavigationBarItem *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CANavigationBarItem_getTitleViewImage : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CAImage* ret = cobj->getTitleViewImage();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAImage>(cx, (CrossApp::CAImage*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CANavigationBarItem_getTitleViewImage : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CANavigationBarItem_setShowGoBackButton(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CANavigationBarItem* cobj = (CrossApp::CANavigationBarItem *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CANavigationBarItem_setShowGoBackButton : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        arg0 = JS::ToBoolean(args.get(0));
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CANavigationBarItem_setShowGoBackButton : Error processing arguments");
        cobj->setShowGoBackButton(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CANavigationBarItem_setShowGoBackButton : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CANavigationBarItem_addRightButtonItem(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CANavigationBarItem* cobj = (CrossApp::CANavigationBarItem *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CANavigationBarItem_addRightButtonItem : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CABarButtonItem* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CABarButtonItem*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CANavigationBarItem_addRightButtonItem : Error processing arguments");
        cobj->addRightButtonItem(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CANavigationBarItem_addRightButtonItem : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CANavigationBarItem_getTitleView(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CANavigationBarItem* cobj = (CrossApp::CANavigationBarItem *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CANavigationBarItem_getTitleView : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CAView* ret = cobj->getTitleView();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAView>(cx, (CrossApp::CAView*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CANavigationBarItem_getTitleView : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CANavigationBarItem_setTitleView(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CANavigationBarItem* cobj = (CrossApp::CANavigationBarItem *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CANavigationBarItem_setTitleView : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAView* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAView*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CANavigationBarItem_setTitleView : Error processing arguments");
        cobj->setTitleView(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CANavigationBarItem_setTitleView : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CANavigationBarItem_init(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CANavigationBarItem* cobj = (CrossApp::CANavigationBarItem *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CANavigationBarItem_init : Invalid Native Object");
    if (argc == 1) {
        std::string arg0;
        ok &= jsval_to_std_string(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CANavigationBarItem_init : Error processing arguments");
        bool ret = cobj->init(arg0);
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CANavigationBarItem_init : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CANavigationBarItem_getLeftButtonItems(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CANavigationBarItem* cobj = (CrossApp::CANavigationBarItem *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CANavigationBarItem_getLeftButtonItems : Invalid Native Object");
    if (argc == 0) {
        const CrossApp::CAVector<CrossApp::CAObject *>& ret = cobj->getLeftButtonItems();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAVector<CrossApp::CAObject >&>(cx, (CrossApp::CAVector<CrossApp::CAObject *>&)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CANavigationBarItem_getLeftButtonItems : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CANavigationBarItem_setTitleViewImage(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CANavigationBarItem* cobj = (CrossApp::CANavigationBarItem *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CANavigationBarItem_setTitleViewImage : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAImage* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAImage*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CANavigationBarItem_setTitleViewImage : Error processing arguments");
        cobj->setTitleViewImage(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CANavigationBarItem_setTitleViewImage : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CANavigationBarItem_isNagigationBarHidden(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CANavigationBarItem* cobj = (CrossApp::CANavigationBarItem *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CANavigationBarItem_isNagigationBarHidden : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->isNagigationBarHidden();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CANavigationBarItem_isNagigationBarHidden : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CANavigationBarItem_isShowGoBackButton(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CANavigationBarItem* cobj = (CrossApp::CANavigationBarItem *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CANavigationBarItem_isShowGoBackButton : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->isShowGoBackButton();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CANavigationBarItem_isShowGoBackButton : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CANavigationBarItem_create(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        std::string arg0;
        ok &= jsval_to_std_string(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CANavigationBarItem_create : Error processing arguments");
        CrossApp::CANavigationBarItem* ret = CrossApp::CANavigationBarItem::create(arg0);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CANavigationBarItem>(cx, (CrossApp::CANavigationBarItem*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_autogentestbindings_js_CANavigationBarItem_create : wrong number of arguments");
    return false;
}

bool js_autogentestbindings_js_CANavigationBarItem_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    CrossApp::CANavigationBarItem* cobj = new (std::nothrow) CrossApp::CANavigationBarItem();
    TypeTest<CrossApp::CANavigationBarItem> t;
    js_type_class_t *typeClass = nullptr;
    std::string typeName = t.s_name();
    auto typeMapIter = _js_global_type_map.find(typeName);
    CCAssert(typeMapIter != _js_global_type_map.end(), "Can't find the class type!");
    typeClass = typeMapIter->second;
    CCAssert(typeClass, "The value is null.");
    JS::RootedObject proto(cx, typeClass->proto.get());
    JS::RootedObject parent(cx, typeClass->parentProto.get());
    JS::RootedObject obj(cx, JS_NewObject(cx, typeClass->jsclass, proto, parent));
    args.rval().set(OBJECT_TO_JSVAL(obj));
    // link the native object with the javascript object
    js_proxy_t* p = jsb_new_proxy(cobj, obj);
    if (JS_HasProperty(cx, obj, "_ctor", &ok) && ok)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    return true;
}

extern JSObject *jsb_CrossApp_CABarItem_prototype;

void js_CrossApp_CANavigationBarItem_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOGINFO("jsbindings: finalizing JS object %p (CANavigationBarItem)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::CANavigationBarItem *nobj = static_cast<CrossApp::CANavigationBarItem *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
void js_register_autogentestbindings_js_CANavigationBarItem(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_CANavigationBarItem_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_CANavigationBarItem_class->name = "CANavigationBarItem";
    jsb_CrossApp_CANavigationBarItem_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_CANavigationBarItem_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_CANavigationBarItem_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_CANavigationBarItem_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_CANavigationBarItem_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_CANavigationBarItem_class->resolve = JS_ResolveStub;
    jsb_CrossApp_CANavigationBarItem_class->convert = JS_ConvertStub;
    jsb_CrossApp_CANavigationBarItem_class->finalize = js_CrossApp_CANavigationBarItem_finalize;
    jsb_CrossApp_CANavigationBarItem_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("addLeftButtonItem", js_autogentestbindings_js_CANavigationBarItem_addLeftButtonItem, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getRightButtonItems", js_autogentestbindings_js_CANavigationBarItem_getRightButtonItems, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setNagigationBarHidden", js_autogentestbindings_js_CANavigationBarItem_setNagigationBarHidden, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getTitleViewImage", js_autogentestbindings_js_CANavigationBarItem_getTitleViewImage, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setShowGoBackButton", js_autogentestbindings_js_CANavigationBarItem_setShowGoBackButton, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("addRightButtonItem", js_autogentestbindings_js_CANavigationBarItem_addRightButtonItem, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getTitleView", js_autogentestbindings_js_CANavigationBarItem_getTitleView, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setTitleView", js_autogentestbindings_js_CANavigationBarItem_setTitleView, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("init", js_autogentestbindings_js_CANavigationBarItem_init, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getLeftButtonItems", js_autogentestbindings_js_CANavigationBarItem_getLeftButtonItems, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setTitleViewImage", js_autogentestbindings_js_CANavigationBarItem_setTitleViewImage, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isNagigationBarHidden", js_autogentestbindings_js_CANavigationBarItem_isNagigationBarHidden, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isShowGoBackButton", js_autogentestbindings_js_CANavigationBarItem_isShowGoBackButton, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    static JSFunctionSpec st_funcs[] = {
        JS_FN("create", js_autogentestbindings_js_CANavigationBarItem_create, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    jsb_CrossApp_CANavigationBarItem_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_CABarItem_prototype),
        jsb_CrossApp_CANavigationBarItem_class,
        js_autogentestbindings_js_CANavigationBarItem_constructor, 0, // constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27 
//  JS_SetPropertyAttributes(cx, global, "CANavigationBarItem", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::CANavigationBarItem> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_CANavigationBarItem_class;
        p->proto = jsb_CrossApp_CANavigationBarItem_prototype;
        p->parentProto = jsb_CrossApp_CABarItem_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
}

JSClass  *jsb_CrossApp_CATabBarItem_class;
JSObject *jsb_CrossApp_CATabBarItem_prototype;

bool js_autogentestbindings_js_CATabBarItem_getBadgeValue(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATabBarItem* cobj = (CrossApp::CATabBarItem *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CATabBarItem_getBadgeValue : Invalid Native Object");
    if (argc == 0) {
        const std::string& ret = cobj->getBadgeValue();
        jsval jsret = JSVAL_NULL;
        jsret = std_string_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CATabBarItem_getBadgeValue : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CATabBarItem_setSelectedImage(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATabBarItem* cobj = (CrossApp::CATabBarItem *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CATabBarItem_setSelectedImage : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAImage* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAImage*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CATabBarItem_setSelectedImage : Error processing arguments");
        cobj->setSelectedImage(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CATabBarItem_setSelectedImage : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CATabBarItem_getSelectedImage(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATabBarItem* cobj = (CrossApp::CATabBarItem *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CATabBarItem_getSelectedImage : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CAImage* ret = cobj->getSelectedImage();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAImage>(cx, (CrossApp::CAImage*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CATabBarItem_getSelectedImage : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CATabBarItem_init(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATabBarItem* cobj = (CrossApp::CATabBarItem *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CATabBarItem_init : Invalid Native Object");
    if (argc == 2) {
        std::string arg0;
        CrossApp::CAImage* arg1 = nullptr;
        ok &= jsval_to_std_string(cx, args.get(0), &arg0);
        do {
            if (args.get(1).isNull()) { arg1 = nullptr; break; }
            if (!args.get(1).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(1).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg1 = (CrossApp::CAImage*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg1, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CATabBarItem_init : Error processing arguments");
        bool ret = cobj->init(arg0, arg1);
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }
    if (argc == 3) {
        std::string arg0;
        CrossApp::CAImage* arg1 = nullptr;
        CrossApp::CAImage* arg2 = nullptr;
        ok &= jsval_to_std_string(cx, args.get(0), &arg0);
        do {
            if (args.get(1).isNull()) { arg1 = nullptr; break; }
            if (!args.get(1).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(1).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg1 = (CrossApp::CAImage*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg1, cx, false, "Invalid Native Object");
        } while (0);
        do {
            if (args.get(2).isNull()) { arg2 = nullptr; break; }
            if (!args.get(2).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(2).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg2 = (CrossApp::CAImage*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg2, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CATabBarItem_init : Error processing arguments");
        bool ret = cobj->init(arg0, arg1, arg2);
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CATabBarItem_init : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_autogentestbindings_js_CATabBarItem_setBadgeValue(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATabBarItem* cobj = (CrossApp::CATabBarItem *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CATabBarItem_setBadgeValue : Invalid Native Object");
    if (argc == 1) {
        std::string arg0;
        ok &= jsval_to_std_string(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CATabBarItem_setBadgeValue : Error processing arguments");
        cobj->setBadgeValue(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CATabBarItem_setBadgeValue : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CATabBarItem_create(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 2) {
        std::string arg0;
        CrossApp::CAImage* arg1 = nullptr;
        ok &= jsval_to_std_string(cx, args.get(0), &arg0);
        do {
            if (args.get(1).isNull()) { arg1 = nullptr; break; }
            if (!args.get(1).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(1).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg1 = (CrossApp::CAImage*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg1, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CATabBarItem_create : Error processing arguments");
        CrossApp::CATabBarItem* ret = CrossApp::CATabBarItem::create(arg0, arg1);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CATabBarItem>(cx, (CrossApp::CATabBarItem*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    if (argc == 3) {
        std::string arg0;
        CrossApp::CAImage* arg1 = nullptr;
        CrossApp::CAImage* arg2 = nullptr;
        ok &= jsval_to_std_string(cx, args.get(0), &arg0);
        do {
            if (args.get(1).isNull()) { arg1 = nullptr; break; }
            if (!args.get(1).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(1).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg1 = (CrossApp::CAImage*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg1, cx, false, "Invalid Native Object");
        } while (0);
        do {
            if (args.get(2).isNull()) { arg2 = nullptr; break; }
            if (!args.get(2).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(2).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg2 = (CrossApp::CAImage*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg2, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CATabBarItem_create : Error processing arguments");
        CrossApp::CATabBarItem* ret = CrossApp::CATabBarItem::create(arg0, arg1, arg2);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CATabBarItem>(cx, (CrossApp::CATabBarItem*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_autogentestbindings_js_CATabBarItem_create : wrong number of arguments");
    return false;
}

bool js_autogentestbindings_js_CATabBarItem_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    CrossApp::CATabBarItem* cobj = new (std::nothrow) CrossApp::CATabBarItem();
    TypeTest<CrossApp::CATabBarItem> t;
    js_type_class_t *typeClass = nullptr;
    std::string typeName = t.s_name();
    auto typeMapIter = _js_global_type_map.find(typeName);
    CCAssert(typeMapIter != _js_global_type_map.end(), "Can't find the class type!");
    typeClass = typeMapIter->second;
    CCAssert(typeClass, "The value is null.");
    JS::RootedObject proto(cx, typeClass->proto.get());
    JS::RootedObject parent(cx, typeClass->parentProto.get());
    JS::RootedObject obj(cx, JS_NewObject(cx, typeClass->jsclass, proto, parent));
    args.rval().set(OBJECT_TO_JSVAL(obj));
    // link the native object with the javascript object
    js_proxy_t* p = jsb_new_proxy(cobj, obj);
    if (JS_HasProperty(cx, obj, "_ctor", &ok) && ok)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    return true;
}

extern JSObject *jsb_CrossApp_CABarItem_prototype;

void js_CrossApp_CATabBarItem_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOGINFO("jsbindings: finalizing JS object %p (CATabBarItem)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::CATabBarItem *nobj = static_cast<CrossApp::CATabBarItem *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
void js_register_autogentestbindings_js_CATabBarItem(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_CATabBarItem_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_CATabBarItem_class->name = "CATabBarItem";
    jsb_CrossApp_CATabBarItem_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_CATabBarItem_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_CATabBarItem_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_CATabBarItem_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_CATabBarItem_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_CATabBarItem_class->resolve = JS_ResolveStub;
    jsb_CrossApp_CATabBarItem_class->convert = JS_ConvertStub;
    jsb_CrossApp_CATabBarItem_class->finalize = js_CrossApp_CATabBarItem_finalize;
    jsb_CrossApp_CATabBarItem_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("getBadgeValue", js_autogentestbindings_js_CATabBarItem_getBadgeValue, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setSelectedImage", js_autogentestbindings_js_CATabBarItem_setSelectedImage, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getSelectedImage", js_autogentestbindings_js_CATabBarItem_getSelectedImage, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("init", js_autogentestbindings_js_CATabBarItem_init, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setBadgeValue", js_autogentestbindings_js_CATabBarItem_setBadgeValue, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    static JSFunctionSpec st_funcs[] = {
        JS_FN("create", js_autogentestbindings_js_CATabBarItem_create, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    jsb_CrossApp_CATabBarItem_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_CABarItem_prototype),
        jsb_CrossApp_CATabBarItem_class,
        js_autogentestbindings_js_CATabBarItem_constructor, 0, // constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27 
//  JS_SetPropertyAttributes(cx, global, "CATabBarItem", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::CATabBarItem> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_CATabBarItem_class;
        p->proto = jsb_CrossApp_CATabBarItem_prototype;
        p->parentProto = jsb_CrossApp_CABarItem_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
}

JSClass  *jsb_CrossApp_CANavigationBarDelegate_class;
JSObject *jsb_CrossApp_CANavigationBarDelegate_prototype;

bool js_autogentestbindings_js_CANavigationBarDelegate_navigationPopViewController(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CANavigationBarDelegate* cobj = (CrossApp::CANavigationBarDelegate *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CANavigationBarDelegate_navigationPopViewController : Invalid Native Object");
    if (argc == 2) {
        CrossApp::CANavigationBar* arg0 = nullptr;
        bool arg1;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CANavigationBar*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        arg1 = JS::ToBoolean(args.get(1));
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CANavigationBarDelegate_navigationPopViewController : Error processing arguments");
        cobj->navigationPopViewController(arg0, arg1);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CANavigationBarDelegate_navigationPopViewController : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}

void js_CrossApp_CANavigationBarDelegate_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOGINFO("jsbindings: finalizing JS object %p (CANavigationBarDelegate)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::CANavigationBarDelegate *nobj = static_cast<CrossApp::CANavigationBarDelegate *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
void js_register_autogentestbindings_js_CANavigationBarDelegate(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_CANavigationBarDelegate_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_CANavigationBarDelegate_class->name = "CANavigationBarDelegate";
    jsb_CrossApp_CANavigationBarDelegate_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_CANavigationBarDelegate_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_CANavigationBarDelegate_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_CANavigationBarDelegate_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_CANavigationBarDelegate_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_CANavigationBarDelegate_class->resolve = JS_ResolveStub;
    jsb_CrossApp_CANavigationBarDelegate_class->convert = JS_ConvertStub;
    jsb_CrossApp_CANavigationBarDelegate_class->finalize = js_CrossApp_CANavigationBarDelegate_finalize;
    jsb_CrossApp_CANavigationBarDelegate_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("navigationPopViewController", js_autogentestbindings_js_CANavigationBarDelegate_navigationPopViewController, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    JSFunctionSpec *st_funcs = NULL;

    jsb_CrossApp_CANavigationBarDelegate_prototype = JS_InitClass(
        cx, global,
        JS::NullPtr(), // parent proto
        jsb_CrossApp_CANavigationBarDelegate_class,
        dummy_constructor<CrossApp::CANavigationBarDelegate>, 0, // no constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27 
//  JS_SetPropertyAttributes(cx, global, "CANavigationBarDelegate", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::CANavigationBarDelegate> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_CANavigationBarDelegate_class;
        p->proto = jsb_CrossApp_CANavigationBarDelegate_prototype;
        p->parentProto = NULL;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
}

JSClass  *jsb_CrossApp_CANavigationBar_class;
JSObject *jsb_CrossApp_CANavigationBar_prototype;

bool js_autogentestbindings_js_CANavigationBar_getDelegate(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CANavigationBar* cobj = (CrossApp::CANavigationBar *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CANavigationBar_getDelegate : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CANavigationBarDelegate* ret = cobj->getDelegate();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CANavigationBarDelegate>(cx, (CrossApp::CANavigationBarDelegate*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CANavigationBar_getDelegate : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CANavigationBar_getItem(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CANavigationBar* cobj = (CrossApp::CANavigationBar *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CANavigationBar_getItem : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CANavigationBarItem* ret = cobj->getItem();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CANavigationBarItem>(cx, (CrossApp::CANavigationBarItem*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CANavigationBar_getItem : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CANavigationBar_setButtonColor(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CANavigationBar* cobj = (CrossApp::CANavigationBar *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CANavigationBar_setButtonColor : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAColor4B arg0;
        ok &= jsval_to_cacolor4b(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CANavigationBar_setButtonColor : Error processing arguments");
        cobj->setButtonColor(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CANavigationBar_setButtonColor : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CANavigationBar_getTitleColor(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CANavigationBar* cobj = (CrossApp::CANavigationBar *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CANavigationBar_getTitleColor : Invalid Native Object");
    if (argc == 0) {
        const CrossApp::CAColor4B& ret = cobj->getTitleColor();
        jsval jsret = JSVAL_NULL;
        jsret = cacolor4b_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CANavigationBar_getTitleColor : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CANavigationBar_setItem(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CANavigationBar* cobj = (CrossApp::CANavigationBar *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CANavigationBar_setItem : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CANavigationBarItem* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CANavigationBarItem*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CANavigationBar_setItem : Error processing arguments");
        cobj->setItem(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CANavigationBar_setItem : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CANavigationBar_getBackgroundView(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CANavigationBar* cobj = (CrossApp::CANavigationBar *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CANavigationBar_getBackgroundView : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CAView* ret = cobj->getBackgroundView();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAView>(cx, (CrossApp::CAView*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CANavigationBar_getBackgroundView : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CANavigationBar_onExitTransitionDidStart(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CANavigationBar* cobj = (CrossApp::CANavigationBar *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CANavigationBar_onExitTransitionDidStart : Invalid Native Object");
    if (argc == 0) {
        cobj->onExitTransitionDidStart();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CANavigationBar_onExitTransitionDidStart : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CANavigationBar_setBackgroundView(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CANavigationBar* cobj = (CrossApp::CANavigationBar *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CANavigationBar_setBackgroundView : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAView* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAView*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CANavigationBar_setBackgroundView : Error processing arguments");
        cobj->setBackgroundView(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CANavigationBar_setBackgroundView : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CANavigationBar_setDelegate(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CANavigationBar* cobj = (CrossApp::CANavigationBar *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CANavigationBar_setDelegate : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CANavigationBarDelegate* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CANavigationBarDelegate*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CANavigationBar_setDelegate : Error processing arguments");
        cobj->setDelegate(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CANavigationBar_setDelegate : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CANavigationBar_getButtonColor(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CANavigationBar* cobj = (CrossApp::CANavigationBar *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CANavigationBar_getButtonColor : Invalid Native Object");
    if (argc == 0) {
        const CrossApp::CAColor4B& ret = cobj->getButtonColor();
        jsval jsret = JSVAL_NULL;
        jsret = cacolor4b_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CANavigationBar_getButtonColor : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CANavigationBar_onEnterTransitionDidFinish(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CANavigationBar* cobj = (CrossApp::CANavigationBar *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CANavigationBar_onEnterTransitionDidFinish : Invalid Native Object");
    if (argc == 0) {
        cobj->onEnterTransitionDidFinish();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CANavigationBar_onEnterTransitionDidFinish : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CANavigationBar_setTitleColor(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CANavigationBar* cobj = (CrossApp::CANavigationBar *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CANavigationBar_setTitleColor : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAColor4B arg0;
        ok &= jsval_to_cacolor4b(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CANavigationBar_setTitleColor : Error processing arguments");
        cobj->setTitleColor(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CANavigationBar_setTitleColor : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CANavigationBar_createWithFrame(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        CrossApp::DRect arg0;
        ok &= jsval_to_drect(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CANavigationBar_createWithFrame : Error processing arguments");
        CrossApp::CANavigationBar* ret = CrossApp::CANavigationBar::createWithFrame(arg0);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CANavigationBar>(cx, (CrossApp::CANavigationBar*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    if (argc == 2) {
        CrossApp::DRect arg0;
        bool arg1;
        ok &= jsval_to_drect(cx, args.get(0), &arg0);
        arg1 = JS::ToBoolean(args.get(1));
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CANavigationBar_createWithFrame : Error processing arguments");
        CrossApp::CANavigationBar* ret = CrossApp::CANavigationBar::createWithFrame(arg0, arg1);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CANavigationBar>(cx, (CrossApp::CANavigationBar*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_autogentestbindings_js_CANavigationBar_createWithFrame : wrong number of arguments");
    return false;
}

bool js_autogentestbindings_js_CANavigationBar_createWithLayout(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        CrossApp::DRectLayout arg0;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (const CrossApp::DRectLayout&)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CANavigationBar_createWithLayout : Error processing arguments");
        CrossApp::CANavigationBar* ret = CrossApp::CANavigationBar::createWithLayout(arg0);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CANavigationBar>(cx, (CrossApp::CANavigationBar*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    if (argc == 2) {
        CrossApp::DRectLayout arg0;
        bool arg1;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (const CrossApp::DRectLayout&)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        arg1 = JS::ToBoolean(args.get(1));
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CANavigationBar_createWithLayout : Error processing arguments");
        CrossApp::CANavigationBar* ret = CrossApp::CANavigationBar::createWithLayout(arg0, arg1);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CANavigationBar>(cx, (CrossApp::CANavigationBar*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_autogentestbindings_js_CANavigationBar_createWithLayout : wrong number of arguments");
    return false;
}

bool js_autogentestbindings_js_CANavigationBar_createWithCenter(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        CrossApp::DRect arg0;
        ok &= jsval_to_drect(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CANavigationBar_createWithCenter : Error processing arguments");
        CrossApp::CANavigationBar* ret = CrossApp::CANavigationBar::createWithCenter(arg0);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CANavigationBar>(cx, (CrossApp::CANavigationBar*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    if (argc == 2) {
        CrossApp::DRect arg0;
        bool arg1;
        ok &= jsval_to_drect(cx, args.get(0), &arg0);
        arg1 = JS::ToBoolean(args.get(1));
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CANavigationBar_createWithCenter : Error processing arguments");
        CrossApp::CANavigationBar* ret = CrossApp::CANavigationBar::createWithCenter(arg0, arg1);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CANavigationBar>(cx, (CrossApp::CANavigationBar*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_autogentestbindings_js_CANavigationBar_createWithCenter : wrong number of arguments");
    return false;
}

bool js_autogentestbindings_js_CANavigationBar_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    CrossApp::CANavigationBar* cobj = new (std::nothrow) CrossApp::CANavigationBar();
    TypeTest<CrossApp::CANavigationBar> t;
    js_type_class_t *typeClass = nullptr;
    std::string typeName = t.s_name();
    auto typeMapIter = _js_global_type_map.find(typeName);
    CCAssert(typeMapIter != _js_global_type_map.end(), "Can't find the class type!");
    typeClass = typeMapIter->second;
    CCAssert(typeClass, "The value is null.");
    JS::RootedObject proto(cx, typeClass->proto.get());
    JS::RootedObject parent(cx, typeClass->parentProto.get());
    JS::RootedObject obj(cx, JS_NewObject(cx, typeClass->jsclass, proto, parent));
    args.rval().set(OBJECT_TO_JSVAL(obj));
    // link the native object with the javascript object
    js_proxy_t* p = jsb_new_proxy(cobj, obj);
    if (JS_HasProperty(cx, obj, "_ctor", &ok) && ok)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    return true;
}

extern JSObject *jsb_CrossApp_CAView_prototype;

void js_CrossApp_CANavigationBar_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOGINFO("jsbindings: finalizing JS object %p (CANavigationBar)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::CANavigationBar *nobj = static_cast<CrossApp::CANavigationBar *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
void js_register_autogentestbindings_js_CANavigationBar(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_CANavigationBar_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_CANavigationBar_class->name = "CANavigationBar";
    jsb_CrossApp_CANavigationBar_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_CANavigationBar_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_CANavigationBar_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_CANavigationBar_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_CANavigationBar_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_CANavigationBar_class->resolve = JS_ResolveStub;
    jsb_CrossApp_CANavigationBar_class->convert = JS_ConvertStub;
    jsb_CrossApp_CANavigationBar_class->finalize = js_CrossApp_CANavigationBar_finalize;
    jsb_CrossApp_CANavigationBar_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("getDelegate", js_autogentestbindings_js_CANavigationBar_getDelegate, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getItem", js_autogentestbindings_js_CANavigationBar_getItem, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setButtonColor", js_autogentestbindings_js_CANavigationBar_setButtonColor, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getTitleColor", js_autogentestbindings_js_CANavigationBar_getTitleColor, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setItem", js_autogentestbindings_js_CANavigationBar_setItem, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getBackgroundView", js_autogentestbindings_js_CANavigationBar_getBackgroundView, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("onExitTransitionDidStart", js_autogentestbindings_js_CANavigationBar_onExitTransitionDidStart, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setBackgroundView", js_autogentestbindings_js_CANavigationBar_setBackgroundView, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setDelegate", js_autogentestbindings_js_CANavigationBar_setDelegate, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getButtonColor", js_autogentestbindings_js_CANavigationBar_getButtonColor, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("onEnterTransitionDidFinish", js_autogentestbindings_js_CANavigationBar_onEnterTransitionDidFinish, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setTitleColor", js_autogentestbindings_js_CANavigationBar_setTitleColor, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    static JSFunctionSpec st_funcs[] = {
        JS_FN("createWithFrame", js_autogentestbindings_js_CANavigationBar_createWithFrame, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("createWithLayout", js_autogentestbindings_js_CANavigationBar_createWithLayout, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("createWithCenter", js_autogentestbindings_js_CANavigationBar_createWithCenter, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    jsb_CrossApp_CANavigationBar_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_CAView_prototype),
        jsb_CrossApp_CANavigationBar_class,
        js_autogentestbindings_js_CANavigationBar_constructor, 0, // constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27 
//  JS_SetPropertyAttributes(cx, global, "CANavigationBar", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::CANavigationBar> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_CANavigationBar_class;
        p->proto = jsb_CrossApp_CANavigationBar_prototype;
        p->parentProto = jsb_CrossApp_CAView_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
}

JSClass  *jsb_CrossApp_CATabBarDelegate_class;
JSObject *jsb_CrossApp_CATabBarDelegate_prototype;

bool js_autogentestbindings_js_CATabBarDelegate_tabBarClickToForbidSelectedItem(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATabBarDelegate* cobj = (CrossApp::CATabBarDelegate *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CATabBarDelegate_tabBarClickToForbidSelectedItem : Invalid Native Object");
    if (argc == 3) {
        CrossApp::CATabBar* arg0 = nullptr;
        CrossApp::CATabBarItem* arg1 = nullptr;
        unsigned int arg2 = 0;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CATabBar*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        do {
            if (args.get(1).isNull()) { arg1 = nullptr; break; }
            if (!args.get(1).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(1).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg1 = (CrossApp::CATabBarItem*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg1, cx, false, "Invalid Native Object");
        } while (0);
        ok &= jsval_to_uint32(cx, args.get(2), &arg2);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CATabBarDelegate_tabBarClickToForbidSelectedItem : Error processing arguments");
        cobj->tabBarClickToForbidSelectedItem(arg0, arg1, arg2);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CATabBarDelegate_tabBarClickToForbidSelectedItem : wrong number of arguments: %d, was expecting %d", argc, 3);
    return false;
}
bool js_autogentestbindings_js_CATabBarDelegate_tabBarSelectedItem(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATabBarDelegate* cobj = (CrossApp::CATabBarDelegate *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CATabBarDelegate_tabBarSelectedItem : Invalid Native Object");
    if (argc == 3) {
        CrossApp::CATabBar* arg0 = nullptr;
        CrossApp::CATabBarItem* arg1 = nullptr;
        unsigned int arg2 = 0;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CATabBar*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        do {
            if (args.get(1).isNull()) { arg1 = nullptr; break; }
            if (!args.get(1).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(1).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg1 = (CrossApp::CATabBarItem*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg1, cx, false, "Invalid Native Object");
        } while (0);
        ok &= jsval_to_uint32(cx, args.get(2), &arg2);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CATabBarDelegate_tabBarSelectedItem : Error processing arguments");
        cobj->tabBarSelectedItem(arg0, arg1, arg2);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CATabBarDelegate_tabBarSelectedItem : wrong number of arguments: %d, was expecting %d", argc, 3);
    return false;
}

void js_CrossApp_CATabBarDelegate_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOGINFO("jsbindings: finalizing JS object %p (CATabBarDelegate)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::CATabBarDelegate *nobj = static_cast<CrossApp::CATabBarDelegate *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
void js_register_autogentestbindings_js_CATabBarDelegate(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_CATabBarDelegate_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_CATabBarDelegate_class->name = "CATabBarDelegate";
    jsb_CrossApp_CATabBarDelegate_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_CATabBarDelegate_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_CATabBarDelegate_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_CATabBarDelegate_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_CATabBarDelegate_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_CATabBarDelegate_class->resolve = JS_ResolveStub;
    jsb_CrossApp_CATabBarDelegate_class->convert = JS_ConvertStub;
    jsb_CrossApp_CATabBarDelegate_class->finalize = js_CrossApp_CATabBarDelegate_finalize;
    jsb_CrossApp_CATabBarDelegate_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("tabBarClickToForbidSelectedItem", js_autogentestbindings_js_CATabBarDelegate_tabBarClickToForbidSelectedItem, 3, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("tabBarSelectedItem", js_autogentestbindings_js_CATabBarDelegate_tabBarSelectedItem, 3, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    JSFunctionSpec *st_funcs = NULL;

    jsb_CrossApp_CATabBarDelegate_prototype = JS_InitClass(
        cx, global,
        JS::NullPtr(), // parent proto
        jsb_CrossApp_CATabBarDelegate_class,
        dummy_constructor<CrossApp::CATabBarDelegate>, 0, // no constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27 
//  JS_SetPropertyAttributes(cx, global, "CATabBarDelegate", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::CATabBarDelegate> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_CATabBarDelegate_class;
        p->proto = jsb_CrossApp_CATabBarDelegate_prototype;
        p->parentProto = NULL;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
}

JSClass  *jsb_CrossApp_CABadgeView_class;
JSObject *jsb_CrossApp_CABadgeView_prototype;

bool js_autogentestbindings_js_CABadgeView_setBadgeText(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CABadgeView* cobj = (CrossApp::CABadgeView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CABadgeView_setBadgeText : Invalid Native Object");
    if (argc == 1) {
        std::string arg0;
        ok &= jsval_to_std_string(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CABadgeView_setBadgeText : Error processing arguments");
        cobj->setBadgeText(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CABadgeView_setBadgeText : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CABadgeView_init(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CABadgeView* cobj = (CrossApp::CABadgeView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CABadgeView_init : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->init();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CABadgeView_init : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CABadgeView_setContentSize(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CABadgeView* cobj = (CrossApp::CABadgeView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CABadgeView_setContentSize : Invalid Native Object");
    if (argc == 1) {
        CrossApp::DSize arg0;
        ok &= jsval_to_dsize(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CABadgeView_setContentSize : Error processing arguments");
        cobj->setContentSize(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CABadgeView_setContentSize : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CABadgeView_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    CrossApp::CABadgeView* cobj = new (std::nothrow) CrossApp::CABadgeView();
    TypeTest<CrossApp::CABadgeView> t;
    js_type_class_t *typeClass = nullptr;
    std::string typeName = t.s_name();
    auto typeMapIter = _js_global_type_map.find(typeName);
    CCAssert(typeMapIter != _js_global_type_map.end(), "Can't find the class type!");
    typeClass = typeMapIter->second;
    CCAssert(typeClass, "The value is null.");
    JS::RootedObject proto(cx, typeClass->proto.get());
    JS::RootedObject parent(cx, typeClass->parentProto.get());
    JS::RootedObject obj(cx, JS_NewObject(cx, typeClass->jsclass, proto, parent));
    args.rval().set(OBJECT_TO_JSVAL(obj));
    // link the native object with the javascript object
    js_proxy_t* p = jsb_new_proxy(cobj, obj);
    if (JS_HasProperty(cx, obj, "_ctor", &ok) && ok)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    return true;
}

extern JSObject *jsb_CrossApp_CAView_prototype;

void js_CrossApp_CABadgeView_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOGINFO("jsbindings: finalizing JS object %p (CABadgeView)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::CABadgeView *nobj = static_cast<CrossApp::CABadgeView *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
void js_register_autogentestbindings_js_CABadgeView(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_CABadgeView_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_CABadgeView_class->name = "CABadgeView";
    jsb_CrossApp_CABadgeView_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_CABadgeView_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_CABadgeView_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_CABadgeView_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_CABadgeView_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_CABadgeView_class->resolve = JS_ResolveStub;
    jsb_CrossApp_CABadgeView_class->convert = JS_ConvertStub;
    jsb_CrossApp_CABadgeView_class->finalize = js_CrossApp_CABadgeView_finalize;
    jsb_CrossApp_CABadgeView_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("setBadgeText", js_autogentestbindings_js_CABadgeView_setBadgeText, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("init", js_autogentestbindings_js_CABadgeView_init, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setContentSize", js_autogentestbindings_js_CABadgeView_setContentSize, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    JSFunctionSpec *st_funcs = NULL;

    jsb_CrossApp_CABadgeView_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_CAView_prototype),
        jsb_CrossApp_CABadgeView_class,
        js_autogentestbindings_js_CABadgeView_constructor, 0, // constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27 
//  JS_SetPropertyAttributes(cx, global, "CABadgeView", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::CABadgeView> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_CABadgeView_class;
        p->proto = jsb_CrossApp_CABadgeView_prototype;
        p->parentProto = jsb_CrossApp_CAView_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
}

JSClass  *jsb_CrossApp_CATabBar_class;
JSObject *jsb_CrossApp_CATabBar_prototype;

bool js_autogentestbindings_js_CATabBar_setSelectedBackgroundImage(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATabBar* cobj = (CrossApp::CATabBar *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CATabBar_setSelectedBackgroundImage : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAImage* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAImage*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CATabBar_setSelectedBackgroundImage : Error processing arguments");
        cobj->setSelectedBackgroundImage(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CATabBar_setSelectedBackgroundImage : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CATabBar_setSelectedIndicatorColor(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATabBar* cobj = (CrossApp::CATabBar *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CATabBar_setSelectedIndicatorColor : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAColor4B arg0;
        ok &= jsval_to_cacolor4b(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CATabBar_setSelectedIndicatorColor : Error processing arguments");
        cobj->setSelectedIndicatorColor(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CATabBar_setSelectedIndicatorColor : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CATabBar_getItemSize(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATabBar* cobj = (CrossApp::CATabBar *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CATabBar_getItemSize : Invalid Native Object");
    if (argc == 0) {
        const CrossApp::DSize& ret = cobj->getItemSize();
        jsval jsret = JSVAL_NULL;
        jsret = dsize_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CATabBar_getItemSize : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CATabBar_replaceItemAtIndex(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATabBar* cobj = (CrossApp::CATabBar *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CATabBar_replaceItemAtIndex : Invalid Native Object");
    if (argc == 2) {
        unsigned long arg0 = 0;
        CrossApp::CATabBarItem* arg1 = nullptr;
        ok &= jsval_to_ulong(cx, args.get(0), &arg0);
        do {
            if (args.get(1).isNull()) { arg1 = nullptr; break; }
            if (!args.get(1).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(1).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg1 = (CrossApp::CATabBarItem*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg1, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CATabBar_replaceItemAtIndex : Error processing arguments");
        cobj->replaceItemAtIndex(arg0, arg1);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CATabBar_replaceItemAtIndex : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_autogentestbindings_js_CATabBar_getSelectedIndicatorColor(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATabBar* cobj = (CrossApp::CATabBar *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CATabBar_getSelectedIndicatorColor : Invalid Native Object");
    if (argc == 0) {
        const CrossApp::CAColor4B& ret = cobj->getSelectedIndicatorColor();
        jsval jsret = JSVAL_NULL;
        jsret = cacolor4b_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CATabBar_getSelectedIndicatorColor : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CATabBar_getBackgroundColor(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATabBar* cobj = (CrossApp::CATabBar *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CATabBar_getBackgroundColor : Invalid Native Object");
    if (argc == 0) {
        const CrossApp::CAColor4B& ret = cobj->getBackgroundColor();
        jsval jsret = JSVAL_NULL;
        jsret = cacolor4b_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CATabBar_getBackgroundColor : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CATabBar_getContentViewFrame(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATabBar* cobj = (CrossApp::CATabBar *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CATabBar_getContentViewFrame : Invalid Native Object");
    if (argc == 0) {
        CrossApp::DRect ret = cobj->getContentViewFrame();
        jsval jsret = JSVAL_NULL;
        jsret = drect_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CATabBar_getContentViewFrame : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CATabBar_setSelectedAtIndex(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATabBar* cobj = (CrossApp::CATabBar *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CATabBar_setSelectedAtIndex : Invalid Native Object");
    if (argc == 1) {
        int arg0 = 0;
        ok &= jsval_to_int32(cx, args.get(0), (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CATabBar_setSelectedAtIndex : Error processing arguments");
        cobj->setSelectedAtIndex(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CATabBar_setSelectedAtIndex : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CATabBar_showSelectedIndicator(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATabBar* cobj = (CrossApp::CATabBar *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CATabBar_showSelectedIndicator : Invalid Native Object");
    if (argc == 0) {
        cobj->showSelectedIndicator();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CATabBar_showSelectedIndicator : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CATabBar_addForbidSelectedAtIndex(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATabBar* cobj = (CrossApp::CATabBar *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CATabBar_addForbidSelectedAtIndex : Invalid Native Object");
    if (argc == 1) {
        int arg0 = 0;
        ok &= jsval_to_int32(cx, args.get(0), (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CATabBar_addForbidSelectedAtIndex : Error processing arguments");
        cobj->addForbidSelectedAtIndex(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CATabBar_addForbidSelectedAtIndex : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CATabBar_getSelectedIndex(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATabBar* cobj = (CrossApp::CATabBar *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CATabBar_getSelectedIndex : Invalid Native Object");
    if (argc == 0) {
        int ret = cobj->getSelectedIndex();
        jsval jsret = JSVAL_NULL;
        jsret = int32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CATabBar_getSelectedIndex : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CATabBar_setSelectedIndicatorImage(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATabBar* cobj = (CrossApp::CATabBar *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CATabBar_setSelectedIndicatorImage : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAImage* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAImage*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CATabBar_setSelectedIndicatorImage : Error processing arguments");
        cobj->setSelectedIndicatorImage(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CATabBar_setSelectedIndicatorImage : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CATabBar_getTitleColorForNormal(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATabBar* cobj = (CrossApp::CATabBar *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CATabBar_getTitleColorForNormal : Invalid Native Object");
    if (argc == 0) {
        const CrossApp::CAColor4B& ret = cobj->getTitleColorForNormal();
        jsval jsret = JSVAL_NULL;
        jsret = cacolor4b_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CATabBar_getTitleColorForNormal : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CATabBar_getTitleColorForSelected(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATabBar* cobj = (CrossApp::CATabBar *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CATabBar_getTitleColorForSelected : Invalid Native Object");
    if (argc == 0) {
        const CrossApp::CAColor4B& ret = cobj->getTitleColorForSelected();
        jsval jsret = JSVAL_NULL;
        jsret = cacolor4b_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CATabBar_getTitleColorForSelected : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CATabBar_setItems(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATabBar* cobj = (CrossApp::CATabBar *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CATabBar_setItems : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAVector<CrossApp::CATabBarItem *> arg0;
        ok &= jsval_to_cavector(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CATabBar_setItems : Error processing arguments");
        cobj->setItems(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CATabBar_setItems : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CATabBar_getBackgroundImage(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATabBar* cobj = (CrossApp::CATabBar *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CATabBar_getBackgroundImage : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CAImage* ret = cobj->getBackgroundImage();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAImage>(cx, (CrossApp::CAImage*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CATabBar_getBackgroundImage : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CATabBar_getItems(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATabBar* cobj = (CrossApp::CATabBar *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CATabBar_getItems : Invalid Native Object");
    if (argc == 0) {
        const CrossApp::CAVector<CrossApp::CATabBarItem *>& ret = cobj->getItems();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAVector<CrossApp::CATabBarItem >&>(cx, (CrossApp::CAVector<CrossApp::CATabBarItem *>&)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CATabBar_getItems : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CATabBar_setBackgroundImage(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATabBar* cobj = (CrossApp::CATabBar *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CATabBar_setBackgroundImage : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAImage* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAImage*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CATabBar_setBackgroundImage : Error processing arguments");
        cobj->setBackgroundImage(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CATabBar_setBackgroundImage : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CATabBar_setBackgroundColor(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATabBar* cobj = (CrossApp::CATabBar *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CATabBar_setBackgroundColor : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAColor4B arg0;
        ok &= jsval_to_cacolor4b(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CATabBar_setBackgroundColor : Error processing arguments");
        cobj->setBackgroundColor(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CATabBar_setBackgroundColor : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CATabBar_setTitleColorForSelected(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATabBar* cobj = (CrossApp::CATabBar *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CATabBar_setTitleColorForSelected : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAColor4B arg0;
        ok &= jsval_to_cacolor4b(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CATabBar_setTitleColorForSelected : Error processing arguments");
        cobj->setTitleColorForSelected(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CATabBar_setTitleColorForSelected : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CATabBar_onExitTransitionDidStart(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATabBar* cobj = (CrossApp::CATabBar *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CATabBar_onExitTransitionDidStart : Invalid Native Object");
    if (argc == 0) {
        cobj->onExitTransitionDidStart();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CATabBar_onExitTransitionDidStart : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CATabBar_setDelegate(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATabBar* cobj = (CrossApp::CATabBar *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CATabBar_setDelegate : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CATabBarDelegate* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CATabBarDelegate*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CATabBar_setDelegate : Error processing arguments");
        cobj->setDelegate(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CATabBar_setDelegate : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CATabBar_getForbidSelectedIndexs(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATabBar* cobj = (CrossApp::CATabBar *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CATabBar_getForbidSelectedIndexs : Invalid Native Object");
    if (argc == 0) {
        std::set<int, std::less<int>, std::allocator<int> > ret = cobj->getForbidSelectedIndexs();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<std::set<int, std::less<int>, std::allocator<int> >>(cx, (std::set<int, std::less<int>, std::allocator<int> >)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CATabBar_getForbidSelectedIndexs : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CATabBar_getSelectedBackgroundColor(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATabBar* cobj = (CrossApp::CATabBar *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CATabBar_getSelectedBackgroundColor : Invalid Native Object");
    if (argc == 0) {
        const CrossApp::CAColor4B& ret = cobj->getSelectedBackgroundColor();
        jsval jsret = JSVAL_NULL;
        jsret = cacolor4b_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CATabBar_getSelectedBackgroundColor : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CATabBar_setSelectedBackgroundColor(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATabBar* cobj = (CrossApp::CATabBar *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CATabBar_setSelectedBackgroundColor : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAColor4B arg0;
        ok &= jsval_to_cacolor4b(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CATabBar_setSelectedBackgroundColor : Error processing arguments");
        cobj->setSelectedBackgroundColor(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CATabBar_setSelectedBackgroundColor : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CATabBar_getDelegate(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATabBar* cobj = (CrossApp::CATabBar *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CATabBar_getDelegate : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CATabBarDelegate* ret = cobj->getDelegate();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CATabBarDelegate>(cx, (CrossApp::CATabBarDelegate*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CATabBar_getDelegate : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CATabBar_getSelectedIndicatorImage(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATabBar* cobj = (CrossApp::CATabBar *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CATabBar_getSelectedIndicatorImage : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CAImage* ret = cobj->getSelectedIndicatorImage();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAImage>(cx, (CrossApp::CAImage*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CATabBar_getSelectedIndicatorImage : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CATabBar_setTitleColorForNormal(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATabBar* cobj = (CrossApp::CATabBar *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CATabBar_setTitleColorForNormal : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAColor4B arg0;
        ok &= jsval_to_cacolor4b(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CATabBar_setTitleColorForNormal : Error processing arguments");
        cobj->setTitleColorForNormal(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CATabBar_setTitleColorForNormal : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CATabBar_getSelectedBackgroundImage(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATabBar* cobj = (CrossApp::CATabBar *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CATabBar_getSelectedBackgroundImage : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CAImage* ret = cobj->getSelectedBackgroundImage();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAImage>(cx, (CrossApp::CAImage*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CATabBar_getSelectedBackgroundImage : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CATabBar_onEnterTransitionDidFinish(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATabBar* cobj = (CrossApp::CATabBar *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CATabBar_onEnterTransitionDidFinish : Invalid Native Object");
    if (argc == 0) {
        cobj->onEnterTransitionDidFinish();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CATabBar_onEnterTransitionDidFinish : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CATabBar_createWithFrame(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        CrossApp::DRect arg0;
        ok &= jsval_to_drect(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CATabBar_createWithFrame : Error processing arguments");
        CrossApp::CATabBar* ret = CrossApp::CATabBar::createWithFrame(arg0);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CATabBar>(cx, (CrossApp::CATabBar*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    if (argc == 2) {
        CrossApp::DRect arg0;
        bool arg1;
        ok &= jsval_to_drect(cx, args.get(0), &arg0);
        arg1 = JS::ToBoolean(args.get(1));
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CATabBar_createWithFrame : Error processing arguments");
        CrossApp::CATabBar* ret = CrossApp::CATabBar::createWithFrame(arg0, arg1);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CATabBar>(cx, (CrossApp::CATabBar*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_autogentestbindings_js_CATabBar_createWithFrame : wrong number of arguments");
    return false;
}

bool js_autogentestbindings_js_CATabBar_createWithLayout(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        CrossApp::DRectLayout arg0;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (const CrossApp::DRectLayout&)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CATabBar_createWithLayout : Error processing arguments");
        CrossApp::CATabBar* ret = CrossApp::CATabBar::createWithLayout(arg0);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CATabBar>(cx, (CrossApp::CATabBar*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    if (argc == 2) {
        CrossApp::DRectLayout arg0;
        bool arg1;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (const CrossApp::DRectLayout&)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        arg1 = JS::ToBoolean(args.get(1));
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CATabBar_createWithLayout : Error processing arguments");
        CrossApp::CATabBar* ret = CrossApp::CATabBar::createWithLayout(arg0, arg1);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CATabBar>(cx, (CrossApp::CATabBar*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_autogentestbindings_js_CATabBar_createWithLayout : wrong number of arguments");
    return false;
}

bool js_autogentestbindings_js_CATabBar_createWithCenter(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        CrossApp::DRect arg0;
        ok &= jsval_to_drect(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CATabBar_createWithCenter : Error processing arguments");
        CrossApp::CATabBar* ret = CrossApp::CATabBar::createWithCenter(arg0);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CATabBar>(cx, (CrossApp::CATabBar*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    if (argc == 2) {
        CrossApp::DRect arg0;
        bool arg1;
        ok &= jsval_to_drect(cx, args.get(0), &arg0);
        arg1 = JS::ToBoolean(args.get(1));
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CATabBar_createWithCenter : Error processing arguments");
        CrossApp::CATabBar* ret = CrossApp::CATabBar::createWithCenter(arg0, arg1);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CATabBar>(cx, (CrossApp::CATabBar*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_autogentestbindings_js_CATabBar_createWithCenter : wrong number of arguments");
    return false;
}

bool js_autogentestbindings_js_CATabBar_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    CrossApp::CATabBar* cobj = new (std::nothrow) CrossApp::CATabBar();
    TypeTest<CrossApp::CATabBar> t;
    js_type_class_t *typeClass = nullptr;
    std::string typeName = t.s_name();
    auto typeMapIter = _js_global_type_map.find(typeName);
    CCAssert(typeMapIter != _js_global_type_map.end(), "Can't find the class type!");
    typeClass = typeMapIter->second;
    CCAssert(typeClass, "The value is null.");
    JS::RootedObject proto(cx, typeClass->proto.get());
    JS::RootedObject parent(cx, typeClass->parentProto.get());
    JS::RootedObject obj(cx, JS_NewObject(cx, typeClass->jsclass, proto, parent));
    args.rval().set(OBJECT_TO_JSVAL(obj));
    // link the native object with the javascript object
    js_proxy_t* p = jsb_new_proxy(cobj, obj);
    if (JS_HasProperty(cx, obj, "_ctor", &ok) && ok)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    return true;
}

extern JSObject *jsb_CrossApp_CAView_prototype;

void js_CrossApp_CATabBar_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOGINFO("jsbindings: finalizing JS object %p (CATabBar)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::CATabBar *nobj = static_cast<CrossApp::CATabBar *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
void js_register_autogentestbindings_js_CATabBar(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_CATabBar_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_CATabBar_class->name = "CATabBar";
    jsb_CrossApp_CATabBar_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_CATabBar_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_CATabBar_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_CATabBar_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_CATabBar_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_CATabBar_class->resolve = JS_ResolveStub;
    jsb_CrossApp_CATabBar_class->convert = JS_ConvertStub;
    jsb_CrossApp_CATabBar_class->finalize = js_CrossApp_CATabBar_finalize;
    jsb_CrossApp_CATabBar_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("setSelectedBackgroundImage", js_autogentestbindings_js_CATabBar_setSelectedBackgroundImage, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setSelectedIndicatorColor", js_autogentestbindings_js_CATabBar_setSelectedIndicatorColor, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getItemSize", js_autogentestbindings_js_CATabBar_getItemSize, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("replaceItemAtIndex", js_autogentestbindings_js_CATabBar_replaceItemAtIndex, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getSelectedIndicatorColor", js_autogentestbindings_js_CATabBar_getSelectedIndicatorColor, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getBackgroundColor", js_autogentestbindings_js_CATabBar_getBackgroundColor, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getContentViewFrame", js_autogentestbindings_js_CATabBar_getContentViewFrame, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setSelectedAtIndex", js_autogentestbindings_js_CATabBar_setSelectedAtIndex, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("showSelectedIndicator", js_autogentestbindings_js_CATabBar_showSelectedIndicator, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("addForbidSelectedAtIndex", js_autogentestbindings_js_CATabBar_addForbidSelectedAtIndex, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getSelectedIndex", js_autogentestbindings_js_CATabBar_getSelectedIndex, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setSelectedIndicatorImage", js_autogentestbindings_js_CATabBar_setSelectedIndicatorImage, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getTitleColorForNormal", js_autogentestbindings_js_CATabBar_getTitleColorForNormal, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getTitleColorForSelected", js_autogentestbindings_js_CATabBar_getTitleColorForSelected, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setItems", js_autogentestbindings_js_CATabBar_setItems, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getBackgroundImage", js_autogentestbindings_js_CATabBar_getBackgroundImage, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getItems", js_autogentestbindings_js_CATabBar_getItems, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setBackgroundImage", js_autogentestbindings_js_CATabBar_setBackgroundImage, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setBackgroundColor", js_autogentestbindings_js_CATabBar_setBackgroundColor, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setTitleColorForSelected", js_autogentestbindings_js_CATabBar_setTitleColorForSelected, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("onExitTransitionDidStart", js_autogentestbindings_js_CATabBar_onExitTransitionDidStart, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setDelegate", js_autogentestbindings_js_CATabBar_setDelegate, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getForbidSelectedIndexs", js_autogentestbindings_js_CATabBar_getForbidSelectedIndexs, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getSelectedBackgroundColor", js_autogentestbindings_js_CATabBar_getSelectedBackgroundColor, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setSelectedBackgroundColor", js_autogentestbindings_js_CATabBar_setSelectedBackgroundColor, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getDelegate", js_autogentestbindings_js_CATabBar_getDelegate, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getSelectedIndicatorImage", js_autogentestbindings_js_CATabBar_getSelectedIndicatorImage, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setTitleColorForNormal", js_autogentestbindings_js_CATabBar_setTitleColorForNormal, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getSelectedBackgroundImage", js_autogentestbindings_js_CATabBar_getSelectedBackgroundImage, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("onEnterTransitionDidFinish", js_autogentestbindings_js_CATabBar_onEnterTransitionDidFinish, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    static JSFunctionSpec st_funcs[] = {
        JS_FN("createWithFrame", js_autogentestbindings_js_CATabBar_createWithFrame, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("createWithLayout", js_autogentestbindings_js_CATabBar_createWithLayout, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("createWithCenter", js_autogentestbindings_js_CATabBar_createWithCenter, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    jsb_CrossApp_CATabBar_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_CAView_prototype),
        jsb_CrossApp_CATabBar_class,
        js_autogentestbindings_js_CATabBar_constructor, 0, // constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27 
//  JS_SetPropertyAttributes(cx, global, "CATabBar", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::CATabBar> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_CATabBar_class;
        p->proto = jsb_CrossApp_CATabBar_prototype;
        p->parentProto = jsb_CrossApp_CAView_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
}

JSClass  *jsb_CrossApp_CARenderImage_class;
JSObject *jsb_CrossApp_CARenderImage_prototype;

bool js_autogentestbindings_js_CARenderImage_clearStencil(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CARenderImage* cobj = (CrossApp::CARenderImage *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CARenderImage_clearStencil : Invalid Native Object");
    if (argc == 1) {
        int arg0 = 0;
        ok &= jsval_to_int32(cx, args.get(0), (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CARenderImage_clearStencil : Error processing arguments");
        cobj->clearStencil(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CARenderImage_clearStencil : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CARenderImage_listenToForeground(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CARenderImage* cobj = (CrossApp::CARenderImage *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CARenderImage_listenToForeground : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAObject* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAObject*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CARenderImage_listenToForeground : Error processing arguments");
        cobj->listenToForeground(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CARenderImage_listenToForeground : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CARenderImage_getClearDepth(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CARenderImage* cobj = (CrossApp::CARenderImage *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CARenderImage_getClearDepth : Invalid Native Object");
    if (argc == 0) {
        double ret = cobj->getClearDepth();
        jsval jsret = JSVAL_NULL;
        jsret = DOUBLE_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CARenderImage_getClearDepth : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CARenderImage_printscreenWithView(JSContext *cx, uint32_t argc, jsval *vp)
{
    bool ok = true;
    CrossApp::CARenderImage* cobj = nullptr;

    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx);
    obj = args.thisv().toObjectOrNull();
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    cobj = (CrossApp::CARenderImage *)(proxy ? proxy->ptr : nullptr);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CARenderImage_printscreenWithView : Invalid Native Object");
    do {
        if (argc == 2) {
            CrossApp::CAView* arg0 = nullptr;
            do {
                if (args.get(0).isNull()) { arg0 = nullptr; break; }
                if (!args.get(0).isObject()) { ok = false; break; }
                js_proxy_t *jsProxy;
                JSObject *tmpObj = args.get(0).toObjectOrNull();
                jsProxy = jsb_get_js_proxy(tmpObj);
                arg0 = (CrossApp::CAView*)(jsProxy ? jsProxy->ptr : NULL);
                JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
            } while (0);
            if (!ok) { ok = true; break; }
            CrossApp::DPoint arg1 = 0;
            ok &= jsval_to_dpoint(cx, args.get(1), &arg1);
            if (!ok) { ok = true; break; }
            cobj->printscreenWithView(arg0, arg1);
            args.rval().setUndefined();
            return true;
        }
    } while(0);

    do {
        if (argc == 1) {
            CrossApp::CAView* arg0 = nullptr;
            do {
                if (args.get(0).isNull()) { arg0 = nullptr; break; }
                if (!args.get(0).isObject()) { ok = false; break; }
                js_proxy_t *jsProxy;
                JSObject *tmpObj = args.get(0).toObjectOrNull();
                jsProxy = jsb_get_js_proxy(tmpObj);
                arg0 = (CrossApp::CAView*)(jsProxy ? jsProxy->ptr : NULL);
                JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
            } while (0);
            if (!ok) { ok = true; break; }
            cobj->printscreenWithView(arg0);
            args.rval().setUndefined();
            return true;
        }
    } while(0);

    do {
        if (argc == 2) {
            CrossApp::CAView* arg0 = nullptr;
            do {
                if (args.get(0).isNull()) { arg0 = nullptr; break; }
                if (!args.get(0).isObject()) { ok = false; break; }
                js_proxy_t *jsProxy;
                JSObject *tmpObj = args.get(0).toObjectOrNull();
                jsProxy = jsb_get_js_proxy(tmpObj);
                arg0 = (CrossApp::CAView*)(jsProxy ? jsProxy->ptr : NULL);
                JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
            } while (0);
            if (!ok) { ok = true; break; }
            CrossApp::CAColor4B arg1;
            ok &= jsval_to_cacolor4b(cx, args.get(1), &arg1);
            if (!ok) { ok = true; break; }
            cobj->printscreenWithView(arg0, arg1);
            args.rval().setUndefined();
            return true;
        }
    } while(0);

    do {
        if (argc == 3) {
            CrossApp::CAView* arg0 = nullptr;
            do {
                if (args.get(0).isNull()) { arg0 = nullptr; break; }
                if (!args.get(0).isObject()) { ok = false; break; }
                js_proxy_t *jsProxy;
                JSObject *tmpObj = args.get(0).toObjectOrNull();
                jsProxy = jsb_get_js_proxy(tmpObj);
                arg0 = (CrossApp::CAView*)(jsProxy ? jsProxy->ptr : NULL);
                JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
            } while (0);
            if (!ok) { ok = true; break; }
            CrossApp::DPoint arg1 = 0;
            ok &= jsval_to_dpoint(cx, args.get(1), &arg1);
            if (!ok) { ok = true; break; }
            CrossApp::CAColor4B arg2;
            ok &= jsval_to_cacolor4b(cx, args.get(2), &arg2);
            if (!ok) { ok = true; break; }
            cobj->printscreenWithView(arg0, arg1, arg2);
            args.rval().setUndefined();
            return true;
        }
    } while(0);

    JS_ReportError(cx, "js_autogentestbindings_js_CARenderImage_printscreenWithView : wrong number of arguments");
    return false;
}
bool js_autogentestbindings_js_CARenderImage_getClearStencil(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CARenderImage* cobj = (CrossApp::CARenderImage *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CARenderImage_getClearStencil : Invalid Native Object");
    if (argc == 0) {
        int ret = cobj->getClearStencil();
        jsval jsret = JSVAL_NULL;
        jsret = int32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CARenderImage_getClearStencil : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CARenderImage_setClearStencil(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CARenderImage* cobj = (CrossApp::CARenderImage *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CARenderImage_setClearStencil : Invalid Native Object");
    if (argc == 1) {
        double arg0 = 0;
        ok &= JS::ToNumber( cx, args.get(0), &arg0) && !isnan(arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CARenderImage_setClearStencil : Error processing arguments");
        cobj->setClearStencil(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CARenderImage_setClearStencil : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CARenderImage_setImageView(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CARenderImage* cobj = (CrossApp::CARenderImage *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CARenderImage_setImageView : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAImageView* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAImageView*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CARenderImage_setImageView : Error processing arguments");
        cobj->setImageView(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CARenderImage_setImageView : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CARenderImage_initWithWidthAndHeight(JSContext *cx, uint32_t argc, jsval *vp)
{
    bool ok = true;
    CrossApp::CARenderImage* cobj = nullptr;

    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx);
    obj = args.thisv().toObjectOrNull();
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    cobj = (CrossApp::CARenderImage *)(proxy ? proxy->ptr : nullptr);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CARenderImage_initWithWidthAndHeight : Invalid Native Object");
    do {
        if (argc == 4) {
            int arg0 = 0;
            ok &= jsval_to_int32(cx, args.get(0), (int32_t *)&arg0);
            if (!ok) { ok = true; break; }
            int arg1 = 0;
            ok &= jsval_to_int32(cx, args.get(1), (int32_t *)&arg1);
            if (!ok) { ok = true; break; }
            CrossApp::CAImage::PixelFormat arg2;
            ok &= jsval_to_int32(cx, args.get(2), (int32_t *)&arg2);
            if (!ok) { ok = true; break; }
            unsigned int arg3 = 0;
            ok &= jsval_to_uint32(cx, args.get(3), &arg3);
            if (!ok) { ok = true; break; }
            bool ret = cobj->initWithWidthAndHeight(arg0, arg1, arg2, arg3);
            jsval jsret = JSVAL_NULL;
            jsret = BOOLEAN_TO_JSVAL(ret);
            args.rval().set(jsret);
            return true;
        }
    } while(0);

    do {
        if (argc == 3) {
            int arg0 = 0;
            ok &= jsval_to_int32(cx, args.get(0), (int32_t *)&arg0);
            if (!ok) { ok = true; break; }
            int arg1 = 0;
            ok &= jsval_to_int32(cx, args.get(1), (int32_t *)&arg1);
            if (!ok) { ok = true; break; }
            CrossApp::CAImage::PixelFormat arg2;
            ok &= jsval_to_int32(cx, args.get(2), (int32_t *)&arg2);
            if (!ok) { ok = true; break; }
            bool ret = cobj->initWithWidthAndHeight(arg0, arg1, arg2);
            jsval jsret = JSVAL_NULL;
            jsret = BOOLEAN_TO_JSVAL(ret);
            args.rval().set(jsret);
            return true;
        }
    } while(0);

    JS_ReportError(cx, "js_autogentestbindings_js_CARenderImage_initWithWidthAndHeight : wrong number of arguments");
    return false;
}
bool js_autogentestbindings_js_CARenderImage_visit(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CARenderImage* cobj = (CrossApp::CARenderImage *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CARenderImage_visit : Invalid Native Object");
    if (argc == 0) {
        cobj->visit();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CARenderImage_visit : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CARenderImage_isAutoDraw(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CARenderImage* cobj = (CrossApp::CARenderImage *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CARenderImage_isAutoDraw : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->isAutoDraw();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CARenderImage_isAutoDraw : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CARenderImage_getImageView(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CARenderImage* cobj = (CrossApp::CARenderImage *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CARenderImage_getImageView : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CAImageView* ret = cobj->getImageView();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAImageView>(cx, (CrossApp::CAImageView*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CARenderImage_getImageView : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CARenderImage_setClearFlags(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CARenderImage* cobj = (CrossApp::CARenderImage *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CARenderImage_setClearFlags : Invalid Native Object");
    if (argc == 1) {
        unsigned int arg0 = 0;
        ok &= jsval_to_uint32(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CARenderImage_setClearFlags : Error processing arguments");
        cobj->setClearFlags(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CARenderImage_setClearFlags : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CARenderImage_draw(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CARenderImage* cobj = (CrossApp::CARenderImage *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CARenderImage_draw : Invalid Native Object");
    if (argc == 0) {
        cobj->draw();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CARenderImage_draw : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CARenderImage_saveToFile(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CARenderImage* cobj = (CrossApp::CARenderImage *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CARenderImage_saveToFile : Invalid Native Object");
    if (argc == 1) {
        const char* arg0 = nullptr;
        std::string arg0_tmp; ok &= jsval_to_std_string(cx, args.get(0), &arg0_tmp); arg0 = arg0_tmp.c_str();
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CARenderImage_saveToFile : Error processing arguments");
        bool ret = cobj->saveToFile(arg0);
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CARenderImage_saveToFile : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CARenderImage_setAutoDraw(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CARenderImage* cobj = (CrossApp::CARenderImage *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CARenderImage_setAutoDraw : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        arg0 = JS::ToBoolean(args.get(0));
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CARenderImage_setAutoDraw : Error processing arguments");
        cobj->setAutoDraw(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CARenderImage_setAutoDraw : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CARenderImage_setClearColor(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CARenderImage* cobj = (CrossApp::CARenderImage *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CARenderImage_setClearColor : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAColor4F arg0;
        ok &= jsval_to_cacolor4f(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CARenderImage_setClearColor : Error processing arguments");
        cobj->setClearColor(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CARenderImage_setClearColor : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CARenderImage_clearDepth(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CARenderImage* cobj = (CrossApp::CARenderImage *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CARenderImage_clearDepth : Invalid Native Object");
    if (argc == 1) {
        double arg0 = 0;
        ok &= JS::ToNumber( cx, args.get(0), &arg0) && !isnan(arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CARenderImage_clearDepth : Error processing arguments");
        cobj->clearDepth(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CARenderImage_clearDepth : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CARenderImage_getClearColor(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CARenderImage* cobj = (CrossApp::CARenderImage *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CARenderImage_getClearColor : Invalid Native Object");
    if (argc == 0) {
        const CrossApp::CAColor4F& ret = cobj->getClearColor();
        jsval jsret = JSVAL_NULL;
        jsret = cacolor4f_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CARenderImage_getClearColor : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CARenderImage_listenToBackground(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CARenderImage* cobj = (CrossApp::CARenderImage *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CARenderImage_listenToBackground : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAObject* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAObject*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CARenderImage_listenToBackground : Error processing arguments");
        cobj->listenToBackground(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CARenderImage_listenToBackground : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CARenderImage_clear(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CARenderImage* cobj = (CrossApp::CARenderImage *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CARenderImage_clear : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAColor4B arg0;
        ok &= jsval_to_cacolor4b(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CARenderImage_clear : Error processing arguments");
        cobj->clear(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CARenderImage_clear : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CARenderImage_getClearFlags(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CARenderImage* cobj = (CrossApp::CARenderImage *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CARenderImage_getClearFlags : Invalid Native Object");
    if (argc == 0) {
        unsigned int ret = cobj->getClearFlags();
        jsval jsret = JSVAL_NULL;
        jsret = uint32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CARenderImage_getClearFlags : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CARenderImage_setClearDepth(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CARenderImage* cobj = (CrossApp::CARenderImage *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CARenderImage_setClearDepth : Invalid Native Object");
    if (argc == 1) {
        double arg0 = 0;
        ok &= JS::ToNumber( cx, args.get(0), &arg0) && !isnan(arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CARenderImage_setClearDepth : Error processing arguments");
        cobj->setClearDepth(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CARenderImage_setClearDepth : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CARenderImage_create(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    
    do {
        if (argc == 3) {
            int arg0 = 0;
            ok &= jsval_to_int32(cx, args.get(0), (int32_t *)&arg0);
            if (!ok) { ok = true; break; }
            int arg1 = 0;
            ok &= jsval_to_int32(cx, args.get(1), (int32_t *)&arg1);
            if (!ok) { ok = true; break; }
            CrossApp::CAImage::PixelFormat arg2;
            ok &= jsval_to_int32(cx, args.get(2), (int32_t *)&arg2);
            if (!ok) { ok = true; break; }
            CrossApp::CARenderImage* ret = CrossApp::CARenderImage::create(arg0, arg1, arg2);
            jsval jsret = JSVAL_NULL;
            do {
                if (ret) {
                    js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CARenderImage>(cx, (CrossApp::CARenderImage*)ret);
                    jsret = OBJECT_TO_JSVAL(jsProxy->obj);
                } else {
                    jsret = JSVAL_NULL;
                }
            } while (0);
            args.rval().set(jsret);
            return true;
        }
    } while (0);
    
    do {
        if (argc == 4) {
            int arg0 = 0;
            ok &= jsval_to_int32(cx, args.get(0), (int32_t *)&arg0);
            if (!ok) { ok = true; break; }
            int arg1 = 0;
            ok &= jsval_to_int32(cx, args.get(1), (int32_t *)&arg1);
            if (!ok) { ok = true; break; }
            CrossApp::CAImage::PixelFormat arg2;
            ok &= jsval_to_int32(cx, args.get(2), (int32_t *)&arg2);
            if (!ok) { ok = true; break; }
            unsigned int arg3 = 0;
            ok &= jsval_to_uint32(cx, args.get(3), &arg3);
            if (!ok) { ok = true; break; }
            CrossApp::CARenderImage* ret = CrossApp::CARenderImage::create(arg0, arg1, arg2, arg3);
            jsval jsret = JSVAL_NULL;
            do {
                if (ret) {
                    js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CARenderImage>(cx, (CrossApp::CARenderImage*)ret);
                    jsret = OBJECT_TO_JSVAL(jsProxy->obj);
                } else {
                    jsret = JSVAL_NULL;
                }
            } while (0);
            args.rval().set(jsret);
            return true;
        }
    } while (0);
    
    do {
        if (argc == 2) {
            int arg0 = 0;
            ok &= jsval_to_int32(cx, args.get(0), (int32_t *)&arg0);
            if (!ok) { ok = true; break; }
            int arg1 = 0;
            ok &= jsval_to_int32(cx, args.get(1), (int32_t *)&arg1);
            if (!ok) { ok = true; break; }
            CrossApp::CARenderImage* ret = CrossApp::CARenderImage::create(arg0, arg1);
            jsval jsret = JSVAL_NULL;
            do {
                if (ret) {
                    js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CARenderImage>(cx, (CrossApp::CARenderImage*)ret);
                    jsret = OBJECT_TO_JSVAL(jsProxy->obj);
                } else {
                    jsret = JSVAL_NULL;
                }
            } while (0);
            args.rval().set(jsret);
            return true;
        }
    } while (0);
    JS_ReportError(cx, "js_autogentestbindings_js_CARenderImage_create : wrong number of arguments");
    return false;
}
bool js_autogentestbindings_js_CARenderImage_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    CrossApp::CARenderImage* cobj = new (std::nothrow) CrossApp::CARenderImage();
    TypeTest<CrossApp::CARenderImage> t;
    js_type_class_t *typeClass = nullptr;
    std::string typeName = t.s_name();
    auto typeMapIter = _js_global_type_map.find(typeName);
    CCAssert(typeMapIter != _js_global_type_map.end(), "Can't find the class type!");
    typeClass = typeMapIter->second;
    CCAssert(typeClass, "The value is null.");
    JS::RootedObject proto(cx, typeClass->proto.get());
    JS::RootedObject parent(cx, typeClass->parentProto.get());
    JS::RootedObject obj(cx, JS_NewObject(cx, typeClass->jsclass, proto, parent));
    args.rval().set(OBJECT_TO_JSVAL(obj));
    // link the native object with the javascript object
    js_proxy_t* p = jsb_new_proxy(cobj, obj);
    if (JS_HasProperty(cx, obj, "_ctor", &ok) && ok)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    return true;
}

extern JSObject *jsb_CrossApp_CAView_prototype;

void js_CrossApp_CARenderImage_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOGINFO("jsbindings: finalizing JS object %p (CARenderImage)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::CARenderImage *nobj = static_cast<CrossApp::CARenderImage *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
void js_register_autogentestbindings_js_CARenderImage(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_CARenderImage_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_CARenderImage_class->name = "CARenderImage";
    jsb_CrossApp_CARenderImage_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_CARenderImage_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_CARenderImage_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_CARenderImage_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_CARenderImage_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_CARenderImage_class->resolve = JS_ResolveStub;
    jsb_CrossApp_CARenderImage_class->convert = JS_ConvertStub;
    jsb_CrossApp_CARenderImage_class->finalize = js_CrossApp_CARenderImage_finalize;
    jsb_CrossApp_CARenderImage_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("clearStencil", js_autogentestbindings_js_CARenderImage_clearStencil, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("listenToForeground", js_autogentestbindings_js_CARenderImage_listenToForeground, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getClearDepth", js_autogentestbindings_js_CARenderImage_getClearDepth, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("printscreenWithView", js_autogentestbindings_js_CARenderImage_printscreenWithView, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getClearStencil", js_autogentestbindings_js_CARenderImage_getClearStencil, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setClearStencil", js_autogentestbindings_js_CARenderImage_setClearStencil, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setImageView", js_autogentestbindings_js_CARenderImage_setImageView, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("initWithWidthAndHeight", js_autogentestbindings_js_CARenderImage_initWithWidthAndHeight, 3, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("visit", js_autogentestbindings_js_CARenderImage_visit, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isAutoDraw", js_autogentestbindings_js_CARenderImage_isAutoDraw, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getImageView", js_autogentestbindings_js_CARenderImage_getImageView, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setClearFlags", js_autogentestbindings_js_CARenderImage_setClearFlags, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("draw", js_autogentestbindings_js_CARenderImage_draw, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("saveToFile", js_autogentestbindings_js_CARenderImage_saveToFile, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setAutoDraw", js_autogentestbindings_js_CARenderImage_setAutoDraw, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setClearColor", js_autogentestbindings_js_CARenderImage_setClearColor, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("clearDepth", js_autogentestbindings_js_CARenderImage_clearDepth, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getClearColor", js_autogentestbindings_js_CARenderImage_getClearColor, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("listenToBackground", js_autogentestbindings_js_CARenderImage_listenToBackground, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("clear", js_autogentestbindings_js_CARenderImage_clear, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getClearFlags", js_autogentestbindings_js_CARenderImage_getClearFlags, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setClearDepth", js_autogentestbindings_js_CARenderImage_setClearDepth, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    static JSFunctionSpec st_funcs[] = {
        JS_FN("create", js_autogentestbindings_js_CARenderImage_create, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    jsb_CrossApp_CARenderImage_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_CAView_prototype),
        jsb_CrossApp_CARenderImage_class,
        js_autogentestbindings_js_CARenderImage_constructor, 0, // constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27 
//  JS_SetPropertyAttributes(cx, global, "CARenderImage", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::CARenderImage> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_CARenderImage_class;
        p->proto = jsb_CrossApp_CARenderImage_prototype;
        p->parentProto = jsb_CrossApp_CAView_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
}

JSClass  *jsb_CrossApp_CAProgress_class;
JSObject *jsb_CrossApp_CAProgress_prototype;

bool js_autogentestbindings_js_CAProgress_setProgressTintImage(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAProgress* cobj = (CrossApp::CAProgress *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAProgress_setProgressTintImage : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAImage* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAImage*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAProgress_setProgressTintImage : Error processing arguments");
        cobj->setProgressTintImage(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAProgress_setProgressTintImage : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAProgress_getProgressTintImage(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAProgress* cobj = (CrossApp::CAProgress *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAProgress_getProgressTintImage : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CAImage* ret = cobj->getProgressTintImage();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAImage>(cx, (CrossApp::CAImage*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAProgress_getProgressTintImage : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAProgress_setProgressTrackColor(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAProgress* cobj = (CrossApp::CAProgress *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAProgress_setProgressTrackColor : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAColor4B arg0;
        ok &= jsval_to_cacolor4b(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAProgress_setProgressTrackColor : Error processing arguments");
        cobj->setProgressTrackColor(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAProgress_setProgressTrackColor : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAProgress_setColor(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAProgress* cobj = (CrossApp::CAProgress *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAProgress_setColor : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAColor4B arg0;
        ok &= jsval_to_cacolor4b(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAProgress_setColor : Error processing arguments");
        cobj->setColor(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAProgress_setColor : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAProgress_setProgressTrackImage(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAProgress* cobj = (CrossApp::CAProgress *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAProgress_setProgressTrackImage : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAImage* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAImage*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAProgress_setProgressTrackImage : Error processing arguments");
        cobj->setProgressTrackImage(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAProgress_setProgressTrackImage : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAProgress_getProgressTintColor(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAProgress* cobj = (CrossApp::CAProgress *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAProgress_getProgressTintColor : Invalid Native Object");
    if (argc == 0) {
        const CrossApp::CAColor4B& ret = cobj->getProgressTintColor();
        jsval jsret = JSVAL_NULL;
        jsret = cacolor4b_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAProgress_getProgressTintColor : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAProgress_getProgressTrackImage(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAProgress* cobj = (CrossApp::CAProgress *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAProgress_getProgressTrackImage : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CAImage* ret = cobj->getProgressTrackImage();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAImage>(cx, (CrossApp::CAImage*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAProgress_getProgressTrackImage : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAProgress_getProgressTrackColor(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAProgress* cobj = (CrossApp::CAProgress *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAProgress_getProgressTrackColor : Invalid Native Object");
    if (argc == 0) {
        const CrossApp::CAColor4B& ret = cobj->getProgressTrackColor();
        jsval jsret = JSVAL_NULL;
        jsret = cacolor4b_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAProgress_getProgressTrackColor : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAProgress_init(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAProgress* cobj = (CrossApp::CAProgress *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAProgress_init : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->init();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAProgress_init : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAProgress_onExitTransitionDidStart(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAProgress* cobj = (CrossApp::CAProgress *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAProgress_onExitTransitionDidStart : Invalid Native Object");
    if (argc == 0) {
        cobj->onExitTransitionDidStart();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAProgress_onExitTransitionDidStart : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAProgress_getProgress(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAProgress* cobj = (CrossApp::CAProgress *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAProgress_getProgress : Invalid Native Object");
    if (argc == 0) {
        double ret = cobj->getProgress();
        jsval jsret = JSVAL_NULL;
        jsret = DOUBLE_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAProgress_getProgress : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAProgress_setProgress(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAProgress* cobj = (CrossApp::CAProgress *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAProgress_setProgress : Invalid Native Object");
    if (argc == 1) {
        double arg0 = 0;
        ok &= JS::ToNumber( cx, args.get(0), &arg0) && !isnan(arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAProgress_setProgress : Error processing arguments");
        cobj->setProgress(arg0);
        args.rval().setUndefined();
        return true;
    }
    if (argc == 2) {
        double arg0 = 0;
        bool arg1;
        ok &= JS::ToNumber( cx, args.get(0), &arg0) && !isnan(arg0);
        arg1 = JS::ToBoolean(args.get(1));
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAProgress_setProgress : Error processing arguments");
        cobj->setProgress(arg0, arg1);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAProgress_setProgress : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAProgress_onEnterTransitionDidFinish(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAProgress* cobj = (CrossApp::CAProgress *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAProgress_onEnterTransitionDidFinish : Invalid Native Object");
    if (argc == 0) {
        cobj->onEnterTransitionDidFinish();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAProgress_onEnterTransitionDidFinish : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAProgress_setProgressTintColor(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAProgress* cobj = (CrossApp::CAProgress *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAProgress_setProgressTintColor : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAColor4B arg0;
        ok &= jsval_to_cacolor4b(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAProgress_setProgressTintColor : Error processing arguments");
        cobj->setProgressTintColor(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAProgress_setProgressTintColor : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAProgress_create(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    if (argc == 0) {
        CrossApp::CAProgress* ret = CrossApp::CAProgress::create();
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAProgress>(cx, (CrossApp::CAProgress*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_autogentestbindings_js_CAProgress_create : wrong number of arguments");
    return false;
}

bool js_autogentestbindings_js_CAProgress_createWithFrame(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        CrossApp::DRect arg0;
        ok &= jsval_to_drect(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAProgress_createWithFrame : Error processing arguments");
        CrossApp::CAProgress* ret = CrossApp::CAProgress::createWithFrame(arg0);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAProgress>(cx, (CrossApp::CAProgress*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_autogentestbindings_js_CAProgress_createWithFrame : wrong number of arguments");
    return false;
}

bool js_autogentestbindings_js_CAProgress_createWithLayout(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        CrossApp::DRectLayout arg0;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (const CrossApp::DRectLayout&)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAProgress_createWithLayout : Error processing arguments");
        CrossApp::CAProgress* ret = CrossApp::CAProgress::createWithLayout(arg0);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAProgress>(cx, (CrossApp::CAProgress*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_autogentestbindings_js_CAProgress_createWithLayout : wrong number of arguments");
    return false;
}

bool js_autogentestbindings_js_CAProgress_createWithCenter(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        CrossApp::DRect arg0;
        ok &= jsval_to_drect(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAProgress_createWithCenter : Error processing arguments");
        CrossApp::CAProgress* ret = CrossApp::CAProgress::createWithCenter(arg0);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAProgress>(cx, (CrossApp::CAProgress*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_autogentestbindings_js_CAProgress_createWithCenter : wrong number of arguments");
    return false;
}

bool js_autogentestbindings_js_CAProgress_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    CrossApp::CAProgress* cobj = new (std::nothrow) CrossApp::CAProgress();
    TypeTest<CrossApp::CAProgress> t;
    js_type_class_t *typeClass = nullptr;
    std::string typeName = t.s_name();
    auto typeMapIter = _js_global_type_map.find(typeName);
    CCAssert(typeMapIter != _js_global_type_map.end(), "Can't find the class type!");
    typeClass = typeMapIter->second;
    CCAssert(typeClass, "The value is null.");
    JS::RootedObject proto(cx, typeClass->proto.get());
    JS::RootedObject parent(cx, typeClass->parentProto.get());
    JS::RootedObject obj(cx, JS_NewObject(cx, typeClass->jsclass, proto, parent));
    args.rval().set(OBJECT_TO_JSVAL(obj));
    // link the native object with the javascript object
    js_proxy_t* p = jsb_new_proxy(cobj, obj);
    if (JS_HasProperty(cx, obj, "_ctor", &ok) && ok)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    return true;
}

extern JSObject *jsb_CrossApp_CAView_prototype;

void js_CrossApp_CAProgress_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOGINFO("jsbindings: finalizing JS object %p (CAProgress)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::CAProgress *nobj = static_cast<CrossApp::CAProgress *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
void js_register_autogentestbindings_js_CAProgress(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_CAProgress_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_CAProgress_class->name = "CAProgress";
    jsb_CrossApp_CAProgress_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_CAProgress_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_CAProgress_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_CAProgress_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_CAProgress_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_CAProgress_class->resolve = JS_ResolveStub;
    jsb_CrossApp_CAProgress_class->convert = JS_ConvertStub;
    jsb_CrossApp_CAProgress_class->finalize = js_CrossApp_CAProgress_finalize;
    jsb_CrossApp_CAProgress_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("setProgressTintImage", js_autogentestbindings_js_CAProgress_setProgressTintImage, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getProgressTintImage", js_autogentestbindings_js_CAProgress_getProgressTintImage, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setProgressTrackColor", js_autogentestbindings_js_CAProgress_setProgressTrackColor, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setColor", js_autogentestbindings_js_CAProgress_setColor, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setProgressTrackImage", js_autogentestbindings_js_CAProgress_setProgressTrackImage, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getProgressTintColor", js_autogentestbindings_js_CAProgress_getProgressTintColor, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getProgressTrackImage", js_autogentestbindings_js_CAProgress_getProgressTrackImage, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getProgressTrackColor", js_autogentestbindings_js_CAProgress_getProgressTrackColor, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("init", js_autogentestbindings_js_CAProgress_init, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("onExitTransitionDidStart", js_autogentestbindings_js_CAProgress_onExitTransitionDidStart, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getProgress", js_autogentestbindings_js_CAProgress_getProgress, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setProgress", js_autogentestbindings_js_CAProgress_setProgress, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("onEnterTransitionDidFinish", js_autogentestbindings_js_CAProgress_onEnterTransitionDidFinish, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setProgressTintColor", js_autogentestbindings_js_CAProgress_setProgressTintColor, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    static JSFunctionSpec st_funcs[] = {
        JS_FN("create", js_autogentestbindings_js_CAProgress_create, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("createWithFrame", js_autogentestbindings_js_CAProgress_createWithFrame, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("createWithLayout", js_autogentestbindings_js_CAProgress_createWithLayout, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("createWithCenter", js_autogentestbindings_js_CAProgress_createWithCenter, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    jsb_CrossApp_CAProgress_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_CAView_prototype),
        jsb_CrossApp_CAProgress_class,
        js_autogentestbindings_js_CAProgress_constructor, 0, // constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27 
//  JS_SetPropertyAttributes(cx, global, "CAProgress", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::CAProgress> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_CAProgress_class;
        p->proto = jsb_CrossApp_CAProgress_prototype;
        p->parentProto = jsb_CrossApp_CAView_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
}

JSClass  *jsb_CrossApp_CASwitch_class;
JSObject *jsb_CrossApp_CASwitch_prototype;

bool js_autogentestbindings_js_CASwitch_getOnImage(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CASwitch* cobj = (CrossApp::CASwitch *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CASwitch_getOnImage : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CAImage* ret = cobj->getOnImage();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAImage>(cx, (CrossApp::CAImage*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CASwitch_getOnImage : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CASwitch_setOffImage(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CASwitch* cobj = (CrossApp::CASwitch *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CASwitch_setOffImage : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAImage* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAImage*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CASwitch_setOffImage : Error processing arguments");
        cobj->setOffImage(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CASwitch_setOffImage : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CASwitch_isTouchClick(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CASwitch* cobj = (CrossApp::CASwitch *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CASwitch_isTouchClick : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->isTouchClick();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CASwitch_isTouchClick : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CASwitch_getThumbTintImage(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CASwitch* cobj = (CrossApp::CASwitch *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CASwitch_getThumbTintImage : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CAImage* ret = cobj->getThumbTintImage();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAImage>(cx, (CrossApp::CAImage*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CASwitch_getThumbTintImage : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CASwitch_setIsOn(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CASwitch* cobj = (CrossApp::CASwitch *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CASwitch_setIsOn : Invalid Native Object");
    if (argc == 2) {
        bool arg0;
        bool arg1;
        arg0 = JS::ToBoolean(args.get(0));
        arg1 = JS::ToBoolean(args.get(1));
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CASwitch_setIsOn : Error processing arguments");
        cobj->setIsOn(arg0, arg1);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CASwitch_setIsOn : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_autogentestbindings_js_CASwitch_isOn(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CASwitch* cobj = (CrossApp::CASwitch *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CASwitch_isOn : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->isOn();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CASwitch_isOn : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CASwitch_setOnImage(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CASwitch* cobj = (CrossApp::CASwitch *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CASwitch_setOnImage : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAImage* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAImage*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CASwitch_setOnImage : Error processing arguments");
        cobj->setOnImage(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CASwitch_setOnImage : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CASwitch_init(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CASwitch* cobj = (CrossApp::CASwitch *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CASwitch_init : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->init();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CASwitch_init : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CASwitch_onExitTransitionDidStart(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CASwitch* cobj = (CrossApp::CASwitch *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CASwitch_onExitTransitionDidStart : Invalid Native Object");
    if (argc == 0) {
        cobj->onExitTransitionDidStart();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CASwitch_onExitTransitionDidStart : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CASwitch_getOffImage(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CASwitch* cobj = (CrossApp::CASwitch *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CASwitch_getOffImage : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CAImage* ret = cobj->getOffImage();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAImage>(cx, (CrossApp::CAImage*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CASwitch_getOffImage : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CASwitch_onEnterTransitionDidFinish(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CASwitch* cobj = (CrossApp::CASwitch *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CASwitch_onEnterTransitionDidFinish : Invalid Native Object");
    if (argc == 0) {
        cobj->onEnterTransitionDidFinish();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CASwitch_onEnterTransitionDidFinish : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CASwitch_setThumbTintImage(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CASwitch* cobj = (CrossApp::CASwitch *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CASwitch_setThumbTintImage : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAImage* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAImage*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CASwitch_setThumbTintImage : Error processing arguments");
        cobj->setThumbTintImage(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CASwitch_setThumbTintImage : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CASwitch_create(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    if (argc == 0) {
        CrossApp::CASwitch* ret = CrossApp::CASwitch::create();
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CASwitch>(cx, (CrossApp::CASwitch*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_autogentestbindings_js_CASwitch_create : wrong number of arguments");
    return false;
}

bool js_autogentestbindings_js_CASwitch_createWithFrame(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        CrossApp::DRect arg0;
        ok &= jsval_to_drect(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CASwitch_createWithFrame : Error processing arguments");
        CrossApp::CASwitch* ret = CrossApp::CASwitch::createWithFrame(arg0);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CASwitch>(cx, (CrossApp::CASwitch*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_autogentestbindings_js_CASwitch_createWithFrame : wrong number of arguments");
    return false;
}

bool js_autogentestbindings_js_CASwitch_createWithLayout(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        CrossApp::DRectLayout arg0;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (const CrossApp::DRectLayout&)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CASwitch_createWithLayout : Error processing arguments");
        CrossApp::CASwitch* ret = CrossApp::CASwitch::createWithLayout(arg0);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CASwitch>(cx, (CrossApp::CASwitch*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_autogentestbindings_js_CASwitch_createWithLayout : wrong number of arguments");
    return false;
}

bool js_autogentestbindings_js_CASwitch_createWithCenter(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        CrossApp::DRect arg0;
        ok &= jsval_to_drect(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CASwitch_createWithCenter : Error processing arguments");
        CrossApp::CASwitch* ret = CrossApp::CASwitch::createWithCenter(arg0);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CASwitch>(cx, (CrossApp::CASwitch*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_autogentestbindings_js_CASwitch_createWithCenter : wrong number of arguments");
    return false;
}

bool js_autogentestbindings_js_CASwitch_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    CrossApp::CASwitch* cobj = new (std::nothrow) CrossApp::CASwitch();
    TypeTest<CrossApp::CASwitch> t;
    js_type_class_t *typeClass = nullptr;
    std::string typeName = t.s_name();
    auto typeMapIter = _js_global_type_map.find(typeName);
    CCAssert(typeMapIter != _js_global_type_map.end(), "Can't find the class type!");
    typeClass = typeMapIter->second;
    CCAssert(typeClass, "The value is null.");
    JS::RootedObject proto(cx, typeClass->proto.get());
    JS::RootedObject parent(cx, typeClass->parentProto.get());
    JS::RootedObject obj(cx, JS_NewObject(cx, typeClass->jsclass, proto, parent));
    args.rval().set(OBJECT_TO_JSVAL(obj));
    // link the native object with the javascript object
    js_proxy_t* p = jsb_new_proxy(cobj, obj);
    if (JS_HasProperty(cx, obj, "_ctor", &ok) && ok)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    return true;
}

extern JSObject *jsb_CrossApp_CAControl_prototype;

void js_CrossApp_CASwitch_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOGINFO("jsbindings: finalizing JS object %p (CASwitch)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::CASwitch *nobj = static_cast<CrossApp::CASwitch *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
void js_register_autogentestbindings_js_CASwitch(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_CASwitch_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_CASwitch_class->name = "CASwitch";
    jsb_CrossApp_CASwitch_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_CASwitch_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_CASwitch_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_CASwitch_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_CASwitch_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_CASwitch_class->resolve = JS_ResolveStub;
    jsb_CrossApp_CASwitch_class->convert = JS_ConvertStub;
    jsb_CrossApp_CASwitch_class->finalize = js_CrossApp_CASwitch_finalize;
    jsb_CrossApp_CASwitch_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("getOnImage", js_autogentestbindings_js_CASwitch_getOnImage, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setOffImage", js_autogentestbindings_js_CASwitch_setOffImage, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isTouchClick", js_autogentestbindings_js_CASwitch_isTouchClick, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getThumbTintImage", js_autogentestbindings_js_CASwitch_getThumbTintImage, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setIsOn", js_autogentestbindings_js_CASwitch_setIsOn, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isOn", js_autogentestbindings_js_CASwitch_isOn, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setOnImage", js_autogentestbindings_js_CASwitch_setOnImage, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("init", js_autogentestbindings_js_CASwitch_init, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("onExitTransitionDidStart", js_autogentestbindings_js_CASwitch_onExitTransitionDidStart, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getOffImage", js_autogentestbindings_js_CASwitch_getOffImage, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("onEnterTransitionDidFinish", js_autogentestbindings_js_CASwitch_onEnterTransitionDidFinish, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setThumbTintImage", js_autogentestbindings_js_CASwitch_setThumbTintImage, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    static JSFunctionSpec st_funcs[] = {
        JS_FN("create", js_autogentestbindings_js_CASwitch_create, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("createWithFrame", js_autogentestbindings_js_CASwitch_createWithFrame, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("createWithLayout", js_autogentestbindings_js_CASwitch_createWithLayout, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("createWithCenter", js_autogentestbindings_js_CASwitch_createWithCenter, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    jsb_CrossApp_CASwitch_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_CAControl_prototype),
        jsb_CrossApp_CASwitch_class,
        js_autogentestbindings_js_CASwitch_constructor, 0, // constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27 
//  JS_SetPropertyAttributes(cx, global, "CASwitch", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::CASwitch> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_CASwitch_class;
        p->proto = jsb_CrossApp_CASwitch_prototype;
        p->parentProto = jsb_CrossApp_CAControl_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
}

JSClass  *jsb_CrossApp_CASlider_class;
JSObject *jsb_CrossApp_CASlider_prototype;

bool js_autogentestbindings_js_CASlider_ccTouchBegan(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CASlider* cobj = (CrossApp::CASlider *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CASlider_ccTouchBegan : Invalid Native Object");
    if (argc == 2) {
        CrossApp::CATouch* arg0 = nullptr;
        CrossApp::CAEvent* arg1 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CATouch*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        do {
            if (args.get(1).isNull()) { arg1 = nullptr; break; }
            if (!args.get(1).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(1).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg1 = (CrossApp::CAEvent*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg1, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CASlider_ccTouchBegan : Error processing arguments");
        bool ret = cobj->ccTouchBegan(arg0, arg1);
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CASlider_ccTouchBegan : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_autogentestbindings_js_CASlider_initWithCenter(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CASlider* cobj = (CrossApp::CASlider *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CASlider_initWithCenter : Invalid Native Object");
    if (argc == 1) {
        CrossApp::DRect arg0;
        ok &= jsval_to_drect(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CASlider_initWithCenter : Error processing arguments");
        bool ret = cobj->initWithCenter(arg0);
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CASlider_initWithCenter : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CASlider_ccTouchEnded(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CASlider* cobj = (CrossApp::CASlider *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CASlider_ccTouchEnded : Invalid Native Object");
    if (argc == 2) {
        CrossApp::CATouch* arg0 = nullptr;
        CrossApp::CAEvent* arg1 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CATouch*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        do {
            if (args.get(1).isNull()) { arg1 = nullptr; break; }
            if (!args.get(1).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(1).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg1 = (CrossApp::CAEvent*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg1, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CASlider_ccTouchEnded : Error processing arguments");
        cobj->ccTouchEnded(arg0, arg1);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CASlider_ccTouchEnded : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_autogentestbindings_js_CASlider_getTrackHeight(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CASlider* cobj = (CrossApp::CASlider *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CASlider_getTrackHeight : Invalid Native Object");
    if (argc == 0) {
        double ret = cobj->getTrackHeight();
        jsval jsret = JSVAL_NULL;
        jsret = DOUBLE_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CASlider_getTrackHeight : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CASlider_setMinValue(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CASlider* cobj = (CrossApp::CASlider *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CASlider_setMinValue : Invalid Native Object");
    if (argc == 1) {
        double arg0 = 0;
        ok &= JS::ToNumber( cx, args.get(0), &arg0) && !isnan(arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CASlider_setMinValue : Error processing arguments");
        cobj->setMinValue(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CASlider_setMinValue : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CASlider_getMinValue(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CASlider* cobj = (CrossApp::CASlider *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CASlider_getMinValue : Invalid Native Object");
    if (argc == 0) {
        double ret = cobj->getMinValue();
        jsval jsret = JSVAL_NULL;
        jsret = DOUBLE_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CASlider_getMinValue : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CASlider_init(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CASlider* cobj = (CrossApp::CASlider *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CASlider_init : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->init();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CASlider_init : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CASlider_ccTouchMoved(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CASlider* cobj = (CrossApp::CASlider *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CASlider_ccTouchMoved : Invalid Native Object");
    if (argc == 2) {
        CrossApp::CATouch* arg0 = nullptr;
        CrossApp::CAEvent* arg1 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CATouch*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        do {
            if (args.get(1).isNull()) { arg1 = nullptr; break; }
            if (!args.get(1).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(1).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg1 = (CrossApp::CAEvent*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg1, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CASlider_ccTouchMoved : Error processing arguments");
        cobj->ccTouchMoved(arg0, arg1);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CASlider_ccTouchMoved : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_autogentestbindings_js_CASlider_getMaxValue(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CASlider* cobj = (CrossApp::CASlider *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CASlider_getMaxValue : Invalid Native Object");
    if (argc == 0) {
        double ret = cobj->getMaxValue();
        jsval jsret = JSVAL_NULL;
        jsret = DOUBLE_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CASlider_getMaxValue : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CASlider_setMaxTrackTintImage(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CASlider* cobj = (CrossApp::CASlider *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CASlider_setMaxTrackTintImage : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAImage* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAImage*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CASlider_setMaxTrackTintImage : Error processing arguments");
        cobj->setMaxTrackTintImage(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CASlider_setMaxTrackTintImage : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CASlider_setValue(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CASlider* cobj = (CrossApp::CASlider *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CASlider_setValue : Invalid Native Object");
    if (argc == 1) {
        double arg0 = 0;
        ok &= JS::ToNumber( cx, args.get(0), &arg0) && !isnan(arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CASlider_setValue : Error processing arguments");
        cobj->setValue(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CASlider_setValue : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CASlider_isTouchClick(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CASlider* cobj = (CrossApp::CASlider *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CASlider_isTouchClick : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->isTouchClick();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CASlider_isTouchClick : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CASlider_initWithFrame(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CASlider* cobj = (CrossApp::CASlider *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CASlider_initWithFrame : Invalid Native Object");
    if (argc == 1) {
        CrossApp::DRect arg0;
        ok &= jsval_to_drect(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CASlider_initWithFrame : Error processing arguments");
        bool ret = cobj->initWithFrame(arg0);
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CASlider_initWithFrame : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CASlider_layoutSubViews(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CASlider* cobj = (CrossApp::CASlider *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CASlider_layoutSubViews : Invalid Native Object");
    if (argc == 0) {
        cobj->layoutSubViews();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CASlider_layoutSubViews : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CASlider_onExitTransitionDidStart(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CASlider* cobj = (CrossApp::CASlider *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CASlider_onExitTransitionDidStart : Invalid Native Object");
    if (argc == 0) {
        cobj->onExitTransitionDidStart();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CASlider_onExitTransitionDidStart : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CASlider_setThumbTintImage(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CASlider* cobj = (CrossApp::CASlider *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CASlider_setThumbTintImage : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAImage* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAImage*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CASlider_setThumbTintImage : Error processing arguments");
        cobj->setThumbTintImage(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CASlider_setThumbTintImage : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CASlider_getMinTrackTintImage(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CASlider* cobj = (CrossApp::CASlider *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CASlider_getMinTrackTintImage : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CAImage* ret = cobj->getMinTrackTintImage();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAImage>(cx, (CrossApp::CAImage*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CASlider_getMinTrackTintImage : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CASlider_setTrackHeight(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CASlider* cobj = (CrossApp::CASlider *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CASlider_setTrackHeight : Invalid Native Object");
    if (argc == 1) {
        double arg0 = 0;
        ok &= JS::ToNumber( cx, args.get(0), &arg0) && !isnan(arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CASlider_setTrackHeight : Error processing arguments");
        cobj->setTrackHeight(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CASlider_setTrackHeight : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CASlider_getThumbTintImage(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CASlider* cobj = (CrossApp::CASlider *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CASlider_getThumbTintImage : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CAImage* ret = cobj->getThumbTintImage();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAImage>(cx, (CrossApp::CAImage*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CASlider_getThumbTintImage : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CASlider_setMaxValue(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CASlider* cobj = (CrossApp::CASlider *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CASlider_setMaxValue : Invalid Native Object");
    if (argc == 1) {
        double arg0 = 0;
        ok &= JS::ToNumber( cx, args.get(0), &arg0) && !isnan(arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CASlider_setMaxValue : Error processing arguments");
        cobj->setMaxValue(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CASlider_setMaxValue : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CASlider_getValue(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CASlider* cobj = (CrossApp::CASlider *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CASlider_getValue : Invalid Native Object");
    if (argc == 0) {
        double ret = cobj->getValue();
        jsval jsret = JSVAL_NULL;
        jsret = DOUBLE_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CASlider_getValue : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CASlider_getMaxTrackTintImage(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CASlider* cobj = (CrossApp::CASlider *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CASlider_getMaxTrackTintImage : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CAImage* ret = cobj->getMaxTrackTintImage();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAImage>(cx, (CrossApp::CAImage*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CASlider_getMaxTrackTintImage : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CASlider_setMinTrackTintImage(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CASlider* cobj = (CrossApp::CASlider *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CASlider_setMinTrackTintImage : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAImage* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAImage*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CASlider_setMinTrackTintImage : Error processing arguments");
        cobj->setMinTrackTintImage(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CASlider_setMinTrackTintImage : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CASlider_onEnterTransitionDidFinish(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CASlider* cobj = (CrossApp::CASlider *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CASlider_onEnterTransitionDidFinish : Invalid Native Object");
    if (argc == 0) {
        cobj->onEnterTransitionDidFinish();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CASlider_onEnterTransitionDidFinish : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CASlider_create(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    if (argc == 0) {
        CrossApp::CASlider* ret = CrossApp::CASlider::create();
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CASlider>(cx, (CrossApp::CASlider*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_autogentestbindings_js_CASlider_create : wrong number of arguments");
    return false;
}

bool js_autogentestbindings_js_CASlider_createWithFrame(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        CrossApp::DRect arg0;
        ok &= jsval_to_drect(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CASlider_createWithFrame : Error processing arguments");
        CrossApp::CASlider* ret = CrossApp::CASlider::createWithFrame(arg0);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CASlider>(cx, (CrossApp::CASlider*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_autogentestbindings_js_CASlider_createWithFrame : wrong number of arguments");
    return false;
}

bool js_autogentestbindings_js_CASlider_createWithLayout(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        CrossApp::DRectLayout arg0;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (const CrossApp::DRectLayout&)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CASlider_createWithLayout : Error processing arguments");
        CrossApp::CASlider* ret = CrossApp::CASlider::createWithLayout(arg0);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CASlider>(cx, (CrossApp::CASlider*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_autogentestbindings_js_CASlider_createWithLayout : wrong number of arguments");
    return false;
}

bool js_autogentestbindings_js_CASlider_createWithCenter(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        CrossApp::DRect arg0;
        ok &= jsval_to_drect(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CASlider_createWithCenter : Error processing arguments");
        CrossApp::CASlider* ret = CrossApp::CASlider::createWithCenter(arg0);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CASlider>(cx, (CrossApp::CASlider*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_autogentestbindings_js_CASlider_createWithCenter : wrong number of arguments");
    return false;
}

bool js_autogentestbindings_js_CASlider_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    CrossApp::CASlider* cobj = new (std::nothrow) CrossApp::CASlider();
    TypeTest<CrossApp::CASlider> t;
    js_type_class_t *typeClass = nullptr;
    std::string typeName = t.s_name();
    auto typeMapIter = _js_global_type_map.find(typeName);
    CCAssert(typeMapIter != _js_global_type_map.end(), "Can't find the class type!");
    typeClass = typeMapIter->second;
    CCAssert(typeClass, "The value is null.");
    JS::RootedObject proto(cx, typeClass->proto.get());
    JS::RootedObject parent(cx, typeClass->parentProto.get());
    JS::RootedObject obj(cx, JS_NewObject(cx, typeClass->jsclass, proto, parent));
    args.rval().set(OBJECT_TO_JSVAL(obj));
    // link the native object with the javascript object
    js_proxy_t* p = jsb_new_proxy(cobj, obj);
    if (JS_HasProperty(cx, obj, "_ctor", &ok) && ok)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    return true;
}

extern JSObject *jsb_CrossApp_CAControl_prototype;

void js_CrossApp_CASlider_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOGINFO("jsbindings: finalizing JS object %p (CASlider)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::CASlider *nobj = static_cast<CrossApp::CASlider *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
void js_register_autogentestbindings_js_CASlider(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_CASlider_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_CASlider_class->name = "CASlider";
    jsb_CrossApp_CASlider_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_CASlider_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_CASlider_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_CASlider_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_CASlider_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_CASlider_class->resolve = JS_ResolveStub;
    jsb_CrossApp_CASlider_class->convert = JS_ConvertStub;
    jsb_CrossApp_CASlider_class->finalize = js_CrossApp_CASlider_finalize;
    jsb_CrossApp_CASlider_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("ccTouchBegan", js_autogentestbindings_js_CASlider_ccTouchBegan, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("initWithCenter", js_autogentestbindings_js_CASlider_initWithCenter, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("ccTouchEnded", js_autogentestbindings_js_CASlider_ccTouchEnded, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getTrackHeight", js_autogentestbindings_js_CASlider_getTrackHeight, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setMinValue", js_autogentestbindings_js_CASlider_setMinValue, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getMinValue", js_autogentestbindings_js_CASlider_getMinValue, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("init", js_autogentestbindings_js_CASlider_init, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("ccTouchMoved", js_autogentestbindings_js_CASlider_ccTouchMoved, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getMaxValue", js_autogentestbindings_js_CASlider_getMaxValue, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setMaxTrackTintImage", js_autogentestbindings_js_CASlider_setMaxTrackTintImage, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setValue", js_autogentestbindings_js_CASlider_setValue, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isTouchClick", js_autogentestbindings_js_CASlider_isTouchClick, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("initWithFrame", js_autogentestbindings_js_CASlider_initWithFrame, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("layoutSubViews", js_autogentestbindings_js_CASlider_layoutSubViews, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("onExitTransitionDidStart", js_autogentestbindings_js_CASlider_onExitTransitionDidStart, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setThumbTintImage", js_autogentestbindings_js_CASlider_setThumbTintImage, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getMinTrackTintImage", js_autogentestbindings_js_CASlider_getMinTrackTintImage, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setTrackHeight", js_autogentestbindings_js_CASlider_setTrackHeight, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getThumbTintImage", js_autogentestbindings_js_CASlider_getThumbTintImage, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setMaxValue", js_autogentestbindings_js_CASlider_setMaxValue, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getValue", js_autogentestbindings_js_CASlider_getValue, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getMaxTrackTintImage", js_autogentestbindings_js_CASlider_getMaxTrackTintImage, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setMinTrackTintImage", js_autogentestbindings_js_CASlider_setMinTrackTintImage, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("onEnterTransitionDidFinish", js_autogentestbindings_js_CASlider_onEnterTransitionDidFinish, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    static JSFunctionSpec st_funcs[] = {
        JS_FN("create", js_autogentestbindings_js_CASlider_create, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("createWithFrame", js_autogentestbindings_js_CASlider_createWithFrame, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("createWithLayout", js_autogentestbindings_js_CASlider_createWithLayout, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("createWithCenter", js_autogentestbindings_js_CASlider_createWithCenter, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    jsb_CrossApp_CASlider_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_CAControl_prototype),
        jsb_CrossApp_CASlider_class,
        js_autogentestbindings_js_CASlider_constructor, 0, // constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27 
//  JS_SetPropertyAttributes(cx, global, "CASlider", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::CASlider> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_CASlider_class;
        p->proto = jsb_CrossApp_CASlider_prototype;
        p->parentProto = jsb_CrossApp_CAControl_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
}

JSClass  *jsb_CrossApp_CAPageControl_class;
JSObject *jsb_CrossApp_CAPageControl_prototype;

bool js_autogentestbindings_js_CAPageControl_setDefersCurrentPageDisplay(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAPageControl* cobj = (CrossApp::CAPageControl *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAPageControl_setDefersCurrentPageDisplay : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        arg0 = JS::ToBoolean(args.get(0));
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAPageControl_setDefersCurrentPageDisplay : Error processing arguments");
        cobj->setDefersCurrentPageDisplay(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAPageControl_setDefersCurrentPageDisplay : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAPageControl_onEnter(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAPageControl* cobj = (CrossApp::CAPageControl *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAPageControl_onEnter : Invalid Native Object");
    if (argc == 0) {
        cobj->onEnter();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAPageControl_onEnter : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAPageControl_getPageIndicatorImage(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAPageControl* cobj = (CrossApp::CAPageControl *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAPageControl_getPageIndicatorImage : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CAImage* ret = cobj->getPageIndicatorImage();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAImage>(cx, (CrossApp::CAImage*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAPageControl_getPageIndicatorImage : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAPageControl_initWithCenter(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAPageControl* cobj = (CrossApp::CAPageControl *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAPageControl_initWithCenter : Invalid Native Object");
    if (argc == 1) {
        CrossApp::DRect arg0;
        ok &= jsval_to_drect(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAPageControl_initWithCenter : Error processing arguments");
        bool ret = cobj->initWithCenter(arg0);
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAPageControl_initWithCenter : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAPageControl_sizeForNumberOfPages(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAPageControl* cobj = (CrossApp::CAPageControl *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAPageControl_sizeForNumberOfPages : Invalid Native Object");
    if (argc == 1) {
        int arg0 = 0;
        ok &= jsval_to_int32(cx, args.get(0), (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAPageControl_sizeForNumberOfPages : Error processing arguments");
        CrossApp::DSize ret = cobj->sizeForNumberOfPages(arg0);
        jsval jsret = JSVAL_NULL;
        jsret = dsize_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAPageControl_sizeForNumberOfPages : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAPageControl_isSinglePage(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAPageControl* cobj = (CrossApp::CAPageControl *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAPageControl_isSinglePage : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->isSinglePage();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAPageControl_isSinglePage : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAPageControl_setPageIndicatorImage(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAPageControl* cobj = (CrossApp::CAPageControl *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAPageControl_setPageIndicatorImage : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAImage* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAImage*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAPageControl_setPageIndicatorImage : Error processing arguments");
        cobj->setPageIndicatorImage(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAPageControl_setPageIndicatorImage : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAPageControl_setNumberOfPages(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAPageControl* cobj = (CrossApp::CAPageControl *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAPageControl_setNumberOfPages : Invalid Native Object");
    if (argc == 1) {
        int arg0 = 0;
        ok &= jsval_to_int32(cx, args.get(0), (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAPageControl_setNumberOfPages : Error processing arguments");
        cobj->setNumberOfPages(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAPageControl_setNumberOfPages : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAPageControl_visit(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAPageControl* cobj = (CrossApp::CAPageControl *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAPageControl_visit : Invalid Native Object");
    if (argc == 0) {
        cobj->visit();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAPageControl_visit : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAPageControl_getNumberOfPages(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAPageControl* cobj = (CrossApp::CAPageControl *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAPageControl_getNumberOfPages : Invalid Native Object");
    if (argc == 0) {
        int ret = cobj->getNumberOfPages();
        jsval jsret = JSVAL_NULL;
        jsret = int32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAPageControl_getNumberOfPages : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAPageControl_init(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAPageControl* cobj = (CrossApp::CAPageControl *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAPageControl_init : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->init();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAPageControl_init : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAPageControl_setTouchEnabled(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAPageControl* cobj = (CrossApp::CAPageControl *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAPageControl_setTouchEnabled : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        arg0 = JS::ToBoolean(args.get(0));
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAPageControl_setTouchEnabled : Error processing arguments");
        cobj->setTouchEnabled(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAPageControl_setTouchEnabled : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAPageControl_setPageIndicatorTintColor(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAPageControl* cobj = (CrossApp::CAPageControl *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAPageControl_setPageIndicatorTintColor : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAColor4B arg0;
        ok &= jsval_to_cacolor4b(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAPageControl_setPageIndicatorTintColor : Error processing arguments");
        cobj->setPageIndicatorTintColor(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAPageControl_setPageIndicatorTintColor : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAPageControl_initWithFrame(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAPageControl* cobj = (CrossApp::CAPageControl *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAPageControl_initWithFrame : Invalid Native Object");
    if (argc == 1) {
        CrossApp::DRect arg0;
        ok &= jsval_to_drect(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAPageControl_initWithFrame : Error processing arguments");
        bool ret = cobj->initWithFrame(arg0);
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAPageControl_initWithFrame : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAPageControl_setSinglePage(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAPageControl* cobj = (CrossApp::CAPageControl *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAPageControl_setSinglePage : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        arg0 = JS::ToBoolean(args.get(0));
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAPageControl_setSinglePage : Error processing arguments");
        cobj->setSinglePage(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAPageControl_setSinglePage : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAPageControl_getStyle(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAPageControl* cobj = (CrossApp::CAPageControl *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAPageControl_getStyle : Invalid Native Object");
    if (argc == 0) {
        int ret = (int)cobj->getStyle();
        jsval jsret = JSVAL_NULL;
        jsret = int32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAPageControl_getStyle : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAPageControl_getPageIndicatorTintColor(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAPageControl* cobj = (CrossApp::CAPageControl *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAPageControl_getPageIndicatorTintColor : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CAColor4B ret = cobj->getPageIndicatorTintColor();
        jsval jsret = JSVAL_NULL;
        jsret = cacolor4b_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAPageControl_getPageIndicatorTintColor : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAPageControl_setStyle(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAPageControl* cobj = (CrossApp::CAPageControl *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAPageControl_setStyle : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAPageControlStyle arg0;
        ok &= jsval_to_int32(cx, args.get(0), (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAPageControl_setStyle : Error processing arguments");
        cobj->setStyle(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAPageControl_setStyle : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAPageControl_isDefersCurrentPageDisplay(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAPageControl* cobj = (CrossApp::CAPageControl *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAPageControl_isDefersCurrentPageDisplay : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->isDefersCurrentPageDisplay();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAPageControl_isDefersCurrentPageDisplay : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAPageControl_setCurrentPageIndicatorTintColor(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAPageControl* cobj = (CrossApp::CAPageControl *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAPageControl_setCurrentPageIndicatorTintColor : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAColor4B arg0;
        ok &= jsval_to_cacolor4b(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAPageControl_setCurrentPageIndicatorTintColor : Error processing arguments");
        cobj->setCurrentPageIndicatorTintColor(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAPageControl_setCurrentPageIndicatorTintColor : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAPageControl_setCurrentPage(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAPageControl* cobj = (CrossApp::CAPageControl *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAPageControl_setCurrentPage : Invalid Native Object");
    if (argc == 1) {
        int arg0 = 0;
        ok &= jsval_to_int32(cx, args.get(0), (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAPageControl_setCurrentPage : Error processing arguments");
        cobj->setCurrentPage(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAPageControl_setCurrentPage : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAPageControl_updateCurrentPageDisplay(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAPageControl* cobj = (CrossApp::CAPageControl *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAPageControl_updateCurrentPageDisplay : Invalid Native Object");
    if (argc == 0) {
        cobj->updateCurrentPageDisplay();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAPageControl_updateCurrentPageDisplay : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAPageControl_getCurrentPage(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAPageControl* cobj = (CrossApp::CAPageControl *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAPageControl_getCurrentPage : Invalid Native Object");
    if (argc == 0) {
        int ret = cobj->getCurrentPage();
        jsval jsret = JSVAL_NULL;
        jsret = int32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAPageControl_getCurrentPage : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAPageControl_onExit(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAPageControl* cobj = (CrossApp::CAPageControl *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAPageControl_onExit : Invalid Native Object");
    if (argc == 0) {
        cobj->onExit();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAPageControl_onExit : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAPageControl_getCurrentPageIndicatorTintColor(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAPageControl* cobj = (CrossApp::CAPageControl *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAPageControl_getCurrentPageIndicatorTintColor : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CAColor4B ret = cobj->getCurrentPageIndicatorTintColor();
        jsval jsret = JSVAL_NULL;
        jsret = cacolor4b_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAPageControl_getCurrentPageIndicatorTintColor : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAPageControl_setCurrIndicatorImage(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAPageControl* cobj = (CrossApp::CAPageControl *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAPageControl_setCurrIndicatorImage : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAImage* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAImage*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAPageControl_setCurrIndicatorImage : Error processing arguments");
        cobj->setCurrIndicatorImage(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAPageControl_setCurrIndicatorImage : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAPageControl_getCurrIndicatorImage(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAPageControl* cobj = (CrossApp::CAPageControl *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAPageControl_getCurrIndicatorImage : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CAImage* ret = cobj->getCurrIndicatorImage();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAImage>(cx, (CrossApp::CAImage*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAPageControl_getCurrIndicatorImage : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAPageControl_create(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    if (argc == 0) {
        CrossApp::CAPageControl* ret = CrossApp::CAPageControl::create();
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAPageControl>(cx, (CrossApp::CAPageControl*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_autogentestbindings_js_CAPageControl_create : wrong number of arguments");
    return false;
}

bool js_autogentestbindings_js_CAPageControl_createWithFrame(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        CrossApp::DRect arg0;
        ok &= jsval_to_drect(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAPageControl_createWithFrame : Error processing arguments");
        CrossApp::CAPageControl* ret = CrossApp::CAPageControl::createWithFrame(arg0);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAPageControl>(cx, (CrossApp::CAPageControl*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_autogentestbindings_js_CAPageControl_createWithFrame : wrong number of arguments");
    return false;
}

bool js_autogentestbindings_js_CAPageControl_createWithLayout(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        CrossApp::DRectLayout arg0;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (const CrossApp::DRectLayout&)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAPageControl_createWithLayout : Error processing arguments");
        CrossApp::CAPageControl* ret = CrossApp::CAPageControl::createWithLayout(arg0);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAPageControl>(cx, (CrossApp::CAPageControl*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_autogentestbindings_js_CAPageControl_createWithLayout : wrong number of arguments");
    return false;
}

bool js_autogentestbindings_js_CAPageControl_createWithCenter(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        CrossApp::DRect arg0;
        ok &= jsval_to_drect(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAPageControl_createWithCenter : Error processing arguments");
        CrossApp::CAPageControl* ret = CrossApp::CAPageControl::createWithCenter(arg0);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAPageControl>(cx, (CrossApp::CAPageControl*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_autogentestbindings_js_CAPageControl_createWithCenter : wrong number of arguments");
    return false;
}

bool js_autogentestbindings_js_CAPageControl_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    CrossApp::CAPageControl* cobj = new (std::nothrow) CrossApp::CAPageControl();
    TypeTest<CrossApp::CAPageControl> t;
    js_type_class_t *typeClass = nullptr;
    std::string typeName = t.s_name();
    auto typeMapIter = _js_global_type_map.find(typeName);
    CCAssert(typeMapIter != _js_global_type_map.end(), "Can't find the class type!");
    typeClass = typeMapIter->second;
    CCAssert(typeClass, "The value is null.");
    JS::RootedObject proto(cx, typeClass->proto.get());
    JS::RootedObject parent(cx, typeClass->parentProto.get());
    JS::RootedObject obj(cx, JS_NewObject(cx, typeClass->jsclass, proto, parent));
    args.rval().set(OBJECT_TO_JSVAL(obj));
    // link the native object with the javascript object
    js_proxy_t* p = jsb_new_proxy(cobj, obj);
    if (JS_HasProperty(cx, obj, "_ctor", &ok) && ok)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    return true;
}

extern JSObject *jsb_CrossApp_CAControl_prototype;

void js_CrossApp_CAPageControl_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOGINFO("jsbindings: finalizing JS object %p (CAPageControl)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::CAPageControl *nobj = static_cast<CrossApp::CAPageControl *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
void js_register_autogentestbindings_js_CAPageControl(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_CAPageControl_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_CAPageControl_class->name = "CAPageControl";
    jsb_CrossApp_CAPageControl_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_CAPageControl_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_CAPageControl_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_CAPageControl_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_CAPageControl_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_CAPageControl_class->resolve = JS_ResolveStub;
    jsb_CrossApp_CAPageControl_class->convert = JS_ConvertStub;
    jsb_CrossApp_CAPageControl_class->finalize = js_CrossApp_CAPageControl_finalize;
    jsb_CrossApp_CAPageControl_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("setDefersCurrentPageDisplay", js_autogentestbindings_js_CAPageControl_setDefersCurrentPageDisplay, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("onEnter", js_autogentestbindings_js_CAPageControl_onEnter, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getPageIndicatorImage", js_autogentestbindings_js_CAPageControl_getPageIndicatorImage, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("initWithCenter", js_autogentestbindings_js_CAPageControl_initWithCenter, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("sizeForNumberOfPages", js_autogentestbindings_js_CAPageControl_sizeForNumberOfPages, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isSinglePage", js_autogentestbindings_js_CAPageControl_isSinglePage, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setPageIndicatorImage", js_autogentestbindings_js_CAPageControl_setPageIndicatorImage, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setNumberOfPages", js_autogentestbindings_js_CAPageControl_setNumberOfPages, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("visit", js_autogentestbindings_js_CAPageControl_visit, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getNumberOfPages", js_autogentestbindings_js_CAPageControl_getNumberOfPages, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("init", js_autogentestbindings_js_CAPageControl_init, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setTouchEnabled", js_autogentestbindings_js_CAPageControl_setTouchEnabled, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setPageIndicatorTintColor", js_autogentestbindings_js_CAPageControl_setPageIndicatorTintColor, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("initWithFrame", js_autogentestbindings_js_CAPageControl_initWithFrame, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setSinglePage", js_autogentestbindings_js_CAPageControl_setSinglePage, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getStyle", js_autogentestbindings_js_CAPageControl_getStyle, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getPageIndicatorTintColor", js_autogentestbindings_js_CAPageControl_getPageIndicatorTintColor, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setStyle", js_autogentestbindings_js_CAPageControl_setStyle, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isDefersCurrentPageDisplay", js_autogentestbindings_js_CAPageControl_isDefersCurrentPageDisplay, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setCurrentPageIndicatorTintColor", js_autogentestbindings_js_CAPageControl_setCurrentPageIndicatorTintColor, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setCurrentPage", js_autogentestbindings_js_CAPageControl_setCurrentPage, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("updateCurrentPageDisplay", js_autogentestbindings_js_CAPageControl_updateCurrentPageDisplay, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getCurrentPage", js_autogentestbindings_js_CAPageControl_getCurrentPage, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("onExit", js_autogentestbindings_js_CAPageControl_onExit, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getCurrentPageIndicatorTintColor", js_autogentestbindings_js_CAPageControl_getCurrentPageIndicatorTintColor, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setCurrIndicatorImage", js_autogentestbindings_js_CAPageControl_setCurrIndicatorImage, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getCurrIndicatorImage", js_autogentestbindings_js_CAPageControl_getCurrIndicatorImage, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    static JSFunctionSpec st_funcs[] = {
        JS_FN("create", js_autogentestbindings_js_CAPageControl_create, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("createWithFrame", js_autogentestbindings_js_CAPageControl_createWithFrame, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("createWithLayout", js_autogentestbindings_js_CAPageControl_createWithLayout, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("createWithCenter", js_autogentestbindings_js_CAPageControl_createWithCenter, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    jsb_CrossApp_CAPageControl_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_CAControl_prototype),
        jsb_CrossApp_CAPageControl_class,
        js_autogentestbindings_js_CAPageControl_constructor, 0, // constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27 
//  JS_SetPropertyAttributes(cx, global, "CAPageControl", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::CAPageControl> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_CAPageControl_class;
        p->proto = jsb_CrossApp_CAPageControl_prototype;
        p->parentProto = jsb_CrossApp_CAControl_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
}

JSClass  *jsb_CrossApp_CAStepper_class;
JSObject *jsb_CrossApp_CAStepper_prototype;

bool js_autogentestbindings_js_CAStepper_onEnter(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAStepper* cobj = (CrossApp::CAStepper *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAStepper_onEnter : Invalid Native Object");
    if (argc == 0) {
        cobj->onEnter();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAStepper_onEnter : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAStepper_setMinValue(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAStepper* cobj = (CrossApp::CAStepper *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAStepper_setMinValue : Invalid Native Object");
    if (argc == 1) {
        double arg0 = 0;
        ok &= JS::ToNumber( cx, args.get(0), &arg0) && !isnan(arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAStepper_setMinValue : Error processing arguments");
        cobj->setMinValue(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAStepper_setMinValue : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAStepper_ccTouchBegan(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAStepper* cobj = (CrossApp::CAStepper *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAStepper_ccTouchBegan : Invalid Native Object");
    if (argc == 2) {
        CrossApp::CATouch* arg0 = nullptr;
        CrossApp::CAEvent* arg1 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CATouch*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        do {
            if (args.get(1).isNull()) { arg1 = nullptr; break; }
            if (!args.get(1).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(1).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg1 = (CrossApp::CAEvent*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg1, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAStepper_ccTouchBegan : Error processing arguments");
        bool ret = cobj->ccTouchBegan(arg0, arg1);
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAStepper_ccTouchBegan : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_autogentestbindings_js_CAStepper_getBackgroundImageForState(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAStepper* cobj = (CrossApp::CAStepper *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAStepper_getBackgroundImageForState : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAControlState arg0;
        ok &= jsval_to_int32(cx, args.get(0), (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAStepper_getBackgroundImageForState : Error processing arguments");
        CrossApp::CAImage* ret = cobj->getBackgroundImageForState(arg0);
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAImage>(cx, (CrossApp::CAImage*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAStepper_getBackgroundImageForState : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAStepper_setWraps(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAStepper* cobj = (CrossApp::CAStepper *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAStepper_setWraps : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        arg0 = JS::ToBoolean(args.get(0));
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAStepper_setWraps : Error processing arguments");
        cobj->setWraps(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAStepper_setWraps : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAStepper_ccTouchEnded(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAStepper* cobj = (CrossApp::CAStepper *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAStepper_ccTouchEnded : Invalid Native Object");
    if (argc == 2) {
        CrossApp::CATouch* arg0 = nullptr;
        CrossApp::CAEvent* arg1 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CATouch*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        do {
            if (args.get(1).isNull()) { arg1 = nullptr; break; }
            if (!args.get(1).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(1).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg1 = (CrossApp::CAEvent*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg1, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAStepper_ccTouchEnded : Error processing arguments");
        cobj->ccTouchEnded(arg0, arg1);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAStepper_ccTouchEnded : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_autogentestbindings_js_CAStepper_setValue(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAStepper* cobj = (CrossApp::CAStepper *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAStepper_setValue : Invalid Native Object");
    if (argc == 1) {
        double arg0 = 0;
        ok &= JS::ToNumber( cx, args.get(0), &arg0) && !isnan(arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAStepper_setValue : Error processing arguments");
        cobj->setValue(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAStepper_setValue : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAStepper_setTailorImageAtIndex(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAStepper* cobj = (CrossApp::CAStepper *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAStepper_setTailorImageAtIndex : Invalid Native Object");
    if (argc == 1) {
        int arg0 = 0;
        ok &= jsval_to_int32(cx, args.get(0), (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAStepper_setTailorImageAtIndex : Error processing arguments");
        cobj->setTailorImageAtIndex(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAStepper_setTailorImageAtIndex : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAStepper_getContinuous(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAStepper* cobj = (CrossApp::CAStepper *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAStepper_getContinuous : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->getContinuous();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAStepper_getContinuous : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAStepper_getTailorImageAtIndex(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAStepper* cobj = (CrossApp::CAStepper *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAStepper_getTailorImageAtIndex : Invalid Native Object");
    if (argc == 1) {
        int arg0 = 0;
        ok &= jsval_to_int32(cx, args.get(0), (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAStepper_getTailorImageAtIndex : Error processing arguments");
        CrossApp::CAView* ret = cobj->getTailorImageAtIndex(arg0);
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAView>(cx, (CrossApp::CAView*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAStepper_getTailorImageAtIndex : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAStepper_getAutoRepeat(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAStepper* cobj = (CrossApp::CAStepper *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAStepper_getAutoRepeat : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->getAutoRepeat();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAStepper_getAutoRepeat : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAStepper_setContinuous(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAStepper* cobj = (CrossApp::CAStepper *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAStepper_setContinuous : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        arg0 = JS::ToBoolean(args.get(0));
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAStepper_setContinuous : Error processing arguments");
        cobj->setContinuous(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAStepper_setContinuous : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAStepper_getMinValue(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAStepper* cobj = (CrossApp::CAStepper *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAStepper_getMinValue : Invalid Native Object");
    if (argc == 0) {
        double ret = cobj->getMinValue();
        jsval jsret = JSVAL_NULL;
        jsret = DOUBLE_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAStepper_getMinValue : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAStepper_init(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAStepper* cobj = (CrossApp::CAStepper *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAStepper_init : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->init();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAStepper_init : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAStepper_getIncrementImageForState(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAStepper* cobj = (CrossApp::CAStepper *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAStepper_getIncrementImageForState : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAControlState arg0;
        ok &= jsval_to_int32(cx, args.get(0), (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAStepper_getIncrementImageForState : Error processing arguments");
        CrossApp::CAImage* ret = cobj->getIncrementImageForState(arg0);
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAImage>(cx, (CrossApp::CAImage*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAStepper_getIncrementImageForState : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAStepper_setDividerColor(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAStepper* cobj = (CrossApp::CAStepper *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAStepper_setDividerColor : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAColor4B arg0;
        ok &= jsval_to_cacolor4b(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAStepper_setDividerColor : Error processing arguments");
        cobj->setDividerColor(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAStepper_setDividerColor : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAStepper_getDecrementImageForState(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAStepper* cobj = (CrossApp::CAStepper *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAStepper_getDecrementImageForState : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAControlState arg0;
        ok &= jsval_to_int32(cx, args.get(0), (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAStepper_getDecrementImageForState : Error processing arguments");
        CrossApp::CAImage* ret = cobj->getDecrementImageForState(arg0);
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAImage>(cx, (CrossApp::CAImage*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAStepper_getDecrementImageForState : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAStepper_ccTouchMoved(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAStepper* cobj = (CrossApp::CAStepper *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAStepper_ccTouchMoved : Invalid Native Object");
    if (argc == 2) {
        CrossApp::CATouch* arg0 = nullptr;
        CrossApp::CAEvent* arg1 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CATouch*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        do {
            if (args.get(1).isNull()) { arg1 = nullptr; break; }
            if (!args.get(1).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(1).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg1 = (CrossApp::CAEvent*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg1, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAStepper_ccTouchMoved : Error processing arguments");
        cobj->ccTouchMoved(arg0, arg1);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAStepper_ccTouchMoved : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_autogentestbindings_js_CAStepper_getMaxValue(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAStepper* cobj = (CrossApp::CAStepper *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAStepper_getMaxValue : Invalid Native Object");
    if (argc == 0) {
        double ret = cobj->getMaxValue();
        jsval jsret = JSVAL_NULL;
        jsret = DOUBLE_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAStepper_getMaxValue : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAStepper_setDecrementImage(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAStepper* cobj = (CrossApp::CAStepper *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAStepper_setDecrementImage : Invalid Native Object");
    if (argc == 2) {
        CrossApp::CAImage* arg0 = nullptr;
        CrossApp::CAControlState arg1;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAImage*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        ok &= jsval_to_int32(cx, args.get(1), (int32_t *)&arg1);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAStepper_setDecrementImage : Error processing arguments");
        cobj->setDecrementImage(arg0, arg1);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAStepper_setDecrementImage : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_autogentestbindings_js_CAStepper_getWraps(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAStepper* cobj = (CrossApp::CAStepper *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAStepper_getWraps : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->getWraps();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAStepper_getWraps : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAStepper_setStepValue(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAStepper* cobj = (CrossApp::CAStepper *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAStepper_setStepValue : Invalid Native Object");
    if (argc == 1) {
        double arg0 = 0;
        ok &= JS::ToNumber( cx, args.get(0), &arg0) && !isnan(arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAStepper_setStepValue : Error processing arguments");
        cobj->setStepValue(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAStepper_setStepValue : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAStepper_setBackgroundImage(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAStepper* cobj = (CrossApp::CAStepper *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAStepper_setBackgroundImage : Invalid Native Object");
    if (argc == 2) {
        CrossApp::CAImage* arg0 = nullptr;
        CrossApp::CAControlState arg1;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAImage*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        ok &= jsval_to_int32(cx, args.get(1), (int32_t *)&arg1);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAStepper_setBackgroundImage : Error processing arguments");
        cobj->setBackgroundImage(arg0, arg1);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAStepper_setBackgroundImage : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_autogentestbindings_js_CAStepper_setAutoRepeat(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAStepper* cobj = (CrossApp::CAStepper *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAStepper_setAutoRepeat : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        arg0 = JS::ToBoolean(args.get(0));
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAStepper_setAutoRepeat : Error processing arguments");
        cobj->setAutoRepeat(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAStepper_setAutoRepeat : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAStepper_removeAllTargets(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAStepper* cobj = (CrossApp::CAStepper *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAStepper_removeAllTargets : Invalid Native Object");
    if (argc == 0) {
        cobj->removeAllTargets();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAStepper_removeAllTargets : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAStepper_getDividerColor(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAStepper* cobj = (CrossApp::CAStepper *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAStepper_getDividerColor : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CAColor4B ret = cobj->getDividerColor();
        jsval jsret = JSVAL_NULL;
        jsret = cacolor4b_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAStepper_getDividerColor : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAStepper_setTouchEffect(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAStepper* cobj = (CrossApp::CAStepper *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAStepper_setTouchEffect : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        arg0 = JS::ToBoolean(args.get(0));
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAStepper_setTouchEffect : Error processing arguments");
        cobj->setTouchEffect(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAStepper_setTouchEffect : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAStepper_onExit(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAStepper* cobj = (CrossApp::CAStepper *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAStepper_onExit : Invalid Native Object");
    if (argc == 0) {
        cobj->onExit();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAStepper_onExit : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAStepper_setIncrementImage(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAStepper* cobj = (CrossApp::CAStepper *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAStepper_setIncrementImage : Invalid Native Object");
    if (argc == 2) {
        CrossApp::CAImage* arg0 = nullptr;
        CrossApp::CAControlState arg1;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAImage*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        ok &= jsval_to_int32(cx, args.get(1), (int32_t *)&arg1);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAStepper_setIncrementImage : Error processing arguments");
        cobj->setIncrementImage(arg0, arg1);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAStepper_setIncrementImage : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_autogentestbindings_js_CAStepper_getStepValue(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAStepper* cobj = (CrossApp::CAStepper *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAStepper_getStepValue : Invalid Native Object");
    if (argc == 0) {
        double ret = cobj->getStepValue();
        jsval jsret = JSVAL_NULL;
        jsret = DOUBLE_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAStepper_getStepValue : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAStepper_setMaxValue(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAStepper* cobj = (CrossApp::CAStepper *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAStepper_setMaxValue : Invalid Native Object");
    if (argc == 1) {
        double arg0 = 0;
        ok &= JS::ToNumber( cx, args.get(0), &arg0) && !isnan(arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAStepper_setMaxValue : Error processing arguments");
        cobj->setMaxValue(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAStepper_setMaxValue : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAStepper_getValue(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAStepper* cobj = (CrossApp::CAStepper *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAStepper_getValue : Invalid Native Object");
    if (argc == 0) {
        double ret = cobj->getValue();
        jsval jsret = JSVAL_NULL;
        jsret = DOUBLE_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAStepper_getValue : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAStepper_ccTouchCancelled(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAStepper* cobj = (CrossApp::CAStepper *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAStepper_ccTouchCancelled : Invalid Native Object");
    if (argc == 2) {
        CrossApp::CATouch* arg0 = nullptr;
        CrossApp::CAEvent* arg1 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CATouch*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        do {
            if (args.get(1).isNull()) { arg1 = nullptr; break; }
            if (!args.get(1).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(1).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg1 = (CrossApp::CAEvent*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg1, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAStepper_ccTouchCancelled : Error processing arguments");
        cobj->ccTouchCancelled(arg0, arg1);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAStepper_ccTouchCancelled : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_autogentestbindings_js_CAStepper_visit(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAStepper* cobj = (CrossApp::CAStepper *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAStepper_visit : Invalid Native Object");
    if (argc == 0) {
        cobj->visit();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAStepper_visit : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAStepper_getTouchEffect(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAStepper* cobj = (CrossApp::CAStepper *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAStepper_getTouchEffect : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->getTouchEffect();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAStepper_getTouchEffect : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAStepper_create(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 0) {
        CrossApp::CAStepper* ret = CrossApp::CAStepper::create();
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAStepper>(cx, (CrossApp::CAStepper*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    if (argc == 1) {
        CrossApp::CAStepperOrientation arg0;
        ok &= jsval_to_int32(cx, args.get(0), (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAStepper_create : Error processing arguments");
        CrossApp::CAStepper* ret = CrossApp::CAStepper::create(arg0);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAStepper>(cx, (CrossApp::CAStepper*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_autogentestbindings_js_CAStepper_create : wrong number of arguments");
    return false;
}

bool js_autogentestbindings_js_CAStepper_createWithFrame(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        CrossApp::DRect arg0;
        ok &= jsval_to_drect(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAStepper_createWithFrame : Error processing arguments");
        CrossApp::CAStepper* ret = CrossApp::CAStepper::createWithFrame(arg0);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAStepper>(cx, (CrossApp::CAStepper*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    if (argc == 2) {
        CrossApp::DRect arg0;
        CrossApp::CAStepperOrientation arg1;
        ok &= jsval_to_drect(cx, args.get(0), &arg0);
        ok &= jsval_to_int32(cx, args.get(1), (int32_t *)&arg1);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAStepper_createWithFrame : Error processing arguments");
        CrossApp::CAStepper* ret = CrossApp::CAStepper::createWithFrame(arg0, arg1);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAStepper>(cx, (CrossApp::CAStepper*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_autogentestbindings_js_CAStepper_createWithFrame : wrong number of arguments");
    return false;
}

bool js_autogentestbindings_js_CAStepper_createWithLayout(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        CrossApp::DRectLayout arg0;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (const CrossApp::DRectLayout&)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAStepper_createWithLayout : Error processing arguments");
        CrossApp::CAStepper* ret = CrossApp::CAStepper::createWithLayout(arg0);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAStepper>(cx, (CrossApp::CAStepper*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    if (argc == 2) {
        CrossApp::DRectLayout arg0;
        CrossApp::CAStepperOrientation arg1;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (const CrossApp::DRectLayout&)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        ok &= jsval_to_int32(cx, args.get(1), (int32_t *)&arg1);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAStepper_createWithLayout : Error processing arguments");
        CrossApp::CAStepper* ret = CrossApp::CAStepper::createWithLayout(arg0, arg1);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAStepper>(cx, (CrossApp::CAStepper*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_autogentestbindings_js_CAStepper_createWithLayout : wrong number of arguments");
    return false;
}

bool js_autogentestbindings_js_CAStepper_createWithCenter(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        CrossApp::DRect arg0;
        ok &= jsval_to_drect(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAStepper_createWithCenter : Error processing arguments");
        CrossApp::CAStepper* ret = CrossApp::CAStepper::createWithCenter(arg0);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAStepper>(cx, (CrossApp::CAStepper*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    if (argc == 2) {
        CrossApp::DRect arg0;
        CrossApp::CAStepperOrientation arg1;
        ok &= jsval_to_drect(cx, args.get(0), &arg0);
        ok &= jsval_to_int32(cx, args.get(1), (int32_t *)&arg1);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAStepper_createWithCenter : Error processing arguments");
        CrossApp::CAStepper* ret = CrossApp::CAStepper::createWithCenter(arg0, arg1);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAStepper>(cx, (CrossApp::CAStepper*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_autogentestbindings_js_CAStepper_createWithCenter : wrong number of arguments");
    return false;
}

bool js_autogentestbindings_js_CAStepper_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    CrossApp::CAStepper* cobj = new (std::nothrow) CrossApp::CAStepper();
    TypeTest<CrossApp::CAStepper> t;
    js_type_class_t *typeClass = nullptr;
    std::string typeName = t.s_name();
    auto typeMapIter = _js_global_type_map.find(typeName);
    CCAssert(typeMapIter != _js_global_type_map.end(), "Can't find the class type!");
    typeClass = typeMapIter->second;
    CCAssert(typeClass, "The value is null.");
    JS::RootedObject proto(cx, typeClass->proto.get());
    JS::RootedObject parent(cx, typeClass->parentProto.get());
    JS::RootedObject obj(cx, JS_NewObject(cx, typeClass->jsclass, proto, parent));
    args.rval().set(OBJECT_TO_JSVAL(obj));
    // link the native object with the javascript object
    js_proxy_t* p = jsb_new_proxy(cobj, obj);
    if (JS_HasProperty(cx, obj, "_ctor", &ok) && ok)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    return true;
}

extern JSObject *jsb_CrossApp_CAControl_prototype;

void js_CrossApp_CAStepper_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOGINFO("jsbindings: finalizing JS object %p (CAStepper)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::CAStepper *nobj = static_cast<CrossApp::CAStepper *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
void js_register_autogentestbindings_js_CAStepper(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_CAStepper_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_CAStepper_class->name = "CAStepper";
    jsb_CrossApp_CAStepper_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_CAStepper_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_CAStepper_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_CAStepper_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_CAStepper_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_CAStepper_class->resolve = JS_ResolveStub;
    jsb_CrossApp_CAStepper_class->convert = JS_ConvertStub;
    jsb_CrossApp_CAStepper_class->finalize = js_CrossApp_CAStepper_finalize;
    jsb_CrossApp_CAStepper_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("onEnter", js_autogentestbindings_js_CAStepper_onEnter, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setMinValue", js_autogentestbindings_js_CAStepper_setMinValue, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("ccTouchBegan", js_autogentestbindings_js_CAStepper_ccTouchBegan, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getBackgroundImageForState", js_autogentestbindings_js_CAStepper_getBackgroundImageForState, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setWraps", js_autogentestbindings_js_CAStepper_setWraps, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("ccTouchEnded", js_autogentestbindings_js_CAStepper_ccTouchEnded, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setValue", js_autogentestbindings_js_CAStepper_setValue, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setTailorImageAtIndex", js_autogentestbindings_js_CAStepper_setTailorImageAtIndex, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getContinuous", js_autogentestbindings_js_CAStepper_getContinuous, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getTailorImageAtIndex", js_autogentestbindings_js_CAStepper_getTailorImageAtIndex, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getAutoRepeat", js_autogentestbindings_js_CAStepper_getAutoRepeat, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setContinuous", js_autogentestbindings_js_CAStepper_setContinuous, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getMinValue", js_autogentestbindings_js_CAStepper_getMinValue, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("init", js_autogentestbindings_js_CAStepper_init, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getIncrementImageForState", js_autogentestbindings_js_CAStepper_getIncrementImageForState, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setDividerColor", js_autogentestbindings_js_CAStepper_setDividerColor, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getDecrementImageForState", js_autogentestbindings_js_CAStepper_getDecrementImageForState, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("ccTouchMoved", js_autogentestbindings_js_CAStepper_ccTouchMoved, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getMaxValue", js_autogentestbindings_js_CAStepper_getMaxValue, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setDecrementImage", js_autogentestbindings_js_CAStepper_setDecrementImage, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getWraps", js_autogentestbindings_js_CAStepper_getWraps, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setStepValue", js_autogentestbindings_js_CAStepper_setStepValue, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setBackgroundImage", js_autogentestbindings_js_CAStepper_setBackgroundImage, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setAutoRepeat", js_autogentestbindings_js_CAStepper_setAutoRepeat, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("removeAllTargets", js_autogentestbindings_js_CAStepper_removeAllTargets, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getDividerColor", js_autogentestbindings_js_CAStepper_getDividerColor, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setTouchEffect", js_autogentestbindings_js_CAStepper_setTouchEffect, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("onExit", js_autogentestbindings_js_CAStepper_onExit, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setIncrementImage", js_autogentestbindings_js_CAStepper_setIncrementImage, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getStepValue", js_autogentestbindings_js_CAStepper_getStepValue, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setMaxValue", js_autogentestbindings_js_CAStepper_setMaxValue, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getValue", js_autogentestbindings_js_CAStepper_getValue, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("ccTouchCancelled", js_autogentestbindings_js_CAStepper_ccTouchCancelled, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("visit", js_autogentestbindings_js_CAStepper_visit, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getTouchEffect", js_autogentestbindings_js_CAStepper_getTouchEffect, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    static JSFunctionSpec st_funcs[] = {
        JS_FN("create", js_autogentestbindings_js_CAStepper_create, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("createWithFrame", js_autogentestbindings_js_CAStepper_createWithFrame, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("createWithLayout", js_autogentestbindings_js_CAStepper_createWithLayout, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("createWithCenter", js_autogentestbindings_js_CAStepper_createWithCenter, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    jsb_CrossApp_CAStepper_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_CAControl_prototype),
        jsb_CrossApp_CAStepper_class,
        js_autogentestbindings_js_CAStepper_constructor, 0, // constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27 
//  JS_SetPropertyAttributes(cx, global, "CAStepper", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::CAStepper> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_CAStepper_class;
        p->proto = jsb_CrossApp_CAStepper_prototype;
        p->parentProto = jsb_CrossApp_CAControl_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
}

JSClass  *jsb_CrossApp_CAActivityIndicatorView_class;
JSObject *jsb_CrossApp_CAActivityIndicatorView_prototype;

bool js_autogentestbindings_js_CAActivityIndicatorView_setCycleTime(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAActivityIndicatorView* cobj = (CrossApp::CAActivityIndicatorView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAActivityIndicatorView_setCycleTime : Invalid Native Object");
    if (argc == 1) {
        double arg0 = 0;
        ok &= JS::ToNumber( cx, args.get(0), &arg0) && !isnan(arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAActivityIndicatorView_setCycleTime : Error processing arguments");
        cobj->setCycleTime(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAActivityIndicatorView_setCycleTime : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAActivityIndicatorView_draw(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAActivityIndicatorView* cobj = (CrossApp::CAActivityIndicatorView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAActivityIndicatorView_draw : Invalid Native Object");
    if (argc == 0) {
        cobj->draw();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAActivityIndicatorView_draw : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAActivityIndicatorView_onEnter(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAActivityIndicatorView* cobj = (CrossApp::CAActivityIndicatorView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAActivityIndicatorView_onEnter : Invalid Native Object");
    if (argc == 0) {
        cobj->onEnter();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAActivityIndicatorView_onEnter : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAActivityIndicatorView_onExit(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAActivityIndicatorView* cobj = (CrossApp::CAActivityIndicatorView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAActivityIndicatorView_onExit : Invalid Native Object");
    if (argc == 0) {
        cobj->onExit();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAActivityIndicatorView_onExit : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAActivityIndicatorView_getActivityBackView(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAActivityIndicatorView* cobj = (CrossApp::CAActivityIndicatorView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAActivityIndicatorView_getActivityBackView : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CAView* ret = cobj->getActivityBackView();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAView>(cx, (CrossApp::CAView*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAActivityIndicatorView_getActivityBackView : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAActivityIndicatorView_getActivityIndicatorView(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAActivityIndicatorView* cobj = (CrossApp::CAActivityIndicatorView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAActivityIndicatorView_getActivityIndicatorView : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CAView* ret = cobj->getActivityIndicatorView();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAView>(cx, (CrossApp::CAView*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAActivityIndicatorView_getActivityIndicatorView : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAActivityIndicatorView_setTimesOneCycle(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAActivityIndicatorView* cobj = (CrossApp::CAActivityIndicatorView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAActivityIndicatorView_setTimesOneCycle : Invalid Native Object");
    if (argc == 1) {
        double arg0 = 0;
        ok &= JS::ToNumber( cx, args.get(0), &arg0) && !isnan(arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAActivityIndicatorView_setTimesOneCycle : Error processing arguments");
        cobj->setTimesOneCycle(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAActivityIndicatorView_setTimesOneCycle : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAActivityIndicatorView_getColor(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAActivityIndicatorView* cobj = (CrossApp::CAActivityIndicatorView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAActivityIndicatorView_getColor : Invalid Native Object");
    if (argc == 0) {
        const CrossApp::CAColor4B& ret = cobj->getColor();
        jsval jsret = JSVAL_NULL;
        jsret = cacolor4b_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAActivityIndicatorView_getColor : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAActivityIndicatorView_visit(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAActivityIndicatorView* cobj = (CrossApp::CAActivityIndicatorView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAActivityIndicatorView_visit : Invalid Native Object");
    if (argc == 0) {
        cobj->visit();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAActivityIndicatorView_visit : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAActivityIndicatorView_setActivityBackView(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAActivityIndicatorView* cobj = (CrossApp::CAActivityIndicatorView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAActivityIndicatorView_setActivityBackView : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAView* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAView*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAActivityIndicatorView_setActivityBackView : Error processing arguments");
        cobj->setActivityBackView(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAActivityIndicatorView_setActivityBackView : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAActivityIndicatorView_setStyle(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAActivityIndicatorView* cobj = (CrossApp::CAActivityIndicatorView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAActivityIndicatorView_setStyle : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAActivityIndicatorViewStyle arg0;
        ok &= jsval_to_int32(cx, args.get(0), (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAActivityIndicatorView_setStyle : Error processing arguments");
        cobj->setStyle(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAActivityIndicatorView_setStyle : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAActivityIndicatorView_setLoadingMinTime(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAActivityIndicatorView* cobj = (CrossApp::CAActivityIndicatorView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAActivityIndicatorView_setLoadingMinTime : Invalid Native Object");
    if (argc == 1) {
        double arg0 = 0;
        ok &= JS::ToNumber( cx, args.get(0), &arg0) && !isnan(arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAActivityIndicatorView_setLoadingMinTime : Error processing arguments");
        cobj->setLoadingMinTime(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAActivityIndicatorView_setLoadingMinTime : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAActivityIndicatorView_init(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAActivityIndicatorView* cobj = (CrossApp::CAActivityIndicatorView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAActivityIndicatorView_init : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->init();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAActivityIndicatorView_init : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAActivityIndicatorView_isAnimating(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAActivityIndicatorView* cobj = (CrossApp::CAActivityIndicatorView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAActivityIndicatorView_isAnimating : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->isAnimating();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAActivityIndicatorView_isAnimating : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAActivityIndicatorView_setActivityIndicatorView(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAActivityIndicatorView* cobj = (CrossApp::CAActivityIndicatorView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAActivityIndicatorView_setActivityIndicatorView : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAView* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAView*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAActivityIndicatorView_setActivityIndicatorView : Error processing arguments");
        cobj->setActivityIndicatorView(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAActivityIndicatorView_setActivityIndicatorView : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAActivityIndicatorView_getLoadingMinTime(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAActivityIndicatorView* cobj = (CrossApp::CAActivityIndicatorView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAActivityIndicatorView_getLoadingMinTime : Invalid Native Object");
    if (argc == 0) {
        double ret = cobj->getLoadingMinTime();
        jsval jsret = JSVAL_NULL;
        jsret = DOUBLE_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAActivityIndicatorView_getLoadingMinTime : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAActivityIndicatorView_startAnimating(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAActivityIndicatorView* cobj = (CrossApp::CAActivityIndicatorView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAActivityIndicatorView_startAnimating : Invalid Native Object");
    if (argc == 0) {
        cobj->startAnimating();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAActivityIndicatorView_startAnimating : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAActivityIndicatorView_stopAnimating(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAActivityIndicatorView* cobj = (CrossApp::CAActivityIndicatorView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAActivityIndicatorView_stopAnimating : Invalid Native Object");
    if (argc == 0) {
        cobj->stopAnimating();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAActivityIndicatorView_stopAnimating : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAActivityIndicatorView_create(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    if (argc == 0) {
        CrossApp::CAActivityIndicatorView* ret = CrossApp::CAActivityIndicatorView::create();
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAActivityIndicatorView>(cx, (CrossApp::CAActivityIndicatorView*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_autogentestbindings_js_CAActivityIndicatorView_create : wrong number of arguments");
    return false;
}

bool js_autogentestbindings_js_CAActivityIndicatorView_createWithFrame(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        CrossApp::DRect arg0;
        ok &= jsval_to_drect(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAActivityIndicatorView_createWithFrame : Error processing arguments");
        CrossApp::CAActivityIndicatorView* ret = CrossApp::CAActivityIndicatorView::createWithFrame(arg0);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAActivityIndicatorView>(cx, (CrossApp::CAActivityIndicatorView*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_autogentestbindings_js_CAActivityIndicatorView_createWithFrame : wrong number of arguments");
    return false;
}

bool js_autogentestbindings_js_CAActivityIndicatorView_createWithLayout(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        CrossApp::DRectLayout arg0;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (const CrossApp::DRectLayout&)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAActivityIndicatorView_createWithLayout : Error processing arguments");
        CrossApp::CAActivityIndicatorView* ret = CrossApp::CAActivityIndicatorView::createWithLayout(arg0);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAActivityIndicatorView>(cx, (CrossApp::CAActivityIndicatorView*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_autogentestbindings_js_CAActivityIndicatorView_createWithLayout : wrong number of arguments");
    return false;
}

bool js_autogentestbindings_js_CAActivityIndicatorView_createWithCenter(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        CrossApp::DRect arg0;
        ok &= jsval_to_drect(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAActivityIndicatorView_createWithCenter : Error processing arguments");
        CrossApp::CAActivityIndicatorView* ret = CrossApp::CAActivityIndicatorView::createWithCenter(arg0);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAActivityIndicatorView>(cx, (CrossApp::CAActivityIndicatorView*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_autogentestbindings_js_CAActivityIndicatorView_createWithCenter : wrong number of arguments");
    return false;
}

bool js_autogentestbindings_js_CAActivityIndicatorView_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    CrossApp::CAActivityIndicatorView* cobj = new (std::nothrow) CrossApp::CAActivityIndicatorView();
    TypeTest<CrossApp::CAActivityIndicatorView> t;
    js_type_class_t *typeClass = nullptr;
    std::string typeName = t.s_name();
    auto typeMapIter = _js_global_type_map.find(typeName);
    CCAssert(typeMapIter != _js_global_type_map.end(), "Can't find the class type!");
    typeClass = typeMapIter->second;
    CCAssert(typeClass, "The value is null.");
    JS::RootedObject proto(cx, typeClass->proto.get());
    JS::RootedObject parent(cx, typeClass->parentProto.get());
    JS::RootedObject obj(cx, JS_NewObject(cx, typeClass->jsclass, proto, parent));
    args.rval().set(OBJECT_TO_JSVAL(obj));
    // link the native object with the javascript object
    js_proxy_t* p = jsb_new_proxy(cobj, obj);
    if (JS_HasProperty(cx, obj, "_ctor", &ok) && ok)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    return true;
}

extern JSObject *jsb_CrossApp_CAView_prototype;

void js_CrossApp_CAActivityIndicatorView_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOGINFO("jsbindings: finalizing JS object %p (CAActivityIndicatorView)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::CAActivityIndicatorView *nobj = static_cast<CrossApp::CAActivityIndicatorView *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
void js_register_autogentestbindings_js_CAActivityIndicatorView(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_CAActivityIndicatorView_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_CAActivityIndicatorView_class->name = "CAActivityIndicatorView";
    jsb_CrossApp_CAActivityIndicatorView_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_CAActivityIndicatorView_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_CAActivityIndicatorView_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_CAActivityIndicatorView_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_CAActivityIndicatorView_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_CAActivityIndicatorView_class->resolve = JS_ResolveStub;
    jsb_CrossApp_CAActivityIndicatorView_class->convert = JS_ConvertStub;
    jsb_CrossApp_CAActivityIndicatorView_class->finalize = js_CrossApp_CAActivityIndicatorView_finalize;
    jsb_CrossApp_CAActivityIndicatorView_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("setCycleTime", js_autogentestbindings_js_CAActivityIndicatorView_setCycleTime, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("draw", js_autogentestbindings_js_CAActivityIndicatorView_draw, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("onEnter", js_autogentestbindings_js_CAActivityIndicatorView_onEnter, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("onExit", js_autogentestbindings_js_CAActivityIndicatorView_onExit, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getActivityBackView", js_autogentestbindings_js_CAActivityIndicatorView_getActivityBackView, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getActivityIndicatorView", js_autogentestbindings_js_CAActivityIndicatorView_getActivityIndicatorView, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setTimesOneCycle", js_autogentestbindings_js_CAActivityIndicatorView_setTimesOneCycle, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getColor", js_autogentestbindings_js_CAActivityIndicatorView_getColor, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("visit", js_autogentestbindings_js_CAActivityIndicatorView_visit, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setActivityBackView", js_autogentestbindings_js_CAActivityIndicatorView_setActivityBackView, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setStyle", js_autogentestbindings_js_CAActivityIndicatorView_setStyle, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setLoadingMinTime", js_autogentestbindings_js_CAActivityIndicatorView_setLoadingMinTime, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("init", js_autogentestbindings_js_CAActivityIndicatorView_init, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isAnimating", js_autogentestbindings_js_CAActivityIndicatorView_isAnimating, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setActivityIndicatorView", js_autogentestbindings_js_CAActivityIndicatorView_setActivityIndicatorView, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getLoadingMinTime", js_autogentestbindings_js_CAActivityIndicatorView_getLoadingMinTime, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("startAnimating", js_autogentestbindings_js_CAActivityIndicatorView_startAnimating, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("stopAnimating", js_autogentestbindings_js_CAActivityIndicatorView_stopAnimating, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    static JSFunctionSpec st_funcs[] = {
        JS_FN("create", js_autogentestbindings_js_CAActivityIndicatorView_create, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("createWithFrame", js_autogentestbindings_js_CAActivityIndicatorView_createWithFrame, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("createWithLayout", js_autogentestbindings_js_CAActivityIndicatorView_createWithLayout, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("createWithCenter", js_autogentestbindings_js_CAActivityIndicatorView_createWithCenter, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    jsb_CrossApp_CAActivityIndicatorView_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_CAView_prototype),
        jsb_CrossApp_CAActivityIndicatorView_class,
        js_autogentestbindings_js_CAActivityIndicatorView_constructor, 0, // constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27 
//  JS_SetPropertyAttributes(cx, global, "CAActivityIndicatorView", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::CAActivityIndicatorView> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_CAActivityIndicatorView_class;
        p->proto = jsb_CrossApp_CAActivityIndicatorView_prototype;
        p->parentProto = jsb_CrossApp_CAView_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
}

JSClass  *jsb_CrossApp_CAPullToRefreshView_class;
JSObject *jsb_CrossApp_CAPullToRefreshView_prototype;

bool js_autogentestbindings_js_CAPullToRefreshView_getLoadingView(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAPullToRefreshView* cobj = (CrossApp::CAPullToRefreshView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAPullToRefreshView_getLoadingView : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CAActivityIndicatorView* ret = cobj->getLoadingView();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAActivityIndicatorView>(cx, (CrossApp::CAActivityIndicatorView*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAPullToRefreshView_getLoadingView : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAPullToRefreshView_setPullToRefreshText(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAPullToRefreshView* cobj = (CrossApp::CAPullToRefreshView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAPullToRefreshView_setPullToRefreshText : Invalid Native Object");
    if (argc == 1) {
        std::string arg0;
        ok &= jsval_to_std_string(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAPullToRefreshView_setPullToRefreshText : Error processing arguments");
        cobj->setPullToRefreshText(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAPullToRefreshView_setPullToRefreshText : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAPullToRefreshView_getPullToRefreshType(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAPullToRefreshView* cobj = (CrossApp::CAPullToRefreshView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAPullToRefreshView_getPullToRefreshType : Invalid Native Object");
    if (argc == 0) {
        int ret = (int)cobj->getPullToRefreshType();
        jsval jsret = JSVAL_NULL;
        jsret = int32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAPullToRefreshView_getPullToRefreshType : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAPullToRefreshView_getRefreshingText(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAPullToRefreshView* cobj = (CrossApp::CAPullToRefreshView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAPullToRefreshView_getRefreshingText : Invalid Native Object");
    if (argc == 0) {
        const std::string& ret = cobj->getRefreshingText();
        jsval jsret = JSVAL_NULL;
        jsret = std_string_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAPullToRefreshView_getRefreshingText : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAPullToRefreshView_setLoadingView(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAPullToRefreshView* cobj = (CrossApp::CAPullToRefreshView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAPullToRefreshView_setLoadingView : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAActivityIndicatorView* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAActivityIndicatorView*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAPullToRefreshView_setLoadingView : Error processing arguments");
        cobj->setLoadingView(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAPullToRefreshView_setLoadingView : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAPullToRefreshView_setRefreshingText(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAPullToRefreshView* cobj = (CrossApp::CAPullToRefreshView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAPullToRefreshView_setRefreshingText : Invalid Native Object");
    if (argc == 1) {
        std::string arg0;
        ok &= jsval_to_std_string(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAPullToRefreshView_setRefreshingText : Error processing arguments");
        cobj->setRefreshingText(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAPullToRefreshView_setRefreshingText : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAPullToRefreshView_getLabelColor(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAPullToRefreshView* cobj = (CrossApp::CAPullToRefreshView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAPullToRefreshView_getLabelColor : Invalid Native Object");
    if (argc == 0) {
        const CrossApp::CAColor4B& ret = cobj->getLabelColor();
        jsval jsret = JSVAL_NULL;
        jsret = cacolor4b_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAPullToRefreshView_getLabelColor : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAPullToRefreshView_getPullToImage(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAPullToRefreshView* cobj = (CrossApp::CAPullToRefreshView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAPullToRefreshView_getPullToImage : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CAImage* ret = cobj->getPullToImage();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAImage>(cx, (CrossApp::CAImage*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAPullToRefreshView_getPullToImage : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAPullToRefreshView_init(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAPullToRefreshView* cobj = (CrossApp::CAPullToRefreshView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAPullToRefreshView_init : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->init();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAPullToRefreshView_init : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAPullToRefreshView_getReleaseToRefreshText(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAPullToRefreshView* cobj = (CrossApp::CAPullToRefreshView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAPullToRefreshView_getReleaseToRefreshText : Invalid Native Object");
    if (argc == 0) {
        const std::string& ret = cobj->getReleaseToRefreshText();
        jsval jsret = JSVAL_NULL;
        jsret = std_string_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAPullToRefreshView_getReleaseToRefreshText : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAPullToRefreshView_setLayoutLinearType(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAPullToRefreshView* cobj = (CrossApp::CAPullToRefreshView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAPullToRefreshView_setLayoutLinearType : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CALayoutLinearType arg0;
        ok &= jsval_to_int32(cx, args.get(0), (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAPullToRefreshView_setLayoutLinearType : Error processing arguments");
        cobj->setLayoutLinearType(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAPullToRefreshView_setLayoutLinearType : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAPullToRefreshView_setLabelColor(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAPullToRefreshView* cobj = (CrossApp::CAPullToRefreshView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAPullToRefreshView_setLabelColor : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAColor4B arg0;
        ok &= jsval_to_cacolor4b(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAPullToRefreshView_setLabelColor : Error processing arguments");
        cobj->setLabelColor(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAPullToRefreshView_setLabelColor : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAPullToRefreshView_setReleaseToRefreshText(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAPullToRefreshView* cobj = (CrossApp::CAPullToRefreshView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAPullToRefreshView_setReleaseToRefreshText : Invalid Native Object");
    if (argc == 1) {
        std::string arg0;
        ok &= jsval_to_std_string(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAPullToRefreshView_setReleaseToRefreshText : Error processing arguments");
        cobj->setReleaseToRefreshText(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAPullToRefreshView_setReleaseToRefreshText : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAPullToRefreshView_getLayoutLinearType(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAPullToRefreshView* cobj = (CrossApp::CAPullToRefreshView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAPullToRefreshView_getLayoutLinearType : Invalid Native Object");
    if (argc == 0) {
        int ret = (int)cobj->getLayoutLinearType();
        jsval jsret = JSVAL_NULL;
        jsret = int32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAPullToRefreshView_getLayoutLinearType : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAPullToRefreshView_setPullToImage(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAPullToRefreshView* cobj = (CrossApp::CAPullToRefreshView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAPullToRefreshView_setPullToImage : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAImage* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAImage*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAPullToRefreshView_setPullToImage : Error processing arguments");
        cobj->setPullToImage(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAPullToRefreshView_setPullToImage : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAPullToRefreshView_getPullToRefreshText(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAPullToRefreshView* cobj = (CrossApp::CAPullToRefreshView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAPullToRefreshView_getPullToRefreshText : Invalid Native Object");
    if (argc == 0) {
        const std::string& ret = cobj->getPullToRefreshText();
        jsval jsret = JSVAL_NULL;
        jsret = std_string_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAPullToRefreshView_getPullToRefreshText : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAPullToRefreshView_create(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        CrossApp::CAPullToRefreshView::CAPullToRefreshType arg0;
        ok &= jsval_to_int32(cx, args.get(0), (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAPullToRefreshView_create : Error processing arguments");
        CrossApp::CAPullToRefreshView* ret = CrossApp::CAPullToRefreshView::create(arg0);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAPullToRefreshView>(cx, (CrossApp::CAPullToRefreshView*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_autogentestbindings_js_CAPullToRefreshView_create : wrong number of arguments");
    return false;
}

bool js_autogentestbindings_js_CAPullToRefreshView_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    CrossApp::CAPullToRefreshView::CAPullToRefreshType arg0;
    ok &= jsval_to_int32(cx, args.get(0), (int32_t *)&arg0);
    JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAPullToRefreshView_constructor : Error processing arguments");
    CrossApp::CAPullToRefreshView* cobj = new (std::nothrow) CrossApp::CAPullToRefreshView(arg0);
    TypeTest<CrossApp::CAPullToRefreshView> t;
    js_type_class_t *typeClass = nullptr;
    std::string typeName = t.s_name();
    auto typeMapIter = _js_global_type_map.find(typeName);
    CCAssert(typeMapIter != _js_global_type_map.end(), "Can't find the class type!");
    typeClass = typeMapIter->second;
    CCAssert(typeClass, "The value is null.");
    JS::RootedObject proto(cx, typeClass->proto.get());
    JS::RootedObject parent(cx, typeClass->parentProto.get());
    JS::RootedObject obj(cx, JS_NewObject(cx, typeClass->jsclass, proto, parent));
    args.rval().set(OBJECT_TO_JSVAL(obj));
    // link the native object with the javascript object
    js_proxy_t* p = jsb_new_proxy(cobj, obj);
    if (JS_HasProperty(cx, obj, "_ctor", &ok) && ok)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    return true;
}

extern JSObject *jsb_CrossApp_CAView_prototype;

void js_CrossApp_CAPullToRefreshView_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOGINFO("jsbindings: finalizing JS object %p (CAPullToRefreshView)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::CAPullToRefreshView *nobj = static_cast<CrossApp::CAPullToRefreshView *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
void js_register_autogentestbindings_js_CAPullToRefreshView(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_CAPullToRefreshView_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_CAPullToRefreshView_class->name = "CAPullToRefreshView";
    jsb_CrossApp_CAPullToRefreshView_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_CAPullToRefreshView_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_CAPullToRefreshView_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_CAPullToRefreshView_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_CAPullToRefreshView_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_CAPullToRefreshView_class->resolve = JS_ResolveStub;
    jsb_CrossApp_CAPullToRefreshView_class->convert = JS_ConvertStub;
    jsb_CrossApp_CAPullToRefreshView_class->finalize = js_CrossApp_CAPullToRefreshView_finalize;
    jsb_CrossApp_CAPullToRefreshView_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("getLoadingView", js_autogentestbindings_js_CAPullToRefreshView_getLoadingView, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setPullToRefreshText", js_autogentestbindings_js_CAPullToRefreshView_setPullToRefreshText, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getPullToRefreshType", js_autogentestbindings_js_CAPullToRefreshView_getPullToRefreshType, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getRefreshingText", js_autogentestbindings_js_CAPullToRefreshView_getRefreshingText, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setLoadingView", js_autogentestbindings_js_CAPullToRefreshView_setLoadingView, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setRefreshingText", js_autogentestbindings_js_CAPullToRefreshView_setRefreshingText, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getLabelColor", js_autogentestbindings_js_CAPullToRefreshView_getLabelColor, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getPullToImage", js_autogentestbindings_js_CAPullToRefreshView_getPullToImage, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("init", js_autogentestbindings_js_CAPullToRefreshView_init, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getReleaseToRefreshText", js_autogentestbindings_js_CAPullToRefreshView_getReleaseToRefreshText, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setLayoutLinearType", js_autogentestbindings_js_CAPullToRefreshView_setLayoutLinearType, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setLabelColor", js_autogentestbindings_js_CAPullToRefreshView_setLabelColor, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setReleaseToRefreshText", js_autogentestbindings_js_CAPullToRefreshView_setReleaseToRefreshText, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getLayoutLinearType", js_autogentestbindings_js_CAPullToRefreshView_getLayoutLinearType, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setPullToImage", js_autogentestbindings_js_CAPullToRefreshView_setPullToImage, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getPullToRefreshText", js_autogentestbindings_js_CAPullToRefreshView_getPullToRefreshText, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    static JSFunctionSpec st_funcs[] = {
        JS_FN("create", js_autogentestbindings_js_CAPullToRefreshView_create, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    jsb_CrossApp_CAPullToRefreshView_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_CAView_prototype),
        jsb_CrossApp_CAPullToRefreshView_class,
        js_autogentestbindings_js_CAPullToRefreshView_constructor, 0, // constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27 
//  JS_SetPropertyAttributes(cx, global, "CAPullToRefreshView", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::CAPullToRefreshView> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_CAPullToRefreshView_class;
        p->proto = jsb_CrossApp_CAPullToRefreshView_prototype;
        p->parentProto = jsb_CrossApp_CAView_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
}

JSClass  *jsb_CrossApp_CAScrollViewDelegate_class;
JSObject *jsb_CrossApp_CAScrollViewDelegate_prototype;

bool js_autogentestbindings_js_CAScrollViewDelegate_scrollViewDidMoved(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAScrollViewDelegate* cobj = (CrossApp::CAScrollViewDelegate *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAScrollViewDelegate_scrollViewDidMoved : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAScrollView* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAScrollView*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAScrollViewDelegate_scrollViewDidMoved : Error processing arguments");
        cobj->scrollViewDidMoved(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAScrollViewDelegate_scrollViewDidMoved : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAScrollViewDelegate_scrollViewDidEndDragging(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAScrollViewDelegate* cobj = (CrossApp::CAScrollViewDelegate *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAScrollViewDelegate_scrollViewDidEndDragging : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAScrollView* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAScrollView*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAScrollViewDelegate_scrollViewDidEndDragging : Error processing arguments");
        cobj->scrollViewDidEndDragging(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAScrollViewDelegate_scrollViewDidEndDragging : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAScrollViewDelegate_scrollViewStopMoved(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAScrollViewDelegate* cobj = (CrossApp::CAScrollViewDelegate *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAScrollViewDelegate_scrollViewStopMoved : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAScrollView* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAScrollView*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAScrollViewDelegate_scrollViewStopMoved : Error processing arguments");
        cobj->scrollViewStopMoved(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAScrollViewDelegate_scrollViewStopMoved : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAScrollViewDelegate_scrollViewFooterBeginRefreshing(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAScrollViewDelegate* cobj = (CrossApp::CAScrollViewDelegate *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAScrollViewDelegate_scrollViewFooterBeginRefreshing : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAScrollView* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAScrollView*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAScrollViewDelegate_scrollViewFooterBeginRefreshing : Error processing arguments");
        cobj->scrollViewFooterBeginRefreshing(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAScrollViewDelegate_scrollViewFooterBeginRefreshing : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAScrollViewDelegate_scrollViewTouchUpWithoutMoved(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAScrollViewDelegate* cobj = (CrossApp::CAScrollViewDelegate *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAScrollViewDelegate_scrollViewTouchUpWithoutMoved : Invalid Native Object");
    if (argc == 2) {
        CrossApp::CAScrollView* arg0 = nullptr;
        CrossApp::DPoint arg1 = 0;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAScrollView*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        ok &= jsval_to_dpoint(cx, args.get(1), &arg1);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAScrollViewDelegate_scrollViewTouchUpWithoutMoved : Error processing arguments");
        cobj->scrollViewTouchUpWithoutMoved(arg0, arg1);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAScrollViewDelegate_scrollViewTouchUpWithoutMoved : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_autogentestbindings_js_CAScrollViewDelegate_scrollViewHeaderBeginRefreshing(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAScrollViewDelegate* cobj = (CrossApp::CAScrollViewDelegate *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAScrollViewDelegate_scrollViewHeaderBeginRefreshing : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAScrollView* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAScrollView*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAScrollViewDelegate_scrollViewHeaderBeginRefreshing : Error processing arguments");
        cobj->scrollViewHeaderBeginRefreshing(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAScrollViewDelegate_scrollViewHeaderBeginRefreshing : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAScrollViewDelegate_scrollViewDidZoom(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAScrollViewDelegate* cobj = (CrossApp::CAScrollViewDelegate *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAScrollViewDelegate_scrollViewDidZoom : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAScrollView* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAScrollView*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAScrollViewDelegate_scrollViewDidZoom : Error processing arguments");
        cobj->scrollViewDidZoom(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAScrollViewDelegate_scrollViewDidZoom : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAScrollViewDelegate_scrollViewDragging(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAScrollViewDelegate* cobj = (CrossApp::CAScrollViewDelegate *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAScrollViewDelegate_scrollViewDragging : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAScrollView* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAScrollView*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAScrollViewDelegate_scrollViewDragging : Error processing arguments");
        cobj->scrollViewDragging(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAScrollViewDelegate_scrollViewDragging : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAScrollViewDelegate_scrollViewWillBeginDragging(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAScrollViewDelegate* cobj = (CrossApp::CAScrollViewDelegate *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAScrollViewDelegate_scrollViewWillBeginDragging : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAScrollView* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAScrollView*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAScrollViewDelegate_scrollViewWillBeginDragging : Error processing arguments");
        cobj->scrollViewWillBeginDragging(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAScrollViewDelegate_scrollViewWillBeginDragging : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}

void js_CrossApp_CAScrollViewDelegate_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOGINFO("jsbindings: finalizing JS object %p (CAScrollViewDelegate)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::CAScrollViewDelegate *nobj = static_cast<CrossApp::CAScrollViewDelegate *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
void js_register_autogentestbindings_js_CAScrollViewDelegate(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_CAScrollViewDelegate_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_CAScrollViewDelegate_class->name = "CAScrollViewDelegate";
    jsb_CrossApp_CAScrollViewDelegate_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_CAScrollViewDelegate_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_CAScrollViewDelegate_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_CAScrollViewDelegate_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_CAScrollViewDelegate_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_CAScrollViewDelegate_class->resolve = JS_ResolveStub;
    jsb_CrossApp_CAScrollViewDelegate_class->convert = JS_ConvertStub;
    jsb_CrossApp_CAScrollViewDelegate_class->finalize = js_CrossApp_CAScrollViewDelegate_finalize;
    jsb_CrossApp_CAScrollViewDelegate_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("scrollViewDidMoved", js_autogentestbindings_js_CAScrollViewDelegate_scrollViewDidMoved, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("scrollViewDidEndDragging", js_autogentestbindings_js_CAScrollViewDelegate_scrollViewDidEndDragging, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("scrollViewStopMoved", js_autogentestbindings_js_CAScrollViewDelegate_scrollViewStopMoved, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("scrollViewFooterBeginRefreshing", js_autogentestbindings_js_CAScrollViewDelegate_scrollViewFooterBeginRefreshing, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("scrollViewTouchUpWithoutMoved", js_autogentestbindings_js_CAScrollViewDelegate_scrollViewTouchUpWithoutMoved, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("scrollViewHeaderBeginRefreshing", js_autogentestbindings_js_CAScrollViewDelegate_scrollViewHeaderBeginRefreshing, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("scrollViewDidZoom", js_autogentestbindings_js_CAScrollViewDelegate_scrollViewDidZoom, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("scrollViewDragging", js_autogentestbindings_js_CAScrollViewDelegate_scrollViewDragging, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("scrollViewWillBeginDragging", js_autogentestbindings_js_CAScrollViewDelegate_scrollViewWillBeginDragging, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    JSFunctionSpec *st_funcs = NULL;

    jsb_CrossApp_CAScrollViewDelegate_prototype = JS_InitClass(
        cx, global,
        JS::NullPtr(), // parent proto
        jsb_CrossApp_CAScrollViewDelegate_class,
        dummy_constructor<CrossApp::CAScrollViewDelegate>, 0, // no constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27 
//  JS_SetPropertyAttributes(cx, global, "CAScrollViewDelegate", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::CAScrollViewDelegate> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_CAScrollViewDelegate_class;
        p->proto = jsb_CrossApp_CAScrollViewDelegate_prototype;
        p->parentProto = NULL;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
}

JSClass  *jsb_CrossApp_CAScrollView_class;
JSObject *jsb_CrossApp_CAScrollView_prototype;

bool js_autogentestbindings_js_CAScrollView_mouseScrollWheel(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAScrollView* cobj = (CrossApp::CAScrollView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAScrollView_mouseScrollWheel : Invalid Native Object");
    if (argc == 4) {
        CrossApp::CATouch* arg0 = nullptr;
        double arg1 = 0;
        double arg2 = 0;
        CrossApp::CAEvent* arg3 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CATouch*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        ok &= JS::ToNumber( cx, args.get(1), &arg1) && !isnan(arg1);
        ok &= JS::ToNumber( cx, args.get(2), &arg2) && !isnan(arg2);
        do {
            if (args.get(3).isNull()) { arg3 = nullptr; break; }
            if (!args.get(3).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(3).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg3 = (CrossApp::CAEvent*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg3, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAScrollView_mouseScrollWheel : Error processing arguments");
        cobj->mouseScrollWheel(arg0, arg1, arg2, arg3);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAScrollView_mouseScrollWheel : wrong number of arguments: %d, was expecting %d", argc, 4);
    return false;
}
bool js_autogentestbindings_js_CAScrollView_setBounceVertical(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAScrollView* cobj = (CrossApp::CAScrollView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAScrollView_setBounceVertical : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        arg0 = JS::ToBoolean(args.get(0));
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAScrollView_setBounceVertical : Error processing arguments");
        cobj->setBounceVertical(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAScrollView_setBounceVertical : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAScrollView_removeAllSubviews(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAScrollView* cobj = (CrossApp::CAScrollView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAScrollView_removeAllSubviews : Invalid Native Object");
    if (argc == 0) {
        cobj->removeAllSubviews();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAScrollView_removeAllSubviews : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAScrollView_isTracking(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAScrollView* cobj = (CrossApp::CAScrollView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAScrollView_isTracking : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->isTracking();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAScrollView_isTracking : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAScrollView_startDeaccelerateScroll(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAScrollView* cobj = (CrossApp::CAScrollView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAScrollView_startDeaccelerateScroll : Invalid Native Object");
    if (argc == 0) {
        cobj->startDeaccelerateScroll();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAScrollView_startDeaccelerateScroll : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAScrollView_isBounceVertical(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAScrollView* cobj = (CrossApp::CAScrollView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAScrollView_isBounceVertical : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->isBounceVertical();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAScrollView_isBounceVertical : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAScrollView_isShowsScrollIndicators(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAScrollView* cobj = (CrossApp::CAScrollView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAScrollView_isShowsScrollIndicators : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->isShowsScrollIndicators();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAScrollView_isShowsScrollIndicators : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAScrollView_setShowsHorizontalScrollIndicator(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAScrollView* cobj = (CrossApp::CAScrollView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAScrollView_setShowsHorizontalScrollIndicator : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        arg0 = JS::ToBoolean(args.get(0));
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAScrollView_setShowsHorizontalScrollIndicator : Error processing arguments");
        cobj->setShowsHorizontalScrollIndicator(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAScrollView_setShowsHorizontalScrollIndicator : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAScrollView_setTouchEnabledAtSubviews(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAScrollView* cobj = (CrossApp::CAScrollView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAScrollView_setTouchEnabledAtSubviews : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        arg0 = JS::ToBoolean(args.get(0));
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAScrollView_setTouchEnabledAtSubviews : Error processing arguments");
        cobj->setTouchEnabledAtSubviews(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAScrollView_setTouchEnabledAtSubviews : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAScrollView_getZoomScale(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAScrollView* cobj = (CrossApp::CAScrollView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAScrollView_getZoomScale : Invalid Native Object");
    if (argc == 0) {
        double ret = cobj->getZoomScale();
        jsval jsret = JSVAL_NULL;
        jsret = DOUBLE_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAScrollView_getZoomScale : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAScrollView_isDecelerating(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAScrollView* cobj = (CrossApp::CAScrollView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAScrollView_isDecelerating : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->isDecelerating();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAScrollView_isDecelerating : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAScrollView_endFooterRefresh(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAScrollView* cobj = (CrossApp::CAScrollView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAScrollView_endFooterRefresh : Invalid Native Object");
    if (argc == 0) {
        cobj->endFooterRefresh();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAScrollView_endFooterRefresh : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAScrollView_isBounceHorizontal(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAScrollView* cobj = (CrossApp::CAScrollView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAScrollView_isBounceHorizontal : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->isBounceHorizontal();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAScrollView_isBounceHorizontal : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAScrollView_setFooterRefreshView(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAScrollView* cobj = (CrossApp::CAScrollView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAScrollView_setFooterRefreshView : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAPullToRefreshView* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAPullToRefreshView*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAScrollView_setFooterRefreshView : Error processing arguments");
        cobj->setFooterRefreshView(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAScrollView_setFooterRefreshView : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAScrollView_ccTouchEnded(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAScrollView* cobj = (CrossApp::CAScrollView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAScrollView_ccTouchEnded : Invalid Native Object");
    if (argc == 2) {
        CrossApp::CATouch* arg0 = nullptr;
        CrossApp::CAEvent* arg1 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CATouch*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        do {
            if (args.get(1).isNull()) { arg1 = nullptr; break; }
            if (!args.get(1).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(1).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg1 = (CrossApp::CAEvent*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg1, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAScrollView_ccTouchEnded : Error processing arguments");
        cobj->ccTouchEnded(arg0, arg1);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAScrollView_ccTouchEnded : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_autogentestbindings_js_CAScrollView_getHeaderRefreshView(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAScrollView* cobj = (CrossApp::CAScrollView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAScrollView_getHeaderRefreshView : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CAPullToRefreshView* ret = cobj->getHeaderRefreshView();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAPullToRefreshView>(cx, (CrossApp::CAPullToRefreshView*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAScrollView_getHeaderRefreshView : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAScrollView_addSubview(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAScrollView* cobj = (CrossApp::CAScrollView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAScrollView_addSubview : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAView* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAView*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAScrollView_addSubview : Error processing arguments");
        cobj->addSubview(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAScrollView_addSubview : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAScrollView_setShowsVerticalScrollIndicator(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAScrollView* cobj = (CrossApp::CAScrollView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAScrollView_setShowsVerticalScrollIndicator : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        arg0 = JS::ToBoolean(args.get(0));
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAScrollView_setShowsVerticalScrollIndicator : Error processing arguments");
        cobj->setShowsVerticalScrollIndicator(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAScrollView_setShowsVerticalScrollIndicator : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAScrollView_setContentOffset(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAScrollView* cobj = (CrossApp::CAScrollView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAScrollView_setContentOffset : Invalid Native Object");
    if (argc == 2) {
        CrossApp::DPoint arg0 = 0;
        bool arg1;
        ok &= jsval_to_dpoint(cx, args.get(0), &arg0);
        arg1 = JS::ToBoolean(args.get(1));
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAScrollView_setContentOffset : Error processing arguments");
        cobj->setContentOffset(arg0, arg1);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAScrollView_setContentOffset : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_autogentestbindings_js_CAScrollView_init(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAScrollView* cobj = (CrossApp::CAScrollView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAScrollView_init : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->init();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAScrollView_init : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAScrollView_isShowsVerticalScrollIndicator(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAScrollView* cobj = (CrossApp::CAScrollView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAScrollView_isShowsVerticalScrollIndicator : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->isShowsVerticalScrollIndicator();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAScrollView_isShowsVerticalScrollIndicator : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAScrollView_startPullToHeaderRefreshView(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAScrollView* cobj = (CrossApp::CAScrollView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAScrollView_startPullToHeaderRefreshView : Invalid Native Object");
    if (argc == 0) {
        cobj->startPullToHeaderRefreshView();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAScrollView_startPullToHeaderRefreshView : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAScrollView_getSubviews(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAScrollView* cobj = (CrossApp::CAScrollView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAScrollView_getSubviews : Invalid Native Object");
    if (argc == 0) {
        const CrossApp::CAVector<CrossApp::CAView *>& ret = cobj->getSubviews();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAVector<CrossApp::CAView >&>(cx, (CrossApp::CAVector<CrossApp::CAView *>&)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAScrollView_getSubviews : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAScrollView_ccTouchMoved(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAScrollView* cobj = (CrossApp::CAScrollView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAScrollView_ccTouchMoved : Invalid Native Object");
    if (argc == 2) {
        CrossApp::CATouch* arg0 = nullptr;
        CrossApp::CAEvent* arg1 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CATouch*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        do {
            if (args.get(1).isNull()) { arg1 = nullptr; break; }
            if (!args.get(1).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(1).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg1 = (CrossApp::CAEvent*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg1, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAScrollView_ccTouchMoved : Error processing arguments");
        cobj->ccTouchMoved(arg0, arg1);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAScrollView_ccTouchMoved : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_autogentestbindings_js_CAScrollView_getMultitouchGesture(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAScrollView* cobj = (CrossApp::CAScrollView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAScrollView_getMultitouchGesture : Invalid Native Object");
    if (argc == 0) {
        int ret = (int)cobj->getMultitouchGesture();
        jsval jsret = JSVAL_NULL;
        jsret = int32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAScrollView_getMultitouchGesture : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAScrollView_setHeaderRefreshView(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAScrollView* cobj = (CrossApp::CAScrollView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAScrollView_setHeaderRefreshView : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAPullToRefreshView* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAPullToRefreshView*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAScrollView_setHeaderRefreshView : Error processing arguments");
        cobj->setHeaderRefreshView(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAScrollView_setHeaderRefreshView : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAScrollView_ccTouchBegan(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAScrollView* cobj = (CrossApp::CAScrollView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAScrollView_ccTouchBegan : Invalid Native Object");
    if (argc == 2) {
        CrossApp::CATouch* arg0 = nullptr;
        CrossApp::CAEvent* arg1 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CATouch*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        do {
            if (args.get(1).isNull()) { arg1 = nullptr; break; }
            if (!args.get(1).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(1).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg1 = (CrossApp::CAEvent*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg1, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAScrollView_ccTouchBegan : Error processing arguments");
        bool ret = cobj->ccTouchBegan(arg0, arg1);
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAScrollView_ccTouchBegan : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_autogentestbindings_js_CAScrollView_getScrollViewDelegate(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAScrollView* cobj = (CrossApp::CAScrollView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAScrollView_getScrollViewDelegate : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CAScrollViewDelegate* ret = cobj->getScrollViewDelegate();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAScrollViewDelegate>(cx, (CrossApp::CAScrollViewDelegate*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAScrollView_getScrollViewDelegate : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAScrollView_setBounces(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAScrollView* cobj = (CrossApp::CAScrollView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAScrollView_setBounces : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        arg0 = JS::ToBoolean(args.get(0));
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAScrollView_setBounces : Error processing arguments");
        cobj->setBounces(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAScrollView_setBounces : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAScrollView_getContentOffset(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAScrollView* cobj = (CrossApp::CAScrollView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAScrollView_getContentOffset : Invalid Native Object");
    if (argc == 0) {
        CrossApp::DPoint ret = cobj->getContentOffset();
        jsval jsret = JSVAL_NULL;
        jsret = dpoint_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAScrollView_getContentOffset : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAScrollView_setViewSize(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAScrollView* cobj = (CrossApp::CAScrollView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAScrollView_setViewSize : Invalid Native Object");
    if (argc == 1) {
        CrossApp::DSize arg0;
        ok &= jsval_to_dsize(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAScrollView_setViewSize : Error processing arguments");
        cobj->setViewSize(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAScrollView_setViewSize : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAScrollView_insertSubview(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAScrollView* cobj = (CrossApp::CAScrollView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAScrollView_insertSubview : Invalid Native Object");
    if (argc == 2) {
        CrossApp::CAView* arg0 = nullptr;
        int arg1 = 0;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAView*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        ok &= jsval_to_int32(cx, args.get(1), (int32_t *)&arg1);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAScrollView_insertSubview : Error processing arguments");
        cobj->insertSubview(arg0, arg1);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAScrollView_insertSubview : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_autogentestbindings_js_CAScrollView_setShowsScrollIndicators(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAScrollView* cobj = (CrossApp::CAScrollView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAScrollView_setShowsScrollIndicators : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        arg0 = JS::ToBoolean(args.get(0));
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAScrollView_setShowsScrollIndicators : Error processing arguments");
        cobj->setShowsScrollIndicators(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAScrollView_setShowsScrollIndicators : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAScrollView_removeSubviewByTag(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAScrollView* cobj = (CrossApp::CAScrollView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAScrollView_removeSubviewByTag : Invalid Native Object");
    if (argc == 1) {
        int arg0 = 0;
        ok &= jsval_to_int32(cx, args.get(0), (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAScrollView_removeSubviewByTag : Error processing arguments");
        cobj->removeSubviewByTag(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAScrollView_removeSubviewByTag : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAScrollView_getSubviewByTag(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAScrollView* cobj = (CrossApp::CAScrollView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAScrollView_getSubviewByTag : Invalid Native Object");
    if (argc == 1) {
        int arg0 = 0;
        ok &= jsval_to_int32(cx, args.get(0), (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAScrollView_getSubviewByTag : Error processing arguments");
        CrossApp::CAView* ret = cobj->getSubviewByTag(arg0);
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAView>(cx, (CrossApp::CAView*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAScrollView_getSubviewByTag : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAScrollView_isBounces(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAScrollView* cobj = (CrossApp::CAScrollView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAScrollView_isBounces : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->isBounces();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAScrollView_isBounces : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAScrollView_setBackgroundColor(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAScrollView* cobj = (CrossApp::CAScrollView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAScrollView_setBackgroundColor : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAColor4B arg0;
        ok &= jsval_to_cacolor4b(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAScrollView_setBackgroundColor : Error processing arguments");
        cobj->setBackgroundColor(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAScrollView_setBackgroundColor : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAScrollView_getMaximumZoomScale(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAScrollView* cobj = (CrossApp::CAScrollView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAScrollView_getMaximumZoomScale : Invalid Native Object");
    if (argc == 0) {
        double ret = cobj->getMaximumZoomScale();
        jsval jsret = JSVAL_NULL;
        jsret = DOUBLE_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAScrollView_getMaximumZoomScale : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAScrollView_getViewSize(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAScrollView* cobj = (CrossApp::CAScrollView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAScrollView_getViewSize : Invalid Native Object");
    if (argc == 0) {
        const CrossApp::DSize& ret = cobj->getViewSize();
        jsval jsret = JSVAL_NULL;
        jsret = dsize_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAScrollView_getViewSize : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAScrollView_setMaximumZoomScale(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAScrollView* cobj = (CrossApp::CAScrollView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAScrollView_setMaximumZoomScale : Invalid Native Object");
    if (argc == 1) {
        double arg0 = 0;
        ok &= JS::ToNumber( cx, args.get(0), &arg0) && !isnan(arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAScrollView_setMaximumZoomScale : Error processing arguments");
        cobj->setMaximumZoomScale(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAScrollView_setMaximumZoomScale : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAScrollView_onExitTransitionDidStart(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAScrollView* cobj = (CrossApp::CAScrollView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAScrollView_onExitTransitionDidStart : Invalid Native Object");
    if (argc == 0) {
        cobj->onExitTransitionDidStart();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAScrollView_onExitTransitionDidStart : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAScrollView_isReachBoundaryDown(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAScrollView* cobj = (CrossApp::CAScrollView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAScrollView_isReachBoundaryDown : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->isReachBoundaryDown();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAScrollView_isReachBoundaryDown : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAScrollView_isZooming(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAScrollView* cobj = (CrossApp::CAScrollView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAScrollView_isZooming : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->isZooming();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAScrollView_isZooming : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAScrollView_setBackgroundImage(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAScrollView* cobj = (CrossApp::CAScrollView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAScrollView_setBackgroundImage : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAImage* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAImage*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAScrollView_setBackgroundImage : Error processing arguments");
        cobj->setBackgroundImage(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAScrollView_setBackgroundImage : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAScrollView_isShowsHorizontalScrollIndicator(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAScrollView* cobj = (CrossApp::CAScrollView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAScrollView_isShowsHorizontalScrollIndicator : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->isShowsHorizontalScrollIndicator();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAScrollView_isShowsHorizontalScrollIndicator : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAScrollView_switchPCMode(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAScrollView* cobj = (CrossApp::CAScrollView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAScrollView_switchPCMode : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        arg0 = JS::ToBoolean(args.get(0));
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAScrollView_switchPCMode : Error processing arguments");
        cobj->switchPCMode(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAScrollView_switchPCMode : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAScrollView_isReachBoundaryUp(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAScrollView* cobj = (CrossApp::CAScrollView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAScrollView_isReachBoundaryUp : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->isReachBoundaryUp();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAScrollView_isReachBoundaryUp : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAScrollView_isReachBoundaryLeft(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAScrollView* cobj = (CrossApp::CAScrollView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAScrollView_isReachBoundaryLeft : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->isReachBoundaryLeft();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAScrollView_isReachBoundaryLeft : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAScrollView_getFooterRefreshView(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAScrollView* cobj = (CrossApp::CAScrollView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAScrollView_getFooterRefreshView : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CAPullToRefreshView* ret = cobj->getFooterRefreshView();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAPullToRefreshView>(cx, (CrossApp::CAPullToRefreshView*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAScrollView_getFooterRefreshView : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAScrollView_stopDeaccelerateScroll(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAScrollView* cobj = (CrossApp::CAScrollView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAScrollView_stopDeaccelerateScroll : Invalid Native Object");
    if (argc == 0) {
        cobj->stopDeaccelerateScroll();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAScrollView_stopDeaccelerateScroll : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAScrollView_setScrollViewDelegate(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAScrollView* cobj = (CrossApp::CAScrollView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAScrollView_setScrollViewDelegate : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAScrollViewDelegate* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAScrollViewDelegate*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAScrollView_setScrollViewDelegate : Error processing arguments");
        cobj->setScrollViewDelegate(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAScrollView_setScrollViewDelegate : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAScrollView_ccTouchCancelled(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAScrollView* cobj = (CrossApp::CAScrollView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAScrollView_ccTouchCancelled : Invalid Native Object");
    if (argc == 2) {
        CrossApp::CATouch* arg0 = nullptr;
        CrossApp::CAEvent* arg1 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CATouch*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        do {
            if (args.get(1).isNull()) { arg1 = nullptr; break; }
            if (!args.get(1).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(1).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg1 = (CrossApp::CAEvent*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg1, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAScrollView_ccTouchCancelled : Error processing arguments");
        cobj->ccTouchCancelled(arg0, arg1);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAScrollView_ccTouchCancelled : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_autogentestbindings_js_CAScrollView_isTouchEnabledAtSubviews(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAScrollView* cobj = (CrossApp::CAScrollView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAScrollView_isTouchEnabledAtSubviews : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->isTouchEnabledAtSubviews();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAScrollView_isTouchEnabledAtSubviews : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAScrollView_isReachBoundaryRight(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAScrollView* cobj = (CrossApp::CAScrollView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAScrollView_isReachBoundaryRight : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->isReachBoundaryRight();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAScrollView_isReachBoundaryRight : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAScrollView_setMinimumZoomScale(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAScrollView* cobj = (CrossApp::CAScrollView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAScrollView_setMinimumZoomScale : Invalid Native Object");
    if (argc == 1) {
        double arg0 = 0;
        ok &= JS::ToNumber( cx, args.get(0), &arg0) && !isnan(arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAScrollView_setMinimumZoomScale : Error processing arguments");
        cobj->setMinimumZoomScale(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAScrollView_setMinimumZoomScale : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAScrollView_endHeaderRefresh(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAScrollView* cobj = (CrossApp::CAScrollView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAScrollView_endHeaderRefresh : Invalid Native Object");
    if (argc == 0) {
        cobj->endHeaderRefresh();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAScrollView_endHeaderRefresh : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAScrollView_getMinimumZoomScale(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAScrollView* cobj = (CrossApp::CAScrollView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAScrollView_getMinimumZoomScale : Invalid Native Object");
    if (argc == 0) {
        double ret = cobj->getMinimumZoomScale();
        jsval jsret = JSVAL_NULL;
        jsret = DOUBLE_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAScrollView_getMinimumZoomScale : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAScrollView_setBounceHorizontal(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAScrollView* cobj = (CrossApp::CAScrollView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAScrollView_setBounceHorizontal : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        arg0 = JS::ToBoolean(args.get(0));
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAScrollView_setBounceHorizontal : Error processing arguments");
        cobj->setBounceHorizontal(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAScrollView_setBounceHorizontal : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAScrollView_removeSubview(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAScrollView* cobj = (CrossApp::CAScrollView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAScrollView_removeSubview : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAView* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAView*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAScrollView_removeSubview : Error processing arguments");
        cobj->removeSubview(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAScrollView_removeSubview : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAScrollView_setZoomScale(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAScrollView* cobj = (CrossApp::CAScrollView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAScrollView_setZoomScale : Invalid Native Object");
    if (argc == 1) {
        double arg0 = 0;
        ok &= JS::ToNumber( cx, args.get(0), &arg0) && !isnan(arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAScrollView_setZoomScale : Error processing arguments");
        cobj->setZoomScale(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAScrollView_setZoomScale : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAScrollView_onEnterTransitionDidFinish(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAScrollView* cobj = (CrossApp::CAScrollView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAScrollView_onEnterTransitionDidFinish : Invalid Native Object");
    if (argc == 0) {
        cobj->onEnterTransitionDidFinish();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAScrollView_onEnterTransitionDidFinish : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAScrollView_setMultitouchGesture(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAScrollView* cobj = (CrossApp::CAScrollView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAScrollView_setMultitouchGesture : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAScrollView::MultitouchGesture arg0;
        ok &= jsval_to_int32(cx, args.get(0), (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAScrollView_setMultitouchGesture : Error processing arguments");
        cobj->setMultitouchGesture(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAScrollView_setMultitouchGesture : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAScrollView_createWithFrame(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        CrossApp::DRect arg0;
        ok &= jsval_to_drect(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAScrollView_createWithFrame : Error processing arguments");
        CrossApp::CAScrollView* ret = CrossApp::CAScrollView::createWithFrame(arg0);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAScrollView>(cx, (CrossApp::CAScrollView*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_autogentestbindings_js_CAScrollView_createWithFrame : wrong number of arguments");
    return false;
}

bool js_autogentestbindings_js_CAScrollView_createWithLayout(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        CrossApp::DRectLayout arg0;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (const CrossApp::DRectLayout&)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAScrollView_createWithLayout : Error processing arguments");
        CrossApp::CAScrollView* ret = CrossApp::CAScrollView::createWithLayout(arg0);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAScrollView>(cx, (CrossApp::CAScrollView*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_autogentestbindings_js_CAScrollView_createWithLayout : wrong number of arguments");
    return false;
}

bool js_autogentestbindings_js_CAScrollView_createWithCenter(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        CrossApp::DRect arg0;
        ok &= jsval_to_drect(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAScrollView_createWithCenter : Error processing arguments");
        CrossApp::CAScrollView* ret = CrossApp::CAScrollView::createWithCenter(arg0);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAScrollView>(cx, (CrossApp::CAScrollView*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_autogentestbindings_js_CAScrollView_createWithCenter : wrong number of arguments");
    return false;
}

bool js_autogentestbindings_js_CAScrollView_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    CrossApp::CAScrollView* cobj = new (std::nothrow) CrossApp::CAScrollView();
    TypeTest<CrossApp::CAScrollView> t;
    js_type_class_t *typeClass = nullptr;
    std::string typeName = t.s_name();
    auto typeMapIter = _js_global_type_map.find(typeName);
    CCAssert(typeMapIter != _js_global_type_map.end(), "Can't find the class type!");
    typeClass = typeMapIter->second;
    CCAssert(typeClass, "The value is null.");
    JS::RootedObject proto(cx, typeClass->proto.get());
    JS::RootedObject parent(cx, typeClass->parentProto.get());
    JS::RootedObject obj(cx, JS_NewObject(cx, typeClass->jsclass, proto, parent));
    args.rval().set(OBJECT_TO_JSVAL(obj));
    // link the native object with the javascript object
    js_proxy_t* p = jsb_new_proxy(cobj, obj);
    if (JS_HasProperty(cx, obj, "_ctor", &ok) && ok)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    return true;
}

extern JSObject *jsb_CrossApp_CAView_prototype;

void js_CrossApp_CAScrollView_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOGINFO("jsbindings: finalizing JS object %p (CAScrollView)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::CAScrollView *nobj = static_cast<CrossApp::CAScrollView *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
void js_register_autogentestbindings_js_CAScrollView(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_CAScrollView_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_CAScrollView_class->name = "CAScrollView";
    jsb_CrossApp_CAScrollView_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_CAScrollView_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_CAScrollView_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_CAScrollView_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_CAScrollView_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_CAScrollView_class->resolve = JS_ResolveStub;
    jsb_CrossApp_CAScrollView_class->convert = JS_ConvertStub;
    jsb_CrossApp_CAScrollView_class->finalize = js_CrossApp_CAScrollView_finalize;
    jsb_CrossApp_CAScrollView_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("mouseScrollWheel", js_autogentestbindings_js_CAScrollView_mouseScrollWheel, 4, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setBounceVertical", js_autogentestbindings_js_CAScrollView_setBounceVertical, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("removeAllSubviews", js_autogentestbindings_js_CAScrollView_removeAllSubviews, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isTracking", js_autogentestbindings_js_CAScrollView_isTracking, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("startDeaccelerateScroll", js_autogentestbindings_js_CAScrollView_startDeaccelerateScroll, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isBounceVertical", js_autogentestbindings_js_CAScrollView_isBounceVertical, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isShowsScrollIndicators", js_autogentestbindings_js_CAScrollView_isShowsScrollIndicators, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setShowsHorizontalScrollIndicator", js_autogentestbindings_js_CAScrollView_setShowsHorizontalScrollIndicator, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setTouchEnabledAtSubviews", js_autogentestbindings_js_CAScrollView_setTouchEnabledAtSubviews, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getZoomScale", js_autogentestbindings_js_CAScrollView_getZoomScale, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isDecelerating", js_autogentestbindings_js_CAScrollView_isDecelerating, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("endFooterRefresh", js_autogentestbindings_js_CAScrollView_endFooterRefresh, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isBounceHorizontal", js_autogentestbindings_js_CAScrollView_isBounceHorizontal, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setFooterRefreshView", js_autogentestbindings_js_CAScrollView_setFooterRefreshView, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("ccTouchEnded", js_autogentestbindings_js_CAScrollView_ccTouchEnded, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getHeaderRefreshView", js_autogentestbindings_js_CAScrollView_getHeaderRefreshView, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("addSubview", js_autogentestbindings_js_CAScrollView_addSubview, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setShowsVerticalScrollIndicator", js_autogentestbindings_js_CAScrollView_setShowsVerticalScrollIndicator, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setContentOffset", js_autogentestbindings_js_CAScrollView_setContentOffset, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("init", js_autogentestbindings_js_CAScrollView_init, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isShowsVerticalScrollIndicator", js_autogentestbindings_js_CAScrollView_isShowsVerticalScrollIndicator, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("startPullToHeaderRefreshView", js_autogentestbindings_js_CAScrollView_startPullToHeaderRefreshView, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getSubviews", js_autogentestbindings_js_CAScrollView_getSubviews, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("ccTouchMoved", js_autogentestbindings_js_CAScrollView_ccTouchMoved, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getMultitouchGesture", js_autogentestbindings_js_CAScrollView_getMultitouchGesture, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setHeaderRefreshView", js_autogentestbindings_js_CAScrollView_setHeaderRefreshView, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("ccTouchBegan", js_autogentestbindings_js_CAScrollView_ccTouchBegan, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getScrollViewDelegate", js_autogentestbindings_js_CAScrollView_getScrollViewDelegate, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setBounces", js_autogentestbindings_js_CAScrollView_setBounces, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getContentOffset", js_autogentestbindings_js_CAScrollView_getContentOffset, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setViewSize", js_autogentestbindings_js_CAScrollView_setViewSize, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("insertSubview", js_autogentestbindings_js_CAScrollView_insertSubview, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setShowsScrollIndicators", js_autogentestbindings_js_CAScrollView_setShowsScrollIndicators, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("removeSubviewByTag", js_autogentestbindings_js_CAScrollView_removeSubviewByTag, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getSubviewByTag", js_autogentestbindings_js_CAScrollView_getSubviewByTag, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isBounces", js_autogentestbindings_js_CAScrollView_isBounces, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setBackgroundColor", js_autogentestbindings_js_CAScrollView_setBackgroundColor, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getMaximumZoomScale", js_autogentestbindings_js_CAScrollView_getMaximumZoomScale, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getViewSize", js_autogentestbindings_js_CAScrollView_getViewSize, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setMaximumZoomScale", js_autogentestbindings_js_CAScrollView_setMaximumZoomScale, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("onExitTransitionDidStart", js_autogentestbindings_js_CAScrollView_onExitTransitionDidStart, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isReachBoundaryDown", js_autogentestbindings_js_CAScrollView_isReachBoundaryDown, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isZooming", js_autogentestbindings_js_CAScrollView_isZooming, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setBackgroundImage", js_autogentestbindings_js_CAScrollView_setBackgroundImage, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isShowsHorizontalScrollIndicator", js_autogentestbindings_js_CAScrollView_isShowsHorizontalScrollIndicator, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("switchPCMode", js_autogentestbindings_js_CAScrollView_switchPCMode, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isReachBoundaryUp", js_autogentestbindings_js_CAScrollView_isReachBoundaryUp, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isReachBoundaryLeft", js_autogentestbindings_js_CAScrollView_isReachBoundaryLeft, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getFooterRefreshView", js_autogentestbindings_js_CAScrollView_getFooterRefreshView, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("stopDeaccelerateScroll", js_autogentestbindings_js_CAScrollView_stopDeaccelerateScroll, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setScrollViewDelegate", js_autogentestbindings_js_CAScrollView_setScrollViewDelegate, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("ccTouchCancelled", js_autogentestbindings_js_CAScrollView_ccTouchCancelled, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isTouchEnabledAtSubviews", js_autogentestbindings_js_CAScrollView_isTouchEnabledAtSubviews, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isReachBoundaryRight", js_autogentestbindings_js_CAScrollView_isReachBoundaryRight, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setMinimumZoomScale", js_autogentestbindings_js_CAScrollView_setMinimumZoomScale, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("endHeaderRefresh", js_autogentestbindings_js_CAScrollView_endHeaderRefresh, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getMinimumZoomScale", js_autogentestbindings_js_CAScrollView_getMinimumZoomScale, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setBounceHorizontal", js_autogentestbindings_js_CAScrollView_setBounceHorizontal, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("removeSubview", js_autogentestbindings_js_CAScrollView_removeSubview, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setZoomScale", js_autogentestbindings_js_CAScrollView_setZoomScale, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("onEnterTransitionDidFinish", js_autogentestbindings_js_CAScrollView_onEnterTransitionDidFinish, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setMultitouchGesture", js_autogentestbindings_js_CAScrollView_setMultitouchGesture, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    static JSFunctionSpec st_funcs[] = {
        JS_FN("createWithFrame", js_autogentestbindings_js_CAScrollView_createWithFrame, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("createWithLayout", js_autogentestbindings_js_CAScrollView_createWithLayout, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("createWithCenter", js_autogentestbindings_js_CAScrollView_createWithCenter, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    jsb_CrossApp_CAScrollView_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_CAView_prototype),
        jsb_CrossApp_CAScrollView_class,
        js_autogentestbindings_js_CAScrollView_constructor, 0, // constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27 
//  JS_SetPropertyAttributes(cx, global, "CAScrollView", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::CAScrollView> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_CAScrollView_class;
        p->proto = jsb_CrossApp_CAScrollView_prototype;
        p->parentProto = jsb_CrossApp_CAView_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
}

JSClass  *jsb_CrossApp_CAIndicator_class;
JSObject *jsb_CrossApp_CAIndicator_prototype;

bool js_autogentestbindings_js_CAIndicator_mouseMovedOutSide(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAIndicator* cobj = (CrossApp::CAIndicator *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAIndicator_mouseMovedOutSide : Invalid Native Object");
    if (argc == 2) {
        CrossApp::CATouch* arg0 = nullptr;
        CrossApp::CAEvent* arg1 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CATouch*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        do {
            if (args.get(1).isNull()) { arg1 = nullptr; break; }
            if (!args.get(1).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(1).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg1 = (CrossApp::CAEvent*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg1, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAIndicator_mouseMovedOutSide : Error processing arguments");
        cobj->mouseMovedOutSide(arg0, arg1);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAIndicator_mouseMovedOutSide : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_autogentestbindings_js_CAIndicator_setIndicator(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAIndicator* cobj = (CrossApp::CAIndicator *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAIndicator_setIndicator : Invalid Native Object");
    if (argc == 2) {
        CrossApp::DSize arg0;
        CrossApp::DRect arg1;
        ok &= jsval_to_dsize(cx, args.get(0), &arg0);
        ok &= jsval_to_drect(cx, args.get(1), &arg1);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAIndicator_setIndicator : Error processing arguments");
        cobj->setIndicator(arg0, arg1);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAIndicator_setIndicator : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_autogentestbindings_js_CAIndicator_ccTouchBegan(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAIndicator* cobj = (CrossApp::CAIndicator *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAIndicator_ccTouchBegan : Invalid Native Object");
    if (argc == 2) {
        CrossApp::CATouch* arg0 = nullptr;
        CrossApp::CAEvent* arg1 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CATouch*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        do {
            if (args.get(1).isNull()) { arg1 = nullptr; break; }
            if (!args.get(1).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(1).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg1 = (CrossApp::CAEvent*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg1, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAIndicator_ccTouchBegan : Error processing arguments");
        bool ret = cobj->ccTouchBegan(arg0, arg1);
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAIndicator_ccTouchBegan : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_autogentestbindings_js_CAIndicator_setHide(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAIndicator* cobj = (CrossApp::CAIndicator *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAIndicator_setHide : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        arg0 = JS::ToBoolean(args.get(0));
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAIndicator_setHide : Error processing arguments");
        cobj->setHide(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAIndicator_setHide : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAIndicator_ccTouchCancelled(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAIndicator* cobj = (CrossApp::CAIndicator *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAIndicator_ccTouchCancelled : Invalid Native Object");
    if (argc == 2) {
        CrossApp::CATouch* arg0 = nullptr;
        CrossApp::CAEvent* arg1 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CATouch*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        do {
            if (args.get(1).isNull()) { arg1 = nullptr; break; }
            if (!args.get(1).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(1).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg1 = (CrossApp::CAEvent*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg1, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAIndicator_ccTouchCancelled : Error processing arguments");
        cobj->ccTouchCancelled(arg0, arg1);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAIndicator_ccTouchCancelled : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_autogentestbindings_js_CAIndicator_ccTouchEnded(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAIndicator* cobj = (CrossApp::CAIndicator *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAIndicator_ccTouchEnded : Invalid Native Object");
    if (argc == 2) {
        CrossApp::CATouch* arg0 = nullptr;
        CrossApp::CAEvent* arg1 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CATouch*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        do {
            if (args.get(1).isNull()) { arg1 = nullptr; break; }
            if (!args.get(1).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(1).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg1 = (CrossApp::CAEvent*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg1, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAIndicator_ccTouchEnded : Error processing arguments");
        cobj->ccTouchEnded(arg0, arg1);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAIndicator_ccTouchEnded : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_autogentestbindings_js_CAIndicator_init(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAIndicator* cobj = (CrossApp::CAIndicator *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAIndicator_init : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->init();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAIndicator_init : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAIndicator_onExitTransitionDidStart(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAIndicator* cobj = (CrossApp::CAIndicator *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAIndicator_onExitTransitionDidStart : Invalid Native Object");
    if (argc == 0) {
        cobj->onExitTransitionDidStart();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAIndicator_onExitTransitionDidStart : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAIndicator_ccTouchMoved(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAIndicator* cobj = (CrossApp::CAIndicator *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAIndicator_ccTouchMoved : Invalid Native Object");
    if (argc == 2) {
        CrossApp::CATouch* arg0 = nullptr;
        CrossApp::CAEvent* arg1 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CATouch*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        do {
            if (args.get(1).isNull()) { arg1 = nullptr; break; }
            if (!args.get(1).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(1).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg1 = (CrossApp::CAEvent*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg1, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAIndicator_ccTouchMoved : Error processing arguments");
        cobj->ccTouchMoved(arg0, arg1);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAIndicator_ccTouchMoved : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_autogentestbindings_js_CAIndicator_switchPCMode(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAIndicator* cobj = (CrossApp::CAIndicator *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAIndicator_switchPCMode : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        arg0 = JS::ToBoolean(args.get(0));
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAIndicator_switchPCMode : Error processing arguments");
        cobj->switchPCMode(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAIndicator_switchPCMode : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAIndicator_mouseMoved(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAIndicator* cobj = (CrossApp::CAIndicator *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAIndicator_mouseMoved : Invalid Native Object");
    if (argc == 2) {
        CrossApp::CATouch* arg0 = nullptr;
        CrossApp::CAEvent* arg1 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CATouch*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        do {
            if (args.get(1).isNull()) { arg1 = nullptr; break; }
            if (!args.get(1).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(1).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg1 = (CrossApp::CAEvent*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg1, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAIndicator_mouseMoved : Error processing arguments");
        cobj->mouseMoved(arg0, arg1);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAIndicator_mouseMoved : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_autogentestbindings_js_CAIndicator_onEnterTransitionDidFinish(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAIndicator* cobj = (CrossApp::CAIndicator *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAIndicator_onEnterTransitionDidFinish : Invalid Native Object");
    if (argc == 0) {
        cobj->onEnterTransitionDidFinish();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAIndicator_onEnterTransitionDidFinish : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAIndicator_getMyScrollView(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAIndicator* cobj = (CrossApp::CAIndicator *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAIndicator_getMyScrollView : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CAScrollView* ret = cobj->getMyScrollView();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAScrollView>(cx, (CrossApp::CAScrollView*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAIndicator_getMyScrollView : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAIndicator_create(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 2) {
        CrossApp::CAIndicator::CAIndicatorType arg0;
        CrossApp::CAScrollView* arg1 = nullptr;
        ok &= jsval_to_int32(cx, args.get(0), (int32_t *)&arg0);
        do {
            if (args.get(1).isNull()) { arg1 = nullptr; break; }
            if (!args.get(1).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(1).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg1 = (CrossApp::CAScrollView*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg1, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAIndicator_create : Error processing arguments");
        CrossApp::CAIndicator* ret = CrossApp::CAIndicator::create(arg0, arg1);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAIndicator>(cx, (CrossApp::CAIndicator*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_autogentestbindings_js_CAIndicator_create : wrong number of arguments");
    return false;
}

bool js_autogentestbindings_js_CAIndicator_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    CrossApp::CAIndicator::CAIndicatorType arg0;
    CrossApp::CAScrollView* arg1 = nullptr;
    ok &= jsval_to_int32(cx, args.get(0), (int32_t *)&arg0);
    do {
            if (args.get(1).isNull()) { arg1 = nullptr; break; }
            if (!args.get(1).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(1).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg1 = (CrossApp::CAScrollView*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg1, cx, false, "Invalid Native Object");
        } while (0);
    JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAIndicator_constructor : Error processing arguments");
    CrossApp::CAIndicator* cobj = new (std::nothrow) CrossApp::CAIndicator(arg0, arg1);
    TypeTest<CrossApp::CAIndicator> t;
    js_type_class_t *typeClass = nullptr;
    std::string typeName = t.s_name();
    auto typeMapIter = _js_global_type_map.find(typeName);
    CCAssert(typeMapIter != _js_global_type_map.end(), "Can't find the class type!");
    typeClass = typeMapIter->second;
    CCAssert(typeClass, "The value is null.");
    JS::RootedObject proto(cx, typeClass->proto.get());
    JS::RootedObject parent(cx, typeClass->parentProto.get());
    JS::RootedObject obj(cx, JS_NewObject(cx, typeClass->jsclass, proto, parent));
    args.rval().set(OBJECT_TO_JSVAL(obj));
    // link the native object with the javascript object
    js_proxy_t* p = jsb_new_proxy(cobj, obj);
    if (JS_HasProperty(cx, obj, "_ctor", &ok) && ok)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    return true;
}

extern JSObject *jsb_CrossApp_CAView_prototype;

void js_CrossApp_CAIndicator_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOGINFO("jsbindings: finalizing JS object %p (CAIndicator)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::CAIndicator *nobj = static_cast<CrossApp::CAIndicator *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
void js_register_autogentestbindings_js_CAIndicator(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_CAIndicator_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_CAIndicator_class->name = "CAIndicator";
    jsb_CrossApp_CAIndicator_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_CAIndicator_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_CAIndicator_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_CAIndicator_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_CAIndicator_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_CAIndicator_class->resolve = JS_ResolveStub;
    jsb_CrossApp_CAIndicator_class->convert = JS_ConvertStub;
    jsb_CrossApp_CAIndicator_class->finalize = js_CrossApp_CAIndicator_finalize;
    jsb_CrossApp_CAIndicator_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("mouseMovedOutSide", js_autogentestbindings_js_CAIndicator_mouseMovedOutSide, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setIndicator", js_autogentestbindings_js_CAIndicator_setIndicator, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("ccTouchBegan", js_autogentestbindings_js_CAIndicator_ccTouchBegan, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setHide", js_autogentestbindings_js_CAIndicator_setHide, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("ccTouchCancelled", js_autogentestbindings_js_CAIndicator_ccTouchCancelled, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("ccTouchEnded", js_autogentestbindings_js_CAIndicator_ccTouchEnded, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("init", js_autogentestbindings_js_CAIndicator_init, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("onExitTransitionDidStart", js_autogentestbindings_js_CAIndicator_onExitTransitionDidStart, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("ccTouchMoved", js_autogentestbindings_js_CAIndicator_ccTouchMoved, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("switchPCMode", js_autogentestbindings_js_CAIndicator_switchPCMode, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("mouseMoved", js_autogentestbindings_js_CAIndicator_mouseMoved, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("onEnterTransitionDidFinish", js_autogentestbindings_js_CAIndicator_onEnterTransitionDidFinish, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getMyScrollView", js_autogentestbindings_js_CAIndicator_getMyScrollView, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    static JSFunctionSpec st_funcs[] = {
        JS_FN("create", js_autogentestbindings_js_CAIndicator_create, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    jsb_CrossApp_CAIndicator_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_CAView_prototype),
        jsb_CrossApp_CAIndicator_class,
        js_autogentestbindings_js_CAIndicator_constructor, 0, // constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27 
//  JS_SetPropertyAttributes(cx, global, "CAIndicator", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::CAIndicator> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_CAIndicator_class;
        p->proto = jsb_CrossApp_CAIndicator_prototype;
        p->parentProto = jsb_CrossApp_CAView_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
}

JSClass  *jsb_CAPageViewDelegate_class;
JSObject *jsb_CAPageViewDelegate_prototype;

bool js_autogentestbindings_js_CAPageViewDelegate_pageViewDidBeginTurning(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CAPageViewDelegate* cobj = (CAPageViewDelegate *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAPageViewDelegate_pageViewDidBeginTurning : Invalid Native Object");
    if (argc == 1) {
        CAPageView* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CAPageView*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAPageViewDelegate_pageViewDidBeginTurning : Error processing arguments");
        cobj->pageViewDidBeginTurning(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAPageViewDelegate_pageViewDidBeginTurning : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAPageViewDelegate_pageViewDidSelectedPageAtIndex(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CAPageViewDelegate* cobj = (CAPageViewDelegate *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAPageViewDelegate_pageViewDidSelectedPageAtIndex : Invalid Native Object");
    if (argc == 3) {
        CAPageView* arg0 = nullptr;
        unsigned int arg1 = 0;
        CrossApp::DPoint arg2 = 0;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CAPageView*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        ok &= jsval_to_uint32(cx, args.get(1), &arg1);
        ok &= jsval_to_dpoint(cx, args.get(2), &arg2);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAPageViewDelegate_pageViewDidSelectedPageAtIndex : Error processing arguments");
        cobj->pageViewDidSelectedPageAtIndex(arg0, arg1, arg2);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAPageViewDelegate_pageViewDidSelectedPageAtIndex : wrong number of arguments: %d, was expecting %d", argc, 3);
    return false;
}
bool js_autogentestbindings_js_CAPageViewDelegate_pageViewDidEndTurning(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CAPageViewDelegate* cobj = (CAPageViewDelegate *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAPageViewDelegate_pageViewDidEndTurning : Invalid Native Object");
    if (argc == 1) {
        CAPageView* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CAPageView*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAPageViewDelegate_pageViewDidEndTurning : Error processing arguments");
        cobj->pageViewDidEndTurning(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAPageViewDelegate_pageViewDidEndTurning : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}

void js_CAPageViewDelegate_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOGINFO("jsbindings: finalizing JS object %p (CAPageViewDelegate)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CAPageViewDelegate *nobj = static_cast<CAPageViewDelegate *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
void js_register_autogentestbindings_js_CAPageViewDelegate(JSContext *cx, JS::HandleObject global) {
    jsb_CAPageViewDelegate_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CAPageViewDelegate_class->name = "CAPageViewDelegate";
    jsb_CAPageViewDelegate_class->addProperty = JS_PropertyStub;
    jsb_CAPageViewDelegate_class->delProperty = JS_DeletePropertyStub;
    jsb_CAPageViewDelegate_class->getProperty = JS_PropertyStub;
    jsb_CAPageViewDelegate_class->setProperty = JS_StrictPropertyStub;
    jsb_CAPageViewDelegate_class->enumerate = JS_EnumerateStub;
    jsb_CAPageViewDelegate_class->resolve = JS_ResolveStub;
    jsb_CAPageViewDelegate_class->convert = JS_ConvertStub;
    jsb_CAPageViewDelegate_class->finalize = js_CAPageViewDelegate_finalize;
    jsb_CAPageViewDelegate_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("pageViewDidBeginTurning", js_autogentestbindings_js_CAPageViewDelegate_pageViewDidBeginTurning, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("pageViewDidSelectedPageAtIndex", js_autogentestbindings_js_CAPageViewDelegate_pageViewDidSelectedPageAtIndex, 3, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("pageViewDidEndTurning", js_autogentestbindings_js_CAPageViewDelegate_pageViewDidEndTurning, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    JSFunctionSpec *st_funcs = NULL;

    jsb_CAPageViewDelegate_prototype = JS_InitClass(
        cx, global,
        JS::NullPtr(), // parent proto
        jsb_CAPageViewDelegate_class,
        dummy_constructor<CAPageViewDelegate>, 0, // no constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27 
//  JS_SetPropertyAttributes(cx, global, "CAPageViewDelegate", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CAPageViewDelegate> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CAPageViewDelegate_class;
        p->proto = jsb_CAPageViewDelegate_prototype;
        p->parentProto = NULL;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
}

JSClass  *jsb_CAPageView_class;
JSObject *jsb_CAPageView_prototype;

bool js_autogentestbindings_js_CAPageView_setPageViewDelegate(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CAPageView* cobj = (CAPageView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAPageView_setPageViewDelegate : Invalid Native Object");
    if (argc == 1) {
        CAPageViewDelegate* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CAPageViewDelegate*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAPageView_setPageViewDelegate : Error processing arguments");
        cobj->setPageViewDelegate(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAPageView_setPageViewDelegate : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAPageView_setSpacing(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CAPageView* cobj = (CAPageView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAPageView_setSpacing : Invalid Native Object");
    if (argc == 1) {
        int arg0 = 0;
        ok &= jsval_to_int32(cx, args.get(0), (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAPageView_setSpacing : Error processing arguments");
        cobj->setSpacing(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAPageView_setSpacing : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAPageView_setShowsScrollIndicators(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CAPageView* cobj = (CAPageView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAPageView_setShowsScrollIndicators : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        arg0 = JS::ToBoolean(args.get(0));
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAPageView_setShowsScrollIndicators : Error processing arguments");
        cobj->setShowsScrollIndicators(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAPageView_setShowsScrollIndicators : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAPageView_getPageViewDirection(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CAPageView* cobj = (CAPageView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAPageView_getPageViewDirection : Invalid Native Object");
    if (argc == 0) {
        int ret = (int)cobj->getPageViewDirection();
        jsval jsret = JSVAL_NULL;
        jsret = int32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAPageView_getPageViewDirection : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAPageView_setViews(JSContext *cx, uint32_t argc, jsval *vp)
{
    bool ok = true;
    CAPageView* cobj = nullptr;

    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx);
    obj = args.thisv().toObjectOrNull();
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    cobj = (CAPageView *)(proxy ? proxy->ptr : nullptr);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAPageView_setViews : Invalid Native Object");
    do {
        if (argc == 1) {
            CrossApp::CAVector<CrossApp::CAView *> arg0;
            ok &= jsval_to_cavector(cx, args.get(0), &arg0);
            if (!ok) { ok = true; break; }
            cobj->setViews(arg0);
            args.rval().setUndefined();
            return true;
        }
    } while(0);

    do {
        if (argc == 1) {
            CrossApp::CADeque<CrossApp::CAView *> arg0;
            do {
                if (args.get(0).isNull()) { arg0 = nullptr; break; }
                if (!args.get(0).isObject()) { ok = false; break; }
                js_proxy_t *jsProxy;
                JSObject *tmpObj = args.get(0).toObjectOrNull();
                jsProxy = jsb_get_js_proxy(tmpObj);
                arg0 = (const CrossApp::CADeque<CrossApp::CAView *>&)(jsProxy ? jsProxy->ptr : NULL);
                JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
            } while (0);
            if (!ok) { ok = true; break; }
            cobj->setViews(arg0);
            args.rval().setUndefined();
            return true;
        }
    } while(0);

    JS_ReportError(cx, "js_autogentestbindings_js_CAPageView_setViews : wrong number of arguments");
    return false;
}
bool js_autogentestbindings_js_CAPageView_getSpacing(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CAPageView* cobj = (CAPageView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAPageView_getSpacing : Invalid Native Object");
    if (argc == 0) {
        int ret = cobj->getSpacing();
        jsval jsret = JSVAL_NULL;
        jsret = int32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAPageView_getSpacing : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAPageView_getCurrPage(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CAPageView* cobj = (CAPageView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAPageView_getCurrPage : Invalid Native Object");
    if (argc == 0) {
        int ret = cobj->getCurrPage();
        jsval jsret = JSVAL_NULL;
        jsret = int32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAPageView_getCurrPage : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAPageView_init(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CAPageView* cobj = (CAPageView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAPageView_init : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->init();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAPageView_init : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAPageView_getPageViewDelegate(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CAPageView* cobj = (CAPageView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAPageView_getPageViewDelegate : Invalid Native Object");
    if (argc == 0) {
        CAPageViewDelegate* ret = cobj->getPageViewDelegate();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CAPageViewDelegate>(cx, (CAPageViewDelegate*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAPageView_getPageViewDelegate : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAPageView_getPageCount(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CAPageView* cobj = (CAPageView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAPageView_getPageCount : Invalid Native Object");
    if (argc == 0) {
        unsigned int ret = cobj->getPageCount();
        jsval jsret = JSVAL_NULL;
        jsret = uint32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAPageView_getPageCount : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAPageView_setCurrPage(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CAPageView* cobj = (CAPageView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAPageView_setCurrPage : Invalid Native Object");
    if (argc == 2) {
        int arg0 = 0;
        bool arg1;
        ok &= jsval_to_int32(cx, args.get(0), (int32_t *)&arg0);
        arg1 = JS::ToBoolean(args.get(1));
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAPageView_setCurrPage : Error processing arguments");
        cobj->setCurrPage(arg0, arg1);
        args.rval().setUndefined();
        return true;
    }
    if (argc == 3) {
        int arg0 = 0;
        bool arg1;
        bool arg2;
        ok &= jsval_to_int32(cx, args.get(0), (int32_t *)&arg0);
        arg1 = JS::ToBoolean(args.get(1));
        arg2 = JS::ToBoolean(args.get(2));
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAPageView_setCurrPage : Error processing arguments");
        cobj->setCurrPage(arg0, arg1, arg2);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAPageView_setCurrPage : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_autogentestbindings_js_CAPageView_getSubViewAtIndex(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CAPageView* cobj = (CAPageView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAPageView_getSubViewAtIndex : Invalid Native Object");
    if (argc == 1) {
        int arg0 = 0;
        ok &= jsval_to_int32(cx, args.get(0), (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAPageView_getSubViewAtIndex : Error processing arguments");
        CrossApp::CAView* ret = cobj->getSubViewAtIndex(arg0);
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAView>(cx, (CrossApp::CAView*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAPageView_getSubViewAtIndex : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAPageView_createWithFrame(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 2) {
        CrossApp::DRect arg0;
        CAPageViewDirection arg1;
        ok &= jsval_to_drect(cx, args.get(0), &arg0);
        ok &= jsval_to_int32(cx, args.get(1), (int32_t *)&arg1);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAPageView_createWithFrame : Error processing arguments");
        CAPageView* ret = CAPageView::createWithFrame(arg0, arg1);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CAPageView>(cx, (CAPageView*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_autogentestbindings_js_CAPageView_createWithFrame : wrong number of arguments");
    return false;
}

bool js_autogentestbindings_js_CAPageView_createWithLayout(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 2) {
        CrossApp::DRectLayout arg0;
        CAPageViewDirection arg1;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (const CrossApp::DRectLayout&)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        ok &= jsval_to_int32(cx, args.get(1), (int32_t *)&arg1);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAPageView_createWithLayout : Error processing arguments");
        CAPageView* ret = CAPageView::createWithLayout(arg0, arg1);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CAPageView>(cx, (CAPageView*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_autogentestbindings_js_CAPageView_createWithLayout : wrong number of arguments");
    return false;
}

bool js_autogentestbindings_js_CAPageView_createWithCenter(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 2) {
        CrossApp::DRect arg0;
        CAPageViewDirection arg1;
        ok &= jsval_to_drect(cx, args.get(0), &arg0);
        ok &= jsval_to_int32(cx, args.get(1), (int32_t *)&arg1);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAPageView_createWithCenter : Error processing arguments");
        CAPageView* ret = CAPageView::createWithCenter(arg0, arg1);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CAPageView>(cx, (CAPageView*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_autogentestbindings_js_CAPageView_createWithCenter : wrong number of arguments");
    return false;
}

bool js_autogentestbindings_js_CAPageView_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    CAPageViewDirection arg0;
    ok &= jsval_to_int32(cx, args.get(0), (int32_t *)&arg0);
    JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAPageView_constructor : Error processing arguments");
    CAPageView* cobj = new (std::nothrow) CAPageView(arg0);
    TypeTest<CAPageView> t;
    js_type_class_t *typeClass = nullptr;
    std::string typeName = t.s_name();
    auto typeMapIter = _js_global_type_map.find(typeName);
    CCAssert(typeMapIter != _js_global_type_map.end(), "Can't find the class type!");
    typeClass = typeMapIter->second;
    CCAssert(typeClass, "The value is null.");
    JS::RootedObject proto(cx, typeClass->proto.get());
    JS::RootedObject parent(cx, typeClass->parentProto.get());
    JS::RootedObject obj(cx, JS_NewObject(cx, typeClass->jsclass, proto, parent));
    args.rval().set(OBJECT_TO_JSVAL(obj));
    // link the native object with the javascript object
    js_proxy_t* p = jsb_new_proxy(cobj, obj);
    if (JS_HasProperty(cx, obj, "_ctor", &ok) && ok)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    return true;
}

extern JSObject *jsb_CrossApp_CAScrollView_prototype;

void js_CAPageView_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOGINFO("jsbindings: finalizing JS object %p (CAPageView)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CAPageView *nobj = static_cast<CAPageView *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
void js_register_autogentestbindings_js_CAPageView(JSContext *cx, JS::HandleObject global) {
    jsb_CAPageView_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CAPageView_class->name = "CAPageView";
    jsb_CAPageView_class->addProperty = JS_PropertyStub;
    jsb_CAPageView_class->delProperty = JS_DeletePropertyStub;
    jsb_CAPageView_class->getProperty = JS_PropertyStub;
    jsb_CAPageView_class->setProperty = JS_StrictPropertyStub;
    jsb_CAPageView_class->enumerate = JS_EnumerateStub;
    jsb_CAPageView_class->resolve = JS_ResolveStub;
    jsb_CAPageView_class->convert = JS_ConvertStub;
    jsb_CAPageView_class->finalize = js_CAPageView_finalize;
    jsb_CAPageView_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("setPageViewDelegate", js_autogentestbindings_js_CAPageView_setPageViewDelegate, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setSpacing", js_autogentestbindings_js_CAPageView_setSpacing, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setShowsScrollIndicators", js_autogentestbindings_js_CAPageView_setShowsScrollIndicators, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getPageViewDirection", js_autogentestbindings_js_CAPageView_getPageViewDirection, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setViews", js_autogentestbindings_js_CAPageView_setViews, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getSpacing", js_autogentestbindings_js_CAPageView_getSpacing, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getCurrPage", js_autogentestbindings_js_CAPageView_getCurrPage, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("init", js_autogentestbindings_js_CAPageView_init, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getPageViewDelegate", js_autogentestbindings_js_CAPageView_getPageViewDelegate, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getPageCount", js_autogentestbindings_js_CAPageView_getPageCount, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setCurrPage", js_autogentestbindings_js_CAPageView_setCurrPage, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getSubViewAtIndex", js_autogentestbindings_js_CAPageView_getSubViewAtIndex, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    static JSFunctionSpec st_funcs[] = {
        JS_FN("createWithFrame", js_autogentestbindings_js_CAPageView_createWithFrame, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("createWithLayout", js_autogentestbindings_js_CAPageView_createWithLayout, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("createWithCenter", js_autogentestbindings_js_CAPageView_createWithCenter, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    jsb_CAPageView_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_CAScrollView_prototype),
        jsb_CAPageView_class,
        js_autogentestbindings_js_CAPageView_constructor, 0, // constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27 
//  JS_SetPropertyAttributes(cx, global, "CAPageView", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CAPageView> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CAPageView_class;
        p->proto = jsb_CAPageView_prototype;
        p->parentProto = jsb_CrossApp_CAScrollView_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
}

JSClass  *jsb_CrossApp_CAKeypadDelegate_class;
JSObject *jsb_CrossApp_CAKeypadDelegate_prototype;

bool js_autogentestbindings_js_CAKeypadDelegate_keyBackClicked(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAKeypadDelegate* cobj = (CrossApp::CAKeypadDelegate *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAKeypadDelegate_keyBackClicked : Invalid Native Object");
    if (argc == 0) {
        cobj->keyBackClicked();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAKeypadDelegate_keyBackClicked : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAKeypadDelegate_keyMenuClicked(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAKeypadDelegate* cobj = (CrossApp::CAKeypadDelegate *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAKeypadDelegate_keyMenuClicked : Invalid Native Object");
    if (argc == 0) {
        cobj->keyMenuClicked();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAKeypadDelegate_keyMenuClicked : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}

void js_CrossApp_CAKeypadDelegate_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOGINFO("jsbindings: finalizing JS object %p (CAKeypadDelegate)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::CAKeypadDelegate *nobj = static_cast<CrossApp::CAKeypadDelegate *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
void js_register_autogentestbindings_js_CAKeypadDelegate(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_CAKeypadDelegate_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_CAKeypadDelegate_class->name = "CAKeypadDelegate";
    jsb_CrossApp_CAKeypadDelegate_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_CAKeypadDelegate_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_CAKeypadDelegate_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_CAKeypadDelegate_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_CAKeypadDelegate_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_CAKeypadDelegate_class->resolve = JS_ResolveStub;
    jsb_CrossApp_CAKeypadDelegate_class->convert = JS_ConvertStub;
    jsb_CrossApp_CAKeypadDelegate_class->finalize = js_CrossApp_CAKeypadDelegate_finalize;
    jsb_CrossApp_CAKeypadDelegate_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("keyBackClicked", js_autogentestbindings_js_CAKeypadDelegate_keyBackClicked, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("keyMenuClicked", js_autogentestbindings_js_CAKeypadDelegate_keyMenuClicked, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    JSFunctionSpec *st_funcs = NULL;

    jsb_CrossApp_CAKeypadDelegate_prototype = JS_InitClass(
        cx, global,
        JS::NullPtr(), // parent proto
        jsb_CrossApp_CAKeypadDelegate_class,
        dummy_constructor<CrossApp::CAKeypadDelegate>, 0, // no constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27 
//  JS_SetPropertyAttributes(cx, global, "CAKeypadDelegate", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::CAKeypadDelegate> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_CAKeypadDelegate_class;
        p->proto = jsb_CrossApp_CAKeypadDelegate_prototype;
        p->parentProto = NULL;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
}

JSClass  *jsb_CrossApp_CAKeypadHandler_class;
JSObject *jsb_CrossApp_CAKeypadHandler_prototype;

bool js_autogentestbindings_js_CAKeypadHandler_getDelegate(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAKeypadHandler* cobj = (CrossApp::CAKeypadHandler *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAKeypadHandler_getDelegate : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CAKeypadDelegate* ret = cobj->getDelegate();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAKeypadDelegate>(cx, (CrossApp::CAKeypadDelegate*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAKeypadHandler_getDelegate : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAKeypadHandler_initWithDelegate(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAKeypadHandler* cobj = (CrossApp::CAKeypadHandler *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAKeypadHandler_initWithDelegate : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAKeypadDelegate* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAKeypadDelegate*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAKeypadHandler_initWithDelegate : Error processing arguments");
        bool ret = cobj->initWithDelegate(arg0);
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAKeypadHandler_initWithDelegate : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAKeypadHandler_setDelegate(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAKeypadHandler* cobj = (CrossApp::CAKeypadHandler *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAKeypadHandler_setDelegate : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAKeypadDelegate* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAKeypadDelegate*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAKeypadHandler_setDelegate : Error processing arguments");
        cobj->setDelegate(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAKeypadHandler_setDelegate : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAKeypadHandler_handlerWithDelegate(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        CrossApp::CAKeypadDelegate* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAKeypadDelegate*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAKeypadHandler_handlerWithDelegate : Error processing arguments");
        CrossApp::CAKeypadHandler* ret = CrossApp::CAKeypadHandler::handlerWithDelegate(arg0);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAKeypadHandler>(cx, (CrossApp::CAKeypadHandler*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_autogentestbindings_js_CAKeypadHandler_handlerWithDelegate : wrong number of arguments");
    return false;
}


extern JSObject *jsb_CrossApp_CAObject_prototype;

void js_CrossApp_CAKeypadHandler_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOGINFO("jsbindings: finalizing JS object %p (CAKeypadHandler)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::CAKeypadHandler *nobj = static_cast<CrossApp::CAKeypadHandler *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
void js_register_autogentestbindings_js_CAKeypadHandler(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_CAKeypadHandler_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_CAKeypadHandler_class->name = "CAKeypadHandler";
    jsb_CrossApp_CAKeypadHandler_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_CAKeypadHandler_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_CAKeypadHandler_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_CAKeypadHandler_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_CAKeypadHandler_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_CAKeypadHandler_class->resolve = JS_ResolveStub;
    jsb_CrossApp_CAKeypadHandler_class->convert = JS_ConvertStub;
    jsb_CrossApp_CAKeypadHandler_class->finalize = js_CrossApp_CAKeypadHandler_finalize;
    jsb_CrossApp_CAKeypadHandler_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("getDelegate", js_autogentestbindings_js_CAKeypadHandler_getDelegate, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("initWithDelegate", js_autogentestbindings_js_CAKeypadHandler_initWithDelegate, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setDelegate", js_autogentestbindings_js_CAKeypadHandler_setDelegate, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    static JSFunctionSpec st_funcs[] = {
        JS_FN("handlerWithDelegate", js_autogentestbindings_js_CAKeypadHandler_handlerWithDelegate, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    jsb_CrossApp_CAKeypadHandler_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_CAObject_prototype),
        jsb_CrossApp_CAKeypadHandler_class,
        dummy_constructor<CrossApp::CAKeypadHandler>, 0, // no constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27 
//  JS_SetPropertyAttributes(cx, global, "CAKeypadHandler", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::CAKeypadHandler> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_CAKeypadHandler_class;
        p->proto = jsb_CrossApp_CAKeypadHandler_prototype;
        p->parentProto = jsb_CrossApp_CAObject_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
}

JSClass  *jsb_CrossApp_CAKeypadDispatcher_class;
JSObject *jsb_CrossApp_CAKeypadDispatcher_prototype;

bool js_autogentestbindings_js_CAKeypadDispatcher_forceRemoveDelegate(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAKeypadDispatcher* cobj = (CrossApp::CAKeypadDispatcher *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAKeypadDispatcher_forceRemoveDelegate : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAKeypadDelegate* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAKeypadDelegate*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAKeypadDispatcher_forceRemoveDelegate : Error processing arguments");
        cobj->forceRemoveDelegate(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAKeypadDispatcher_forceRemoveDelegate : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAKeypadDispatcher_dispatchKeypadMSG(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAKeypadDispatcher* cobj = (CrossApp::CAKeypadDispatcher *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAKeypadDispatcher_dispatchKeypadMSG : Invalid Native Object");
    if (argc == 1) {
        CrossApp::ccKeypadMSGType arg0;
        ok &= jsval_to_int32(cx, args.get(0), (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAKeypadDispatcher_dispatchKeypadMSG : Error processing arguments");
        bool ret = cobj->dispatchKeypadMSG(arg0);
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAKeypadDispatcher_dispatchKeypadMSG : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAKeypadDispatcher_forceAddDelegate(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAKeypadDispatcher* cobj = (CrossApp::CAKeypadDispatcher *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAKeypadDispatcher_forceAddDelegate : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAKeypadDelegate* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAKeypadDelegate*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAKeypadDispatcher_forceAddDelegate : Error processing arguments");
        cobj->forceAddDelegate(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAKeypadDispatcher_forceAddDelegate : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAKeypadDispatcher_addDelegate(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAKeypadDispatcher* cobj = (CrossApp::CAKeypadDispatcher *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAKeypadDispatcher_addDelegate : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAKeypadDelegate* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAKeypadDelegate*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAKeypadDispatcher_addDelegate : Error processing arguments");
        cobj->addDelegate(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAKeypadDispatcher_addDelegate : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAKeypadDispatcher_removeDelegate(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAKeypadDispatcher* cobj = (CrossApp::CAKeypadDispatcher *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAKeypadDispatcher_removeDelegate : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAKeypadDelegate* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAKeypadDelegate*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAKeypadDispatcher_removeDelegate : Error processing arguments");
        cobj->removeDelegate(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAKeypadDispatcher_removeDelegate : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAKeypadDispatcher_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    CrossApp::CAKeypadDispatcher* cobj = new (std::nothrow) CrossApp::CAKeypadDispatcher();
    TypeTest<CrossApp::CAKeypadDispatcher> t;
    js_type_class_t *typeClass = nullptr;
    std::string typeName = t.s_name();
    auto typeMapIter = _js_global_type_map.find(typeName);
    CCAssert(typeMapIter != _js_global_type_map.end(), "Can't find the class type!");
    typeClass = typeMapIter->second;
    CCAssert(typeClass, "The value is null.");
    JS::RootedObject proto(cx, typeClass->proto.get());
    JS::RootedObject parent(cx, typeClass->parentProto.get());
    JS::RootedObject obj(cx, JS_NewObject(cx, typeClass->jsclass, proto, parent));
    args.rval().set(OBJECT_TO_JSVAL(obj));
    // link the native object with the javascript object
    js_proxy_t* p = jsb_new_proxy(cobj, obj);
    if (JS_HasProperty(cx, obj, "_ctor", &ok) && ok)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    return true;
}

extern JSObject *jsb_CrossApp_CAObject_prototype;

void js_CrossApp_CAKeypadDispatcher_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOGINFO("jsbindings: finalizing JS object %p (CAKeypadDispatcher)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::CAKeypadDispatcher *nobj = static_cast<CrossApp::CAKeypadDispatcher *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
void js_register_autogentestbindings_js_CAKeypadDispatcher(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_CAKeypadDispatcher_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_CAKeypadDispatcher_class->name = "CAKeypadDispatcher";
    jsb_CrossApp_CAKeypadDispatcher_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_CAKeypadDispatcher_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_CAKeypadDispatcher_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_CAKeypadDispatcher_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_CAKeypadDispatcher_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_CAKeypadDispatcher_class->resolve = JS_ResolveStub;
    jsb_CrossApp_CAKeypadDispatcher_class->convert = JS_ConvertStub;
    jsb_CrossApp_CAKeypadDispatcher_class->finalize = js_CrossApp_CAKeypadDispatcher_finalize;
    jsb_CrossApp_CAKeypadDispatcher_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("forceRemoveDelegate", js_autogentestbindings_js_CAKeypadDispatcher_forceRemoveDelegate, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("dispatchKeypadMSG", js_autogentestbindings_js_CAKeypadDispatcher_dispatchKeypadMSG, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("forceAddDelegate", js_autogentestbindings_js_CAKeypadDispatcher_forceAddDelegate, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("addDelegate", js_autogentestbindings_js_CAKeypadDispatcher_addDelegate, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("removeDelegate", js_autogentestbindings_js_CAKeypadDispatcher_removeDelegate, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    JSFunctionSpec *st_funcs = NULL;

    jsb_CrossApp_CAKeypadDispatcher_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_CAObject_prototype),
        jsb_CrossApp_CAKeypadDispatcher_class,
        js_autogentestbindings_js_CAKeypadDispatcher_constructor, 0, // constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27 
//  JS_SetPropertyAttributes(cx, global, "CAKeypadDispatcher", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::CAKeypadDispatcher> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_CAKeypadDispatcher_class;
        p->proto = jsb_CrossApp_CAKeypadDispatcher_prototype;
        p->parentProto = jsb_CrossApp_CAObject_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
}

JSClass  *jsb_CrossApp_CAViewController_class;
JSObject *jsb_CrossApp_CAViewController_prototype;

bool js_autogentestbindings_js_CAViewController_getView(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAViewController* cobj = (CrossApp::CAViewController *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAViewController_getView : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CAView* ret = cobj->getView();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAView>(cx, (CrossApp::CAView*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAViewController_getView : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAViewController_dismissModalViewController(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAViewController* cobj = (CrossApp::CAViewController *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAViewController_dismissModalViewController : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        arg0 = JS::ToBoolean(args.get(0));
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAViewController_dismissModalViewController : Error processing arguments");
        cobj->dismissModalViewController(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAViewController_dismissModalViewController : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAViewController_getTabBarItem(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAViewController* cobj = (CrossApp::CAViewController *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAViewController_getTabBarItem : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CATabBarItem* ret = cobj->getTabBarItem();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CATabBarItem>(cx, (CrossApp::CATabBarItem*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAViewController_getTabBarItem : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAViewController_keyBackClicked(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAViewController* cobj = (CrossApp::CAViewController *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAViewController_keyBackClicked : Invalid Native Object");
    if (argc == 0) {
        cobj->keyBackClicked();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAViewController_keyBackClicked : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAViewController_setTabBarItem(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAViewController* cobj = (CrossApp::CAViewController *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAViewController_setTabBarItem : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CATabBarItem* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CATabBarItem*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAViewController_setTabBarItem : Error processing arguments");
        cobj->setTabBarItem(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAViewController_setTabBarItem : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAViewController_getViewWithID(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAViewController* cobj = (CrossApp::CAViewController *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAViewController_getViewWithID : Invalid Native Object");
    if (argc == 1) {
        std::string arg0;
        ok &= jsval_to_std_string(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAViewController_getViewWithID : Error processing arguments");
        CrossApp::CAView* ret = cobj->getViewWithID(arg0);
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAView>(cx, (CrossApp::CAView*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAViewController_getViewWithID : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAViewController_setTitle(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAViewController* cobj = (CrossApp::CAViewController *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAViewController_setTitle : Invalid Native Object");
    if (argc == 1) {
        std::string arg0;
        ok &= jsval_to_std_string(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAViewController_setTitle : Error processing arguments");
        cobj->setTitle(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAViewController_setTitle : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAViewController_isKeypadEnabled(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAViewController* cobj = (CrossApp::CAViewController *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAViewController_isKeypadEnabled : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->isKeypadEnabled();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAViewController_isKeypadEnabled : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAViewController_isViewRunning(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAViewController* cobj = (CrossApp::CAViewController *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAViewController_isViewRunning : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->isViewRunning();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAViewController_isViewRunning : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAViewController_ccTouchEnded(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAViewController* cobj = (CrossApp::CAViewController *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAViewController_ccTouchEnded : Invalid Native Object");
    if (argc == 2) {
        CrossApp::CATouch* arg0 = nullptr;
        CrossApp::CAEvent* arg1 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CATouch*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        do {
            if (args.get(1).isNull()) { arg1 = nullptr; break; }
            if (!args.get(1).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(1).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg1 = (CrossApp::CAEvent*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg1, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAViewController_ccTouchEnded : Error processing arguments");
        cobj->ccTouchEnded(arg0, arg1);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAViewController_ccTouchEnded : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_autogentestbindings_js_CAViewController_viewDidLoad(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAViewController* cobj = (CrossApp::CAViewController *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAViewController_viewDidLoad : Invalid Native Object");
    if (argc == 0) {
        cobj->viewDidLoad();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAViewController_viewDidLoad : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAViewController_presentModalViewController(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAViewController* cobj = (CrossApp::CAViewController *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAViewController_presentModalViewController : Invalid Native Object");
    if (argc == 2) {
        CrossApp::CAViewController* arg0 = nullptr;
        bool arg1;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAViewController*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        arg1 = JS::ToBoolean(args.get(1));
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAViewController_presentModalViewController : Error processing arguments");
        cobj->presentModalViewController(arg0, arg1);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAViewController_presentModalViewController : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_autogentestbindings_js_CAViewController_init(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAViewController* cobj = (CrossApp::CAViewController *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAViewController_init : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->init();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAViewController_init : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAViewController_getNavigationBarItem(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAViewController* cobj = (CrossApp::CAViewController *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAViewController_getNavigationBarItem : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CANavigationBarItem* ret = cobj->getNavigationBarItem();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CANavigationBarItem>(cx, (CrossApp::CANavigationBarItem*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAViewController_getNavigationBarItem : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAViewController_ccTouchMoved(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAViewController* cobj = (CrossApp::CAViewController *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAViewController_ccTouchMoved : Invalid Native Object");
    if (argc == 2) {
        CrossApp::CATouch* arg0 = nullptr;
        CrossApp::CAEvent* arg1 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CATouch*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        do {
            if (args.get(1).isNull()) { arg1 = nullptr; break; }
            if (!args.get(1).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(1).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg1 = (CrossApp::CAEvent*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg1, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAViewController_ccTouchMoved : Error processing arguments");
        cobj->ccTouchMoved(arg0, arg1);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAViewController_ccTouchMoved : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_autogentestbindings_js_CAViewController_removeViewFromSuperview(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAViewController* cobj = (CrossApp::CAViewController *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAViewController_removeViewFromSuperview : Invalid Native Object");
    if (argc == 0) {
        cobj->removeViewFromSuperview();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAViewController_removeViewFromSuperview : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAViewController_ccTouchBegan(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAViewController* cobj = (CrossApp::CAViewController *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAViewController_ccTouchBegan : Invalid Native Object");
    if (argc == 2) {
        CrossApp::CATouch* arg0 = nullptr;
        CrossApp::CAEvent* arg1 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CATouch*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        do {
            if (args.get(1).isNull()) { arg1 = nullptr; break; }
            if (!args.get(1).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(1).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg1 = (CrossApp::CAEvent*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg1, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAViewController_ccTouchBegan : Error processing arguments");
        bool ret = cobj->ccTouchBegan(arg0, arg1);
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAViewController_ccTouchBegan : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_autogentestbindings_js_CAViewController_viewDidDisappear(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAViewController* cobj = (CrossApp::CAViewController *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAViewController_viewDidDisappear : Invalid Native Object");
    if (argc == 0) {
        cobj->viewDidDisappear();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAViewController_viewDidDisappear : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAViewController_getNibName(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAViewController* cobj = (CrossApp::CAViewController *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAViewController_getNibName : Invalid Native Object");
    if (argc == 0) {
        std::string ret = cobj->getNibName();
        jsval jsret = JSVAL_NULL;
        jsret = std_string_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAViewController_getNibName : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAViewController_setNavigationBarItem(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAViewController* cobj = (CrossApp::CAViewController *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAViewController_setNavigationBarItem : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CANavigationBarItem* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CANavigationBarItem*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAViewController_setNavigationBarItem : Error processing arguments");
        cobj->setNavigationBarItem(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAViewController_setNavigationBarItem : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAViewController_nextResponder(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAViewController* cobj = (CrossApp::CAViewController *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAViewController_nextResponder : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CAResponder* ret = cobj->nextResponder();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAResponder>(cx, (CrossApp::CAResponder*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAViewController_nextResponder : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAViewController_getTitle(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAViewController* cobj = (CrossApp::CAViewController *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAViewController_getTitle : Invalid Native Object");
    if (argc == 0) {
        const std::string& ret = cobj->getTitle();
        jsval jsret = JSVAL_NULL;
        jsret = std_string_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAViewController_getTitle : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAViewController_viewDidAppear(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAViewController* cobj = (CrossApp::CAViewController *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAViewController_viewDidAppear : Invalid Native Object");
    if (argc == 0) {
        cobj->viewDidAppear();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAViewController_viewDidAppear : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAViewController_addViewFromSuperview(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAViewController* cobj = (CrossApp::CAViewController *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAViewController_addViewFromSuperview : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAView* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAView*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAViewController_addViewFromSuperview : Error processing arguments");
        cobj->addViewFromSuperview(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAViewController_addViewFromSuperview : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAViewController_getNavigationController(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAViewController* cobj = (CrossApp::CAViewController *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAViewController_getNavigationController : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CANavigationController* ret = cobj->getNavigationController();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CANavigationController>(cx, (CrossApp::CANavigationController*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAViewController_getNavigationController : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAViewController_getTabBarController(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAViewController* cobj = (CrossApp::CAViewController *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAViewController_getTabBarController : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CATabBarController* ret = cobj->getTabBarController();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CATabBarController>(cx, (CrossApp::CATabBarController*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAViewController_getTabBarController : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAViewController_ccTouchCancelled(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAViewController* cobj = (CrossApp::CAViewController *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAViewController_ccTouchCancelled : Invalid Native Object");
    if (argc == 2) {
        CrossApp::CATouch* arg0 = nullptr;
        CrossApp::CAEvent* arg1 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CATouch*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        do {
            if (args.get(1).isNull()) { arg1 = nullptr; break; }
            if (!args.get(1).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(1).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg1 = (CrossApp::CAEvent*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg1, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAViewController_ccTouchCancelled : Error processing arguments");
        cobj->ccTouchCancelled(arg0, arg1);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAViewController_ccTouchCancelled : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_autogentestbindings_js_CAViewController_viewDidUnload(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAViewController* cobj = (CrossApp::CAViewController *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAViewController_viewDidUnload : Invalid Native Object");
    if (argc == 0) {
        cobj->viewDidUnload();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAViewController_viewDidUnload : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAViewController_setKeypadEnabled(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAViewController* cobj = (CrossApp::CAViewController *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAViewController_setKeypadEnabled : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        arg0 = JS::ToBoolean(args.get(0));
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAViewController_setKeypadEnabled : Error processing arguments");
        cobj->setKeypadEnabled(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAViewController_setKeypadEnabled : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAViewController_keyMenuClicked(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAViewController* cobj = (CrossApp::CAViewController *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAViewController_keyMenuClicked : Invalid Native Object");
    if (argc == 0) {
        cobj->keyMenuClicked();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAViewController_keyMenuClicked : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAViewController_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    CrossApp::CAViewController* cobj = new (std::nothrow) CrossApp::CAViewController();
    TypeTest<CrossApp::CAViewController> t;
    js_type_class_t *typeClass = nullptr;
    std::string typeName = t.s_name();
    auto typeMapIter = _js_global_type_map.find(typeName);
    CCAssert(typeMapIter != _js_global_type_map.end(), "Can't find the class type!");
    typeClass = typeMapIter->second;
    CCAssert(typeClass, "The value is null.");
    JS::RootedObject proto(cx, typeClass->proto.get());
    JS::RootedObject parent(cx, typeClass->parentProto.get());
    JS::RootedObject obj(cx, JS_NewObject(cx, typeClass->jsclass, proto, parent));
    args.rval().set(OBJECT_TO_JSVAL(obj));
    // link the native object with the javascript object
    js_proxy_t* p = jsb_new_proxy(cobj, obj);
    if (JS_HasProperty(cx, obj, "_ctor", &ok) && ok)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    return true;
}

extern JSObject *jsb_CrossApp_CAContentContainer_prototype;

void js_CrossApp_CAViewController_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOGINFO("jsbindings: finalizing JS object %p (CAViewController)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::CAViewController *nobj = static_cast<CrossApp::CAViewController *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
void js_register_autogentestbindings_js_CAViewController(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_CAViewController_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_CAViewController_class->name = "CAViewController";
    jsb_CrossApp_CAViewController_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_CAViewController_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_CAViewController_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_CAViewController_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_CAViewController_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_CAViewController_class->resolve = JS_ResolveStub;
    jsb_CrossApp_CAViewController_class->convert = JS_ConvertStub;
    jsb_CrossApp_CAViewController_class->finalize = js_CrossApp_CAViewController_finalize;
    jsb_CrossApp_CAViewController_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("getView", js_autogentestbindings_js_CAViewController_getView, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("dismissModalViewController", js_autogentestbindings_js_CAViewController_dismissModalViewController, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getTabBarItem", js_autogentestbindings_js_CAViewController_getTabBarItem, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("keyBackClicked", js_autogentestbindings_js_CAViewController_keyBackClicked, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setTabBarItem", js_autogentestbindings_js_CAViewController_setTabBarItem, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getViewWithID", js_autogentestbindings_js_CAViewController_getViewWithID, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setTitle", js_autogentestbindings_js_CAViewController_setTitle, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isKeypadEnabled", js_autogentestbindings_js_CAViewController_isKeypadEnabled, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isViewRunning", js_autogentestbindings_js_CAViewController_isViewRunning, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("ccTouchEnded", js_autogentestbindings_js_CAViewController_ccTouchEnded, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("viewDidLoad", js_autogentestbindings_js_CAViewController_viewDidLoad, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("presentModalViewController", js_autogentestbindings_js_CAViewController_presentModalViewController, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("init", js_autogentestbindings_js_CAViewController_init, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getNavigationBarItem", js_autogentestbindings_js_CAViewController_getNavigationBarItem, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("ccTouchMoved", js_autogentestbindings_js_CAViewController_ccTouchMoved, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("removeViewFromSuperview", js_autogentestbindings_js_CAViewController_removeViewFromSuperview, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("ccTouchBegan", js_autogentestbindings_js_CAViewController_ccTouchBegan, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("viewDidDisappear", js_autogentestbindings_js_CAViewController_viewDidDisappear, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getNibName", js_autogentestbindings_js_CAViewController_getNibName, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setNavigationBarItem", js_autogentestbindings_js_CAViewController_setNavigationBarItem, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("nextResponder", js_autogentestbindings_js_CAViewController_nextResponder, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getTitle", js_autogentestbindings_js_CAViewController_getTitle, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("viewDidAppear", js_autogentestbindings_js_CAViewController_viewDidAppear, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("addViewFromSuperview", js_autogentestbindings_js_CAViewController_addViewFromSuperview, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getNavigationController", js_autogentestbindings_js_CAViewController_getNavigationController, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getTabBarController", js_autogentestbindings_js_CAViewController_getTabBarController, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("ccTouchCancelled", js_autogentestbindings_js_CAViewController_ccTouchCancelled, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("viewDidUnload", js_autogentestbindings_js_CAViewController_viewDidUnload, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setKeypadEnabled", js_autogentestbindings_js_CAViewController_setKeypadEnabled, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("keyMenuClicked", js_autogentestbindings_js_CAViewController_keyMenuClicked, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    JSFunctionSpec *st_funcs = NULL;

    jsb_CrossApp_CAViewController_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_CAContentContainer_prototype),
        jsb_CrossApp_CAViewController_class,
        js_autogentestbindings_js_CAViewController_constructor, 0, // constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27 
//  JS_SetPropertyAttributes(cx, global, "CAViewController", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::CAViewController> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_CAViewController_class;
        p->proto = jsb_CrossApp_CAViewController_prototype;
        p->parentProto = jsb_CrossApp_CAContentContainer_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
}

JSClass  *jsb_CrossApp_CANavigationController_class;
JSObject *jsb_CrossApp_CANavigationController_prototype;

bool js_autogentestbindings_js_CANavigationController_ccTouchBegan(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CANavigationController* cobj = (CrossApp::CANavigationController *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CANavigationController_ccTouchBegan : Invalid Native Object");
    if (argc == 2) {
        CrossApp::CATouch* arg0 = nullptr;
        CrossApp::CAEvent* arg1 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CATouch*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        do {
            if (args.get(1).isNull()) { arg1 = nullptr; break; }
            if (!args.get(1).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(1).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg1 = (CrossApp::CAEvent*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg1, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CANavigationController_ccTouchBegan : Error processing arguments");
        bool ret = cobj->ccTouchBegan(arg0, arg1);
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CANavigationController_ccTouchBegan : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_autogentestbindings_js_CANavigationController_setNavigationBarTitleColor(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CANavigationController* cobj = (CrossApp::CANavigationController *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CANavigationController_setNavigationBarTitleColor : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAColor4B arg0;
        ok &= jsval_to_cacolor4b(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CANavigationController_setNavigationBarTitleColor : Error processing arguments");
        cobj->setNavigationBarTitleColor(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CANavigationController_setNavigationBarTitleColor : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CANavigationController_ccTouchEnded(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CANavigationController* cobj = (CrossApp::CANavigationController *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CANavigationController_ccTouchEnded : Invalid Native Object");
    if (argc == 2) {
        CrossApp::CATouch* arg0 = nullptr;
        CrossApp::CAEvent* arg1 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CATouch*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        do {
            if (args.get(1).isNull()) { arg1 = nullptr; break; }
            if (!args.get(1).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(1).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg1 = (CrossApp::CAEvent*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg1, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CANavigationController_ccTouchEnded : Error processing arguments");
        cobj->ccTouchEnded(arg0, arg1);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CANavigationController_ccTouchEnded : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_autogentestbindings_js_CANavigationController_setNavigationBarButtonColor(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CANavigationController* cobj = (CrossApp::CANavigationController *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CANavigationController_setNavigationBarButtonColor : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAColor4B arg0;
        ok &= jsval_to_cacolor4b(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CANavigationController_setNavigationBarButtonColor : Error processing arguments");
        cobj->setNavigationBarButtonColor(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CANavigationController_setNavigationBarButtonColor : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CANavigationController_ccTouchCancelled(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CANavigationController* cobj = (CrossApp::CANavigationController *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CANavigationController_ccTouchCancelled : Invalid Native Object");
    if (argc == 2) {
        CrossApp::CATouch* arg0 = nullptr;
        CrossApp::CAEvent* arg1 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CATouch*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        do {
            if (args.get(1).isNull()) { arg1 = nullptr; break; }
            if (!args.get(1).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(1).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg1 = (CrossApp::CAEvent*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg1, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CANavigationController_ccTouchCancelled : Error processing arguments");
        cobj->ccTouchCancelled(arg0, arg1);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CANavigationController_ccTouchCancelled : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_autogentestbindings_js_CANavigationController_updateItem(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CANavigationController* cobj = (CrossApp::CANavigationController *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CANavigationController_updateItem : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAViewController* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAViewController*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CANavigationController_updateItem : Error processing arguments");
        cobj->updateItem(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CANavigationController_updateItem : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CANavigationController_getBackViewController(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CANavigationController* cobj = (CrossApp::CANavigationController *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CANavigationController_getBackViewController : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CAViewController* ret = cobj->getBackViewController();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAViewController>(cx, (CrossApp::CAViewController*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CANavigationController_getBackViewController : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CANavigationController_getNavigationBarBackgroundColor(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CANavigationController* cobj = (CrossApp::CANavigationController *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CANavigationController_getNavigationBarBackgroundColor : Invalid Native Object");
    if (argc == 0) {
        const CrossApp::CAColor4B& ret = cobj->getNavigationBarBackgroundColor();
        jsval jsret = JSVAL_NULL;
        jsret = cacolor4b_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CANavigationController_getNavigationBarBackgroundColor : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CANavigationController_getViewControllerCount(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CANavigationController* cobj = (CrossApp::CANavigationController *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CANavigationController_getViewControllerCount : Invalid Native Object");
    if (argc == 0) {
        unsigned long ret = cobj->getViewControllerCount();
        jsval jsret = JSVAL_NULL;
        jsret = ulong_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CANavigationController_getViewControllerCount : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CANavigationController_setNavigationBarHidden(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CANavigationController* cobj = (CrossApp::CANavigationController *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CANavigationController_setNavigationBarHidden : Invalid Native Object");
    if (argc == 2) {
        bool arg0;
        bool arg1;
        arg0 = JS::ToBoolean(args.get(0));
        arg1 = JS::ToBoolean(args.get(1));
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CANavigationController_setNavigationBarHidden : Error processing arguments");
        cobj->setNavigationBarHidden(arg0, arg1);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CANavigationController_setNavigationBarHidden : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_autogentestbindings_js_CANavigationController_ccTouchMoved(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CANavigationController* cobj = (CrossApp::CANavigationController *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CANavigationController_ccTouchMoved : Invalid Native Object");
    if (argc == 2) {
        CrossApp::CATouch* arg0 = nullptr;
        CrossApp::CAEvent* arg1 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CATouch*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        do {
            if (args.get(1).isNull()) { arg1 = nullptr; break; }
            if (!args.get(1).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(1).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg1 = (CrossApp::CAEvent*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg1, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CANavigationController_ccTouchMoved : Error processing arguments");
        cobj->ccTouchMoved(arg0, arg1);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CANavigationController_ccTouchMoved : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_autogentestbindings_js_CANavigationController_replaceViewController(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CANavigationController* cobj = (CrossApp::CANavigationController *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CANavigationController_replaceViewController : Invalid Native Object");
    if (argc == 2) {
        CrossApp::CAViewController* arg0 = nullptr;
        bool arg1;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAViewController*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        arg1 = JS::ToBoolean(args.get(1));
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CANavigationController_replaceViewController : Error processing arguments");
        cobj->replaceViewController(arg0, arg1);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CANavigationController_replaceViewController : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_autogentestbindings_js_CANavigationController_popToRootViewControllerAnimated(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CANavigationController* cobj = (CrossApp::CANavigationController *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CANavigationController_popToRootViewControllerAnimated : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        arg0 = JS::ToBoolean(args.get(0));
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CANavigationController_popToRootViewControllerAnimated : Error processing arguments");
        cobj->popToRootViewControllerAnimated(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CANavigationController_popToRootViewControllerAnimated : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CANavigationController_pushViewController(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CANavigationController* cobj = (CrossApp::CANavigationController *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CANavigationController_pushViewController : Invalid Native Object");
    if (argc == 2) {
        CrossApp::CAViewController* arg0 = nullptr;
        bool arg1;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAViewController*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        arg1 = JS::ToBoolean(args.get(1));
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CANavigationController_pushViewController : Error processing arguments");
        cobj->pushViewController(arg0, arg1);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CANavigationController_pushViewController : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_autogentestbindings_js_CANavigationController_isReachBoundaryDown(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CANavigationController* cobj = (CrossApp::CANavigationController *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CANavigationController_isReachBoundaryDown : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->isReachBoundaryDown();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CANavigationController_isReachBoundaryDown : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CANavigationController_setTouchMoved(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CANavigationController* cobj = (CrossApp::CANavigationController *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CANavigationController_setTouchMoved : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        arg0 = JS::ToBoolean(args.get(0));
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CANavigationController_setTouchMoved : Error processing arguments");
        cobj->setTouchMoved(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CANavigationController_setTouchMoved : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CANavigationController_initWithRootViewController(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CANavigationController* cobj = (CrossApp::CANavigationController *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CANavigationController_initWithRootViewController : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAViewController* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAViewController*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CANavigationController_initWithRootViewController : Error processing arguments");
        bool ret = cobj->initWithRootViewController(arg0);
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CANavigationController_initWithRootViewController : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CANavigationController_isReachBoundaryRight(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CANavigationController* cobj = (CrossApp::CANavigationController *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CANavigationController_isReachBoundaryRight : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->isReachBoundaryRight();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CANavigationController_isReachBoundaryRight : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CANavigationController_popViewControllerAnimated(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CANavigationController* cobj = (CrossApp::CANavigationController *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CANavigationController_popViewControllerAnimated : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        arg0 = JS::ToBoolean(args.get(0));
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CANavigationController_popViewControllerAnimated : Error processing arguments");
        CrossApp::CAViewController* ret = cobj->popViewControllerAnimated(arg0);
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAViewController>(cx, (CrossApp::CAViewController*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CANavigationController_popViewControllerAnimated : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CANavigationController_getNavigationBarButtonColor(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CANavigationController* cobj = (CrossApp::CANavigationController *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CANavigationController_getNavigationBarButtonColor : Invalid Native Object");
    if (argc == 0) {
        const CrossApp::CAColor4B& ret = cobj->getNavigationBarButtonColor();
        jsval jsret = JSVAL_NULL;
        jsret = cacolor4b_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CANavigationController_getNavigationBarButtonColor : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CANavigationController_isTouchMoved(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CANavigationController* cobj = (CrossApp::CANavigationController *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CANavigationController_isTouchMoved : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->isTouchMoved();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CANavigationController_isTouchMoved : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CANavigationController_getNavigationBarTitleColor(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CANavigationController* cobj = (CrossApp::CANavigationController *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CANavigationController_getNavigationBarTitleColor : Invalid Native Object");
    if (argc == 0) {
        const CrossApp::CAColor4B& ret = cobj->getNavigationBarTitleColor();
        jsval jsret = JSVAL_NULL;
        jsret = cacolor4b_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CANavigationController_getNavigationBarTitleColor : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CANavigationController_isReachBoundaryUp(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CANavigationController* cobj = (CrossApp::CANavigationController *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CANavigationController_isReachBoundaryUp : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->isReachBoundaryUp();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CANavigationController_isReachBoundaryUp : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CANavigationController_isReachBoundaryLeft(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CANavigationController* cobj = (CrossApp::CANavigationController *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CANavigationController_isReachBoundaryLeft : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->isReachBoundaryLeft();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CANavigationController_isReachBoundaryLeft : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CANavigationController_setNavigationBarBackgroundColor(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CANavigationController* cobj = (CrossApp::CANavigationController *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CANavigationController_setNavigationBarBackgroundColor : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAColor4B arg0;
        ok &= jsval_to_cacolor4b(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CANavigationController_setNavigationBarBackgroundColor : Error processing arguments");
        cobj->setNavigationBarBackgroundColor(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CANavigationController_setNavigationBarBackgroundColor : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CANavigationController_isNavigationBarHidden(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CANavigationController* cobj = (CrossApp::CANavigationController *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CANavigationController_isNavigationBarHidden : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->isNavigationBarHidden();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CANavigationController_isNavigationBarHidden : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CANavigationController_getNavigationBarBackgroundImage(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CANavigationController* cobj = (CrossApp::CANavigationController *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CANavigationController_getNavigationBarBackgroundImage : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CAImage* ret = cobj->getNavigationBarBackgroundImage();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAImage>(cx, (CrossApp::CAImage*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CANavigationController_getNavigationBarBackgroundImage : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CANavigationController_getViewControllerAtIndex(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CANavigationController* cobj = (CrossApp::CANavigationController *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CANavigationController_getViewControllerAtIndex : Invalid Native Object");
    if (argc == 1) {
        int arg0 = 0;
        ok &= jsval_to_int32(cx, args.get(0), (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CANavigationController_getViewControllerAtIndex : Error processing arguments");
        CrossApp::CAViewController* ret = cobj->getViewControllerAtIndex(arg0);
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAViewController>(cx, (CrossApp::CAViewController*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CANavigationController_getViewControllerAtIndex : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CANavigationController_setNavigationBarBackgroundImage(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CANavigationController* cobj = (CrossApp::CANavigationController *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CANavigationController_setNavigationBarBackgroundImage : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAImage* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAImage*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CANavigationController_setNavigationBarBackgroundImage : Error processing arguments");
        cobj->setNavigationBarBackgroundImage(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CANavigationController_setNavigationBarBackgroundImage : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CANavigationController_popFirstViewController(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CANavigationController* cobj = (CrossApp::CANavigationController *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CANavigationController_popFirstViewController : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CAViewController* ret = cobj->popFirstViewController();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAViewController>(cx, (CrossApp::CAViewController*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CANavigationController_popFirstViewController : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CANavigationController_popViewControllerAtIndex(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CANavigationController* cobj = (CrossApp::CANavigationController *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CANavigationController_popViewControllerAtIndex : Invalid Native Object");
    if (argc == 1) {
        int arg0 = 0;
        ok &= jsval_to_int32(cx, args.get(0), (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CANavigationController_popViewControllerAtIndex : Error processing arguments");
        CrossApp::CAViewController* ret = cobj->popViewControllerAtIndex(arg0);
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAViewController>(cx, (CrossApp::CAViewController*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CANavigationController_popViewControllerAtIndex : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CANavigationController_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    CrossApp::CANavigationController* cobj = new (std::nothrow) CrossApp::CANavigationController();
    TypeTest<CrossApp::CANavigationController> t;
    js_type_class_t *typeClass = nullptr;
    std::string typeName = t.s_name();
    auto typeMapIter = _js_global_type_map.find(typeName);
    CCAssert(typeMapIter != _js_global_type_map.end(), "Can't find the class type!");
    typeClass = typeMapIter->second;
    CCAssert(typeClass, "The value is null.");
    JS::RootedObject proto(cx, typeClass->proto.get());
    JS::RootedObject parent(cx, typeClass->parentProto.get());
    JS::RootedObject obj(cx, JS_NewObject(cx, typeClass->jsclass, proto, parent));
    args.rval().set(OBJECT_TO_JSVAL(obj));
    // link the native object with the javascript object
    js_proxy_t* p = jsb_new_proxy(cobj, obj);
    if (JS_HasProperty(cx, obj, "_ctor", &ok) && ok)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    return true;
}

extern JSObject *jsb_CrossApp_CAViewController_prototype;

void js_CrossApp_CANavigationController_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOGINFO("jsbindings: finalizing JS object %p (CANavigationController)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::CANavigationController *nobj = static_cast<CrossApp::CANavigationController *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
void js_register_autogentestbindings_js_CANavigationController(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_CANavigationController_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_CANavigationController_class->name = "CANavigationController";
    jsb_CrossApp_CANavigationController_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_CANavigationController_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_CANavigationController_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_CANavigationController_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_CANavigationController_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_CANavigationController_class->resolve = JS_ResolveStub;
    jsb_CrossApp_CANavigationController_class->convert = JS_ConvertStub;
    jsb_CrossApp_CANavigationController_class->finalize = js_CrossApp_CANavigationController_finalize;
    jsb_CrossApp_CANavigationController_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("ccTouchBegan", js_autogentestbindings_js_CANavigationController_ccTouchBegan, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setNavigationBarTitleColor", js_autogentestbindings_js_CANavigationController_setNavigationBarTitleColor, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("ccTouchEnded", js_autogentestbindings_js_CANavigationController_ccTouchEnded, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setNavigationBarButtonColor", js_autogentestbindings_js_CANavigationController_setNavigationBarButtonColor, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("ccTouchCancelled", js_autogentestbindings_js_CANavigationController_ccTouchCancelled, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("updateItem", js_autogentestbindings_js_CANavigationController_updateItem, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getBackViewController", js_autogentestbindings_js_CANavigationController_getBackViewController, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getNavigationBarBackgroundColor", js_autogentestbindings_js_CANavigationController_getNavigationBarBackgroundColor, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getViewControllerCount", js_autogentestbindings_js_CANavigationController_getViewControllerCount, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setNavigationBarHidden", js_autogentestbindings_js_CANavigationController_setNavigationBarHidden, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("ccTouchMoved", js_autogentestbindings_js_CANavigationController_ccTouchMoved, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("replaceViewController", js_autogentestbindings_js_CANavigationController_replaceViewController, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("popToRootViewControllerAnimated", js_autogentestbindings_js_CANavigationController_popToRootViewControllerAnimated, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("pushViewController", js_autogentestbindings_js_CANavigationController_pushViewController, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isReachBoundaryDown", js_autogentestbindings_js_CANavigationController_isReachBoundaryDown, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setTouchMoved", js_autogentestbindings_js_CANavigationController_setTouchMoved, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("initWithRootViewController", js_autogentestbindings_js_CANavigationController_initWithRootViewController, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isReachBoundaryRight", js_autogentestbindings_js_CANavigationController_isReachBoundaryRight, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("popViewControllerAnimated", js_autogentestbindings_js_CANavigationController_popViewControllerAnimated, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getNavigationBarButtonColor", js_autogentestbindings_js_CANavigationController_getNavigationBarButtonColor, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isTouchMoved", js_autogentestbindings_js_CANavigationController_isTouchMoved, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getNavigationBarTitleColor", js_autogentestbindings_js_CANavigationController_getNavigationBarTitleColor, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isReachBoundaryUp", js_autogentestbindings_js_CANavigationController_isReachBoundaryUp, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isReachBoundaryLeft", js_autogentestbindings_js_CANavigationController_isReachBoundaryLeft, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setNavigationBarBackgroundColor", js_autogentestbindings_js_CANavigationController_setNavigationBarBackgroundColor, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isNavigationBarHidden", js_autogentestbindings_js_CANavigationController_isNavigationBarHidden, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getNavigationBarBackgroundImage", js_autogentestbindings_js_CANavigationController_getNavigationBarBackgroundImage, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getViewControllerAtIndex", js_autogentestbindings_js_CANavigationController_getViewControllerAtIndex, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setNavigationBarBackgroundImage", js_autogentestbindings_js_CANavigationController_setNavigationBarBackgroundImage, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("popFirstViewController", js_autogentestbindings_js_CANavigationController_popFirstViewController, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("popViewControllerAtIndex", js_autogentestbindings_js_CANavigationController_popViewControllerAtIndex, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    JSFunctionSpec *st_funcs = NULL;

    jsb_CrossApp_CANavigationController_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_CAViewController_prototype),
        jsb_CrossApp_CANavigationController_class,
        js_autogentestbindings_js_CANavigationController_constructor, 0, // constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27 
//  JS_SetPropertyAttributes(cx, global, "CANavigationController", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::CANavigationController> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_CANavigationController_class;
        p->proto = jsb_CrossApp_CANavigationController_prototype;
        p->parentProto = jsb_CrossApp_CAViewController_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
}

JSClass  *jsb_CrossApp_CATabBarController_class;
JSObject *jsb_CrossApp_CATabBarController_prototype;

bool js_autogentestbindings_js_CATabBarController_getSelectedViewController(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATabBarController* cobj = (CrossApp::CATabBarController *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CATabBarController_getSelectedViewController : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CAViewController* ret = cobj->getSelectedViewController();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAViewController>(cx, (CrossApp::CAViewController*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CATabBarController_getSelectedViewController : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CATabBarController_setTabBarSelectedBackgroundImage(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATabBarController* cobj = (CrossApp::CATabBarController *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CATabBarController_setTabBarSelectedBackgroundImage : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAImage* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAImage*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CATabBarController_setTabBarSelectedBackgroundImage : Error processing arguments");
        cobj->setTabBarSelectedBackgroundImage(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CATabBarController_setTabBarSelectedBackgroundImage : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CATabBarController_setTabBarBackgroundImage(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATabBarController* cobj = (CrossApp::CATabBarController *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CATabBarController_setTabBarBackgroundImage : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAImage* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAImage*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CATabBarController_setTabBarBackgroundImage : Error processing arguments");
        cobj->setTabBarBackgroundImage(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CATabBarController_setTabBarBackgroundImage : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CATabBarController_setTabBarTitleColorForSelected(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATabBarController* cobj = (CrossApp::CATabBarController *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CATabBarController_setTabBarTitleColorForSelected : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAColor4B arg0;
        ok &= jsval_to_cacolor4b(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CATabBarController_setTabBarTitleColorForSelected : Error processing arguments");
        cobj->setTabBarTitleColorForSelected(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CATabBarController_setTabBarTitleColorForSelected : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CATabBarController_showSelectedViewControllerAtIndex(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATabBarController* cobj = (CrossApp::CATabBarController *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CATabBarController_showSelectedViewControllerAtIndex : Invalid Native Object");
    if (argc == 1) {
        unsigned int arg0 = 0;
        ok &= jsval_to_uint32(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CATabBarController_showSelectedViewControllerAtIndex : Error processing arguments");
        bool ret = cobj->showSelectedViewControllerAtIndex(arg0);
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CATabBarController_showSelectedViewControllerAtIndex : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CATabBarController_setTabBarHidden(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATabBarController* cobj = (CrossApp::CATabBarController *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CATabBarController_setTabBarHidden : Invalid Native Object");
    if (argc == 2) {
        bool arg0;
        bool arg1;
        arg0 = JS::ToBoolean(args.get(0));
        arg1 = JS::ToBoolean(args.get(1));
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CATabBarController_setTabBarHidden : Error processing arguments");
        cobj->setTabBarHidden(arg0, arg1);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CATabBarController_setTabBarHidden : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_autogentestbindings_js_CATabBarController_updateItem(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATabBarController* cobj = (CrossApp::CATabBarController *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CATabBarController_updateItem : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAViewController* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAViewController*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CATabBarController_updateItem : Error processing arguments");
        cobj->updateItem(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CATabBarController_updateItem : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CATabBarController_setTabBarTitleColorForNormal(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATabBarController* cobj = (CrossApp::CATabBarController *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CATabBarController_setTabBarTitleColorForNormal : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAColor4B arg0;
        ok &= jsval_to_cacolor4b(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CATabBarController_setTabBarTitleColorForNormal : Error processing arguments");
        cobj->setTabBarTitleColorForNormal(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CATabBarController_setTabBarTitleColorForNormal : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CATabBarController_setTabBarSelectedIndicatorImage(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATabBarController* cobj = (CrossApp::CATabBarController *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CATabBarController_setTabBarSelectedIndicatorImage : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAImage* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAImage*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CATabBarController_setTabBarSelectedIndicatorImage : Error processing arguments");
        cobj->setTabBarSelectedIndicatorImage(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CATabBarController_setTabBarSelectedIndicatorImage : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CATabBarController_getTabBarTitleColorForSelected(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATabBarController* cobj = (CrossApp::CATabBarController *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CATabBarController_getTabBarTitleColorForSelected : Invalid Native Object");
    if (argc == 0) {
        const CrossApp::CAColor4B& ret = cobj->getTabBarTitleColorForSelected();
        jsval jsret = JSVAL_NULL;
        jsret = cacolor4b_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CATabBarController_getTabBarTitleColorForSelected : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CATabBarController_getSelectedViewControllerAtIndex(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATabBarController* cobj = (CrossApp::CATabBarController *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CATabBarController_getSelectedViewControllerAtIndex : Invalid Native Object");
    if (argc == 0) {
        unsigned int ret = cobj->getSelectedViewControllerAtIndex();
        jsval jsret = JSVAL_NULL;
        jsret = uint32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CATabBarController_getSelectedViewControllerAtIndex : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CATabBarController_getTabBarSelectedBackgroundColor(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATabBarController* cobj = (CrossApp::CATabBarController *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CATabBarController_getTabBarSelectedBackgroundColor : Invalid Native Object");
    if (argc == 0) {
        const CrossApp::CAColor4B& ret = cobj->getTabBarSelectedBackgroundColor();
        jsval jsret = JSVAL_NULL;
        jsret = cacolor4b_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CATabBarController_getTabBarSelectedBackgroundColor : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CATabBarController_showSelectedViewController(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATabBarController* cobj = (CrossApp::CATabBarController *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CATabBarController_showSelectedViewController : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAViewController* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAViewController*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CATabBarController_showSelectedViewController : Error processing arguments");
        bool ret = cobj->showSelectedViewController(arg0);
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CATabBarController_showSelectedViewController : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CATabBarController_getTabBarSelectedBackgroundImage(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATabBarController* cobj = (CrossApp::CATabBarController *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CATabBarController_getTabBarSelectedBackgroundImage : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CAImage* ret = cobj->getTabBarSelectedBackgroundImage();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAImage>(cx, (CrossApp::CAImage*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CATabBarController_getTabBarSelectedBackgroundImage : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CATabBarController_getTabBarBackgroundColor(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATabBarController* cobj = (CrossApp::CATabBarController *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CATabBarController_getTabBarBackgroundColor : Invalid Native Object");
    if (argc == 0) {
        const CrossApp::CAColor4B& ret = cobj->getTabBarBackgroundColor();
        jsval jsret = JSVAL_NULL;
        jsret = cacolor4b_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CATabBarController_getTabBarBackgroundColor : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CATabBarController_getTabBarBackgroundImage(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATabBarController* cobj = (CrossApp::CATabBarController *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CATabBarController_getTabBarBackgroundImage : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CAImage* ret = cobj->getTabBarBackgroundImage();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAImage>(cx, (CrossApp::CAImage*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CATabBarController_getTabBarBackgroundImage : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CATabBarController_getTabBarVerticalAlignment(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATabBarController* cobj = (CrossApp::CATabBarController *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CATabBarController_getTabBarVerticalAlignment : Invalid Native Object");
    if (argc == 0) {
        int ret = (int)cobj->getTabBarVerticalAlignment();
        jsval jsret = JSVAL_NULL;
        jsret = int32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CATabBarController_getTabBarVerticalAlignment : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CATabBarController_getTabBarSelectedIndicatorColor(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATabBarController* cobj = (CrossApp::CATabBarController *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CATabBarController_getTabBarSelectedIndicatorColor : Invalid Native Object");
    if (argc == 0) {
        const CrossApp::CAColor4B& ret = cobj->getTabBarSelectedIndicatorColor();
        jsval jsret = JSVAL_NULL;
        jsret = cacolor4b_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CATabBarController_getTabBarSelectedIndicatorColor : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CATabBarController_setTabBarSelectedIndicatorColor(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATabBarController* cobj = (CrossApp::CATabBarController *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CATabBarController_setTabBarSelectedIndicatorColor : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAColor4B arg0;
        ok &= jsval_to_cacolor4b(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CATabBarController_setTabBarSelectedIndicatorColor : Error processing arguments");
        cobj->setTabBarSelectedIndicatorColor(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CATabBarController_setTabBarSelectedIndicatorColor : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CATabBarController_showTabBarSelectedIndicator(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATabBarController* cobj = (CrossApp::CATabBarController *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CATabBarController_showTabBarSelectedIndicator : Invalid Native Object");
    if (argc == 0) {
        cobj->showTabBarSelectedIndicator();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CATabBarController_showTabBarSelectedIndicator : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CATabBarController_getTabBarSelectedIndicatorImage(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATabBarController* cobj = (CrossApp::CATabBarController *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CATabBarController_getTabBarSelectedIndicatorImage : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CAImage* ret = cobj->getTabBarSelectedIndicatorImage();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAImage>(cx, (CrossApp::CAImage*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CATabBarController_getTabBarSelectedIndicatorImage : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CATabBarController_initWithViewControllers(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATabBarController* cobj = (CrossApp::CATabBarController *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CATabBarController_initWithViewControllers : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAVector<CrossApp::CAViewController *> arg0;
        ok &= jsval_to_cavector(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CATabBarController_initWithViewControllers : Error processing arguments");
        bool ret = cobj->initWithViewControllers(arg0);
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }
    if (argc == 2) {
        CrossApp::CAVector<CrossApp::CAViewController *> arg0;
        CrossApp::CABarVerticalAlignment arg1;
        ok &= jsval_to_cavector(cx, args.get(0), &arg0);
        ok &= jsval_to_int32(cx, args.get(1), (int32_t *)&arg1);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CATabBarController_initWithViewControllers : Error processing arguments");
        bool ret = cobj->initWithViewControllers(arg0, arg1);
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CATabBarController_initWithViewControllers : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CATabBarController_getTabBarTitleColorForNormal(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATabBarController* cobj = (CrossApp::CATabBarController *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CATabBarController_getTabBarTitleColorForNormal : Invalid Native Object");
    if (argc == 0) {
        const CrossApp::CAColor4B& ret = cobj->getTabBarTitleColorForNormal();
        jsval jsret = JSVAL_NULL;
        jsret = cacolor4b_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CATabBarController_getTabBarTitleColorForNormal : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CATabBarController_getViewControllerAtIndex(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATabBarController* cobj = (CrossApp::CATabBarController *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CATabBarController_getViewControllerAtIndex : Invalid Native Object");
    if (argc == 1) {
        unsigned int arg0 = 0;
        ok &= jsval_to_uint32(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CATabBarController_getViewControllerAtIndex : Error processing arguments");
        CrossApp::CAViewController* ret = cobj->getViewControllerAtIndex(arg0);
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAViewController>(cx, (CrossApp::CAViewController*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CATabBarController_getViewControllerAtIndex : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CATabBarController_setTabBarBackgroundColor(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATabBarController* cobj = (CrossApp::CATabBarController *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CATabBarController_setTabBarBackgroundColor : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAColor4B arg0;
        ok &= jsval_to_cacolor4b(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CATabBarController_setTabBarBackgroundColor : Error processing arguments");
        cobj->setTabBarBackgroundColor(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CATabBarController_setTabBarBackgroundColor : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CATabBarController_setTabBarSelectedBackgroundColor(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATabBarController* cobj = (CrossApp::CATabBarController *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CATabBarController_setTabBarSelectedBackgroundColor : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAColor4B arg0;
        ok &= jsval_to_cacolor4b(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CATabBarController_setTabBarSelectedBackgroundColor : Error processing arguments");
        cobj->setTabBarSelectedBackgroundColor(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CATabBarController_setTabBarSelectedBackgroundColor : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CATabBarController_isTabBarHidden(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATabBarController* cobj = (CrossApp::CATabBarController *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CATabBarController_isTabBarHidden : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->isTabBarHidden();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CATabBarController_isTabBarHidden : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CATabBarController_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    CrossApp::CATabBarController* cobj = new (std::nothrow) CrossApp::CATabBarController();
    TypeTest<CrossApp::CATabBarController> t;
    js_type_class_t *typeClass = nullptr;
    std::string typeName = t.s_name();
    auto typeMapIter = _js_global_type_map.find(typeName);
    CCAssert(typeMapIter != _js_global_type_map.end(), "Can't find the class type!");
    typeClass = typeMapIter->second;
    CCAssert(typeClass, "The value is null.");
    JS::RootedObject proto(cx, typeClass->proto.get());
    JS::RootedObject parent(cx, typeClass->parentProto.get());
    JS::RootedObject obj(cx, JS_NewObject(cx, typeClass->jsclass, proto, parent));
    args.rval().set(OBJECT_TO_JSVAL(obj));
    // link the native object with the javascript object
    js_proxy_t* p = jsb_new_proxy(cobj, obj);
    if (JS_HasProperty(cx, obj, "_ctor", &ok) && ok)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    return true;
}

extern JSObject *jsb_CrossApp_CAViewController_prototype;

void js_CrossApp_CATabBarController_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOGINFO("jsbindings: finalizing JS object %p (CATabBarController)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::CATabBarController *nobj = static_cast<CrossApp::CATabBarController *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
void js_register_autogentestbindings_js_CATabBarController(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_CATabBarController_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_CATabBarController_class->name = "CATabBarController";
    jsb_CrossApp_CATabBarController_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_CATabBarController_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_CATabBarController_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_CATabBarController_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_CATabBarController_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_CATabBarController_class->resolve = JS_ResolveStub;
    jsb_CrossApp_CATabBarController_class->convert = JS_ConvertStub;
    jsb_CrossApp_CATabBarController_class->finalize = js_CrossApp_CATabBarController_finalize;
    jsb_CrossApp_CATabBarController_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("getSelectedViewController", js_autogentestbindings_js_CATabBarController_getSelectedViewController, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setTabBarSelectedBackgroundImage", js_autogentestbindings_js_CATabBarController_setTabBarSelectedBackgroundImage, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setTabBarBackgroundImage", js_autogentestbindings_js_CATabBarController_setTabBarBackgroundImage, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setTabBarTitleColorForSelected", js_autogentestbindings_js_CATabBarController_setTabBarTitleColorForSelected, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("showSelectedViewControllerAtIndex", js_autogentestbindings_js_CATabBarController_showSelectedViewControllerAtIndex, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setTabBarHidden", js_autogentestbindings_js_CATabBarController_setTabBarHidden, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("updateItem", js_autogentestbindings_js_CATabBarController_updateItem, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setTabBarTitleColorForNormal", js_autogentestbindings_js_CATabBarController_setTabBarTitleColorForNormal, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setTabBarSelectedIndicatorImage", js_autogentestbindings_js_CATabBarController_setTabBarSelectedIndicatorImage, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getTabBarTitleColorForSelected", js_autogentestbindings_js_CATabBarController_getTabBarTitleColorForSelected, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getSelectedViewControllerAtIndex", js_autogentestbindings_js_CATabBarController_getSelectedViewControllerAtIndex, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getTabBarSelectedBackgroundColor", js_autogentestbindings_js_CATabBarController_getTabBarSelectedBackgroundColor, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("showSelectedViewController", js_autogentestbindings_js_CATabBarController_showSelectedViewController, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getTabBarSelectedBackgroundImage", js_autogentestbindings_js_CATabBarController_getTabBarSelectedBackgroundImage, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getTabBarBackgroundColor", js_autogentestbindings_js_CATabBarController_getTabBarBackgroundColor, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getTabBarBackgroundImage", js_autogentestbindings_js_CATabBarController_getTabBarBackgroundImage, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getTabBarVerticalAlignment", js_autogentestbindings_js_CATabBarController_getTabBarVerticalAlignment, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getTabBarSelectedIndicatorColor", js_autogentestbindings_js_CATabBarController_getTabBarSelectedIndicatorColor, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setTabBarSelectedIndicatorColor", js_autogentestbindings_js_CATabBarController_setTabBarSelectedIndicatorColor, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("showTabBarSelectedIndicator", js_autogentestbindings_js_CATabBarController_showTabBarSelectedIndicator, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getTabBarSelectedIndicatorImage", js_autogentestbindings_js_CATabBarController_getTabBarSelectedIndicatorImage, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("initWithViewControllers", js_autogentestbindings_js_CATabBarController_initWithViewControllers, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getTabBarTitleColorForNormal", js_autogentestbindings_js_CATabBarController_getTabBarTitleColorForNormal, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getViewControllerAtIndex", js_autogentestbindings_js_CATabBarController_getViewControllerAtIndex, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setTabBarBackgroundColor", js_autogentestbindings_js_CATabBarController_setTabBarBackgroundColor, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setTabBarSelectedBackgroundColor", js_autogentestbindings_js_CATabBarController_setTabBarSelectedBackgroundColor, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isTabBarHidden", js_autogentestbindings_js_CATabBarController_isTabBarHidden, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    JSFunctionSpec *st_funcs = NULL;

    jsb_CrossApp_CATabBarController_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_CAViewController_prototype),
        jsb_CrossApp_CATabBarController_class,
        js_autogentestbindings_js_CATabBarController_constructor, 0, // constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27 
//  JS_SetPropertyAttributes(cx, global, "CATabBarController", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::CATabBarController> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_CATabBarController_class;
        p->proto = jsb_CrossApp_CATabBarController_prototype;
        p->parentProto = jsb_CrossApp_CAViewController_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
}

JSClass  *jsb_CrossApp_CADrawerController_class;
JSObject *jsb_CrossApp_CADrawerController_prototype;

bool js_autogentestbindings_js_CADrawerController_hideLeftViewController(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CADrawerController* cobj = (CrossApp::CADrawerController *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CADrawerController_hideLeftViewController : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        arg0 = JS::ToBoolean(args.get(0));
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CADrawerController_hideLeftViewController : Error processing arguments");
        cobj->hideLeftViewController(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CADrawerController_hideLeftViewController : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CADrawerController_isReachBoundaryLeft(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CADrawerController* cobj = (CrossApp::CADrawerController *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CADrawerController_isReachBoundaryLeft : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->isReachBoundaryLeft();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CADrawerController_isReachBoundaryLeft : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CADrawerController_showLeftViewController(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CADrawerController* cobj = (CrossApp::CADrawerController *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CADrawerController_showLeftViewController : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        arg0 = JS::ToBoolean(args.get(0));
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CADrawerController_showLeftViewController : Error processing arguments");
        cobj->showLeftViewController(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CADrawerController_showLeftViewController : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CADrawerController_ccTouchEnded(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CADrawerController* cobj = (CrossApp::CADrawerController *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CADrawerController_ccTouchEnded : Invalid Native Object");
    if (argc == 2) {
        CrossApp::CATouch* arg0 = nullptr;
        CrossApp::CAEvent* arg1 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CATouch*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        do {
            if (args.get(1).isNull()) { arg1 = nullptr; break; }
            if (!args.get(1).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(1).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg1 = (CrossApp::CAEvent*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg1, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CADrawerController_ccTouchEnded : Error processing arguments");
        cobj->ccTouchEnded(arg0, arg1);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CADrawerController_ccTouchEnded : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_autogentestbindings_js_CADrawerController_ccTouchBegan(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CADrawerController* cobj = (CrossApp::CADrawerController *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CADrawerController_ccTouchBegan : Invalid Native Object");
    if (argc == 2) {
        CrossApp::CATouch* arg0 = nullptr;
        CrossApp::CAEvent* arg1 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CATouch*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        do {
            if (args.get(1).isNull()) { arg1 = nullptr; break; }
            if (!args.get(1).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(1).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg1 = (CrossApp::CAEvent*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg1, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CADrawerController_ccTouchBegan : Error processing arguments");
        bool ret = cobj->ccTouchBegan(arg0, arg1);
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CADrawerController_ccTouchBegan : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_autogentestbindings_js_CADrawerController_setTouchMoved(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CADrawerController* cobj = (CrossApp::CADrawerController *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CADrawerController_setTouchMoved : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        arg0 = JS::ToBoolean(args.get(0));
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CADrawerController_setTouchMoved : Error processing arguments");
        cobj->setTouchMoved(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CADrawerController_setTouchMoved : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CADrawerController_getEffect3D(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CADrawerController* cobj = (CrossApp::CADrawerController *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CADrawerController_getEffect3D : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->getEffect3D();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CADrawerController_getEffect3D : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CADrawerController_getRightViewController(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CADrawerController* cobj = (CrossApp::CADrawerController *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CADrawerController_getRightViewController : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CAViewController* ret = cobj->getRightViewController();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAViewController>(cx, (CrossApp::CAViewController*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CADrawerController_getRightViewController : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CADrawerController_ccTouchCancelled(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CADrawerController* cobj = (CrossApp::CADrawerController *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CADrawerController_ccTouchCancelled : Invalid Native Object");
    if (argc == 2) {
        CrossApp::CATouch* arg0 = nullptr;
        CrossApp::CAEvent* arg1 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CATouch*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        do {
            if (args.get(1).isNull()) { arg1 = nullptr; break; }
            if (!args.get(1).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(1).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg1 = (CrossApp::CAEvent*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg1, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CADrawerController_ccTouchCancelled : Error processing arguments");
        cobj->ccTouchCancelled(arg0, arg1);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CADrawerController_ccTouchCancelled : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_autogentestbindings_js_CADrawerController_ccTouchMoved(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CADrawerController* cobj = (CrossApp::CADrawerController *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CADrawerController_ccTouchMoved : Invalid Native Object");
    if (argc == 2) {
        CrossApp::CATouch* arg0 = nullptr;
        CrossApp::CAEvent* arg1 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CATouch*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        do {
            if (args.get(1).isNull()) { arg1 = nullptr; break; }
            if (!args.get(1).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(1).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg1 = (CrossApp::CAEvent*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg1, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CADrawerController_ccTouchMoved : Error processing arguments");
        cobj->ccTouchMoved(arg0, arg1);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CADrawerController_ccTouchMoved : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_autogentestbindings_js_CADrawerController_getBackgroundView(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CADrawerController* cobj = (CrossApp::CADrawerController *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CADrawerController_getBackgroundView : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CAView* ret = cobj->getBackgroundView();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAView>(cx, (CrossApp::CAView*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CADrawerController_getBackgroundView : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CADrawerController_isShowLeftViewController(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CADrawerController* cobj = (CrossApp::CADrawerController *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CADrawerController_isShowLeftViewController : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->isShowLeftViewController();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CADrawerController_isShowLeftViewController : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CADrawerController_isTouchMoved(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CADrawerController* cobj = (CrossApp::CADrawerController *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CADrawerController_isTouchMoved : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->isTouchMoved();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CADrawerController_isTouchMoved : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CADrawerController_initWithController(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CADrawerController* cobj = (CrossApp::CADrawerController *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CADrawerController_initWithController : Invalid Native Object");
    if (argc == 3) {
        CrossApp::CAViewController* arg0 = nullptr;
        CrossApp::CAViewController* arg1 = nullptr;
        double arg2 = 0;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAViewController*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        do {
            if (args.get(1).isNull()) { arg1 = nullptr; break; }
            if (!args.get(1).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(1).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg1 = (CrossApp::CAViewController*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg1, cx, false, "Invalid Native Object");
        } while (0);
        ok &= JS::ToNumber( cx, args.get(2), &arg2) && !isnan(arg2);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CADrawerController_initWithController : Error processing arguments");
        bool ret = cobj->initWithController(arg0, arg1, arg2);
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CADrawerController_initWithController : wrong number of arguments: %d, was expecting %d", argc, 3);
    return false;
}
bool js_autogentestbindings_js_CADrawerController_setEffect3D(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CADrawerController* cobj = (CrossApp::CADrawerController *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CADrawerController_setEffect3D : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        arg0 = JS::ToBoolean(args.get(0));
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CADrawerController_setEffect3D : Error processing arguments");
        cobj->setEffect3D(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CADrawerController_setEffect3D : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CADrawerController_isReachBoundaryRight(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CADrawerController* cobj = (CrossApp::CADrawerController *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CADrawerController_isReachBoundaryRight : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->isReachBoundaryRight();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CADrawerController_isReachBoundaryRight : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CADrawerController_replaceRightViewController(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CADrawerController* cobj = (CrossApp::CADrawerController *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CADrawerController_replaceRightViewController : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAViewController* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAViewController*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CADrawerController_replaceRightViewController : Error processing arguments");
        cobj->replaceRightViewController(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CADrawerController_replaceRightViewController : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CADrawerController_getLeftViewController(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CADrawerController* cobj = (CrossApp::CADrawerController *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CADrawerController_getLeftViewController : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CAViewController* ret = cobj->getLeftViewController();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAViewController>(cx, (CrossApp::CAViewController*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CADrawerController_getLeftViewController : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CADrawerController_setBackgroundView(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CADrawerController* cobj = (CrossApp::CADrawerController *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CADrawerController_setBackgroundView : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAView* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAView*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CADrawerController_setBackgroundView : Error processing arguments");
        cobj->setBackgroundView(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CADrawerController_setBackgroundView : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CADrawerController_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    CrossApp::CADrawerController* cobj = new (std::nothrow) CrossApp::CADrawerController();
    TypeTest<CrossApp::CADrawerController> t;
    js_type_class_t *typeClass = nullptr;
    std::string typeName = t.s_name();
    auto typeMapIter = _js_global_type_map.find(typeName);
    CCAssert(typeMapIter != _js_global_type_map.end(), "Can't find the class type!");
    typeClass = typeMapIter->second;
    CCAssert(typeClass, "The value is null.");
    JS::RootedObject proto(cx, typeClass->proto.get());
    JS::RootedObject parent(cx, typeClass->parentProto.get());
    JS::RootedObject obj(cx, JS_NewObject(cx, typeClass->jsclass, proto, parent));
    args.rval().set(OBJECT_TO_JSVAL(obj));
    // link the native object with the javascript object
    js_proxy_t* p = jsb_new_proxy(cobj, obj);
    if (JS_HasProperty(cx, obj, "_ctor", &ok) && ok)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    return true;
}

extern JSObject *jsb_CrossApp_CAViewController_prototype;

void js_CrossApp_CADrawerController_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOGINFO("jsbindings: finalizing JS object %p (CADrawerController)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::CADrawerController *nobj = static_cast<CrossApp::CADrawerController *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
void js_register_autogentestbindings_js_CADrawerController(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_CADrawerController_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_CADrawerController_class->name = "CADrawerController";
    jsb_CrossApp_CADrawerController_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_CADrawerController_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_CADrawerController_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_CADrawerController_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_CADrawerController_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_CADrawerController_class->resolve = JS_ResolveStub;
    jsb_CrossApp_CADrawerController_class->convert = JS_ConvertStub;
    jsb_CrossApp_CADrawerController_class->finalize = js_CrossApp_CADrawerController_finalize;
    jsb_CrossApp_CADrawerController_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("hideLeftViewController", js_autogentestbindings_js_CADrawerController_hideLeftViewController, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isReachBoundaryLeft", js_autogentestbindings_js_CADrawerController_isReachBoundaryLeft, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("showLeftViewController", js_autogentestbindings_js_CADrawerController_showLeftViewController, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("ccTouchEnded", js_autogentestbindings_js_CADrawerController_ccTouchEnded, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("ccTouchBegan", js_autogentestbindings_js_CADrawerController_ccTouchBegan, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setTouchMoved", js_autogentestbindings_js_CADrawerController_setTouchMoved, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getEffect3D", js_autogentestbindings_js_CADrawerController_getEffect3D, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getRightViewController", js_autogentestbindings_js_CADrawerController_getRightViewController, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("ccTouchCancelled", js_autogentestbindings_js_CADrawerController_ccTouchCancelled, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("ccTouchMoved", js_autogentestbindings_js_CADrawerController_ccTouchMoved, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getBackgroundView", js_autogentestbindings_js_CADrawerController_getBackgroundView, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isShowLeftViewController", js_autogentestbindings_js_CADrawerController_isShowLeftViewController, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isTouchMoved", js_autogentestbindings_js_CADrawerController_isTouchMoved, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("initWithController", js_autogentestbindings_js_CADrawerController_initWithController, 3, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setEffect3D", js_autogentestbindings_js_CADrawerController_setEffect3D, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isReachBoundaryRight", js_autogentestbindings_js_CADrawerController_isReachBoundaryRight, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("replaceRightViewController", js_autogentestbindings_js_CADrawerController_replaceRightViewController, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getLeftViewController", js_autogentestbindings_js_CADrawerController_getLeftViewController, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setBackgroundView", js_autogentestbindings_js_CADrawerController_setBackgroundView, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    JSFunctionSpec *st_funcs = NULL;

    jsb_CrossApp_CADrawerController_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_CAViewController_prototype),
        jsb_CrossApp_CADrawerController_class,
        js_autogentestbindings_js_CADrawerController_constructor, 0, // constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27 
//  JS_SetPropertyAttributes(cx, global, "CADrawerController", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::CADrawerController> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_CADrawerController_class;
        p->proto = jsb_CrossApp_CADrawerController_prototype;
        p->parentProto = jsb_CrossApp_CAViewController_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
}

JSClass  *jsb_CrossApp_CCSet_class;
JSObject *jsb_CrossApp_CCSet_prototype;

bool js_autogentestbindings_js_CCSet_count(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CCSet* cobj = (CrossApp::CCSet *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CCSet_count : Invalid Native Object");
    if (argc == 0) {
        int ret = cobj->count();
        jsval jsret = JSVAL_NULL;
        jsret = int32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CCSet_count : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CCSet_addObject(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CCSet* cobj = (CrossApp::CCSet *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CCSet_addObject : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAObject* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAObject*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CCSet_addObject : Error processing arguments");
        cobj->addObject(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CCSet_addObject : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CCSet_begin(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CCSet* cobj = (CrossApp::CCSet *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CCSet_begin : Invalid Native Object");
    if (argc == 0) {
        std::_Rb_tree_const_iterator<CrossApp::CAObject *> ret = cobj->begin();
        jsval jsret = JSVAL_NULL;
        #pragma warning NO CONVERSION FROM NATIVE FOR _Rb_tree_const_iterator<CrossApp::CAObject *>;
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CCSet_begin : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CCSet_end(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CCSet* cobj = (CrossApp::CCSet *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CCSet_end : Invalid Native Object");
    if (argc == 0) {
        std::_Rb_tree_const_iterator<CrossApp::CAObject *> ret = cobj->end();
        jsval jsret = JSVAL_NULL;
        #pragma warning NO CONVERSION FROM NATIVE FOR _Rb_tree_const_iterator<CrossApp::CAObject *>;
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CCSet_end : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CCSet_mutableCopy(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CCSet* cobj = (CrossApp::CCSet *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CCSet_mutableCopy : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CCSet* ret = cobj->mutableCopy();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CCSet>(cx, (CrossApp::CCSet*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CCSet_mutableCopy : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CCSet_anyObject(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CCSet* cobj = (CrossApp::CCSet *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CCSet_anyObject : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CAObject* ret = cobj->anyObject();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAObject>(cx, (CrossApp::CAObject*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CCSet_anyObject : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CCSet_removeAllObjects(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CCSet* cobj = (CrossApp::CCSet *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CCSet_removeAllObjects : Invalid Native Object");
    if (argc == 0) {
        cobj->removeAllObjects();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CCSet_removeAllObjects : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CCSet_removeObject(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CCSet* cobj = (CrossApp::CCSet *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CCSet_removeObject : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAObject* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAObject*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CCSet_removeObject : Error processing arguments");
        cobj->removeObject(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CCSet_removeObject : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CCSet_copy(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CCSet* cobj = (CrossApp::CCSet *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CCSet_copy : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CCSet* ret = cobj->copy();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CCSet>(cx, (CrossApp::CCSet*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CCSet_copy : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CCSet_containsObject(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CCSet* cobj = (CrossApp::CCSet *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CCSet_containsObject : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAObject* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAObject*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CCSet_containsObject : Error processing arguments");
        bool ret = cobj->containsObject(arg0);
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CCSet_containsObject : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CCSet_create(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    if (argc == 0) {
        CrossApp::CCSet* ret = CrossApp::CCSet::create();
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CCSet>(cx, (CrossApp::CCSet*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_autogentestbindings_js_CCSet_create : wrong number of arguments");
    return false;
}

bool js_autogentestbindings_js_CCSet_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    CrossApp::CCSet* cobj = new (std::nothrow) CrossApp::CCSet();
    TypeTest<CrossApp::CCSet> t;
    js_type_class_t *typeClass = nullptr;
    std::string typeName = t.s_name();
    auto typeMapIter = _js_global_type_map.find(typeName);
    CCAssert(typeMapIter != _js_global_type_map.end(), "Can't find the class type!");
    typeClass = typeMapIter->second;
    CCAssert(typeClass, "The value is null.");
    JS::RootedObject proto(cx, typeClass->proto.get());
    JS::RootedObject parent(cx, typeClass->parentProto.get());
    JS::RootedObject obj(cx, JS_NewObject(cx, typeClass->jsclass, proto, parent));
    args.rval().set(OBJECT_TO_JSVAL(obj));
    // link the native object with the javascript object
    js_proxy_t* p = jsb_new_proxy(cobj, obj);
    if (JS_HasProperty(cx, obj, "_ctor", &ok) && ok)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    return true;
}

extern JSObject *jsb_CrossApp_CAObject_prototype;

void js_CrossApp_CCSet_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOGINFO("jsbindings: finalizing JS object %p (CCSet)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::CCSet *nobj = static_cast<CrossApp::CCSet *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
void js_register_autogentestbindings_js_CCSet(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_CCSet_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_CCSet_class->name = "CCSet";
    jsb_CrossApp_CCSet_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_CCSet_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_CCSet_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_CCSet_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_CCSet_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_CCSet_class->resolve = JS_ResolveStub;
    jsb_CrossApp_CCSet_class->convert = JS_ConvertStub;
    jsb_CrossApp_CCSet_class->finalize = js_CrossApp_CCSet_finalize;
    jsb_CrossApp_CCSet_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("count", js_autogentestbindings_js_CCSet_count, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("addObject", js_autogentestbindings_js_CCSet_addObject, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("begin", js_autogentestbindings_js_CCSet_begin, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("end", js_autogentestbindings_js_CCSet_end, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("mutableCopy", js_autogentestbindings_js_CCSet_mutableCopy, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("anyObject", js_autogentestbindings_js_CCSet_anyObject, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("removeAllObjects", js_autogentestbindings_js_CCSet_removeAllObjects, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("removeObject", js_autogentestbindings_js_CCSet_removeObject, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("copy", js_autogentestbindings_js_CCSet_copy, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("containsObject", js_autogentestbindings_js_CCSet_containsObject, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    static JSFunctionSpec st_funcs[] = {
        JS_FN("create", js_autogentestbindings_js_CCSet_create, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    jsb_CrossApp_CCSet_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_CAObject_prototype),
        jsb_CrossApp_CCSet_class,
        js_autogentestbindings_js_CCSet_constructor, 0, // constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27 
//  JS_SetPropertyAttributes(cx, global, "CCSet", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::CCSet> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_CCSet_class;
        p->proto = jsb_CrossApp_CCSet_prototype;
        p->parentProto = jsb_CrossApp_CAObject_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
}

JSClass  *jsb_CrossApp_CCEGLTouchDelegate_class;
JSObject *jsb_CrossApp_CCEGLTouchDelegate_prototype;

bool js_autogentestbindings_js_CCEGLTouchDelegate_mouseScrollWheel(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CCEGLTouchDelegate* cobj = (CrossApp::CCEGLTouchDelegate *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CCEGLTouchDelegate_mouseScrollWheel : Invalid Native Object");
    if (argc == 4) {
        CrossApp::CATouch* arg0 = nullptr;
        double arg1 = 0;
        double arg2 = 0;
        CrossApp::CAEvent* arg3 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CATouch*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        ok &= JS::ToNumber( cx, args.get(1), &arg1) && !isnan(arg1);
        ok &= JS::ToNumber( cx, args.get(2), &arg2) && !isnan(arg2);
        do {
            if (args.get(3).isNull()) { arg3 = nullptr; break; }
            if (!args.get(3).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(3).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg3 = (CrossApp::CAEvent*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg3, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CCEGLTouchDelegate_mouseScrollWheel : Error processing arguments");
        cobj->mouseScrollWheel(arg0, arg1, arg2, arg3);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CCEGLTouchDelegate_mouseScrollWheel : wrong number of arguments: %d, was expecting %d", argc, 4);
    return false;
}
bool js_autogentestbindings_js_CCEGLTouchDelegate_touchesBegan(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CCEGLTouchDelegate* cobj = (CrossApp::CCEGLTouchDelegate *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CCEGLTouchDelegate_touchesBegan : Invalid Native Object");
    if (argc == 2) {
        CrossApp::CCSet* arg0 = nullptr;
        CrossApp::CAEvent* arg1 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CCSet*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        do {
            if (args.get(1).isNull()) { arg1 = nullptr; break; }
            if (!args.get(1).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(1).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg1 = (CrossApp::CAEvent*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg1, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CCEGLTouchDelegate_touchesBegan : Error processing arguments");
        cobj->touchesBegan(arg0, arg1);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CCEGLTouchDelegate_touchesBegan : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_autogentestbindings_js_CCEGLTouchDelegate_touchesCancelled(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CCEGLTouchDelegate* cobj = (CrossApp::CCEGLTouchDelegate *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CCEGLTouchDelegate_touchesCancelled : Invalid Native Object");
    if (argc == 2) {
        CrossApp::CCSet* arg0 = nullptr;
        CrossApp::CAEvent* arg1 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CCSet*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        do {
            if (args.get(1).isNull()) { arg1 = nullptr; break; }
            if (!args.get(1).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(1).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg1 = (CrossApp::CAEvent*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg1, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CCEGLTouchDelegate_touchesCancelled : Error processing arguments");
        cobj->touchesCancelled(arg0, arg1);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CCEGLTouchDelegate_touchesCancelled : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_autogentestbindings_js_CCEGLTouchDelegate_touchesMoved(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CCEGLTouchDelegate* cobj = (CrossApp::CCEGLTouchDelegate *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CCEGLTouchDelegate_touchesMoved : Invalid Native Object");
    if (argc == 2) {
        CrossApp::CCSet* arg0 = nullptr;
        CrossApp::CAEvent* arg1 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CCSet*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        do {
            if (args.get(1).isNull()) { arg1 = nullptr; break; }
            if (!args.get(1).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(1).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg1 = (CrossApp::CAEvent*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg1, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CCEGLTouchDelegate_touchesMoved : Error processing arguments");
        cobj->touchesMoved(arg0, arg1);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CCEGLTouchDelegate_touchesMoved : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_autogentestbindings_js_CCEGLTouchDelegate_touchesEnded(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CCEGLTouchDelegate* cobj = (CrossApp::CCEGLTouchDelegate *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CCEGLTouchDelegate_touchesEnded : Invalid Native Object");
    if (argc == 2) {
        CrossApp::CCSet* arg0 = nullptr;
        CrossApp::CAEvent* arg1 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CCSet*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        do {
            if (args.get(1).isNull()) { arg1 = nullptr; break; }
            if (!args.get(1).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(1).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg1 = (CrossApp::CAEvent*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg1, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CCEGLTouchDelegate_touchesEnded : Error processing arguments");
        cobj->touchesEnded(arg0, arg1);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CCEGLTouchDelegate_touchesEnded : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_autogentestbindings_js_CCEGLTouchDelegate_mouseMoved(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CCEGLTouchDelegate* cobj = (CrossApp::CCEGLTouchDelegate *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CCEGLTouchDelegate_mouseMoved : Invalid Native Object");
    if (argc == 2) {
        CrossApp::CATouch* arg0 = nullptr;
        CrossApp::CAEvent* arg1 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CATouch*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        do {
            if (args.get(1).isNull()) { arg1 = nullptr; break; }
            if (!args.get(1).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(1).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg1 = (CrossApp::CAEvent*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg1, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CCEGLTouchDelegate_mouseMoved : Error processing arguments");
        cobj->mouseMoved(arg0, arg1);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CCEGLTouchDelegate_mouseMoved : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}

void js_CrossApp_CCEGLTouchDelegate_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOGINFO("jsbindings: finalizing JS object %p (CCEGLTouchDelegate)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::CCEGLTouchDelegate *nobj = static_cast<CrossApp::CCEGLTouchDelegate *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
void js_register_autogentestbindings_js_CCEGLTouchDelegate(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_CCEGLTouchDelegate_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_CCEGLTouchDelegate_class->name = "CCEGLTouchDelegate";
    jsb_CrossApp_CCEGLTouchDelegate_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_CCEGLTouchDelegate_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_CCEGLTouchDelegate_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_CCEGLTouchDelegate_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_CCEGLTouchDelegate_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_CCEGLTouchDelegate_class->resolve = JS_ResolveStub;
    jsb_CrossApp_CCEGLTouchDelegate_class->convert = JS_ConvertStub;
    jsb_CrossApp_CCEGLTouchDelegate_class->finalize = js_CrossApp_CCEGLTouchDelegate_finalize;
    jsb_CrossApp_CCEGLTouchDelegate_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("mouseScrollWheel", js_autogentestbindings_js_CCEGLTouchDelegate_mouseScrollWheel, 4, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("touchesBegan", js_autogentestbindings_js_CCEGLTouchDelegate_touchesBegan, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("touchesCancelled", js_autogentestbindings_js_CCEGLTouchDelegate_touchesCancelled, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("touchesMoved", js_autogentestbindings_js_CCEGLTouchDelegate_touchesMoved, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("touchesEnded", js_autogentestbindings_js_CCEGLTouchDelegate_touchesEnded, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("mouseMoved", js_autogentestbindings_js_CCEGLTouchDelegate_mouseMoved, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    JSFunctionSpec *st_funcs = NULL;

    jsb_CrossApp_CCEGLTouchDelegate_prototype = JS_InitClass(
        cx, global,
        JS::NullPtr(), // parent proto
        jsb_CrossApp_CCEGLTouchDelegate_class,
        dummy_constructor<CrossApp::CCEGLTouchDelegate>, 0, // no constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27 
//  JS_SetPropertyAttributes(cx, global, "CCEGLTouchDelegate", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::CCEGLTouchDelegate> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_CCEGLTouchDelegate_class;
        p->proto = jsb_CrossApp_CCEGLTouchDelegate_prototype;
        p->parentProto = NULL;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
}

JSClass  *jsb_CrossApp_CATouchController_class;
JSObject *jsb_CrossApp_CATouchController_prototype;

bool js_autogentestbindings_js_CATouchController_touchMoved(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATouchController* cobj = (CrossApp::CATouchController *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CATouchController_touchMoved : Invalid Native Object");
    if (argc == 0) {
        cobj->touchMoved();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CATouchController_touchMoved : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CATouchController_setEvent(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATouchController* cobj = (CrossApp::CATouchController *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CATouchController_setEvent : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAEvent* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAEvent*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CATouchController_setEvent : Error processing arguments");
        cobj->setEvent(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CATouchController_setEvent : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CATouchController_getEvent(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATouchController* cobj = (CrossApp::CATouchController *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CATouchController_getEvent : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CAEvent* ret = cobj->getEvent();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAEvent>(cx, (CrossApp::CAEvent*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CATouchController_getEvent : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CATouchController_getTouch(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATouchController* cobj = (CrossApp::CATouchController *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CATouchController_getTouch : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CATouch* ret = cobj->getTouch();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CATouch>(cx, (CrossApp::CATouch*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CATouchController_getTouch : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CATouchController_touchBegan(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATouchController* cobj = (CrossApp::CATouchController *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CATouchController_touchBegan : Invalid Native Object");
    if (argc == 0) {
        cobj->touchBegan();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CATouchController_touchBegan : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CATouchController_touchEnded(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATouchController* cobj = (CrossApp::CATouchController *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CATouchController_touchEnded : Invalid Native Object");
    if (argc == 0) {
        cobj->touchEnded();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CATouchController_touchEnded : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CATouchController_getTouchID(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATouchController* cobj = (CrossApp::CATouchController *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CATouchController_getTouchID : Invalid Native Object");
    if (argc == 0) {
        int ret = cobj->getTouchID();
        jsval jsret = JSVAL_NULL;
        jsret = int32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CATouchController_getTouchID : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CATouchController_setTouch(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATouchController* cobj = (CrossApp::CATouchController *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CATouchController_setTouch : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CATouch* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CATouch*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CATouchController_setTouch : Error processing arguments");
        cobj->setTouch(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CATouchController_setTouch : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CATouchController_touchCancelled(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATouchController* cobj = (CrossApp::CATouchController *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CATouchController_touchCancelled : Invalid Native Object");
    if (argc == 0) {
        cobj->touchCancelled();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CATouchController_touchCancelled : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CATouchController_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    CrossApp::CATouchController* cobj = new (std::nothrow) CrossApp::CATouchController();
    TypeTest<CrossApp::CATouchController> t;
    js_type_class_t *typeClass = nullptr;
    std::string typeName = t.s_name();
    auto typeMapIter = _js_global_type_map.find(typeName);
    CCAssert(typeMapIter != _js_global_type_map.end(), "Can't find the class type!");
    typeClass = typeMapIter->second;
    CCAssert(typeClass, "The value is null.");
    JS::RootedObject proto(cx, typeClass->proto.get());
    JS::RootedObject parent(cx, typeClass->parentProto.get());
    JS::RootedObject obj(cx, JS_NewObject(cx, typeClass->jsclass, proto, parent));
    args.rval().set(OBJECT_TO_JSVAL(obj));
    // link the native object with the javascript object
    js_proxy_t* p = jsb_new_proxy(cobj, obj);
    if (JS_HasProperty(cx, obj, "_ctor", &ok) && ok)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    return true;
}

extern JSObject *jsb_CrossApp_CAObject_prototype;

void js_CrossApp_CATouchController_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOGINFO("jsbindings: finalizing JS object %p (CATouchController)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::CATouchController *nobj = static_cast<CrossApp::CATouchController *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
void js_register_autogentestbindings_js_CATouchController(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_CATouchController_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_CATouchController_class->name = "CATouchController";
    jsb_CrossApp_CATouchController_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_CATouchController_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_CATouchController_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_CATouchController_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_CATouchController_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_CATouchController_class->resolve = JS_ResolveStub;
    jsb_CrossApp_CATouchController_class->convert = JS_ConvertStub;
    jsb_CrossApp_CATouchController_class->finalize = js_CrossApp_CATouchController_finalize;
    jsb_CrossApp_CATouchController_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("touchMoved", js_autogentestbindings_js_CATouchController_touchMoved, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setEvent", js_autogentestbindings_js_CATouchController_setEvent, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getEvent", js_autogentestbindings_js_CATouchController_getEvent, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getTouch", js_autogentestbindings_js_CATouchController_getTouch, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("touchBegan", js_autogentestbindings_js_CATouchController_touchBegan, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("touchEnded", js_autogentestbindings_js_CATouchController_touchEnded, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getTouchID", js_autogentestbindings_js_CATouchController_getTouchID, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setTouch", js_autogentestbindings_js_CATouchController_setTouch, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("touchCancelled", js_autogentestbindings_js_CATouchController_touchCancelled, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    JSFunctionSpec *st_funcs = NULL;

    jsb_CrossApp_CATouchController_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_CAObject_prototype),
        jsb_CrossApp_CATouchController_class,
        js_autogentestbindings_js_CATouchController_constructor, 0, // constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27 
//  JS_SetPropertyAttributes(cx, global, "CATouchController", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::CATouchController> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_CATouchController_class;
        p->proto = jsb_CrossApp_CATouchController_prototype;
        p->parentProto = jsb_CrossApp_CAObject_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
}

JSClass  *jsb_CrossApp_CATouchDispatcher_class;
JSObject *jsb_CrossApp_CATouchDispatcher_prototype;

bool js_autogentestbindings_js_CATouchDispatcher_removeMouseMovedResponder(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATouchDispatcher* cobj = (CrossApp::CATouchDispatcher *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CATouchDispatcher_removeMouseMovedResponder : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAResponder* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAResponder*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CATouchDispatcher_removeMouseMovedResponder : Error processing arguments");
        cobj->removeMouseMovedResponder(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CATouchDispatcher_removeMouseMovedResponder : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CATouchDispatcher_mouseScrollWheel(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATouchDispatcher* cobj = (CrossApp::CATouchDispatcher *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CATouchDispatcher_mouseScrollWheel : Invalid Native Object");
    if (argc == 4) {
        CrossApp::CATouch* arg0 = nullptr;
        double arg1 = 0;
        double arg2 = 0;
        CrossApp::CAEvent* arg3 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CATouch*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        ok &= JS::ToNumber( cx, args.get(1), &arg1) && !isnan(arg1);
        ok &= JS::ToNumber( cx, args.get(2), &arg2) && !isnan(arg2);
        do {
            if (args.get(3).isNull()) { arg3 = nullptr; break; }
            if (!args.get(3).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(3).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg3 = (CrossApp::CAEvent*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg3, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CATouchDispatcher_mouseScrollWheel : Error processing arguments");
        cobj->mouseScrollWheel(arg0, arg1, arg2, arg3);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CATouchDispatcher_mouseScrollWheel : wrong number of arguments: %d, was expecting %d", argc, 4);
    return false;
}
bool js_autogentestbindings_js_CATouchDispatcher_isDispatchEvents(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATouchDispatcher* cobj = (CrossApp::CATouchDispatcher *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CATouchDispatcher_isDispatchEvents : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->isDispatchEvents();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CATouchDispatcher_isDispatchEvents : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CATouchDispatcher_touchesCancelled(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATouchDispatcher* cobj = (CrossApp::CATouchDispatcher *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CATouchDispatcher_touchesCancelled : Invalid Native Object");
    if (argc == 2) {
        CrossApp::CCSet* arg0 = nullptr;
        CrossApp::CAEvent* arg1 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CCSet*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        do {
            if (args.get(1).isNull()) { arg1 = nullptr; break; }
            if (!args.get(1).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(1).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg1 = (CrossApp::CAEvent*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg1, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CATouchDispatcher_touchesCancelled : Error processing arguments");
        cobj->touchesCancelled(arg0, arg1);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CATouchDispatcher_touchesCancelled : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_autogentestbindings_js_CATouchDispatcher_setScrollRunningResponder(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATouchDispatcher* cobj = (CrossApp::CATouchDispatcher *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CATouchDispatcher_setScrollRunningResponder : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAResponder* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAResponder*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CATouchDispatcher_setScrollRunningResponder : Error processing arguments");
        cobj->setScrollRunningResponder(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CATouchDispatcher_setScrollRunningResponder : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CATouchDispatcher_setFirstResponder(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATouchDispatcher* cobj = (CrossApp::CATouchDispatcher *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CATouchDispatcher_setFirstResponder : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAResponder* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAResponder*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CATouchDispatcher_setFirstResponder : Error processing arguments");
        cobj->setFirstResponder(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CATouchDispatcher_setFirstResponder : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CATouchDispatcher_mouseMoved(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATouchDispatcher* cobj = (CrossApp::CATouchDispatcher *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CATouchDispatcher_mouseMoved : Invalid Native Object");
    if (argc == 2) {
        CrossApp::CATouch* arg0 = nullptr;
        CrossApp::CAEvent* arg1 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CATouch*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        do {
            if (args.get(1).isNull()) { arg1 = nullptr; break; }
            if (!args.get(1).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(1).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg1 = (CrossApp::CAEvent*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg1, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CATouchDispatcher_mouseMoved : Error processing arguments");
        cobj->mouseMoved(arg0, arg1);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CATouchDispatcher_mouseMoved : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_autogentestbindings_js_CATouchDispatcher_touchesEnded(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATouchDispatcher* cobj = (CrossApp::CATouchDispatcher *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CATouchDispatcher_touchesEnded : Invalid Native Object");
    if (argc == 2) {
        CrossApp::CCSet* arg0 = nullptr;
        CrossApp::CAEvent* arg1 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CCSet*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        do {
            if (args.get(1).isNull()) { arg1 = nullptr; break; }
            if (!args.get(1).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(1).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg1 = (CrossApp::CAEvent*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg1, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CATouchDispatcher_touchesEnded : Error processing arguments");
        cobj->touchesEnded(arg0, arg1);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CATouchDispatcher_touchesEnded : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_autogentestbindings_js_CATouchDispatcher_addMouseScrollWheel(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATouchDispatcher* cobj = (CrossApp::CATouchDispatcher *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CATouchDispatcher_addMouseScrollWheel : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAResponder* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAResponder*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CATouchDispatcher_addMouseScrollWheel : Error processing arguments");
        cobj->addMouseScrollWheel(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CATouchDispatcher_addMouseScrollWheel : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CATouchDispatcher_getTouchCount(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATouchDispatcher* cobj = (CrossApp::CATouchDispatcher *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CATouchDispatcher_getTouchCount : Invalid Native Object");
    if (argc == 0) {
        int ret = cobj->getTouchCount();
        jsval jsret = JSVAL_NULL;
        jsret = int32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CATouchDispatcher_getTouchCount : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CATouchDispatcher_setDispatchEvents(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATouchDispatcher* cobj = (CrossApp::CATouchDispatcher *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CATouchDispatcher_setDispatchEvents : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        arg0 = JS::ToBoolean(args.get(0));
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CATouchDispatcher_setDispatchEvents : Error processing arguments");
        cobj->setDispatchEvents(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CATouchDispatcher_setDispatchEvents : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CATouchDispatcher_init(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATouchDispatcher* cobj = (CrossApp::CATouchDispatcher *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CATouchDispatcher_init : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->init();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CATouchDispatcher_init : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CATouchDispatcher_touchesBegan(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATouchDispatcher* cobj = (CrossApp::CATouchDispatcher *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CATouchDispatcher_touchesBegan : Invalid Native Object");
    if (argc == 2) {
        CrossApp::CCSet* arg0 = nullptr;
        CrossApp::CAEvent* arg1 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CCSet*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        do {
            if (args.get(1).isNull()) { arg1 = nullptr; break; }
            if (!args.get(1).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(1).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg1 = (CrossApp::CAEvent*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg1, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CATouchDispatcher_touchesBegan : Error processing arguments");
        cobj->touchesBegan(arg0, arg1);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CATouchDispatcher_touchesBegan : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_autogentestbindings_js_CATouchDispatcher_setDispatchEventsTrue(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATouchDispatcher* cobj = (CrossApp::CATouchDispatcher *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CATouchDispatcher_setDispatchEventsTrue : Invalid Native Object");
    if (argc == 0) {
        cobj->setDispatchEventsTrue();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CATouchDispatcher_setDispatchEventsTrue : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CATouchDispatcher_touchesMoved(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATouchDispatcher* cobj = (CrossApp::CATouchDispatcher *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CATouchDispatcher_touchesMoved : Invalid Native Object");
    if (argc == 2) {
        CrossApp::CCSet* arg0 = nullptr;
        CrossApp::CAEvent* arg1 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CCSet*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        do {
            if (args.get(1).isNull()) { arg1 = nullptr; break; }
            if (!args.get(1).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(1).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg1 = (CrossApp::CAEvent*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg1, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CATouchDispatcher_touchesMoved : Error processing arguments");
        cobj->touchesMoved(arg0, arg1);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CATouchDispatcher_touchesMoved : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_autogentestbindings_js_CATouchDispatcher_addMouseMovedResponder(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATouchDispatcher* cobj = (CrossApp::CATouchDispatcher *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CATouchDispatcher_addMouseMovedResponder : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAResponder* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAResponder*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CATouchDispatcher_addMouseMovedResponder : Error processing arguments");
        cobj->addMouseMovedResponder(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CATouchDispatcher_addMouseMovedResponder : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CATouchDispatcher_getScrollRunningResponder(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATouchDispatcher* cobj = (CrossApp::CATouchDispatcher *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CATouchDispatcher_getScrollRunningResponder : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CAResponder* ret = cobj->getScrollRunningResponder();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAResponder>(cx, (CrossApp::CAResponder*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CATouchDispatcher_getScrollRunningResponder : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CATouchDispatcher_setDispatchEventsFalse(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATouchDispatcher* cobj = (CrossApp::CATouchDispatcher *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CATouchDispatcher_setDispatchEventsFalse : Invalid Native Object");
    if (argc == 0) {
        cobj->setDispatchEventsFalse();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CATouchDispatcher_setDispatchEventsFalse : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CATouchDispatcher_getFirstResponder(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATouchDispatcher* cobj = (CrossApp::CATouchDispatcher *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CATouchDispatcher_getFirstResponder : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CAResponder* ret = cobj->getFirstResponder();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAResponder>(cx, (CrossApp::CAResponder*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CATouchDispatcher_getFirstResponder : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CATouchDispatcher_removeMouseScrollWheel(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATouchDispatcher* cobj = (CrossApp::CATouchDispatcher *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CATouchDispatcher_removeMouseScrollWheel : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAResponder* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAResponder*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CATouchDispatcher_removeMouseScrollWheel : Error processing arguments");
        cobj->removeMouseScrollWheel(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CATouchDispatcher_removeMouseScrollWheel : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CATouchDispatcher_removeScrollRunningResponder(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATouchDispatcher* cobj = (CrossApp::CATouchDispatcher *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CATouchDispatcher_removeScrollRunningResponder : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAResponder* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAResponder*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CATouchDispatcher_removeScrollRunningResponder : Error processing arguments");
        cobj->removeScrollRunningResponder(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CATouchDispatcher_removeScrollRunningResponder : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CATouchDispatcher_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    CrossApp::CATouchDispatcher* cobj = new (std::nothrow) CrossApp::CATouchDispatcher();
    TypeTest<CrossApp::CATouchDispatcher> t;
    js_type_class_t *typeClass = nullptr;
    std::string typeName = t.s_name();
    auto typeMapIter = _js_global_type_map.find(typeName);
    CCAssert(typeMapIter != _js_global_type_map.end(), "Can't find the class type!");
    typeClass = typeMapIter->second;
    CCAssert(typeClass, "The value is null.");
    JS::RootedObject proto(cx, typeClass->proto.get());
    JS::RootedObject parent(cx, typeClass->parentProto.get());
    JS::RootedObject obj(cx, JS_NewObject(cx, typeClass->jsclass, proto, parent));
    args.rval().set(OBJECT_TO_JSVAL(obj));
    // link the native object with the javascript object
    js_proxy_t* p = jsb_new_proxy(cobj, obj);
    if (JS_HasProperty(cx, obj, "_ctor", &ok) && ok)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    return true;
}

extern JSObject *jsb_CrossApp_CAObject_prototype;

void js_CrossApp_CATouchDispatcher_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOGINFO("jsbindings: finalizing JS object %p (CATouchDispatcher)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::CATouchDispatcher *nobj = static_cast<CrossApp::CATouchDispatcher *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
void js_register_autogentestbindings_js_CATouchDispatcher(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_CATouchDispatcher_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_CATouchDispatcher_class->name = "CATouchDispatcher";
    jsb_CrossApp_CATouchDispatcher_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_CATouchDispatcher_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_CATouchDispatcher_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_CATouchDispatcher_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_CATouchDispatcher_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_CATouchDispatcher_class->resolve = JS_ResolveStub;
    jsb_CrossApp_CATouchDispatcher_class->convert = JS_ConvertStub;
    jsb_CrossApp_CATouchDispatcher_class->finalize = js_CrossApp_CATouchDispatcher_finalize;
    jsb_CrossApp_CATouchDispatcher_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("removeMouseMovedResponder", js_autogentestbindings_js_CATouchDispatcher_removeMouseMovedResponder, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("mouseScrollWheel", js_autogentestbindings_js_CATouchDispatcher_mouseScrollWheel, 4, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isDispatchEvents", js_autogentestbindings_js_CATouchDispatcher_isDispatchEvents, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("touchesCancelled", js_autogentestbindings_js_CATouchDispatcher_touchesCancelled, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setScrollRunningResponder", js_autogentestbindings_js_CATouchDispatcher_setScrollRunningResponder, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setFirstResponder", js_autogentestbindings_js_CATouchDispatcher_setFirstResponder, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("mouseMoved", js_autogentestbindings_js_CATouchDispatcher_mouseMoved, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("touchesEnded", js_autogentestbindings_js_CATouchDispatcher_touchesEnded, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("addMouseScrollWheel", js_autogentestbindings_js_CATouchDispatcher_addMouseScrollWheel, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getTouchCount", js_autogentestbindings_js_CATouchDispatcher_getTouchCount, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setDispatchEvents", js_autogentestbindings_js_CATouchDispatcher_setDispatchEvents, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("init", js_autogentestbindings_js_CATouchDispatcher_init, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("touchesBegan", js_autogentestbindings_js_CATouchDispatcher_touchesBegan, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setDispatchEventsTrue", js_autogentestbindings_js_CATouchDispatcher_setDispatchEventsTrue, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("touchesMoved", js_autogentestbindings_js_CATouchDispatcher_touchesMoved, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("addMouseMovedResponder", js_autogentestbindings_js_CATouchDispatcher_addMouseMovedResponder, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getScrollRunningResponder", js_autogentestbindings_js_CATouchDispatcher_getScrollRunningResponder, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setDispatchEventsFalse", js_autogentestbindings_js_CATouchDispatcher_setDispatchEventsFalse, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getFirstResponder", js_autogentestbindings_js_CATouchDispatcher_getFirstResponder, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("removeMouseScrollWheel", js_autogentestbindings_js_CATouchDispatcher_removeMouseScrollWheel, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("removeScrollRunningResponder", js_autogentestbindings_js_CATouchDispatcher_removeScrollRunningResponder, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    JSFunctionSpec *st_funcs = NULL;

    jsb_CrossApp_CATouchDispatcher_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_CAObject_prototype),
        jsb_CrossApp_CATouchDispatcher_class,
        js_autogentestbindings_js_CATouchDispatcher_constructor, 0, // constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27 
//  JS_SetPropertyAttributes(cx, global, "CATouchDispatcher", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::CATouchDispatcher> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_CATouchDispatcher_class;
        p->proto = jsb_CrossApp_CATouchDispatcher_prototype;
        p->parentProto = jsb_CrossApp_CAObject_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
}

JSClass  *jsb_CrossApp_CAGif_class;
JSObject *jsb_CrossApp_CAGif_prototype;

bool js_autogentestbindings_js_CAGif_getImage(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAGif* cobj = (CrossApp::CAGif *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAGif_getImage : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CAImage* ret = cobj->getImage();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAImage>(cx, (CrossApp::CAImage*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAGif_getImage : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAGif_initWithFilePath(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAGif* cobj = (CrossApp::CAGif *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAGif_initWithFilePath : Invalid Native Object");
    if (argc == 1) {
        std::string arg0;
        ok &= jsval_to_std_string(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAGif_initWithFilePath : Error processing arguments");
        bool ret = cobj->initWithFilePath(arg0);
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAGif_initWithFilePath : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAGif_initWithData(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAGif* cobj = (CrossApp::CAGif *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAGif_initWithData : Invalid Native Object");
    if (argc == 1) {
        unsigned char* arg0 = nullptr;
        #pragma warning NO CONVERSION TO NATIVE FOR unsigned char*
		ok = false;
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAGif_initWithData : Error processing arguments");
        bool ret = cobj->initWithData(arg0);
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAGif_initWithData : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAGif_setGifImageWithIndex(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAGif* cobj = (CrossApp::CAGif *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAGif_setGifImageWithIndex : Invalid Native Object");
    if (argc == 1) {
        unsigned int arg0 = 0;
        ok &= jsval_to_uint32(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAGif_setGifImageWithIndex : Error processing arguments");
        cobj->setGifImageWithIndex(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAGif_setGifImageWithIndex : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAGif_getGifImageIndex(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAGif* cobj = (CrossApp::CAGif *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAGif_getGifImageIndex : Invalid Native Object");
    if (argc == 0) {
        unsigned int ret = cobj->getGifImageIndex();
        jsval jsret = JSVAL_NULL;
        jsret = uint32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAGif_getGifImageIndex : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAGif_getHeight(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAGif* cobj = (CrossApp::CAGif *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAGif_getHeight : Invalid Native Object");
    if (argc == 0) {
        int ret = cobj->getHeight();
        jsval jsret = JSVAL_NULL;
        jsret = int32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAGif_getHeight : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAGif_getWidth(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAGif* cobj = (CrossApp::CAGif *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAGif_getWidth : Invalid Native Object");
    if (argc == 0) {
        int ret = cobj->getWidth();
        jsval jsret = JSVAL_NULL;
        jsret = int32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAGif_getWidth : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAGif_getImageDuration(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAGif* cobj = (CrossApp::CAGif *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAGif_getImageDuration : Invalid Native Object");
    if (argc == 0) {
        double ret = cobj->getImageDuration();
        jsval jsret = JSVAL_NULL;
        jsret = DOUBLE_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAGif_getImageDuration : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAGif_getGifImageCounts(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAGif* cobj = (CrossApp::CAGif *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAGif_getGifImageCounts : Invalid Native Object");
    if (argc == 0) {
        unsigned int ret = cobj->getGifImageCounts();
        jsval jsret = JSVAL_NULL;
        jsret = uint32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAGif_getGifImageCounts : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAGif_nextGifImageIndex(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAGif* cobj = (CrossApp::CAGif *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAGif_nextGifImageIndex : Invalid Native Object");
    if (argc == 0) {
        cobj->nextGifImageIndex();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAGif_nextGifImageIndex : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAGif_createWithFilePath(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        std::string arg0;
        ok &= jsval_to_std_string(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAGif_createWithFilePath : Error processing arguments");
        CrossApp::CAGif* ret = CrossApp::CAGif::createWithFilePath(arg0);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAGif>(cx, (CrossApp::CAGif*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_autogentestbindings_js_CAGif_createWithFilePath : wrong number of arguments");
    return false;
}

bool js_autogentestbindings_js_CAGif_createWithData(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        unsigned char* arg0 = nullptr;
        #pragma warning NO CONVERSION TO NATIVE FOR unsigned char*
		ok = false;
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAGif_createWithData : Error processing arguments");
        CrossApp::CAGif* ret = CrossApp::CAGif::createWithData(arg0);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAGif>(cx, (CrossApp::CAGif*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_autogentestbindings_js_CAGif_createWithData : wrong number of arguments");
    return false;
}

bool js_autogentestbindings_js_CAGif_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    CrossApp::CAGif* cobj = new (std::nothrow) CrossApp::CAGif();
    TypeTest<CrossApp::CAGif> t;
    js_type_class_t *typeClass = nullptr;
    std::string typeName = t.s_name();
    auto typeMapIter = _js_global_type_map.find(typeName);
    CCAssert(typeMapIter != _js_global_type_map.end(), "Can't find the class type!");
    typeClass = typeMapIter->second;
    CCAssert(typeClass, "The value is null.");
    JS::RootedObject proto(cx, typeClass->proto.get());
    JS::RootedObject parent(cx, typeClass->parentProto.get());
    JS::RootedObject obj(cx, JS_NewObject(cx, typeClass->jsclass, proto, parent));
    args.rval().set(OBJECT_TO_JSVAL(obj));
    // link the native object with the javascript object
    js_proxy_t* p = jsb_new_proxy(cobj, obj);
    if (JS_HasProperty(cx, obj, "_ctor", &ok) && ok)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    return true;
}

extern JSObject *jsb_CrossApp_CAObject_prototype;

void js_CrossApp_CAGif_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOGINFO("jsbindings: finalizing JS object %p (CAGif)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::CAGif *nobj = static_cast<CrossApp::CAGif *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
void js_register_autogentestbindings_js_CAGif(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_CAGif_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_CAGif_class->name = "CAGif";
    jsb_CrossApp_CAGif_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_CAGif_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_CAGif_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_CAGif_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_CAGif_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_CAGif_class->resolve = JS_ResolveStub;
    jsb_CrossApp_CAGif_class->convert = JS_ConvertStub;
    jsb_CrossApp_CAGif_class->finalize = js_CrossApp_CAGif_finalize;
    jsb_CrossApp_CAGif_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("getImage", js_autogentestbindings_js_CAGif_getImage, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("initWithFilePath", js_autogentestbindings_js_CAGif_initWithFilePath, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("initWithData", js_autogentestbindings_js_CAGif_initWithData, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setGifImageWithIndex", js_autogentestbindings_js_CAGif_setGifImageWithIndex, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getGifImageIndex", js_autogentestbindings_js_CAGif_getGifImageIndex, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getHeight", js_autogentestbindings_js_CAGif_getHeight, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getWidth", js_autogentestbindings_js_CAGif_getWidth, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getImageDuration", js_autogentestbindings_js_CAGif_getImageDuration, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getGifImageCounts", js_autogentestbindings_js_CAGif_getGifImageCounts, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("nextGifImageIndex", js_autogentestbindings_js_CAGif_nextGifImageIndex, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    static JSFunctionSpec st_funcs[] = {
        JS_FN("createWithFilePath", js_autogentestbindings_js_CAGif_createWithFilePath, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("createWithData", js_autogentestbindings_js_CAGif_createWithData, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    jsb_CrossApp_CAGif_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_CAObject_prototype),
        jsb_CrossApp_CAGif_class,
        js_autogentestbindings_js_CAGif_constructor, 0, // constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27 
//  JS_SetPropertyAttributes(cx, global, "CAGif", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::CAGif> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_CAGif_class;
        p->proto = jsb_CrossApp_CAGif_prototype;
        p->parentProto = jsb_CrossApp_CAObject_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
}

JSClass  *jsb_CrossApp_CAWindow_class;
JSObject *jsb_CrossApp_CAWindow_prototype;

bool js_autogentestbindings_js_CAWindow_presentModalViewController(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAWindow* cobj = (CrossApp::CAWindow *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAWindow_presentModalViewController : Invalid Native Object");
    if (argc == 2) {
        CrossApp::CAViewController* arg0 = nullptr;
        bool arg1;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAViewController*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        arg1 = JS::ToBoolean(args.get(1));
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAWindow_presentModalViewController : Error processing arguments");
        cobj->presentModalViewController(arg0, arg1);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAWindow_presentModalViewController : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_autogentestbindings_js_CAWindow_setRootViewController(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAWindow* cobj = (CrossApp::CAWindow *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAWindow_setRootViewController : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAViewController* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAViewController*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAWindow_setRootViewController : Error processing arguments");
        cobj->setRootViewController(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAWindow_setRootViewController : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAWindow_getRootViewController(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAWindow* cobj = (CrossApp::CAWindow *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAWindow_getRootViewController : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CAViewController* ret = cobj->getRootViewController();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAViewController>(cx, (CrossApp::CAViewController*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAWindow_getRootViewController : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAWindow_init(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAWindow* cobj = (CrossApp::CAWindow *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAWindow_init : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->init();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAWindow_init : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAWindow_dismissModalViewController(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAWindow* cobj = (CrossApp::CAWindow *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAWindow_dismissModalViewController : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        arg0 = JS::ToBoolean(args.get(0));
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAWindow_dismissModalViewController : Error processing arguments");
        cobj->dismissModalViewController(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAWindow_dismissModalViewController : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAWindow_getModalViewController(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAWindow* cobj = (CrossApp::CAWindow *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAWindow_getModalViewController : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CAViewController* ret = cobj->getModalViewController();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAViewController>(cx, (CrossApp::CAViewController*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAWindow_getModalViewController : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAWindow_create(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    if (argc == 0) {
        CrossApp::CAWindow* ret = CrossApp::CAWindow::create();
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAWindow>(cx, (CrossApp::CAWindow*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_autogentestbindings_js_CAWindow_create : wrong number of arguments");
    return false;
}

bool js_autogentestbindings_js_CAWindow_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    CrossApp::CAWindow* cobj = new (std::nothrow) CrossApp::CAWindow();
    TypeTest<CrossApp::CAWindow> t;
    js_type_class_t *typeClass = nullptr;
    std::string typeName = t.s_name();
    auto typeMapIter = _js_global_type_map.find(typeName);
    CCAssert(typeMapIter != _js_global_type_map.end(), "Can't find the class type!");
    typeClass = typeMapIter->second;
    CCAssert(typeClass, "The value is null.");
    JS::RootedObject proto(cx, typeClass->proto.get());
    JS::RootedObject parent(cx, typeClass->parentProto.get());
    JS::RootedObject obj(cx, JS_NewObject(cx, typeClass->jsclass, proto, parent));
    args.rval().set(OBJECT_TO_JSVAL(obj));
    // link the native object with the javascript object
    js_proxy_t* p = jsb_new_proxy(cobj, obj);
    if (JS_HasProperty(cx, obj, "_ctor", &ok) && ok)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    return true;
}

extern JSObject *jsb_CrossApp_CAView_prototype;

void js_CrossApp_CAWindow_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOGINFO("jsbindings: finalizing JS object %p (CAWindow)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::CAWindow *nobj = static_cast<CrossApp::CAWindow *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
void js_register_autogentestbindings_js_CAWindow(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_CAWindow_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_CAWindow_class->name = "CAWindow";
    jsb_CrossApp_CAWindow_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_CAWindow_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_CAWindow_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_CAWindow_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_CAWindow_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_CAWindow_class->resolve = JS_ResolveStub;
    jsb_CrossApp_CAWindow_class->convert = JS_ConvertStub;
    jsb_CrossApp_CAWindow_class->finalize = js_CrossApp_CAWindow_finalize;
    jsb_CrossApp_CAWindow_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("presentModalViewController", js_autogentestbindings_js_CAWindow_presentModalViewController, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setRootViewController", js_autogentestbindings_js_CAWindow_setRootViewController, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getRootViewController", js_autogentestbindings_js_CAWindow_getRootViewController, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("init", js_autogentestbindings_js_CAWindow_init, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("dismissModalViewController", js_autogentestbindings_js_CAWindow_dismissModalViewController, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getModalViewController", js_autogentestbindings_js_CAWindow_getModalViewController, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    static JSFunctionSpec st_funcs[] = {
        JS_FN("create", js_autogentestbindings_js_CAWindow_create, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    jsb_CrossApp_CAWindow_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_CAView_prototype),
        jsb_CrossApp_CAWindow_class,
        js_autogentestbindings_js_CAWindow_constructor, 0, // constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27 
//  JS_SetPropertyAttributes(cx, global, "CAWindow", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::CAWindow> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_CAWindow_class;
        p->proto = jsb_CrossApp_CAWindow_prototype;
        p->parentProto = jsb_CrossApp_CAView_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
}

JSClass  *jsb_CrossApp_CAGifView_class;
JSObject *jsb_CrossApp_CAGifView_prototype;

bool js_autogentestbindings_js_CAGifView_setTimes(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAGifView* cobj = (CrossApp::CAGifView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAGifView_setTimes : Invalid Native Object");
    if (argc == 1) {
        double arg0 = 0;
        ok &= JS::ToNumber( cx, args.get(0), &arg0) && !isnan(arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAGifView_setTimes : Error processing arguments");
        cobj->setTimes(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAGifView_setTimes : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAGifView_initWithGif(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAGifView* cobj = (CrossApp::CAGifView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAGifView_initWithGif : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAGif* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAGif*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAGifView_initWithGif : Error processing arguments");
        bool ret = cobj->initWithGif(arg0);
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAGifView_initWithGif : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAGifView_init(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAGifView* cobj = (CrossApp::CAGifView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAGifView_init : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->init();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAGifView_init : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAGifView_setGif(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAGifView* cobj = (CrossApp::CAGifView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAGifView_setGif : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAGif* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAGif*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAGifView_setGif : Error processing arguments");
        cobj->setGif(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAGifView_setGif : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAGifView_isRepeatForever(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAGifView* cobj = (CrossApp::CAGifView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAGifView_isRepeatForever : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->isRepeatForever();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAGifView_isRepeatForever : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAGifView_setRepeatForever(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAGifView* cobj = (CrossApp::CAGifView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAGifView_setRepeatForever : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        arg0 = JS::ToBoolean(args.get(0));
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAGifView_setRepeatForever : Error processing arguments");
        cobj->setRepeatForever(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAGifView_setRepeatForever : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAGifView_createWithGif(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        CrossApp::CAGif* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAGif*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAGifView_createWithGif : Error processing arguments");
        CrossApp::CAGifView* ret = CrossApp::CAGifView::createWithGif(arg0);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAGifView>(cx, (CrossApp::CAGifView*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_autogentestbindings_js_CAGifView_createWithGif : wrong number of arguments");
    return false;
}

bool js_autogentestbindings_js_CAGifView_createWithFrame(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        CrossApp::DRect arg0;
        ok &= jsval_to_drect(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAGifView_createWithFrame : Error processing arguments");
        CrossApp::CAGifView* ret = CrossApp::CAGifView::createWithFrame(arg0);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAGifView>(cx, (CrossApp::CAGifView*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_autogentestbindings_js_CAGifView_createWithFrame : wrong number of arguments");
    return false;
}

bool js_autogentestbindings_js_CAGifView_createWithLayout(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        CrossApp::DRectLayout arg0;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (const CrossApp::DRectLayout&)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAGifView_createWithLayout : Error processing arguments");
        CrossApp::CAGifView* ret = CrossApp::CAGifView::createWithLayout(arg0);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAGifView>(cx, (CrossApp::CAGifView*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_autogentestbindings_js_CAGifView_createWithLayout : wrong number of arguments");
    return false;
}

bool js_autogentestbindings_js_CAGifView_createWithCenter(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        CrossApp::DRect arg0;
        ok &= jsval_to_drect(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAGifView_createWithCenter : Error processing arguments");
        CrossApp::CAGifView* ret = CrossApp::CAGifView::createWithCenter(arg0);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAGifView>(cx, (CrossApp::CAGifView*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_autogentestbindings_js_CAGifView_createWithCenter : wrong number of arguments");
    return false;
}

bool js_autogentestbindings_js_CAGifView_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    CrossApp::CAGifView* cobj = new (std::nothrow) CrossApp::CAGifView();
    TypeTest<CrossApp::CAGifView> t;
    js_type_class_t *typeClass = nullptr;
    std::string typeName = t.s_name();
    auto typeMapIter = _js_global_type_map.find(typeName);
    CCAssert(typeMapIter != _js_global_type_map.end(), "Can't find the class type!");
    typeClass = typeMapIter->second;
    CCAssert(typeClass, "The value is null.");
    JS::RootedObject proto(cx, typeClass->proto.get());
    JS::RootedObject parent(cx, typeClass->parentProto.get());
    JS::RootedObject obj(cx, JS_NewObject(cx, typeClass->jsclass, proto, parent));
    args.rval().set(OBJECT_TO_JSVAL(obj));
    // link the native object with the javascript object
    js_proxy_t* p = jsb_new_proxy(cobj, obj);
    if (JS_HasProperty(cx, obj, "_ctor", &ok) && ok)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    return true;
}

extern JSObject *jsb_CrossApp_CAView_prototype;

void js_CrossApp_CAGifView_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOGINFO("jsbindings: finalizing JS object %p (CAGifView)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::CAGifView *nobj = static_cast<CrossApp::CAGifView *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
void js_register_autogentestbindings_js_CAGifView(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_CAGifView_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_CAGifView_class->name = "CAGifView";
    jsb_CrossApp_CAGifView_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_CAGifView_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_CAGifView_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_CAGifView_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_CAGifView_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_CAGifView_class->resolve = JS_ResolveStub;
    jsb_CrossApp_CAGifView_class->convert = JS_ConvertStub;
    jsb_CrossApp_CAGifView_class->finalize = js_CrossApp_CAGifView_finalize;
    jsb_CrossApp_CAGifView_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("setTimes", js_autogentestbindings_js_CAGifView_setTimes, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("initWithGif", js_autogentestbindings_js_CAGifView_initWithGif, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("init", js_autogentestbindings_js_CAGifView_init, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setGif", js_autogentestbindings_js_CAGifView_setGif, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isRepeatForever", js_autogentestbindings_js_CAGifView_isRepeatForever, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setRepeatForever", js_autogentestbindings_js_CAGifView_setRepeatForever, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    static JSFunctionSpec st_funcs[] = {
        JS_FN("createWithGif", js_autogentestbindings_js_CAGifView_createWithGif, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("createWithFrame", js_autogentestbindings_js_CAGifView_createWithFrame, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("createWithLayout", js_autogentestbindings_js_CAGifView_createWithLayout, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("createWithCenter", js_autogentestbindings_js_CAGifView_createWithCenter, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    jsb_CrossApp_CAGifView_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_CAView_prototype),
        jsb_CrossApp_CAGifView_class,
        js_autogentestbindings_js_CAGifView_constructor, 0, // constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27 
//  JS_SetPropertyAttributes(cx, global, "CAGifView", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::CAGifView> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_CAGifView_class;
        p->proto = jsb_CrossApp_CAGifView_prototype;
        p->parentProto = jsb_CrossApp_CAView_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
}

JSClass  *jsb_CrossApp_CABatchView_class;
JSObject *jsb_CrossApp_CABatchView_prototype;

bool js_autogentestbindings_js_CABatchView_reorderSubview(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CABatchView* cobj = (CrossApp::CABatchView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CABatchView_reorderSubview : Invalid Native Object");
    if (argc == 2) {
        CrossApp::CAView* arg0 = nullptr;
        int arg1 = 0;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAView*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        ok &= jsval_to_int32(cx, args.get(1), (int32_t *)&arg1);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CABatchView_reorderSubview : Error processing arguments");
        cobj->reorderSubview(arg0, arg1);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CABatchView_reorderSubview : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_autogentestbindings_js_CABatchView_reorderBatch(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CABatchView* cobj = (CrossApp::CABatchView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CABatchView_reorderBatch : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        arg0 = JS::ToBoolean(args.get(0));
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CABatchView_reorderBatch : Error processing arguments");
        cobj->reorderBatch(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CABatchView_reorderBatch : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CABatchView_lowestAtlasIndexInSubview(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CABatchView* cobj = (CrossApp::CABatchView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CABatchView_lowestAtlasIndexInSubview : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAView* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAView*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CABatchView_lowestAtlasIndexInSubview : Error processing arguments");
        unsigned int ret = cobj->lowestAtlasIndexInSubview(arg0);
        jsval jsret = JSVAL_NULL;
        jsret = uint32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CABatchView_lowestAtlasIndexInSubview : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CABatchView_setBlendFunc(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CABatchView* cobj = (CrossApp::CABatchView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CABatchView_setBlendFunc : Invalid Native Object");
    if (argc == 1) {
        CrossApp::_ccBlendFunc arg0;
        #pragma warning NO CONVERSION TO NATIVE FOR _ccBlendFunc
		ok = false;
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CABatchView_setBlendFunc : Error processing arguments");
        cobj->setBlendFunc(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CABatchView_setBlendFunc : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CABatchView_removeAllSubviews(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CABatchView* cobj = (CrossApp::CABatchView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CABatchView_removeAllSubviews : Invalid Native Object");
    if (argc == 0) {
        cobj->removeAllSubviews();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CABatchView_removeAllSubviews : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CABatchView_visit(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CABatchView* cobj = (CrossApp::CABatchView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CABatchView_visit : Invalid Native Object");
    if (argc == 0) {
        cobj->visit();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CABatchView_visit : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CABatchView_initWithImage(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CABatchView* cobj = (CrossApp::CABatchView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CABatchView_initWithImage : Invalid Native Object");
    if (argc == 2) {
        CrossApp::CAImage* arg0 = nullptr;
        unsigned int arg1 = 0;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAImage*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        ok &= jsval_to_uint32(cx, args.get(1), &arg1);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CABatchView_initWithImage : Error processing arguments");
        bool ret = cobj->initWithImage(arg0, arg1);
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CABatchView_initWithImage : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_autogentestbindings_js_CABatchView_insertSubview(JSContext *cx, uint32_t argc, jsval *vp)
{
    bool ok = true;
    CrossApp::CABatchView* cobj = nullptr;

    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx);
    obj = args.thisv().toObjectOrNull();
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    cobj = (CrossApp::CABatchView *)(proxy ? proxy->ptr : nullptr);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CABatchView_insertSubview : Invalid Native Object");
    do {
        if (argc == 2) {
            CrossApp::CAView* arg0 = nullptr;
            do {
                if (args.get(0).isNull()) { arg0 = nullptr; break; }
                if (!args.get(0).isObject()) { ok = false; break; }
                js_proxy_t *jsProxy;
                JSObject *tmpObj = args.get(0).toObjectOrNull();
                jsProxy = jsb_get_js_proxy(tmpObj);
                arg0 = (CrossApp::CAView*)(jsProxy ? jsProxy->ptr : NULL);
                JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
            } while (0);
            if (!ok) { ok = true; break; }
            int arg1 = 0;
            ok &= jsval_to_int32(cx, args.get(1), (int32_t *)&arg1);
            if (!ok) { ok = true; break; }
            cobj->insertSubview(arg0, arg1);
            args.rval().setUndefined();
            return true;
        }
    } while(0);

    do {
        if (argc == 2) {
            CrossApp::CAView* arg0 = nullptr;
            do {
                if (args.get(0).isNull()) { arg0 = nullptr; break; }
                if (!args.get(0).isObject()) { ok = false; break; }
                js_proxy_t *jsProxy;
                JSObject *tmpObj = args.get(0).toObjectOrNull();
                jsProxy = jsb_get_js_proxy(tmpObj);
                arg0 = (CrossApp::CAView*)(jsProxy ? jsProxy->ptr : NULL);
                JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
            } while (0);
            if (!ok) { ok = true; break; }
            unsigned int arg1 = 0;
            ok &= jsval_to_uint32(cx, args.get(1), &arg1);
            if (!ok) { ok = true; break; }
            cobj->insertSubview(arg0, arg1);
            args.rval().setUndefined();
            return true;
        }
    } while(0);

    JS_ReportError(cx, "js_autogentestbindings_js_CABatchView_insertSubview : wrong number of arguments");
    return false;
}
bool js_autogentestbindings_js_CABatchView_atlasIndexForSubview(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CABatchView* cobj = (CrossApp::CABatchView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CABatchView_atlasIndexForSubview : Invalid Native Object");
    if (argc == 2) {
        CrossApp::CAView* arg0 = nullptr;
        int arg1 = 0;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAView*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        ok &= jsval_to_int32(cx, args.get(1), (int32_t *)&arg1);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CABatchView_atlasIndexForSubview : Error processing arguments");
        unsigned int ret = cobj->atlasIndexForSubview(arg0, arg1);
        jsval jsret = JSVAL_NULL;
        jsret = uint32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CABatchView_atlasIndexForSubview : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_autogentestbindings_js_CABatchView_highestAtlasIndexInSubview(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CABatchView* cobj = (CrossApp::CABatchView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CABatchView_highestAtlasIndexInSubview : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAView* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAView*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CABatchView_highestAtlasIndexInSubview : Error processing arguments");
        unsigned int ret = cobj->highestAtlasIndexInSubview(arg0);
        jsval jsret = JSVAL_NULL;
        jsret = uint32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CABatchView_highestAtlasIndexInSubview : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CABatchView_increaseAtlasCapacity(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CABatchView* cobj = (CrossApp::CABatchView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CABatchView_increaseAtlasCapacity : Invalid Native Object");
    if (argc == 0) {
        cobj->increaseAtlasCapacity();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CABatchView_increaseAtlasCapacity : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CABatchView_init(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CABatchView* cobj = (CrossApp::CABatchView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CABatchView_init : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->init();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CABatchView_init : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CABatchView_removeViewFromAtlas(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CABatchView* cobj = (CrossApp::CABatchView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CABatchView_removeViewFromAtlas : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAView* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAView*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CABatchView_removeViewFromAtlas : Error processing arguments");
        cobj->removeViewFromAtlas(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CABatchView_removeViewFromAtlas : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CABatchView_draw(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CABatchView* cobj = (CrossApp::CABatchView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CABatchView_draw : Invalid Native Object");
    if (argc == 0) {
        cobj->draw();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CABatchView_draw : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CABatchView_getBlendFunc(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CABatchView* cobj = (CrossApp::CABatchView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CABatchView_getBlendFunc : Invalid Native Object");
    if (argc == 0) {
        CrossApp::_ccBlendFunc ret = cobj->getBlendFunc();
        jsval jsret = JSVAL_NULL;
        #pragma warning NO CONVERSION FROM NATIVE FOR _ccBlendFunc;
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CABatchView_getBlendFunc : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CABatchView_sortAllSubview(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CABatchView* cobj = (CrossApp::CABatchView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CABatchView_sortAllSubview : Invalid Native Object");
    if (argc == 0) {
        cobj->sortAllSubview();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CABatchView_sortAllSubview : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CABatchView_getImageAtlas(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CABatchView* cobj = (CrossApp::CABatchView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CABatchView_getImageAtlas : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CAImageAtlas* ret = cobj->getImageAtlas();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAImageAtlas>(cx, (CrossApp::CAImageAtlas*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CABatchView_getImageAtlas : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CABatchView_removeSubviewAtIndex(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CABatchView* cobj = (CrossApp::CABatchView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CABatchView_removeSubviewAtIndex : Invalid Native Object");
    if (argc == 1) {
        unsigned int arg0 = 0;
        ok &= jsval_to_uint32(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CABatchView_removeSubviewAtIndex : Error processing arguments");
        cobj->removeSubviewAtIndex(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CABatchView_removeSubviewAtIndex : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CABatchView_appendSubview(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CABatchView* cobj = (CrossApp::CABatchView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CABatchView_appendSubview : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAView* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAView*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CABatchView_appendSubview : Error processing arguments");
        cobj->appendSubview(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CABatchView_appendSubview : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CABatchView_setImageAtlas(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CABatchView* cobj = (CrossApp::CABatchView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CABatchView_setImageAtlas : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAImageAtlas* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAImageAtlas*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CABatchView_setImageAtlas : Error processing arguments");
        cobj->setImageAtlas(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CABatchView_setImageAtlas : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CABatchView_setImage(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CABatchView* cobj = (CrossApp::CABatchView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CABatchView_setImage : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAImage* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAImage*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CABatchView_setImage : Error processing arguments");
        cobj->setImage(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CABatchView_setImage : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CABatchView_rebuildIndexInOrder(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CABatchView* cobj = (CrossApp::CABatchView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CABatchView_rebuildIndexInOrder : Invalid Native Object");
    if (argc == 2) {
        CrossApp::CAView* arg0 = nullptr;
        unsigned int arg1 = 0;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAView*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        ok &= jsval_to_uint32(cx, args.get(1), &arg1);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CABatchView_rebuildIndexInOrder : Error processing arguments");
        unsigned int ret = cobj->rebuildIndexInOrder(arg0, arg1);
        jsval jsret = JSVAL_NULL;
        jsret = uint32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CABatchView_rebuildIndexInOrder : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_autogentestbindings_js_CABatchView_addSubview(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CABatchView* cobj = (CrossApp::CABatchView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CABatchView_addSubview : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAView* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAView*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CABatchView_addSubview : Error processing arguments");
        cobj->addSubview(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CABatchView_addSubview : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CABatchView_getDescendants(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CABatchView* cobj = (CrossApp::CABatchView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CABatchView_getDescendants : Invalid Native Object");
    if (argc == 0) {
        const CrossApp::CAVector<CrossApp::CAView *>& ret = cobj->getDescendants();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAVector<CrossApp::CAView >&>(cx, (CrossApp::CAVector<CrossApp::CAView *>&)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CABatchView_getDescendants : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CABatchView_getImage(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CABatchView* cobj = (CrossApp::CABatchView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CABatchView_getImage : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CAImage* ret = cobj->getImage();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAImage>(cx, (CrossApp::CAImage*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CABatchView_getImage : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CABatchView_removeSubview(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CABatchView* cobj = (CrossApp::CABatchView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CABatchView_removeSubview : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAView* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAView*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CABatchView_removeSubview : Error processing arguments");
        cobj->removeSubview(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CABatchView_removeSubview : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CABatchView_createWithImage(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    
    do {
        if (argc == 1) {
            CrossApp::CAImage* arg0 = nullptr;
            do {
                if (args.get(0).isNull()) { arg0 = nullptr; break; }
                if (!args.get(0).isObject()) { ok = false; break; }
                js_proxy_t *jsProxy;
                JSObject *tmpObj = args.get(0).toObjectOrNull();
                jsProxy = jsb_get_js_proxy(tmpObj);
                arg0 = (CrossApp::CAImage*)(jsProxy ? jsProxy->ptr : NULL);
                JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
            } while (0);
            if (!ok) { ok = true; break; }
            CrossApp::CABatchView* ret = CrossApp::CABatchView::createWithImage(arg0);
            jsval jsret = JSVAL_NULL;
            do {
                if (ret) {
                    js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CABatchView>(cx, (CrossApp::CABatchView*)ret);
                    jsret = OBJECT_TO_JSVAL(jsProxy->obj);
                } else {
                    jsret = JSVAL_NULL;
                }
            } while (0);
            args.rval().set(jsret);
            return true;
        }
    } while (0);
    
    do {
        if (argc == 2) {
            CrossApp::CAImage* arg0 = nullptr;
            do {
                if (args.get(0).isNull()) { arg0 = nullptr; break; }
                if (!args.get(0).isObject()) { ok = false; break; }
                js_proxy_t *jsProxy;
                JSObject *tmpObj = args.get(0).toObjectOrNull();
                jsProxy = jsb_get_js_proxy(tmpObj);
                arg0 = (CrossApp::CAImage*)(jsProxy ? jsProxy->ptr : NULL);
                JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
            } while (0);
            if (!ok) { ok = true; break; }
            unsigned int arg1 = 0;
            ok &= jsval_to_uint32(cx, args.get(1), &arg1);
            if (!ok) { ok = true; break; }
            CrossApp::CABatchView* ret = CrossApp::CABatchView::createWithImage(arg0, arg1);
            jsval jsret = JSVAL_NULL;
            do {
                if (ret) {
                    js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CABatchView>(cx, (CrossApp::CABatchView*)ret);
                    jsret = OBJECT_TO_JSVAL(jsProxy->obj);
                } else {
                    jsret = JSVAL_NULL;
                }
            } while (0);
            args.rval().set(jsret);
            return true;
        }
    } while (0);
    JS_ReportError(cx, "js_autogentestbindings_js_CABatchView_createWithImage : wrong number of arguments");
    return false;
}
bool js_autogentestbindings_js_CABatchView_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    CrossApp::CABatchView* cobj = new (std::nothrow) CrossApp::CABatchView();
    TypeTest<CrossApp::CABatchView> t;
    js_type_class_t *typeClass = nullptr;
    std::string typeName = t.s_name();
    auto typeMapIter = _js_global_type_map.find(typeName);
    CCAssert(typeMapIter != _js_global_type_map.end(), "Can't find the class type!");
    typeClass = typeMapIter->second;
    CCAssert(typeClass, "The value is null.");
    JS::RootedObject proto(cx, typeClass->proto.get());
    JS::RootedObject parent(cx, typeClass->parentProto.get());
    JS::RootedObject obj(cx, JS_NewObject(cx, typeClass->jsclass, proto, parent));
    args.rval().set(OBJECT_TO_JSVAL(obj));
    // link the native object with the javascript object
    js_proxy_t* p = jsb_new_proxy(cobj, obj);
    if (JS_HasProperty(cx, obj, "_ctor", &ok) && ok)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    return true;
}

extern JSObject *jsb_CrossApp_CAView_prototype;

void js_CrossApp_CABatchView_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOGINFO("jsbindings: finalizing JS object %p (CABatchView)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::CABatchView *nobj = static_cast<CrossApp::CABatchView *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
void js_register_autogentestbindings_js_CABatchView(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_CABatchView_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_CABatchView_class->name = "CABatchView";
    jsb_CrossApp_CABatchView_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_CABatchView_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_CABatchView_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_CABatchView_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_CABatchView_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_CABatchView_class->resolve = JS_ResolveStub;
    jsb_CrossApp_CABatchView_class->convert = JS_ConvertStub;
    jsb_CrossApp_CABatchView_class->finalize = js_CrossApp_CABatchView_finalize;
    jsb_CrossApp_CABatchView_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("reorderSubview", js_autogentestbindings_js_CABatchView_reorderSubview, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("reorderBatch", js_autogentestbindings_js_CABatchView_reorderBatch, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("lowestAtlasIndexInSubview", js_autogentestbindings_js_CABatchView_lowestAtlasIndexInSubview, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setBlendFunc", js_autogentestbindings_js_CABatchView_setBlendFunc, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("removeAllSubviews", js_autogentestbindings_js_CABatchView_removeAllSubviews, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("visit", js_autogentestbindings_js_CABatchView_visit, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("initWithImage", js_autogentestbindings_js_CABatchView_initWithImage, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("insertSubview", js_autogentestbindings_js_CABatchView_insertSubview, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("atlasIndexForSubview", js_autogentestbindings_js_CABatchView_atlasIndexForSubview, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("highestAtlasIndexInSubview", js_autogentestbindings_js_CABatchView_highestAtlasIndexInSubview, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("increaseAtlasCapacity", js_autogentestbindings_js_CABatchView_increaseAtlasCapacity, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("init", js_autogentestbindings_js_CABatchView_init, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("removeViewFromAtlas", js_autogentestbindings_js_CABatchView_removeViewFromAtlas, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("draw", js_autogentestbindings_js_CABatchView_draw, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getBlendFunc", js_autogentestbindings_js_CABatchView_getBlendFunc, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("sortAllSubview", js_autogentestbindings_js_CABatchView_sortAllSubview, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getImageAtlas", js_autogentestbindings_js_CABatchView_getImageAtlas, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("removeSubviewAtIndex", js_autogentestbindings_js_CABatchView_removeSubviewAtIndex, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("appendSubview", js_autogentestbindings_js_CABatchView_appendSubview, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setImageAtlas", js_autogentestbindings_js_CABatchView_setImageAtlas, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setImage", js_autogentestbindings_js_CABatchView_setImage, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("rebuildIndexInOrder", js_autogentestbindings_js_CABatchView_rebuildIndexInOrder, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("addSubview", js_autogentestbindings_js_CABatchView_addSubview, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getDescendants", js_autogentestbindings_js_CABatchView_getDescendants, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getImage", js_autogentestbindings_js_CABatchView_getImage, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("removeSubview", js_autogentestbindings_js_CABatchView_removeSubview, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    static JSFunctionSpec st_funcs[] = {
        JS_FN("createWithImage", js_autogentestbindings_js_CABatchView_createWithImage, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    jsb_CrossApp_CABatchView_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_CAView_prototype),
        jsb_CrossApp_CABatchView_class,
        js_autogentestbindings_js_CABatchView_constructor, 0, // constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27 
//  JS_SetPropertyAttributes(cx, global, "CABatchView", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::CABatchView> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_CABatchView_class;
        p->proto = jsb_CrossApp_CABatchView_prototype;
        p->parentProto = jsb_CrossApp_CAView_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
}

JSClass  *jsb_CrossApp_CAClippingView_class;
JSObject *jsb_CrossApp_CAClippingView_prototype;

bool js_autogentestbindings_js_CAClippingView_isClippingEnabled(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAClippingView* cobj = (CrossApp::CAClippingView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAClippingView_isClippingEnabled : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->isClippingEnabled();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAClippingView_isClippingEnabled : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAClippingView_onEnter(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAClippingView* cobj = (CrossApp::CAClippingView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAClippingView_onEnter : Invalid Native Object");
    if (argc == 0) {
        cobj->onEnter();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAClippingView_onEnter : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAClippingView_onExit(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAClippingView* cobj = (CrossApp::CAClippingView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAClippingView_onExit : Invalid Native Object");
    if (argc == 0) {
        cobj->onExit();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAClippingView_onExit : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAClippingView_setInverted(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAClippingView* cobj = (CrossApp::CAClippingView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAClippingView_setInverted : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        arg0 = JS::ToBoolean(args.get(0));
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAClippingView_setInverted : Error processing arguments");
        cobj->setInverted(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAClippingView_setInverted : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAClippingView_visit(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAClippingView* cobj = (CrossApp::CAClippingView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAClippingView_visit : Invalid Native Object");
    if (argc == 0) {
        cobj->visit();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAClippingView_visit : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAClippingView_setStencil(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAClippingView* cobj = (CrossApp::CAClippingView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAClippingView_setStencil : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAView* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAView*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAClippingView_setStencil : Error processing arguments");
        cobj->setStencil(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAClippingView_setStencil : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAClippingView_getAlphaThreshold(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAClippingView* cobj = (CrossApp::CAClippingView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAClippingView_getAlphaThreshold : Invalid Native Object");
    if (argc == 0) {
        double ret = cobj->getAlphaThreshold();
        jsval jsret = JSVAL_NULL;
        jsret = DOUBLE_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAClippingView_getAlphaThreshold : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAClippingView_init(JSContext *cx, uint32_t argc, jsval *vp)
{
    bool ok = true;
    CrossApp::CAClippingView* cobj = nullptr;

    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx);
    obj = args.thisv().toObjectOrNull();
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    cobj = (CrossApp::CAClippingView *)(proxy ? proxy->ptr : nullptr);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAClippingView_init : Invalid Native Object");
    do {
        if (argc == 1) {
            CrossApp::CAView* arg0 = nullptr;
            do {
                if (args.get(0).isNull()) { arg0 = nullptr; break; }
                if (!args.get(0).isObject()) { ok = false; break; }
                js_proxy_t *jsProxy;
                JSObject *tmpObj = args.get(0).toObjectOrNull();
                jsProxy = jsb_get_js_proxy(tmpObj);
                arg0 = (CrossApp::CAView*)(jsProxy ? jsProxy->ptr : NULL);
                JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
            } while (0);
            if (!ok) { ok = true; break; }
            bool ret = cobj->init(arg0);
            jsval jsret = JSVAL_NULL;
            jsret = BOOLEAN_TO_JSVAL(ret);
            args.rval().set(jsret);
            return true;
        }
    } while(0);

    do {
        if (argc == 0) {
            bool ret = cobj->init();
            jsval jsret = JSVAL_NULL;
            jsret = BOOLEAN_TO_JSVAL(ret);
            args.rval().set(jsret);
            return true;
        }
    } while(0);

    JS_ReportError(cx, "js_autogentestbindings_js_CAClippingView_init : wrong number of arguments");
    return false;
}
bool js_autogentestbindings_js_CAClippingView_onExitTransitionDidStart(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAClippingView* cobj = (CrossApp::CAClippingView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAClippingView_onExitTransitionDidStart : Invalid Native Object");
    if (argc == 0) {
        cobj->onExitTransitionDidStart();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAClippingView_onExitTransitionDidStart : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAClippingView_getStencil(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAClippingView* cobj = (CrossApp::CAClippingView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAClippingView_getStencil : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CAView* ret = cobj->getStencil();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAView>(cx, (CrossApp::CAView*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAClippingView_getStencil : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAClippingView_setClippingEnabled(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAClippingView* cobj = (CrossApp::CAClippingView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAClippingView_setClippingEnabled : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        arg0 = JS::ToBoolean(args.get(0));
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAClippingView_setClippingEnabled : Error processing arguments");
        cobj->setClippingEnabled(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAClippingView_setClippingEnabled : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAClippingView_setAlphaThreshold(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAClippingView* cobj = (CrossApp::CAClippingView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAClippingView_setAlphaThreshold : Invalid Native Object");
    if (argc == 1) {
        double arg0 = 0;
        ok &= JS::ToNumber( cx, args.get(0), &arg0) && !isnan(arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAClippingView_setAlphaThreshold : Error processing arguments");
        cobj->setAlphaThreshold(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAClippingView_setAlphaThreshold : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAClippingView_onEnterTransitionDidFinish(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAClippingView* cobj = (CrossApp::CAClippingView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAClippingView_onEnterTransitionDidFinish : Invalid Native Object");
    if (argc == 0) {
        cobj->onEnterTransitionDidFinish();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAClippingView_onEnterTransitionDidFinish : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAClippingView_isInverted(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAClippingView* cobj = (CrossApp::CAClippingView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAClippingView_isInverted : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->isInverted();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAClippingView_isInverted : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAClippingView_create(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    
    do {
        if (argc == 1) {
            CrossApp::CAView* arg0 = nullptr;
            do {
                if (args.get(0).isNull()) { arg0 = nullptr; break; }
                if (!args.get(0).isObject()) { ok = false; break; }
                js_proxy_t *jsProxy;
                JSObject *tmpObj = args.get(0).toObjectOrNull();
                jsProxy = jsb_get_js_proxy(tmpObj);
                arg0 = (CrossApp::CAView*)(jsProxy ? jsProxy->ptr : NULL);
                JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
            } while (0);
            if (!ok) { ok = true; break; }
            CrossApp::CAClippingView* ret = CrossApp::CAClippingView::create(arg0);
            jsval jsret = JSVAL_NULL;
            do {
                if (ret) {
                    js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAClippingView>(cx, (CrossApp::CAClippingView*)ret);
                    jsret = OBJECT_TO_JSVAL(jsProxy->obj);
                } else {
                    jsret = JSVAL_NULL;
                }
            } while (0);
            args.rval().set(jsret);
            return true;
        }
    } while (0);
    
    do {
        if (argc == 0) {
            CrossApp::CAClippingView* ret = CrossApp::CAClippingView::create();
            jsval jsret = JSVAL_NULL;
            do {
                if (ret) {
                    js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAClippingView>(cx, (CrossApp::CAClippingView*)ret);
                    jsret = OBJECT_TO_JSVAL(jsProxy->obj);
                } else {
                    jsret = JSVAL_NULL;
                }
            } while (0);
            args.rval().set(jsret);
            return true;
        }
    } while (0);
    JS_ReportError(cx, "js_autogentestbindings_js_CAClippingView_create : wrong number of arguments");
    return false;
}

extern JSObject *jsb_CrossApp_CAView_prototype;

void js_CrossApp_CAClippingView_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOGINFO("jsbindings: finalizing JS object %p (CAClippingView)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::CAClippingView *nobj = static_cast<CrossApp::CAClippingView *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
void js_register_autogentestbindings_js_CAClippingView(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_CAClippingView_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_CAClippingView_class->name = "CAClippingView";
    jsb_CrossApp_CAClippingView_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_CAClippingView_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_CAClippingView_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_CAClippingView_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_CAClippingView_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_CAClippingView_class->resolve = JS_ResolveStub;
    jsb_CrossApp_CAClippingView_class->convert = JS_ConvertStub;
    jsb_CrossApp_CAClippingView_class->finalize = js_CrossApp_CAClippingView_finalize;
    jsb_CrossApp_CAClippingView_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("isClippingEnabled", js_autogentestbindings_js_CAClippingView_isClippingEnabled, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("onEnter", js_autogentestbindings_js_CAClippingView_onEnter, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("onExit", js_autogentestbindings_js_CAClippingView_onExit, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setInverted", js_autogentestbindings_js_CAClippingView_setInverted, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("visit", js_autogentestbindings_js_CAClippingView_visit, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setStencil", js_autogentestbindings_js_CAClippingView_setStencil, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getAlphaThreshold", js_autogentestbindings_js_CAClippingView_getAlphaThreshold, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("init", js_autogentestbindings_js_CAClippingView_init, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("onExitTransitionDidStart", js_autogentestbindings_js_CAClippingView_onExitTransitionDidStart, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getStencil", js_autogentestbindings_js_CAClippingView_getStencil, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setClippingEnabled", js_autogentestbindings_js_CAClippingView_setClippingEnabled, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setAlphaThreshold", js_autogentestbindings_js_CAClippingView_setAlphaThreshold, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("onEnterTransitionDidFinish", js_autogentestbindings_js_CAClippingView_onEnterTransitionDidFinish, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isInverted", js_autogentestbindings_js_CAClippingView_isInverted, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    static JSFunctionSpec st_funcs[] = {
        JS_FN("create", js_autogentestbindings_js_CAClippingView_create, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    jsb_CrossApp_CAClippingView_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_CAView_prototype),
        jsb_CrossApp_CAClippingView_class,
        dummy_constructor<CrossApp::CAClippingView>, 0, // no constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27 
//  JS_SetPropertyAttributes(cx, global, "CAClippingView", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::CAClippingView> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_CAClippingView_class;
        p->proto = jsb_CrossApp_CAClippingView_prototype;
        p->parentProto = jsb_CrossApp_CAView_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
}

JSClass  *jsb_CrossApp_CAListViewDelegate_class;
JSObject *jsb_CrossApp_CAListViewDelegate_prototype;

bool js_autogentestbindings_js_CAListViewDelegate_listViewDidDeselectCellAtIndex(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAListViewDelegate* cobj = (CrossApp::CAListViewDelegate *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAListViewDelegate_listViewDidDeselectCellAtIndex : Invalid Native Object");
    if (argc == 2) {
        CrossApp::CAListView* arg0 = nullptr;
        unsigned int arg1 = 0;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAListView*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        ok &= jsval_to_uint32(cx, args.get(1), &arg1);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAListViewDelegate_listViewDidDeselectCellAtIndex : Error processing arguments");
        cobj->listViewDidDeselectCellAtIndex(arg0, arg1);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAListViewDelegate_listViewDidDeselectCellAtIndex : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_autogentestbindings_js_CAListViewDelegate_listViewDidSelectCellAtIndex(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAListViewDelegate* cobj = (CrossApp::CAListViewDelegate *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAListViewDelegate_listViewDidSelectCellAtIndex : Invalid Native Object");
    if (argc == 2) {
        CrossApp::CAListView* arg0 = nullptr;
        unsigned int arg1 = 0;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAListView*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        ok &= jsval_to_uint32(cx, args.get(1), &arg1);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAListViewDelegate_listViewDidSelectCellAtIndex : Error processing arguments");
        cobj->listViewDidSelectCellAtIndex(arg0, arg1);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAListViewDelegate_listViewDidSelectCellAtIndex : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}

void js_CrossApp_CAListViewDelegate_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOGINFO("jsbindings: finalizing JS object %p (CAListViewDelegate)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::CAListViewDelegate *nobj = static_cast<CrossApp::CAListViewDelegate *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
void js_register_autogentestbindings_js_CAListViewDelegate(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_CAListViewDelegate_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_CAListViewDelegate_class->name = "CAListViewDelegate";
    jsb_CrossApp_CAListViewDelegate_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_CAListViewDelegate_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_CAListViewDelegate_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_CAListViewDelegate_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_CAListViewDelegate_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_CAListViewDelegate_class->resolve = JS_ResolveStub;
    jsb_CrossApp_CAListViewDelegate_class->convert = JS_ConvertStub;
    jsb_CrossApp_CAListViewDelegate_class->finalize = js_CrossApp_CAListViewDelegate_finalize;
    jsb_CrossApp_CAListViewDelegate_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("listViewDidDeselectCellAtIndex", js_autogentestbindings_js_CAListViewDelegate_listViewDidDeselectCellAtIndex, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("listViewDidSelectCellAtIndex", js_autogentestbindings_js_CAListViewDelegate_listViewDidSelectCellAtIndex, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    JSFunctionSpec *st_funcs = NULL;

    jsb_CrossApp_CAListViewDelegate_prototype = JS_InitClass(
        cx, global,
        JS::NullPtr(), // parent proto
        jsb_CrossApp_CAListViewDelegate_class,
        dummy_constructor<CrossApp::CAListViewDelegate>, 0, // no constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27 
//  JS_SetPropertyAttributes(cx, global, "CAListViewDelegate", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::CAListViewDelegate> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_CAListViewDelegate_class;
        p->proto = jsb_CrossApp_CAListViewDelegate_prototype;
        p->parentProto = NULL;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
}

JSClass  *jsb_CrossApp_CAListViewDataSource_class;
JSObject *jsb_CrossApp_CAListViewDataSource_prototype;

bool js_autogentestbindings_js_CAListViewDataSource_listViewCellAtIndex(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAListViewDataSource* cobj = (CrossApp::CAListViewDataSource *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAListViewDataSource_listViewCellAtIndex : Invalid Native Object");
    if (argc == 3) {
        CrossApp::CAListView* arg0 = nullptr;
        CrossApp::DSize arg1;
        unsigned int arg2 = 0;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAListView*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        ok &= jsval_to_dsize(cx, args.get(1), &arg1);
        ok &= jsval_to_uint32(cx, args.get(2), &arg2);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAListViewDataSource_listViewCellAtIndex : Error processing arguments");
        CrossApp::CAListViewCell* ret = cobj->listViewCellAtIndex(arg0, arg1, arg2);
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAListViewCell>(cx, (CrossApp::CAListViewCell*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAListViewDataSource_listViewCellAtIndex : wrong number of arguments: %d, was expecting %d", argc, 3);
    return false;
}
bool js_autogentestbindings_js_CAListViewDataSource_numberOfIndex(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAListViewDataSource* cobj = (CrossApp::CAListViewDataSource *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAListViewDataSource_numberOfIndex : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAListView* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAListView*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAListViewDataSource_numberOfIndex : Error processing arguments");
        unsigned int ret = cobj->numberOfIndex(arg0);
        jsval jsret = JSVAL_NULL;
        jsret = uint32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAListViewDataSource_numberOfIndex : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAListViewDataSource_listViewWillDisplayCellAtIndex(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAListViewDataSource* cobj = (CrossApp::CAListViewDataSource *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAListViewDataSource_listViewWillDisplayCellAtIndex : Invalid Native Object");
    if (argc == 3) {
        CrossApp::CAListView* arg0 = nullptr;
        CrossApp::CAListViewCell* arg1 = nullptr;
        unsigned int arg2 = 0;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAListView*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        do {
            if (args.get(1).isNull()) { arg1 = nullptr; break; }
            if (!args.get(1).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(1).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg1 = (CrossApp::CAListViewCell*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg1, cx, false, "Invalid Native Object");
        } while (0);
        ok &= jsval_to_uint32(cx, args.get(2), &arg2);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAListViewDataSource_listViewWillDisplayCellAtIndex : Error processing arguments");
        cobj->listViewWillDisplayCellAtIndex(arg0, arg1, arg2);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAListViewDataSource_listViewWillDisplayCellAtIndex : wrong number of arguments: %d, was expecting %d", argc, 3);
    return false;
}
bool js_autogentestbindings_js_CAListViewDataSource_listViewHeightForIndex(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAListViewDataSource* cobj = (CrossApp::CAListViewDataSource *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAListViewDataSource_listViewHeightForIndex : Invalid Native Object");
    if (argc == 2) {
        CrossApp::CAListView* arg0 = nullptr;
        unsigned int arg1 = 0;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAListView*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        ok &= jsval_to_uint32(cx, args.get(1), &arg1);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAListViewDataSource_listViewHeightForIndex : Error processing arguments");
        unsigned int ret = cobj->listViewHeightForIndex(arg0, arg1);
        jsval jsret = JSVAL_NULL;
        jsret = uint32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAListViewDataSource_listViewHeightForIndex : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}

void js_CrossApp_CAListViewDataSource_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOGINFO("jsbindings: finalizing JS object %p (CAListViewDataSource)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::CAListViewDataSource *nobj = static_cast<CrossApp::CAListViewDataSource *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
void js_register_autogentestbindings_js_CAListViewDataSource(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_CAListViewDataSource_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_CAListViewDataSource_class->name = "CAListViewDataSource";
    jsb_CrossApp_CAListViewDataSource_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_CAListViewDataSource_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_CAListViewDataSource_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_CAListViewDataSource_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_CAListViewDataSource_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_CAListViewDataSource_class->resolve = JS_ResolveStub;
    jsb_CrossApp_CAListViewDataSource_class->convert = JS_ConvertStub;
    jsb_CrossApp_CAListViewDataSource_class->finalize = js_CrossApp_CAListViewDataSource_finalize;
    jsb_CrossApp_CAListViewDataSource_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("listViewCellAtIndex", js_autogentestbindings_js_CAListViewDataSource_listViewCellAtIndex, 3, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("numberOfIndex", js_autogentestbindings_js_CAListViewDataSource_numberOfIndex, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("listViewWillDisplayCellAtIndex", js_autogentestbindings_js_CAListViewDataSource_listViewWillDisplayCellAtIndex, 3, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("listViewHeightForIndex", js_autogentestbindings_js_CAListViewDataSource_listViewHeightForIndex, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    JSFunctionSpec *st_funcs = NULL;

    jsb_CrossApp_CAListViewDataSource_prototype = JS_InitClass(
        cx, global,
        JS::NullPtr(), // parent proto
        jsb_CrossApp_CAListViewDataSource_class,
        dummy_constructor<CrossApp::CAListViewDataSource>, 0, // no constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27 
//  JS_SetPropertyAttributes(cx, global, "CAListViewDataSource", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::CAListViewDataSource> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_CAListViewDataSource_class;
        p->proto = jsb_CrossApp_CAListViewDataSource_prototype;
        p->parentProto = NULL;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
}

JSClass  *jsb_CrossApp_CAListView_class;
JSObject *jsb_CrossApp_CAListView_prototype;

bool js_autogentestbindings_js_CAListView_isAllowsSelection(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAListView* cobj = (CrossApp::CAListView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAListView_isAllowsSelection : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->isAllowsSelection();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAListView_isAllowsSelection : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAListView_mouseMovedOutSide(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAListView* cobj = (CrossApp::CAListView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAListView_mouseMovedOutSide : Invalid Native Object");
    if (argc == 2) {
        CrossApp::CATouch* arg0 = nullptr;
        CrossApp::CAEvent* arg1 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CATouch*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        do {
            if (args.get(1).isNull()) { arg1 = nullptr; break; }
            if (!args.get(1).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(1).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg1 = (CrossApp::CAEvent*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg1, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAListView_mouseMovedOutSide : Error processing arguments");
        cobj->mouseMovedOutSide(arg0, arg1);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAListView_mouseMovedOutSide : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_autogentestbindings_js_CAListView_setListViewDataSource(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAListView* cobj = (CrossApp::CAListView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAListView_setListViewDataSource : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAListViewDataSource* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAListViewDataSource*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAListView_setListViewDataSource : Error processing arguments");
        cobj->setListViewDataSource(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAListView_setListViewDataSource : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAListView_ccTouchBegan(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAListView* cobj = (CrossApp::CAListView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAListView_ccTouchBegan : Invalid Native Object");
    if (argc == 2) {
        CrossApp::CATouch* arg0 = nullptr;
        CrossApp::CAEvent* arg1 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CATouch*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        do {
            if (args.get(1).isNull()) { arg1 = nullptr; break; }
            if (!args.get(1).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(1).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg1 = (CrossApp::CAEvent*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg1, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAListView_ccTouchBegan : Error processing arguments");
        bool ret = cobj->ccTouchBegan(arg0, arg1);
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAListView_ccTouchBegan : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_autogentestbindings_js_CAListView_setListFooterHeight(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAListView* cobj = (CrossApp::CAListView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAListView_setListFooterHeight : Invalid Native Object");
    if (argc == 1) {
        unsigned int arg0 = 0;
        ok &= jsval_to_uint32(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAListView_setListFooterHeight : Error processing arguments");
        cobj->setListFooterHeight(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAListView_setListFooterHeight : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAListView_ccTouchEnded(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAListView* cobj = (CrossApp::CAListView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAListView_ccTouchEnded : Invalid Native Object");
    if (argc == 2) {
        CrossApp::CATouch* arg0 = nullptr;
        CrossApp::CAEvent* arg1 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CATouch*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        do {
            if (args.get(1).isNull()) { arg1 = nullptr; break; }
            if (!args.get(1).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(1).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg1 = (CrossApp::CAEvent*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg1, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAListView_ccTouchEnded : Error processing arguments");
        cobj->ccTouchEnded(arg0, arg1);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAListView_ccTouchEnded : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_autogentestbindings_js_CAListView_setSeparatorColor(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAListView* cobj = (CrossApp::CAListView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAListView_setSeparatorColor : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAColor4B arg0;
        ok &= jsval_to_cacolor4b(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAListView_setSeparatorColor : Error processing arguments");
        cobj->setSeparatorColor(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAListView_setSeparatorColor : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAListView_getListViewDelegate(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAListView* cobj = (CrossApp::CAListView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAListView_getListViewDelegate : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CAListViewDelegate* ret = cobj->getListViewDelegate();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAListViewDelegate>(cx, (CrossApp::CAListViewDelegate*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAListView_getListViewDelegate : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAListView_mouseMoved(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAListView* cobj = (CrossApp::CAListView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAListView_mouseMoved : Invalid Native Object");
    if (argc == 2) {
        CrossApp::CATouch* arg0 = nullptr;
        CrossApp::CAEvent* arg1 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CATouch*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        do {
            if (args.get(1).isNull()) { arg1 = nullptr; break; }
            if (!args.get(1).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(1).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg1 = (CrossApp::CAEvent*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg1, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAListView_mouseMoved : Error processing arguments");
        cobj->mouseMoved(arg0, arg1);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAListView_mouseMoved : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_autogentestbindings_js_CAListView_setSelectAtIndex(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAListView* cobj = (CrossApp::CAListView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAListView_setSelectAtIndex : Invalid Native Object");
    if (argc == 1) {
        unsigned int arg0 = 0;
        ok &= jsval_to_uint32(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAListView_setSelectAtIndex : Error processing arguments");
        cobj->setSelectAtIndex(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAListView_setSelectAtIndex : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAListView_clearData(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAListView* cobj = (CrossApp::CAListView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAListView_clearData : Invalid Native Object");
    if (argc == 0) {
        cobj->clearData();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAListView_clearData : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAListView_setListViewOrientation(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAListView* cobj = (CrossApp::CAListView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAListView_setListViewOrientation : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAListViewOrientation arg0;
        ok &= jsval_to_int32(cx, args.get(0), (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAListView_setListViewOrientation : Error processing arguments");
        cobj->setListViewOrientation(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAListView_setListViewOrientation : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAListView_getSeparatorViewHeight(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAListView* cobj = (CrossApp::CAListView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAListView_getSeparatorViewHeight : Invalid Native Object");
    if (argc == 0) {
        unsigned int ret = cobj->getSeparatorViewHeight();
        jsval jsret = JSVAL_NULL;
        jsret = uint32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAListView_getSeparatorViewHeight : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAListView_setListViewDelegate(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAListView* cobj = (CrossApp::CAListView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAListView_setListViewDelegate : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAListViewDelegate* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAListViewDelegate*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAListView_setListViewDelegate : Error processing arguments");
        cobj->setListViewDelegate(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAListView_setListViewDelegate : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAListView_init(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAListView* cobj = (CrossApp::CAListView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAListView_init : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->init();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAListView_init : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAListView_getListViewDataSource(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAListView* cobj = (CrossApp::CAListView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAListView_getListViewDataSource : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CAListViewDataSource* ret = cobj->getListViewDataSource();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAListViewDataSource>(cx, (CrossApp::CAListViewDataSource*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAListView_getListViewDataSource : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAListView_setAllowsHeadAndFootHover(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAListView* cobj = (CrossApp::CAListView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAListView_setAllowsHeadAndFootHover : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        arg0 = JS::ToBoolean(args.get(0));
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAListView_setAllowsHeadAndFootHover : Error processing arguments");
        cobj->setAllowsHeadAndFootHover(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAListView_setAllowsHeadAndFootHover : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAListView_getSeparatorColor(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAListView* cobj = (CrossApp::CAListView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAListView_getSeparatorColor : Invalid Native Object");
    if (argc == 0) {
        const CrossApp::CAColor4B& ret = cobj->getSeparatorColor();
        jsval jsret = JSVAL_NULL;
        jsret = cacolor4b_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAListView_getSeparatorColor : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAListView_ccTouchMoved(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAListView* cobj = (CrossApp::CAListView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAListView_ccTouchMoved : Invalid Native Object");
    if (argc == 2) {
        CrossApp::CATouch* arg0 = nullptr;
        CrossApp::CAEvent* arg1 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CATouch*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        do {
            if (args.get(1).isNull()) { arg1 = nullptr; break; }
            if (!args.get(1).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(1).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg1 = (CrossApp::CAEvent*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg1, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAListView_ccTouchMoved : Error processing arguments");
        cobj->ccTouchMoved(arg0, arg1);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAListView_ccTouchMoved : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_autogentestbindings_js_CAListView_setAllowsSelection(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAListView* cobj = (CrossApp::CAListView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAListView_setAllowsSelection : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        arg0 = JS::ToBoolean(args.get(0));
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAListView_setAllowsSelection : Error processing arguments");
        cobj->setAllowsSelection(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAListView_setAllowsSelection : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAListView_reloadData(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAListView* cobj = (CrossApp::CAListView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAListView_reloadData : Invalid Native Object");
    if (argc == 0) {
        cobj->reloadData();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAListView_reloadData : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAListView_setAllowsMultipleSelection(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAListView* cobj = (CrossApp::CAListView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAListView_setAllowsMultipleSelection : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        arg0 = JS::ToBoolean(args.get(0));
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAListView_setAllowsMultipleSelection : Error processing arguments");
        cobj->setAllowsMultipleSelection(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAListView_setAllowsMultipleSelection : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAListView_isAllowsMultipleSelection(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAListView* cobj = (CrossApp::CAListView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAListView_isAllowsMultipleSelection : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->isAllowsMultipleSelection();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAListView_isAllowsMultipleSelection : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAListView_displayingListCell(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAListView* cobj = (CrossApp::CAListView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAListView_displayingListCell : Invalid Native Object");
    if (argc == 0) {
        const CrossApp::CAVector<CrossApp::CAListViewCell *>& ret = cobj->displayingListCell();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAVector<CrossApp::CAListViewCell >&>(cx, (CrossApp::CAVector<CrossApp::CAListViewCell *>&)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAListView_displayingListCell : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAListView_setListHeaderView(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAListView* cobj = (CrossApp::CAListView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAListView_setListHeaderView : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAView* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAView*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAListView_setListHeaderView : Error processing arguments");
        cobj->setListHeaderView(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAListView_setListHeaderView : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAListView_getAllowsHeadAndFootHover(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAListView* cobj = (CrossApp::CAListView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAListView_getAllowsHeadAndFootHover : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->getAllowsHeadAndFootHover();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAListView_getAllowsHeadAndFootHover : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAListView_getListFooterHeight(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAListView* cobj = (CrossApp::CAListView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAListView_getListFooterHeight : Invalid Native Object");
    if (argc == 0) {
        unsigned int ret = cobj->getListFooterHeight();
        jsval jsret = JSVAL_NULL;
        jsret = uint32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAListView_getListFooterHeight : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAListView_setShowsScrollIndicators(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAListView* cobj = (CrossApp::CAListView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAListView_setShowsScrollIndicators : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        arg0 = JS::ToBoolean(args.get(0));
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAListView_setShowsScrollIndicators : Error processing arguments");
        cobj->setShowsScrollIndicators(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAListView_setShowsScrollIndicators : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAListView_setListHeaderHeight(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAListView* cobj = (CrossApp::CAListView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAListView_setListHeaderHeight : Invalid Native Object");
    if (argc == 1) {
        unsigned int arg0 = 0;
        ok &= jsval_to_uint32(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAListView_setListHeaderHeight : Error processing arguments");
        cobj->setListHeaderHeight(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAListView_setListHeaderHeight : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAListView_onExitTransitionDidStart(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAListView* cobj = (CrossApp::CAListView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAListView_onExitTransitionDidStart : Invalid Native Object");
    if (argc == 0) {
        cobj->onExitTransitionDidStart();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAListView_onExitTransitionDidStart : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAListView_getListHeaderView(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAListView* cobj = (CrossApp::CAListView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAListView_getListHeaderView : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CAView* ret = cobj->getListHeaderView();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAView>(cx, (CrossApp::CAView*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAListView_getListHeaderView : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAListView_setSeparatorViewHeight(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAListView* cobj = (CrossApp::CAListView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAListView_setSeparatorViewHeight : Invalid Native Object");
    if (argc == 1) {
        unsigned int arg0 = 0;
        ok &= jsval_to_uint32(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAListView_setSeparatorViewHeight : Error processing arguments");
        cobj->setSeparatorViewHeight(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAListView_setSeparatorViewHeight : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAListView_reloadViewSizeData(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAListView* cobj = (CrossApp::CAListView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAListView_reloadViewSizeData : Invalid Native Object");
    if (argc == 0) {
        cobj->reloadViewSizeData();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAListView_reloadViewSizeData : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAListView_getListViewOrientation(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAListView* cobj = (CrossApp::CAListView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAListView_getListViewOrientation : Invalid Native Object");
    if (argc == 0) {
        int ret = (int)cobj->getListViewOrientation();
        jsval jsret = JSVAL_NULL;
        jsret = int32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAListView_getListViewOrientation : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAListView_setListFooterView(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAListView* cobj = (CrossApp::CAListView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAListView_setListFooterView : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAView* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAView*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAListView_setListFooterView : Error processing arguments");
        cobj->setListFooterView(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAListView_setListFooterView : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAListView_getListFooterView(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAListView* cobj = (CrossApp::CAListView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAListView_getListFooterView : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CAView* ret = cobj->getListFooterView();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAView>(cx, (CrossApp::CAView*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAListView_getListFooterView : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAListView_ccTouchCancelled(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAListView* cobj = (CrossApp::CAListView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAListView_ccTouchCancelled : Invalid Native Object");
    if (argc == 2) {
        CrossApp::CATouch* arg0 = nullptr;
        CrossApp::CAEvent* arg1 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CATouch*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        do {
            if (args.get(1).isNull()) { arg1 = nullptr; break; }
            if (!args.get(1).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(1).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg1 = (CrossApp::CAEvent*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg1, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAListView_ccTouchCancelled : Error processing arguments");
        cobj->ccTouchCancelled(arg0, arg1);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAListView_ccTouchCancelled : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_autogentestbindings_js_CAListView_cellForRowAtIndex(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAListView* cobj = (CrossApp::CAListView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAListView_cellForRowAtIndex : Invalid Native Object");
    if (argc == 1) {
        unsigned int arg0 = 0;
        ok &= jsval_to_uint32(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAListView_cellForRowAtIndex : Error processing arguments");
        CrossApp::CAListViewCell* ret = cobj->cellForRowAtIndex(arg0);
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAListViewCell>(cx, (CrossApp::CAListViewCell*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAListView_cellForRowAtIndex : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAListView_switchPCMode(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAListView* cobj = (CrossApp::CAListView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAListView_switchPCMode : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        arg0 = JS::ToBoolean(args.get(0));
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAListView_switchPCMode : Error processing arguments");
        cobj->switchPCMode(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAListView_switchPCMode : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAListView_setUnSelectAtIndex(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAListView* cobj = (CrossApp::CAListView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAListView_setUnSelectAtIndex : Invalid Native Object");
    if (argc == 1) {
        unsigned int arg0 = 0;
        ok &= jsval_to_uint32(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAListView_setUnSelectAtIndex : Error processing arguments");
        cobj->setUnSelectAtIndex(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAListView_setUnSelectAtIndex : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAListView_dequeueReusableCellWithIdentifier(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAListView* cobj = (CrossApp::CAListView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAListView_dequeueReusableCellWithIdentifier : Invalid Native Object");
    if (argc == 1) {
        const char* arg0 = nullptr;
        std::string arg0_tmp; ok &= jsval_to_std_string(cx, args.get(0), &arg0_tmp); arg0 = arg0_tmp.c_str();
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAListView_dequeueReusableCellWithIdentifier : Error processing arguments");
        CrossApp::CAListViewCell* ret = cobj->dequeueReusableCellWithIdentifier(arg0);
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAListViewCell>(cx, (CrossApp::CAListViewCell*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAListView_dequeueReusableCellWithIdentifier : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAListView_onEnterTransitionDidFinish(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAListView* cobj = (CrossApp::CAListView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAListView_onEnterTransitionDidFinish : Invalid Native Object");
    if (argc == 0) {
        cobj->onEnterTransitionDidFinish();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAListView_onEnterTransitionDidFinish : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAListView_getListHeaderHeight(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAListView* cobj = (CrossApp::CAListView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAListView_getListHeaderHeight : Invalid Native Object");
    if (argc == 0) {
        unsigned int ret = cobj->getListHeaderHeight();
        jsval jsret = JSVAL_NULL;
        jsret = uint32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAListView_getListHeaderHeight : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAListView_createWithFrame(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        CrossApp::DRect arg0;
        ok &= jsval_to_drect(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAListView_createWithFrame : Error processing arguments");
        CrossApp::CAListView* ret = CrossApp::CAListView::createWithFrame(arg0);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAListView>(cx, (CrossApp::CAListView*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_autogentestbindings_js_CAListView_createWithFrame : wrong number of arguments");
    return false;
}

bool js_autogentestbindings_js_CAListView_createWithLayout(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        CrossApp::DRectLayout arg0;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (const CrossApp::DRectLayout&)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAListView_createWithLayout : Error processing arguments");
        CrossApp::CAListView* ret = CrossApp::CAListView::createWithLayout(arg0);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAListView>(cx, (CrossApp::CAListView*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_autogentestbindings_js_CAListView_createWithLayout : wrong number of arguments");
    return false;
}

bool js_autogentestbindings_js_CAListView_createWithCenter(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        CrossApp::DRect arg0;
        ok &= jsval_to_drect(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAListView_createWithCenter : Error processing arguments");
        CrossApp::CAListView* ret = CrossApp::CAListView::createWithCenter(arg0);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAListView>(cx, (CrossApp::CAListView*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_autogentestbindings_js_CAListView_createWithCenter : wrong number of arguments");
    return false;
}

bool js_autogentestbindings_js_CAListView_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    CrossApp::CAListView* cobj = new (std::nothrow) CrossApp::CAListView();
    TypeTest<CrossApp::CAListView> t;
    js_type_class_t *typeClass = nullptr;
    std::string typeName = t.s_name();
    auto typeMapIter = _js_global_type_map.find(typeName);
    CCAssert(typeMapIter != _js_global_type_map.end(), "Can't find the class type!");
    typeClass = typeMapIter->second;
    CCAssert(typeClass, "The value is null.");
    JS::RootedObject proto(cx, typeClass->proto.get());
    JS::RootedObject parent(cx, typeClass->parentProto.get());
    JS::RootedObject obj(cx, JS_NewObject(cx, typeClass->jsclass, proto, parent));
    args.rval().set(OBJECT_TO_JSVAL(obj));
    // link the native object with the javascript object
    js_proxy_t* p = jsb_new_proxy(cobj, obj);
    if (JS_HasProperty(cx, obj, "_ctor", &ok) && ok)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    return true;
}

extern JSObject *jsb_CrossApp_CAScrollView_prototype;

void js_CrossApp_CAListView_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOGINFO("jsbindings: finalizing JS object %p (CAListView)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::CAListView *nobj = static_cast<CrossApp::CAListView *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
void js_register_autogentestbindings_js_CAListView(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_CAListView_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_CAListView_class->name = "CAListView";
    jsb_CrossApp_CAListView_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_CAListView_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_CAListView_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_CAListView_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_CAListView_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_CAListView_class->resolve = JS_ResolveStub;
    jsb_CrossApp_CAListView_class->convert = JS_ConvertStub;
    jsb_CrossApp_CAListView_class->finalize = js_CrossApp_CAListView_finalize;
    jsb_CrossApp_CAListView_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("isAllowsSelection", js_autogentestbindings_js_CAListView_isAllowsSelection, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("mouseMovedOutSide", js_autogentestbindings_js_CAListView_mouseMovedOutSide, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setListViewDataSource", js_autogentestbindings_js_CAListView_setListViewDataSource, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("ccTouchBegan", js_autogentestbindings_js_CAListView_ccTouchBegan, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setListFooterHeight", js_autogentestbindings_js_CAListView_setListFooterHeight, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("ccTouchEnded", js_autogentestbindings_js_CAListView_ccTouchEnded, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setSeparatorColor", js_autogentestbindings_js_CAListView_setSeparatorColor, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getListViewDelegate", js_autogentestbindings_js_CAListView_getListViewDelegate, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("mouseMoved", js_autogentestbindings_js_CAListView_mouseMoved, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setSelectAtIndex", js_autogentestbindings_js_CAListView_setSelectAtIndex, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("clearData", js_autogentestbindings_js_CAListView_clearData, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setListViewOrientation", js_autogentestbindings_js_CAListView_setListViewOrientation, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getSeparatorViewHeight", js_autogentestbindings_js_CAListView_getSeparatorViewHeight, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setListViewDelegate", js_autogentestbindings_js_CAListView_setListViewDelegate, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("init", js_autogentestbindings_js_CAListView_init, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getListViewDataSource", js_autogentestbindings_js_CAListView_getListViewDataSource, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setAllowsHeadAndFootHover", js_autogentestbindings_js_CAListView_setAllowsHeadAndFootHover, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getSeparatorColor", js_autogentestbindings_js_CAListView_getSeparatorColor, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("ccTouchMoved", js_autogentestbindings_js_CAListView_ccTouchMoved, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setAllowsSelection", js_autogentestbindings_js_CAListView_setAllowsSelection, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("reloadData", js_autogentestbindings_js_CAListView_reloadData, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setAllowsMultipleSelection", js_autogentestbindings_js_CAListView_setAllowsMultipleSelection, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isAllowsMultipleSelection", js_autogentestbindings_js_CAListView_isAllowsMultipleSelection, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("displayingListCell", js_autogentestbindings_js_CAListView_displayingListCell, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setListHeaderView", js_autogentestbindings_js_CAListView_setListHeaderView, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getAllowsHeadAndFootHover", js_autogentestbindings_js_CAListView_getAllowsHeadAndFootHover, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getListFooterHeight", js_autogentestbindings_js_CAListView_getListFooterHeight, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setShowsScrollIndicators", js_autogentestbindings_js_CAListView_setShowsScrollIndicators, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setListHeaderHeight", js_autogentestbindings_js_CAListView_setListHeaderHeight, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("onExitTransitionDidStart", js_autogentestbindings_js_CAListView_onExitTransitionDidStart, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getListHeaderView", js_autogentestbindings_js_CAListView_getListHeaderView, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setSeparatorViewHeight", js_autogentestbindings_js_CAListView_setSeparatorViewHeight, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("reloadViewSizeData", js_autogentestbindings_js_CAListView_reloadViewSizeData, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getListViewOrientation", js_autogentestbindings_js_CAListView_getListViewOrientation, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setListFooterView", js_autogentestbindings_js_CAListView_setListFooterView, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getListFooterView", js_autogentestbindings_js_CAListView_getListFooterView, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("ccTouchCancelled", js_autogentestbindings_js_CAListView_ccTouchCancelled, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("cellForRowAtIndex", js_autogentestbindings_js_CAListView_cellForRowAtIndex, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("switchPCMode", js_autogentestbindings_js_CAListView_switchPCMode, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setUnSelectAtIndex", js_autogentestbindings_js_CAListView_setUnSelectAtIndex, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("dequeueReusableCellWithIdentifier", js_autogentestbindings_js_CAListView_dequeueReusableCellWithIdentifier, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("onEnterTransitionDidFinish", js_autogentestbindings_js_CAListView_onEnterTransitionDidFinish, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getListHeaderHeight", js_autogentestbindings_js_CAListView_getListHeaderHeight, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    static JSFunctionSpec st_funcs[] = {
        JS_FN("createWithFrame", js_autogentestbindings_js_CAListView_createWithFrame, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("createWithLayout", js_autogentestbindings_js_CAListView_createWithLayout, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("createWithCenter", js_autogentestbindings_js_CAListView_createWithCenter, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    jsb_CrossApp_CAListView_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_CAScrollView_prototype),
        jsb_CrossApp_CAListView_class,
        js_autogentestbindings_js_CAListView_constructor, 0, // constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27 
//  JS_SetPropertyAttributes(cx, global, "CAListView", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::CAListView> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_CAListView_class;
        p->proto = jsb_CrossApp_CAListView_prototype;
        p->parentProto = jsb_CrossApp_CAScrollView_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
}

JSClass  *jsb_CrossApp_CAListViewCell_class;
JSObject *jsb_CrossApp_CAListViewCell_prototype;

bool js_autogentestbindings_js_CAListViewCell_getIndex(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAListViewCell* cobj = (CrossApp::CAListViewCell *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAListViewCell_getIndex : Invalid Native Object");
    if (argc == 0) {
        unsigned int ret = cobj->getIndex();
        jsval jsret = JSVAL_NULL;
        jsret = uint32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAListViewCell_getIndex : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAListViewCell_getContentView(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAListViewCell* cobj = (CrossApp::CAListViewCell *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAListViewCell_getContentView : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CAView* ret = cobj->getContentView();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAView>(cx, (CrossApp::CAView*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAListViewCell_getContentView : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAListViewCell_setReuseIdentifier(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAListViewCell* cobj = (CrossApp::CAListViewCell *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAListViewCell_setReuseIdentifier : Invalid Native Object");
    if (argc == 1) {
        std::string arg0;
        ok &= jsval_to_std_string(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAListViewCell_setReuseIdentifier : Error processing arguments");
        cobj->setReuseIdentifier(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAListViewCell_setReuseIdentifier : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAListViewCell_isAllowsSelected(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAListViewCell* cobj = (CrossApp::CAListViewCell *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAListViewCell_isAllowsSelected : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->isAllowsSelected();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAListViewCell_isAllowsSelected : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAListViewCell_getReuseIdentifier(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAListViewCell* cobj = (CrossApp::CAListViewCell *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAListViewCell_getReuseIdentifier : Invalid Native Object");
    if (argc == 0) {
        const std::string& ret = cobj->getReuseIdentifier();
        jsval jsret = JSVAL_NULL;
        jsret = std_string_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAListViewCell_getReuseIdentifier : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAListViewCell_setAllowsSelected(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAListViewCell* cobj = (CrossApp::CAListViewCell *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAListViewCell_setAllowsSelected : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        arg0 = JS::ToBoolean(args.get(0));
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAListViewCell_setAllowsSelected : Error processing arguments");
        cobj->setAllowsSelected(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAListViewCell_setAllowsSelected : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAListViewCell_setControlStateEffect(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAListViewCell* cobj = (CrossApp::CAListViewCell *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAListViewCell_setControlStateEffect : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        arg0 = JS::ToBoolean(args.get(0));
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAListViewCell_setControlStateEffect : Error processing arguments");
        cobj->setControlStateEffect(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAListViewCell_setControlStateEffect : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAListViewCell_getBackgroundView(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAListViewCell* cobj = (CrossApp::CAListViewCell *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAListViewCell_getBackgroundView : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CAView* ret = cobj->getBackgroundView();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAView>(cx, (CrossApp::CAView*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAListViewCell_getBackgroundView : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAListViewCell_isControlStateEffect(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAListViewCell* cobj = (CrossApp::CAListViewCell *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAListViewCell_isControlStateEffect : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->isControlStateEffect();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAListViewCell_isControlStateEffect : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAListViewCell_initWithReuseIdentifier(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAListViewCell* cobj = (CrossApp::CAListViewCell *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAListViewCell_initWithReuseIdentifier : Invalid Native Object");
    if (argc == 1) {
        std::string arg0;
        ok &= jsval_to_std_string(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAListViewCell_initWithReuseIdentifier : Error processing arguments");
        bool ret = cobj->initWithReuseIdentifier(arg0);
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAListViewCell_initWithReuseIdentifier : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAListViewCell_setBackgroundView(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAListViewCell* cobj = (CrossApp::CAListViewCell *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAListViewCell_setBackgroundView : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAView* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAView*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAListViewCell_setBackgroundView : Error processing arguments");
        cobj->setBackgroundView(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAListViewCell_setBackgroundView : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAListViewCell_create(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        std::string arg0;
        ok &= jsval_to_std_string(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAListViewCell_create : Error processing arguments");
        CrossApp::CAListViewCell* ret = CrossApp::CAListViewCell::create(arg0);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAListViewCell>(cx, (CrossApp::CAListViewCell*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_autogentestbindings_js_CAListViewCell_create : wrong number of arguments");
    return false;
}

bool js_autogentestbindings_js_CAListViewCell_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    CrossApp::CAListViewCell* cobj = new (std::nothrow) CrossApp::CAListViewCell();
    TypeTest<CrossApp::CAListViewCell> t;
    js_type_class_t *typeClass = nullptr;
    std::string typeName = t.s_name();
    auto typeMapIter = _js_global_type_map.find(typeName);
    CCAssert(typeMapIter != _js_global_type_map.end(), "Can't find the class type!");
    typeClass = typeMapIter->second;
    CCAssert(typeClass, "The value is null.");
    JS::RootedObject proto(cx, typeClass->proto.get());
    JS::RootedObject parent(cx, typeClass->parentProto.get());
    JS::RootedObject obj(cx, JS_NewObject(cx, typeClass->jsclass, proto, parent));
    args.rval().set(OBJECT_TO_JSVAL(obj));
    // link the native object with the javascript object
    js_proxy_t* p = jsb_new_proxy(cobj, obj);
    if (JS_HasProperty(cx, obj, "_ctor", &ok) && ok)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    return true;
}

extern JSObject *jsb_CrossApp_CAControl_prototype;

void js_CrossApp_CAListViewCell_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOGINFO("jsbindings: finalizing JS object %p (CAListViewCell)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::CAListViewCell *nobj = static_cast<CrossApp::CAListViewCell *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
void js_register_autogentestbindings_js_CAListViewCell(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_CAListViewCell_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_CAListViewCell_class->name = "CAListViewCell";
    jsb_CrossApp_CAListViewCell_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_CAListViewCell_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_CAListViewCell_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_CAListViewCell_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_CAListViewCell_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_CAListViewCell_class->resolve = JS_ResolveStub;
    jsb_CrossApp_CAListViewCell_class->convert = JS_ConvertStub;
    jsb_CrossApp_CAListViewCell_class->finalize = js_CrossApp_CAListViewCell_finalize;
    jsb_CrossApp_CAListViewCell_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("getIndex", js_autogentestbindings_js_CAListViewCell_getIndex, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getContentView", js_autogentestbindings_js_CAListViewCell_getContentView, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setReuseIdentifier", js_autogentestbindings_js_CAListViewCell_setReuseIdentifier, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isAllowsSelected", js_autogentestbindings_js_CAListViewCell_isAllowsSelected, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getReuseIdentifier", js_autogentestbindings_js_CAListViewCell_getReuseIdentifier, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setAllowsSelected", js_autogentestbindings_js_CAListViewCell_setAllowsSelected, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setControlStateEffect", js_autogentestbindings_js_CAListViewCell_setControlStateEffect, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getBackgroundView", js_autogentestbindings_js_CAListViewCell_getBackgroundView, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isControlStateEffect", js_autogentestbindings_js_CAListViewCell_isControlStateEffect, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("initWithReuseIdentifier", js_autogentestbindings_js_CAListViewCell_initWithReuseIdentifier, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setBackgroundView", js_autogentestbindings_js_CAListViewCell_setBackgroundView, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    static JSFunctionSpec st_funcs[] = {
        JS_FN("create", js_autogentestbindings_js_CAListViewCell_create, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    jsb_CrossApp_CAListViewCell_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_CAControl_prototype),
        jsb_CrossApp_CAListViewCell_class,
        js_autogentestbindings_js_CAListViewCell_constructor, 0, // constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27 
//  JS_SetPropertyAttributes(cx, global, "CAListViewCell", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::CAListViewCell> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_CAListViewCell_class;
        p->proto = jsb_CrossApp_CAListViewCell_prototype;
        p->parentProto = jsb_CrossApp_CAControl_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
}

JSClass  *jsb_CrossApp_CATableViewDelegate_class;
JSObject *jsb_CrossApp_CATableViewDelegate_prototype;

bool js_autogentestbindings_js_CATableViewDelegate_tableViewDidSelectRowAtIndexPath(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATableViewDelegate* cobj = (CrossApp::CATableViewDelegate *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CATableViewDelegate_tableViewDidSelectRowAtIndexPath : Invalid Native Object");
    if (argc == 3) {
        CrossApp::CATableView* arg0 = nullptr;
        unsigned int arg1 = 0;
        unsigned int arg2 = 0;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CATableView*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        ok &= jsval_to_uint32(cx, args.get(1), &arg1);
        ok &= jsval_to_uint32(cx, args.get(2), &arg2);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CATableViewDelegate_tableViewDidSelectRowAtIndexPath : Error processing arguments");
        cobj->tableViewDidSelectRowAtIndexPath(arg0, arg1, arg2);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CATableViewDelegate_tableViewDidSelectRowAtIndexPath : wrong number of arguments: %d, was expecting %d", argc, 3);
    return false;
}
bool js_autogentestbindings_js_CATableViewDelegate_tableViewDidDeselectRowAtIndexPath(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATableViewDelegate* cobj = (CrossApp::CATableViewDelegate *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CATableViewDelegate_tableViewDidDeselectRowAtIndexPath : Invalid Native Object");
    if (argc == 3) {
        CrossApp::CATableView* arg0 = nullptr;
        unsigned int arg1 = 0;
        unsigned int arg2 = 0;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CATableView*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        ok &= jsval_to_uint32(cx, args.get(1), &arg1);
        ok &= jsval_to_uint32(cx, args.get(2), &arg2);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CATableViewDelegate_tableViewDidDeselectRowAtIndexPath : Error processing arguments");
        cobj->tableViewDidDeselectRowAtIndexPath(arg0, arg1, arg2);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CATableViewDelegate_tableViewDidDeselectRowAtIndexPath : wrong number of arguments: %d, was expecting %d", argc, 3);
    return false;
}

void js_CrossApp_CATableViewDelegate_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOGINFO("jsbindings: finalizing JS object %p (CATableViewDelegate)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::CATableViewDelegate *nobj = static_cast<CrossApp::CATableViewDelegate *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
void js_register_autogentestbindings_js_CATableViewDelegate(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_CATableViewDelegate_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_CATableViewDelegate_class->name = "CATableViewDelegate";
    jsb_CrossApp_CATableViewDelegate_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_CATableViewDelegate_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_CATableViewDelegate_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_CATableViewDelegate_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_CATableViewDelegate_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_CATableViewDelegate_class->resolve = JS_ResolveStub;
    jsb_CrossApp_CATableViewDelegate_class->convert = JS_ConvertStub;
    jsb_CrossApp_CATableViewDelegate_class->finalize = js_CrossApp_CATableViewDelegate_finalize;
    jsb_CrossApp_CATableViewDelegate_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("tableViewDidSelectRowAtIndexPath", js_autogentestbindings_js_CATableViewDelegate_tableViewDidSelectRowAtIndexPath, 3, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("tableViewDidDeselectRowAtIndexPath", js_autogentestbindings_js_CATableViewDelegate_tableViewDidDeselectRowAtIndexPath, 3, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    JSFunctionSpec *st_funcs = NULL;

    jsb_CrossApp_CATableViewDelegate_prototype = JS_InitClass(
        cx, global,
        JS::NullPtr(), // parent proto
        jsb_CrossApp_CATableViewDelegate_class,
        dummy_constructor<CrossApp::CATableViewDelegate>, 0, // no constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27 
//  JS_SetPropertyAttributes(cx, global, "CATableViewDelegate", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::CATableViewDelegate> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_CATableViewDelegate_class;
        p->proto = jsb_CrossApp_CATableViewDelegate_prototype;
        p->parentProto = NULL;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
}

JSClass  *jsb_CrossApp_CATableViewDataSource_class;
JSObject *jsb_CrossApp_CATableViewDataSource_prototype;

bool js_autogentestbindings_js_CATableViewDataSource_tableViewHeightForFooterInSection(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATableViewDataSource* cobj = (CrossApp::CATableViewDataSource *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CATableViewDataSource_tableViewHeightForFooterInSection : Invalid Native Object");
    if (argc == 2) {
        CrossApp::CATableView* arg0 = nullptr;
        unsigned int arg1 = 0;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CATableView*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        ok &= jsval_to_uint32(cx, args.get(1), &arg1);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CATableViewDataSource_tableViewHeightForFooterInSection : Error processing arguments");
        unsigned int ret = cobj->tableViewHeightForFooterInSection(arg0, arg1);
        jsval jsret = JSVAL_NULL;
        jsret = uint32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CATableViewDataSource_tableViewHeightForFooterInSection : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_autogentestbindings_js_CATableViewDataSource_tableViewSectionViewForHeaderInSection(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATableViewDataSource* cobj = (CrossApp::CATableViewDataSource *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CATableViewDataSource_tableViewSectionViewForHeaderInSection : Invalid Native Object");
    if (argc == 3) {
        CrossApp::CATableView* arg0 = nullptr;
        CrossApp::DSize arg1;
        unsigned int arg2 = 0;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CATableView*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        ok &= jsval_to_dsize(cx, args.get(1), &arg1);
        ok &= jsval_to_uint32(cx, args.get(2), &arg2);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CATableViewDataSource_tableViewSectionViewForHeaderInSection : Error processing arguments");
        CrossApp::CAView* ret = cobj->tableViewSectionViewForHeaderInSection(arg0, arg1, arg2);
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAView>(cx, (CrossApp::CAView*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CATableViewDataSource_tableViewSectionViewForHeaderInSection : wrong number of arguments: %d, was expecting %d", argc, 3);
    return false;
}
bool js_autogentestbindings_js_CATableViewDataSource_tableViewSectionViewForFooterInSection(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATableViewDataSource* cobj = (CrossApp::CATableViewDataSource *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CATableViewDataSource_tableViewSectionViewForFooterInSection : Invalid Native Object");
    if (argc == 3) {
        CrossApp::CATableView* arg0 = nullptr;
        CrossApp::DSize arg1;
        unsigned int arg2 = 0;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CATableView*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        ok &= jsval_to_dsize(cx, args.get(1), &arg1);
        ok &= jsval_to_uint32(cx, args.get(2), &arg2);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CATableViewDataSource_tableViewSectionViewForFooterInSection : Error processing arguments");
        CrossApp::CAView* ret = cobj->tableViewSectionViewForFooterInSection(arg0, arg1, arg2);
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAView>(cx, (CrossApp::CAView*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CATableViewDataSource_tableViewSectionViewForFooterInSection : wrong number of arguments: %d, was expecting %d", argc, 3);
    return false;
}
bool js_autogentestbindings_js_CATableViewDataSource_tableViewHeightForRowAtIndexPath(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATableViewDataSource* cobj = (CrossApp::CATableViewDataSource *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CATableViewDataSource_tableViewHeightForRowAtIndexPath : Invalid Native Object");
    if (argc == 3) {
        CrossApp::CATableView* arg0 = nullptr;
        unsigned int arg1 = 0;
        unsigned int arg2 = 0;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CATableView*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        ok &= jsval_to_uint32(cx, args.get(1), &arg1);
        ok &= jsval_to_uint32(cx, args.get(2), &arg2);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CATableViewDataSource_tableViewHeightForRowAtIndexPath : Error processing arguments");
        unsigned int ret = cobj->tableViewHeightForRowAtIndexPath(arg0, arg1, arg2);
        jsval jsret = JSVAL_NULL;
        jsret = uint32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CATableViewDataSource_tableViewHeightForRowAtIndexPath : wrong number of arguments: %d, was expecting %d", argc, 3);
    return false;
}
bool js_autogentestbindings_js_CATableViewDataSource_numberOfSections(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATableViewDataSource* cobj = (CrossApp::CATableViewDataSource *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CATableViewDataSource_numberOfSections : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CATableView* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CATableView*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CATableViewDataSource_numberOfSections : Error processing arguments");
        unsigned int ret = cobj->numberOfSections(arg0);
        jsval jsret = JSVAL_NULL;
        jsret = uint32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CATableViewDataSource_numberOfSections : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CATableViewDataSource_tableCellAtIndex(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATableViewDataSource* cobj = (CrossApp::CATableViewDataSource *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CATableViewDataSource_tableCellAtIndex : Invalid Native Object");
    if (argc == 4) {
        CrossApp::CATableView* arg0 = nullptr;
        CrossApp::DSize arg1;
        unsigned int arg2 = 0;
        unsigned int arg3 = 0;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CATableView*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        ok &= jsval_to_dsize(cx, args.get(1), &arg1);
        ok &= jsval_to_uint32(cx, args.get(2), &arg2);
        ok &= jsval_to_uint32(cx, args.get(3), &arg3);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CATableViewDataSource_tableCellAtIndex : Error processing arguments");
        CrossApp::CATableViewCell* ret = cobj->tableCellAtIndex(arg0, arg1, arg2, arg3);
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CATableViewCell>(cx, (CrossApp::CATableViewCell*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CATableViewDataSource_tableCellAtIndex : wrong number of arguments: %d, was expecting %d", argc, 4);
    return false;
}
bool js_autogentestbindings_js_CATableViewDataSource_numberOfRowsInSection(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATableViewDataSource* cobj = (CrossApp::CATableViewDataSource *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CATableViewDataSource_numberOfRowsInSection : Invalid Native Object");
    if (argc == 2) {
        CrossApp::CATableView* arg0 = nullptr;
        unsigned int arg1 = 0;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CATableView*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        ok &= jsval_to_uint32(cx, args.get(1), &arg1);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CATableViewDataSource_numberOfRowsInSection : Error processing arguments");
        unsigned int ret = cobj->numberOfRowsInSection(arg0, arg1);
        jsval jsret = JSVAL_NULL;
        jsret = uint32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CATableViewDataSource_numberOfRowsInSection : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_autogentestbindings_js_CATableViewDataSource_tableViewHeightForHeaderInSection(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATableViewDataSource* cobj = (CrossApp::CATableViewDataSource *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CATableViewDataSource_tableViewHeightForHeaderInSection : Invalid Native Object");
    if (argc == 2) {
        CrossApp::CATableView* arg0 = nullptr;
        unsigned int arg1 = 0;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CATableView*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        ok &= jsval_to_uint32(cx, args.get(1), &arg1);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CATableViewDataSource_tableViewHeightForHeaderInSection : Error processing arguments");
        unsigned int ret = cobj->tableViewHeightForHeaderInSection(arg0, arg1);
        jsval jsret = JSVAL_NULL;
        jsret = uint32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CATableViewDataSource_tableViewHeightForHeaderInSection : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_autogentestbindings_js_CATableViewDataSource_tableViewWillDisplayCellAtIndex(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATableViewDataSource* cobj = (CrossApp::CATableViewDataSource *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CATableViewDataSource_tableViewWillDisplayCellAtIndex : Invalid Native Object");
    if (argc == 4) {
        CrossApp::CATableView* arg0 = nullptr;
        CrossApp::CATableViewCell* arg1 = nullptr;
        unsigned int arg2 = 0;
        unsigned int arg3 = 0;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CATableView*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        do {
            if (args.get(1).isNull()) { arg1 = nullptr; break; }
            if (!args.get(1).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(1).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg1 = (CrossApp::CATableViewCell*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg1, cx, false, "Invalid Native Object");
        } while (0);
        ok &= jsval_to_uint32(cx, args.get(2), &arg2);
        ok &= jsval_to_uint32(cx, args.get(3), &arg3);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CATableViewDataSource_tableViewWillDisplayCellAtIndex : Error processing arguments");
        cobj->tableViewWillDisplayCellAtIndex(arg0, arg1, arg2, arg3);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CATableViewDataSource_tableViewWillDisplayCellAtIndex : wrong number of arguments: %d, was expecting %d", argc, 4);
    return false;
}

void js_CrossApp_CATableViewDataSource_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOGINFO("jsbindings: finalizing JS object %p (CATableViewDataSource)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::CATableViewDataSource *nobj = static_cast<CrossApp::CATableViewDataSource *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
void js_register_autogentestbindings_js_CATableViewDataSource(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_CATableViewDataSource_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_CATableViewDataSource_class->name = "CATableViewDataSource";
    jsb_CrossApp_CATableViewDataSource_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_CATableViewDataSource_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_CATableViewDataSource_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_CATableViewDataSource_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_CATableViewDataSource_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_CATableViewDataSource_class->resolve = JS_ResolveStub;
    jsb_CrossApp_CATableViewDataSource_class->convert = JS_ConvertStub;
    jsb_CrossApp_CATableViewDataSource_class->finalize = js_CrossApp_CATableViewDataSource_finalize;
    jsb_CrossApp_CATableViewDataSource_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("tableViewHeightForFooterInSection", js_autogentestbindings_js_CATableViewDataSource_tableViewHeightForFooterInSection, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("tableViewSectionViewForHeaderInSection", js_autogentestbindings_js_CATableViewDataSource_tableViewSectionViewForHeaderInSection, 3, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("tableViewSectionViewForFooterInSection", js_autogentestbindings_js_CATableViewDataSource_tableViewSectionViewForFooterInSection, 3, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("tableViewHeightForRowAtIndexPath", js_autogentestbindings_js_CATableViewDataSource_tableViewHeightForRowAtIndexPath, 3, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("numberOfSections", js_autogentestbindings_js_CATableViewDataSource_numberOfSections, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("tableCellAtIndex", js_autogentestbindings_js_CATableViewDataSource_tableCellAtIndex, 4, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("numberOfRowsInSection", js_autogentestbindings_js_CATableViewDataSource_numberOfRowsInSection, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("tableViewHeightForHeaderInSection", js_autogentestbindings_js_CATableViewDataSource_tableViewHeightForHeaderInSection, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("tableViewWillDisplayCellAtIndex", js_autogentestbindings_js_CATableViewDataSource_tableViewWillDisplayCellAtIndex, 4, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    JSFunctionSpec *st_funcs = NULL;

    jsb_CrossApp_CATableViewDataSource_prototype = JS_InitClass(
        cx, global,
        JS::NullPtr(), // parent proto
        jsb_CrossApp_CATableViewDataSource_class,
        dummy_constructor<CrossApp::CATableViewDataSource>, 0, // no constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27 
//  JS_SetPropertyAttributes(cx, global, "CATableViewDataSource", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::CATableViewDataSource> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_CATableViewDataSource_class;
        p->proto = jsb_CrossApp_CATableViewDataSource_prototype;
        p->parentProto = NULL;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
}

JSClass  *jsb_CrossApp_CATableView_class;
JSObject *jsb_CrossApp_CATableView_prototype;

bool js_autogentestbindings_js_CATableView_getTableFooterView(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATableView* cobj = (CrossApp::CATableView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CATableView_getTableFooterView : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CAView* ret = cobj->getTableFooterView();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAView>(cx, (CrossApp::CAView*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CATableView_getTableFooterView : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CATableView_isAllowsSelection(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATableView* cobj = (CrossApp::CATableView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CATableView_isAllowsSelection : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->isAllowsSelection();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CATableView_isAllowsSelection : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CATableView_mouseMovedOutSide(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATableView* cobj = (CrossApp::CATableView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CATableView_mouseMovedOutSide : Invalid Native Object");
    if (argc == 2) {
        CrossApp::CATouch* arg0 = nullptr;
        CrossApp::CAEvent* arg1 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CATouch*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        do {
            if (args.get(1).isNull()) { arg1 = nullptr; break; }
            if (!args.get(1).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(1).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg1 = (CrossApp::CAEvent*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg1, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CATableView_mouseMovedOutSide : Error processing arguments");
        cobj->mouseMovedOutSide(arg0, arg1);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CATableView_mouseMovedOutSide : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_autogentestbindings_js_CATableView_ccTouchBegan(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATableView* cobj = (CrossApp::CATableView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CATableView_ccTouchBegan : Invalid Native Object");
    if (argc == 2) {
        CrossApp::CATouch* arg0 = nullptr;
        CrossApp::CAEvent* arg1 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CATouch*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        do {
            if (args.get(1).isNull()) { arg1 = nullptr; break; }
            if (!args.get(1).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(1).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg1 = (CrossApp::CAEvent*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg1, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CATableView_ccTouchBegan : Error processing arguments");
        bool ret = cobj->ccTouchBegan(arg0, arg1);
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CATableView_ccTouchBegan : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_autogentestbindings_js_CATableView_getSectionFooterHeightInSection(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATableView* cobj = (CrossApp::CATableView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CATableView_getSectionFooterHeightInSection : Invalid Native Object");
    if (argc == 1) {
        unsigned int arg0 = 0;
        ok &= jsval_to_uint32(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CATableView_getSectionFooterHeightInSection : Error processing arguments");
        double ret = cobj->getSectionFooterHeightInSection(arg0);
        jsval jsret = JSVAL_NULL;
        jsret = DOUBLE_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CATableView_getSectionFooterHeightInSection : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CATableView_setSeparatorColor(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATableView* cobj = (CrossApp::CATableView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CATableView_setSeparatorColor : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAColor4B arg0;
        ok &= jsval_to_cacolor4b(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CATableView_setSeparatorColor : Error processing arguments");
        cobj->setSeparatorColor(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CATableView_setSeparatorColor : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CATableView_setTableFooterHeight(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATableView* cobj = (CrossApp::CATableView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CATableView_setTableFooterHeight : Invalid Native Object");
    if (argc == 1) {
        unsigned int arg0 = 0;
        ok &= jsval_to_uint32(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CATableView_setTableFooterHeight : Error processing arguments");
        cobj->setTableFooterHeight(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CATableView_setTableFooterHeight : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CATableView_setTableHeaderHeight(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATableView* cobj = (CrossApp::CATableView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CATableView_setTableHeaderHeight : Invalid Native Object");
    if (argc == 1) {
        unsigned int arg0 = 0;
        ok &= jsval_to_uint32(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CATableView_setTableHeaderHeight : Error processing arguments");
        cobj->setTableHeaderHeight(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CATableView_setTableHeaderHeight : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CATableView_setAlwaysTopSectionHeader(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATableView* cobj = (CrossApp::CATableView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CATableView_setAlwaysTopSectionHeader : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        arg0 = JS::ToBoolean(args.get(0));
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CATableView_setAlwaysTopSectionHeader : Error processing arguments");
        cobj->setAlwaysTopSectionHeader(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CATableView_setAlwaysTopSectionHeader : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CATableView_mouseMoved(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATableView* cobj = (CrossApp::CATableView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CATableView_mouseMoved : Invalid Native Object");
    if (argc == 2) {
        CrossApp::CATouch* arg0 = nullptr;
        CrossApp::CAEvent* arg1 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CATouch*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        do {
            if (args.get(1).isNull()) { arg1 = nullptr; break; }
            if (!args.get(1).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(1).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg1 = (CrossApp::CAEvent*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg1, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CATableView_mouseMoved : Error processing arguments");
        cobj->mouseMoved(arg0, arg1);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CATableView_mouseMoved : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_autogentestbindings_js_CATableView_isAlwaysBottomSectionFooter(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATableView* cobj = (CrossApp::CATableView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CATableView_isAlwaysBottomSectionFooter : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->isAlwaysBottomSectionFooter();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CATableView_isAlwaysBottomSectionFooter : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CATableView_getRowHeightInSectionInRow(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATableView* cobj = (CrossApp::CATableView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CATableView_getRowHeightInSectionInRow : Invalid Native Object");
    if (argc == 2) {
        unsigned int arg0 = 0;
        unsigned int arg1 = 0;
        ok &= jsval_to_uint32(cx, args.get(0), &arg0);
        ok &= jsval_to_uint32(cx, args.get(1), &arg1);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CATableView_getRowHeightInSectionInRow : Error processing arguments");
        double ret = cobj->getRowHeightInSectionInRow(arg0, arg1);
        jsval jsret = JSVAL_NULL;
        jsret = DOUBLE_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CATableView_getRowHeightInSectionInRow : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_autogentestbindings_js_CATableView_setTableHeaderView(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATableView* cobj = (CrossApp::CATableView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CATableView_setTableHeaderView : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAView* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAView*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CATableView_setTableHeaderView : Error processing arguments");
        cobj->setTableHeaderView(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CATableView_setTableHeaderView : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CATableView_getNumberOfSections(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATableView* cobj = (CrossApp::CATableView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CATableView_getNumberOfSections : Invalid Native Object");
    if (argc == 0) {
        unsigned int ret = cobj->getNumberOfSections();
        jsval jsret = JSVAL_NULL;
        jsret = uint32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CATableView_getNumberOfSections : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CATableView_getSeparatorViewHeight(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATableView* cobj = (CrossApp::CATableView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CATableView_getSeparatorViewHeight : Invalid Native Object");
    if (argc == 0) {
        unsigned int ret = cobj->getSeparatorViewHeight();
        jsval jsret = JSVAL_NULL;
        jsret = uint32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CATableView_getSeparatorViewHeight : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CATableView_init(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATableView* cobj = (CrossApp::CATableView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CATableView_init : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->init();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CATableView_init : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CATableView_setSelectRowAtIndexPath(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATableView* cobj = (CrossApp::CATableView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CATableView_setSelectRowAtIndexPath : Invalid Native Object");
    if (argc == 2) {
        unsigned int arg0 = 0;
        unsigned int arg1 = 0;
        ok &= jsval_to_uint32(cx, args.get(0), &arg0);
        ok &= jsval_to_uint32(cx, args.get(1), &arg1);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CATableView_setSelectRowAtIndexPath : Error processing arguments");
        cobj->setSelectRowAtIndexPath(arg0, arg1);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CATableView_setSelectRowAtIndexPath : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_autogentestbindings_js_CATableView_getTableViewDataSource(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATableView* cobj = (CrossApp::CATableView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CATableView_getTableViewDataSource : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CATableViewDataSource* ret = cobj->getTableViewDataSource();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CATableViewDataSource>(cx, (CrossApp::CATableViewDataSource*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CATableView_getTableViewDataSource : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CATableView_getSectionHeightInSection(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATableView* cobj = (CrossApp::CATableView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CATableView_getSectionHeightInSection : Invalid Native Object");
    if (argc == 1) {
        unsigned int arg0 = 0;
        ok &= jsval_to_uint32(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CATableView_getSectionHeightInSection : Error processing arguments");
        double ret = cobj->getSectionHeightInSection(arg0);
        jsval jsret = JSVAL_NULL;
        jsret = DOUBLE_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CATableView_getSectionHeightInSection : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CATableView_isAllowsMultipleSelection(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATableView* cobj = (CrossApp::CATableView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CATableView_isAllowsMultipleSelection : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->isAllowsMultipleSelection();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CATableView_isAllowsMultipleSelection : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CATableView_getSeparatorColor(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATableView* cobj = (CrossApp::CATableView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CATableView_getSeparatorColor : Invalid Native Object");
    if (argc == 0) {
        const CrossApp::CAColor4B& ret = cobj->getSeparatorColor();
        jsval jsret = JSVAL_NULL;
        jsret = cacolor4b_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CATableView_getSeparatorColor : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CATableView_ccTouchMoved(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATableView* cobj = (CrossApp::CATableView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CATableView_ccTouchMoved : Invalid Native Object");
    if (argc == 2) {
        CrossApp::CATouch* arg0 = nullptr;
        CrossApp::CAEvent* arg1 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CATouch*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        do {
            if (args.get(1).isNull()) { arg1 = nullptr; break; }
            if (!args.get(1).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(1).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg1 = (CrossApp::CAEvent*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg1, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CATableView_ccTouchMoved : Error processing arguments");
        cobj->ccTouchMoved(arg0, arg1);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CATableView_ccTouchMoved : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_autogentestbindings_js_CATableView_setAllowsSelection(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATableView* cobj = (CrossApp::CATableView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CATableView_setAllowsSelection : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        arg0 = JS::ToBoolean(args.get(0));
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CATableView_setAllowsSelection : Error processing arguments");
        cobj->setAllowsSelection(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CATableView_setAllowsSelection : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CATableView_reloadData(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATableView* cobj = (CrossApp::CATableView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CATableView_reloadData : Invalid Native Object");
    if (argc == 0) {
        cobj->reloadData();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CATableView_reloadData : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CATableView_setAllowsMultipleSelection(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATableView* cobj = (CrossApp::CATableView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CATableView_setAllowsMultipleSelection : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        arg0 = JS::ToBoolean(args.get(0));
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CATableView_setAllowsMultipleSelection : Error processing arguments");
        cobj->setAllowsMultipleSelection(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CATableView_setAllowsMultipleSelection : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CATableView_getTableFooterHeight(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATableView* cobj = (CrossApp::CATableView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CATableView_getTableFooterHeight : Invalid Native Object");
    if (argc == 0) {
        unsigned int ret = cobj->getTableFooterHeight();
        jsval jsret = JSVAL_NULL;
        jsret = uint32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CATableView_getTableFooterHeight : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CATableView_setShowsScrollIndicators(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATableView* cobj = (CrossApp::CATableView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CATableView_setShowsScrollIndicators : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        arg0 = JS::ToBoolean(args.get(0));
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CATableView_setShowsScrollIndicators : Error processing arguments");
        cobj->setShowsScrollIndicators(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CATableView_setShowsScrollIndicators : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CATableView_cellForRowAtIndexPath(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATableView* cobj = (CrossApp::CATableView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CATableView_cellForRowAtIndexPath : Invalid Native Object");
    if (argc == 2) {
        unsigned int arg0 = 0;
        unsigned int arg1 = 0;
        ok &= jsval_to_uint32(cx, args.get(0), &arg0);
        ok &= jsval_to_uint32(cx, args.get(1), &arg1);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CATableView_cellForRowAtIndexPath : Error processing arguments");
        CrossApp::CATableViewCell* ret = cobj->cellForRowAtIndexPath(arg0, arg1);
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CATableViewCell>(cx, (CrossApp::CATableViewCell*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CATableView_cellForRowAtIndexPath : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_autogentestbindings_js_CATableView_displayingTableCell(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATableView* cobj = (CrossApp::CATableView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CATableView_displayingTableCell : Invalid Native Object");
    if (argc == 0) {
        const CrossApp::CAVector<CrossApp::CATableViewCell *>& ret = cobj->displayingTableCell();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAVector<CrossApp::CATableViewCell >&>(cx, (CrossApp::CAVector<CrossApp::CATableViewCell *>&)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CATableView_displayingTableCell : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CATableView_getTableHeaderView(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATableView* cobj = (CrossApp::CATableView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CATableView_getTableHeaderView : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CAView* ret = cobj->getTableHeaderView();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAView>(cx, (CrossApp::CAView*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CATableView_getTableHeaderView : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CATableView_setAlwaysBottomSectionFooter(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATableView* cobj = (CrossApp::CATableView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CATableView_setAlwaysBottomSectionFooter : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        arg0 = JS::ToBoolean(args.get(0));
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CATableView_setAlwaysBottomSectionFooter : Error processing arguments");
        cobj->setAlwaysBottomSectionFooter(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CATableView_setAlwaysBottomSectionFooter : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CATableView_onExitTransitionDidStart(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATableView* cobj = (CrossApp::CATableView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CATableView_onExitTransitionDidStart : Invalid Native Object");
    if (argc == 0) {
        cobj->onExitTransitionDidStart();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CATableView_onExitTransitionDidStart : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CATableView_isAlwaysTopSectionHeader(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATableView* cobj = (CrossApp::CATableView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CATableView_isAlwaysTopSectionHeader : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->isAlwaysTopSectionHeader();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CATableView_isAlwaysTopSectionHeader : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CATableView_setTableFooterView(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATableView* cobj = (CrossApp::CATableView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CATableView_setTableFooterView : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAView* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAView*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CATableView_setTableFooterView : Error processing arguments");
        cobj->setTableFooterView(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CATableView_setTableFooterView : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CATableView_setSeparatorViewHeight(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATableView* cobj = (CrossApp::CATableView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CATableView_setSeparatorViewHeight : Invalid Native Object");
    if (argc == 1) {
        unsigned int arg0 = 0;
        ok &= jsval_to_uint32(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CATableView_setSeparatorViewHeight : Error processing arguments");
        cobj->setSeparatorViewHeight(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CATableView_setSeparatorViewHeight : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CATableView_setTableViewDelegate(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATableView* cobj = (CrossApp::CATableView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CATableView_setTableViewDelegate : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CATableViewDelegate* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CATableViewDelegate*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CATableView_setTableViewDelegate : Error processing arguments");
        cobj->setTableViewDelegate(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CATableView_setTableViewDelegate : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CATableView_setTableViewDataSource(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATableView* cobj = (CrossApp::CATableView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CATableView_setTableViewDataSource : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CATableViewDataSource* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CATableViewDataSource*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CATableView_setTableViewDataSource : Error processing arguments");
        cobj->setTableViewDataSource(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CATableView_setTableViewDataSource : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CATableView_ccTouchEnded(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATableView* cobj = (CrossApp::CATableView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CATableView_ccTouchEnded : Invalid Native Object");
    if (argc == 2) {
        CrossApp::CATouch* arg0 = nullptr;
        CrossApp::CAEvent* arg1 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CATouch*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        do {
            if (args.get(1).isNull()) { arg1 = nullptr; break; }
            if (!args.get(1).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(1).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg1 = (CrossApp::CAEvent*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg1, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CATableView_ccTouchEnded : Error processing arguments");
        cobj->ccTouchEnded(arg0, arg1);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CATableView_ccTouchEnded : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_autogentestbindings_js_CATableView_ccTouchCancelled(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATableView* cobj = (CrossApp::CATableView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CATableView_ccTouchCancelled : Invalid Native Object");
    if (argc == 2) {
        CrossApp::CATouch* arg0 = nullptr;
        CrossApp::CAEvent* arg1 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CATouch*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        do {
            if (args.get(1).isNull()) { arg1 = nullptr; break; }
            if (!args.get(1).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(1).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg1 = (CrossApp::CAEvent*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg1, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CATableView_ccTouchCancelled : Error processing arguments");
        cobj->ccTouchCancelled(arg0, arg1);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CATableView_ccTouchCancelled : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_autogentestbindings_js_CATableView_getNumberOfRowsInSection(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATableView* cobj = (CrossApp::CATableView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CATableView_getNumberOfRowsInSection : Invalid Native Object");
    if (argc == 1) {
        unsigned int arg0 = 0;
        ok &= jsval_to_uint32(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CATableView_getNumberOfRowsInSection : Error processing arguments");
        unsigned int ret = cobj->getNumberOfRowsInSection(arg0);
        jsval jsret = JSVAL_NULL;
        jsret = uint32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CATableView_getNumberOfRowsInSection : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CATableView_setUnSelectRowAtIndexPath(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATableView* cobj = (CrossApp::CATableView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CATableView_setUnSelectRowAtIndexPath : Invalid Native Object");
    if (argc == 2) {
        unsigned int arg0 = 0;
        unsigned int arg1 = 0;
        ok &= jsval_to_uint32(cx, args.get(0), &arg0);
        ok &= jsval_to_uint32(cx, args.get(1), &arg1);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CATableView_setUnSelectRowAtIndexPath : Error processing arguments");
        cobj->setUnSelectRowAtIndexPath(arg0, arg1);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CATableView_setUnSelectRowAtIndexPath : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_autogentestbindings_js_CATableView_onEnterTransitionDidFinish(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATableView* cobj = (CrossApp::CATableView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CATableView_onEnterTransitionDidFinish : Invalid Native Object");
    if (argc == 0) {
        cobj->onEnterTransitionDidFinish();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CATableView_onEnterTransitionDidFinish : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CATableView_getSectionHeaderHeightInSection(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATableView* cobj = (CrossApp::CATableView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CATableView_getSectionHeaderHeightInSection : Invalid Native Object");
    if (argc == 1) {
        unsigned int arg0 = 0;
        ok &= jsval_to_uint32(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CATableView_getSectionHeaderHeightInSection : Error processing arguments");
        double ret = cobj->getSectionHeaderHeightInSection(arg0);
        jsval jsret = JSVAL_NULL;
        jsret = DOUBLE_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CATableView_getSectionHeaderHeightInSection : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CATableView_switchPCMode(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATableView* cobj = (CrossApp::CATableView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CATableView_switchPCMode : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        arg0 = JS::ToBoolean(args.get(0));
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CATableView_switchPCMode : Error processing arguments");
        cobj->switchPCMode(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CATableView_switchPCMode : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CATableView_dequeueReusableCellWithIdentifier(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATableView* cobj = (CrossApp::CATableView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CATableView_dequeueReusableCellWithIdentifier : Invalid Native Object");
    if (argc == 1) {
        const char* arg0 = nullptr;
        std::string arg0_tmp; ok &= jsval_to_std_string(cx, args.get(0), &arg0_tmp); arg0 = arg0_tmp.c_str();
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CATableView_dequeueReusableCellWithIdentifier : Error processing arguments");
        CrossApp::CATableViewCell* ret = cobj->dequeueReusableCellWithIdentifier(arg0);
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CATableViewCell>(cx, (CrossApp::CATableViewCell*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CATableView_dequeueReusableCellWithIdentifier : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CATableView_getTableViewDelegate(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATableView* cobj = (CrossApp::CATableView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CATableView_getTableViewDelegate : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CATableViewDelegate* ret = cobj->getTableViewDelegate();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CATableViewDelegate>(cx, (CrossApp::CATableViewDelegate*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CATableView_getTableViewDelegate : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CATableView_getTableHeaderHeight(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATableView* cobj = (CrossApp::CATableView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CATableView_getTableHeaderHeight : Invalid Native Object");
    if (argc == 0) {
        unsigned int ret = cobj->getTableHeaderHeight();
        jsval jsret = JSVAL_NULL;
        jsret = uint32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CATableView_getTableHeaderHeight : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CATableView_createWithFrame(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        CrossApp::DRect arg0;
        ok &= jsval_to_drect(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CATableView_createWithFrame : Error processing arguments");
        CrossApp::CATableView* ret = CrossApp::CATableView::createWithFrame(arg0);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CATableView>(cx, (CrossApp::CATableView*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_autogentestbindings_js_CATableView_createWithFrame : wrong number of arguments");
    return false;
}

bool js_autogentestbindings_js_CATableView_createWithLayout(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        CrossApp::DRectLayout arg0;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (const CrossApp::DRectLayout&)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CATableView_createWithLayout : Error processing arguments");
        CrossApp::CATableView* ret = CrossApp::CATableView::createWithLayout(arg0);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CATableView>(cx, (CrossApp::CATableView*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_autogentestbindings_js_CATableView_createWithLayout : wrong number of arguments");
    return false;
}

bool js_autogentestbindings_js_CATableView_createWithCenter(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        CrossApp::DRect arg0;
        ok &= jsval_to_drect(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CATableView_createWithCenter : Error processing arguments");
        CrossApp::CATableView* ret = CrossApp::CATableView::createWithCenter(arg0);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CATableView>(cx, (CrossApp::CATableView*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_autogentestbindings_js_CATableView_createWithCenter : wrong number of arguments");
    return false;
}

bool js_autogentestbindings_js_CATableView_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    CrossApp::CATableView* cobj = new (std::nothrow) CrossApp::CATableView();
    TypeTest<CrossApp::CATableView> t;
    js_type_class_t *typeClass = nullptr;
    std::string typeName = t.s_name();
    auto typeMapIter = _js_global_type_map.find(typeName);
    CCAssert(typeMapIter != _js_global_type_map.end(), "Can't find the class type!");
    typeClass = typeMapIter->second;
    CCAssert(typeClass, "The value is null.");
    JS::RootedObject proto(cx, typeClass->proto.get());
    JS::RootedObject parent(cx, typeClass->parentProto.get());
    JS::RootedObject obj(cx, JS_NewObject(cx, typeClass->jsclass, proto, parent));
    args.rval().set(OBJECT_TO_JSVAL(obj));
    // link the native object with the javascript object
    js_proxy_t* p = jsb_new_proxy(cobj, obj);
    if (JS_HasProperty(cx, obj, "_ctor", &ok) && ok)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    return true;
}

extern JSObject *jsb_CrossApp_CAScrollView_prototype;

void js_CrossApp_CATableView_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOGINFO("jsbindings: finalizing JS object %p (CATableView)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::CATableView *nobj = static_cast<CrossApp::CATableView *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
void js_register_autogentestbindings_js_CATableView(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_CATableView_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_CATableView_class->name = "CATableView";
    jsb_CrossApp_CATableView_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_CATableView_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_CATableView_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_CATableView_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_CATableView_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_CATableView_class->resolve = JS_ResolveStub;
    jsb_CrossApp_CATableView_class->convert = JS_ConvertStub;
    jsb_CrossApp_CATableView_class->finalize = js_CrossApp_CATableView_finalize;
    jsb_CrossApp_CATableView_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("getTableFooterView", js_autogentestbindings_js_CATableView_getTableFooterView, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isAllowsSelection", js_autogentestbindings_js_CATableView_isAllowsSelection, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("mouseMovedOutSide", js_autogentestbindings_js_CATableView_mouseMovedOutSide, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("ccTouchBegan", js_autogentestbindings_js_CATableView_ccTouchBegan, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getSectionFooterHeightInSection", js_autogentestbindings_js_CATableView_getSectionFooterHeightInSection, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setSeparatorColor", js_autogentestbindings_js_CATableView_setSeparatorColor, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setTableFooterHeight", js_autogentestbindings_js_CATableView_setTableFooterHeight, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setTableHeaderHeight", js_autogentestbindings_js_CATableView_setTableHeaderHeight, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setAlwaysTopSectionHeader", js_autogentestbindings_js_CATableView_setAlwaysTopSectionHeader, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("mouseMoved", js_autogentestbindings_js_CATableView_mouseMoved, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isAlwaysBottomSectionFooter", js_autogentestbindings_js_CATableView_isAlwaysBottomSectionFooter, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getRowHeightInSectionInRow", js_autogentestbindings_js_CATableView_getRowHeightInSectionInRow, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setTableHeaderView", js_autogentestbindings_js_CATableView_setTableHeaderView, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getNumberOfSections", js_autogentestbindings_js_CATableView_getNumberOfSections, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getSeparatorViewHeight", js_autogentestbindings_js_CATableView_getSeparatorViewHeight, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("init", js_autogentestbindings_js_CATableView_init, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setSelectRowAtIndexPath", js_autogentestbindings_js_CATableView_setSelectRowAtIndexPath, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getTableViewDataSource", js_autogentestbindings_js_CATableView_getTableViewDataSource, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getSectionHeightInSection", js_autogentestbindings_js_CATableView_getSectionHeightInSection, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isAllowsMultipleSelection", js_autogentestbindings_js_CATableView_isAllowsMultipleSelection, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getSeparatorColor", js_autogentestbindings_js_CATableView_getSeparatorColor, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("ccTouchMoved", js_autogentestbindings_js_CATableView_ccTouchMoved, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setAllowsSelection", js_autogentestbindings_js_CATableView_setAllowsSelection, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("reloadData", js_autogentestbindings_js_CATableView_reloadData, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setAllowsMultipleSelection", js_autogentestbindings_js_CATableView_setAllowsMultipleSelection, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getTableFooterHeight", js_autogentestbindings_js_CATableView_getTableFooterHeight, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setShowsScrollIndicators", js_autogentestbindings_js_CATableView_setShowsScrollIndicators, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("cellForRowAtIndexPath", js_autogentestbindings_js_CATableView_cellForRowAtIndexPath, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("displayingTableCell", js_autogentestbindings_js_CATableView_displayingTableCell, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getTableHeaderView", js_autogentestbindings_js_CATableView_getTableHeaderView, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setAlwaysBottomSectionFooter", js_autogentestbindings_js_CATableView_setAlwaysBottomSectionFooter, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("onExitTransitionDidStart", js_autogentestbindings_js_CATableView_onExitTransitionDidStart, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isAlwaysTopSectionHeader", js_autogentestbindings_js_CATableView_isAlwaysTopSectionHeader, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setTableFooterView", js_autogentestbindings_js_CATableView_setTableFooterView, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setSeparatorViewHeight", js_autogentestbindings_js_CATableView_setSeparatorViewHeight, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setTableViewDelegate", js_autogentestbindings_js_CATableView_setTableViewDelegate, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setTableViewDataSource", js_autogentestbindings_js_CATableView_setTableViewDataSource, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("ccTouchEnded", js_autogentestbindings_js_CATableView_ccTouchEnded, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("ccTouchCancelled", js_autogentestbindings_js_CATableView_ccTouchCancelled, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getNumberOfRowsInSection", js_autogentestbindings_js_CATableView_getNumberOfRowsInSection, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setUnSelectRowAtIndexPath", js_autogentestbindings_js_CATableView_setUnSelectRowAtIndexPath, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("onEnterTransitionDidFinish", js_autogentestbindings_js_CATableView_onEnterTransitionDidFinish, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getSectionHeaderHeightInSection", js_autogentestbindings_js_CATableView_getSectionHeaderHeightInSection, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("switchPCMode", js_autogentestbindings_js_CATableView_switchPCMode, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("dequeueReusableCellWithIdentifier", js_autogentestbindings_js_CATableView_dequeueReusableCellWithIdentifier, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getTableViewDelegate", js_autogentestbindings_js_CATableView_getTableViewDelegate, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getTableHeaderHeight", js_autogentestbindings_js_CATableView_getTableHeaderHeight, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    static JSFunctionSpec st_funcs[] = {
        JS_FN("createWithFrame", js_autogentestbindings_js_CATableView_createWithFrame, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("createWithLayout", js_autogentestbindings_js_CATableView_createWithLayout, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("createWithCenter", js_autogentestbindings_js_CATableView_createWithCenter, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    jsb_CrossApp_CATableView_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_CAScrollView_prototype),
        jsb_CrossApp_CATableView_class,
        js_autogentestbindings_js_CATableView_constructor, 0, // constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27 
//  JS_SetPropertyAttributes(cx, global, "CATableView", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::CATableView> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_CATableView_class;
        p->proto = jsb_CrossApp_CATableView_prototype;
        p->parentProto = jsb_CrossApp_CAScrollView_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
}

JSClass  *jsb_CrossApp_CATableViewCell_class;
JSObject *jsb_CrossApp_CATableViewCell_prototype;

bool js_autogentestbindings_js_CATableViewCell_getContentView(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATableViewCell* cobj = (CrossApp::CATableViewCell *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CATableViewCell_getContentView : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CAView* ret = cobj->getContentView();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAView>(cx, (CrossApp::CAView*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CATableViewCell_getContentView : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CATableViewCell_setReuseIdentifier(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATableViewCell* cobj = (CrossApp::CATableViewCell *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CATableViewCell_setReuseIdentifier : Invalid Native Object");
    if (argc == 1) {
        std::string arg0;
        ok &= jsval_to_std_string(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CATableViewCell_setReuseIdentifier : Error processing arguments");
        cobj->setReuseIdentifier(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CATableViewCell_setReuseIdentifier : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CATableViewCell_isAllowsSelected(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATableViewCell* cobj = (CrossApp::CATableViewCell *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CATableViewCell_isAllowsSelected : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->isAllowsSelected();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CATableViewCell_isAllowsSelected : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CATableViewCell_getReuseIdentifier(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATableViewCell* cobj = (CrossApp::CATableViewCell *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CATableViewCell_getReuseIdentifier : Invalid Native Object");
    if (argc == 0) {
        const std::string& ret = cobj->getReuseIdentifier();
        jsval jsret = JSVAL_NULL;
        jsret = std_string_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CATableViewCell_getReuseIdentifier : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CATableViewCell_setAllowsSelected(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATableViewCell* cobj = (CrossApp::CATableViewCell *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CATableViewCell_setAllowsSelected : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        arg0 = JS::ToBoolean(args.get(0));
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CATableViewCell_setAllowsSelected : Error processing arguments");
        cobj->setAllowsSelected(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CATableViewCell_setAllowsSelected : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CATableViewCell_setControlStateEffect(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATableViewCell* cobj = (CrossApp::CATableViewCell *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CATableViewCell_setControlStateEffect : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        arg0 = JS::ToBoolean(args.get(0));
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CATableViewCell_setControlStateEffect : Error processing arguments");
        cobj->setControlStateEffect(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CATableViewCell_setControlStateEffect : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CATableViewCell_getRow(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATableViewCell* cobj = (CrossApp::CATableViewCell *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CATableViewCell_getRow : Invalid Native Object");
    if (argc == 0) {
        unsigned int ret = cobj->getRow();
        jsval jsret = JSVAL_NULL;
        jsret = uint32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CATableViewCell_getRow : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CATableViewCell_getBackgroundView(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATableViewCell* cobj = (CrossApp::CATableViewCell *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CATableViewCell_getBackgroundView : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CAView* ret = cobj->getBackgroundView();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAView>(cx, (CrossApp::CAView*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CATableViewCell_getBackgroundView : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CATableViewCell_getSection(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATableViewCell* cobj = (CrossApp::CATableViewCell *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CATableViewCell_getSection : Invalid Native Object");
    if (argc == 0) {
        unsigned int ret = cobj->getSection();
        jsval jsret = JSVAL_NULL;
        jsret = uint32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CATableViewCell_getSection : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CATableViewCell_isControlStateEffect(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATableViewCell* cobj = (CrossApp::CATableViewCell *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CATableViewCell_isControlStateEffect : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->isControlStateEffect();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CATableViewCell_isControlStateEffect : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CATableViewCell_initWithReuseIdentifier(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATableViewCell* cobj = (CrossApp::CATableViewCell *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CATableViewCell_initWithReuseIdentifier : Invalid Native Object");
    if (argc == 1) {
        std::string arg0;
        ok &= jsval_to_std_string(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CATableViewCell_initWithReuseIdentifier : Error processing arguments");
        bool ret = cobj->initWithReuseIdentifier(arg0);
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CATableViewCell_initWithReuseIdentifier : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CATableViewCell_setBackgroundView(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATableViewCell* cobj = (CrossApp::CATableViewCell *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CATableViewCell_setBackgroundView : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAView* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAView*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CATableViewCell_setBackgroundView : Error processing arguments");
        cobj->setBackgroundView(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CATableViewCell_setBackgroundView : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CATableViewCell_create(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        std::string arg0;
        ok &= jsval_to_std_string(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CATableViewCell_create : Error processing arguments");
        CrossApp::CATableViewCell* ret = CrossApp::CATableViewCell::create(arg0);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CATableViewCell>(cx, (CrossApp::CATableViewCell*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_autogentestbindings_js_CATableViewCell_create : wrong number of arguments");
    return false;
}

bool js_autogentestbindings_js_CATableViewCell_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    CrossApp::CATableViewCell* cobj = new (std::nothrow) CrossApp::CATableViewCell();
    TypeTest<CrossApp::CATableViewCell> t;
    js_type_class_t *typeClass = nullptr;
    std::string typeName = t.s_name();
    auto typeMapIter = _js_global_type_map.find(typeName);
    CCAssert(typeMapIter != _js_global_type_map.end(), "Can't find the class type!");
    typeClass = typeMapIter->second;
    CCAssert(typeClass, "The value is null.");
    JS::RootedObject proto(cx, typeClass->proto.get());
    JS::RootedObject parent(cx, typeClass->parentProto.get());
    JS::RootedObject obj(cx, JS_NewObject(cx, typeClass->jsclass, proto, parent));
    args.rval().set(OBJECT_TO_JSVAL(obj));
    // link the native object with the javascript object
    js_proxy_t* p = jsb_new_proxy(cobj, obj);
    if (JS_HasProperty(cx, obj, "_ctor", &ok) && ok)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    return true;
}

extern JSObject *jsb_CrossApp_CAControl_prototype;

void js_CrossApp_CATableViewCell_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOGINFO("jsbindings: finalizing JS object %p (CATableViewCell)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::CATableViewCell *nobj = static_cast<CrossApp::CATableViewCell *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
void js_register_autogentestbindings_js_CATableViewCell(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_CATableViewCell_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_CATableViewCell_class->name = "CATableViewCell";
    jsb_CrossApp_CATableViewCell_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_CATableViewCell_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_CATableViewCell_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_CATableViewCell_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_CATableViewCell_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_CATableViewCell_class->resolve = JS_ResolveStub;
    jsb_CrossApp_CATableViewCell_class->convert = JS_ConvertStub;
    jsb_CrossApp_CATableViewCell_class->finalize = js_CrossApp_CATableViewCell_finalize;
    jsb_CrossApp_CATableViewCell_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("getContentView", js_autogentestbindings_js_CATableViewCell_getContentView, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setReuseIdentifier", js_autogentestbindings_js_CATableViewCell_setReuseIdentifier, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isAllowsSelected", js_autogentestbindings_js_CATableViewCell_isAllowsSelected, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getReuseIdentifier", js_autogentestbindings_js_CATableViewCell_getReuseIdentifier, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setAllowsSelected", js_autogentestbindings_js_CATableViewCell_setAllowsSelected, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setControlStateEffect", js_autogentestbindings_js_CATableViewCell_setControlStateEffect, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getRow", js_autogentestbindings_js_CATableViewCell_getRow, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getBackgroundView", js_autogentestbindings_js_CATableViewCell_getBackgroundView, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getSection", js_autogentestbindings_js_CATableViewCell_getSection, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isControlStateEffect", js_autogentestbindings_js_CATableViewCell_isControlStateEffect, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("initWithReuseIdentifier", js_autogentestbindings_js_CATableViewCell_initWithReuseIdentifier, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setBackgroundView", js_autogentestbindings_js_CATableViewCell_setBackgroundView, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    static JSFunctionSpec st_funcs[] = {
        JS_FN("create", js_autogentestbindings_js_CATableViewCell_create, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    jsb_CrossApp_CATableViewCell_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_CAControl_prototype),
        jsb_CrossApp_CATableViewCell_class,
        js_autogentestbindings_js_CATableViewCell_constructor, 0, // constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27 
//  JS_SetPropertyAttributes(cx, global, "CATableViewCell", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::CATableViewCell> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_CATableViewCell_class;
        p->proto = jsb_CrossApp_CATableViewCell_prototype;
        p->parentProto = jsb_CrossApp_CAControl_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
}

JSClass  *jsb_CrossApp_CACollectionViewDelegate_class;
JSObject *jsb_CrossApp_CACollectionViewDelegate_prototype;

bool js_autogentestbindings_js_CACollectionViewDelegate_collectionViewDidSelectCellAtIndexPath(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CACollectionViewDelegate* cobj = (CrossApp::CACollectionViewDelegate *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CACollectionViewDelegate_collectionViewDidSelectCellAtIndexPath : Invalid Native Object");
    if (argc == 4) {
        CrossApp::CACollectionView* arg0 = nullptr;
        unsigned int arg1 = 0;
        unsigned int arg2 = 0;
        unsigned int arg3 = 0;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CACollectionView*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        ok &= jsval_to_uint32(cx, args.get(1), &arg1);
        ok &= jsval_to_uint32(cx, args.get(2), &arg2);
        ok &= jsval_to_uint32(cx, args.get(3), &arg3);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CACollectionViewDelegate_collectionViewDidSelectCellAtIndexPath : Error processing arguments");
        cobj->collectionViewDidSelectCellAtIndexPath(arg0, arg1, arg2, arg3);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CACollectionViewDelegate_collectionViewDidSelectCellAtIndexPath : wrong number of arguments: %d, was expecting %d", argc, 4);
    return false;
}
bool js_autogentestbindings_js_CACollectionViewDelegate_collectionViewDidDeselectCellAtIndexPath(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CACollectionViewDelegate* cobj = (CrossApp::CACollectionViewDelegate *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CACollectionViewDelegate_collectionViewDidDeselectCellAtIndexPath : Invalid Native Object");
    if (argc == 4) {
        CrossApp::CACollectionView* arg0 = nullptr;
        unsigned int arg1 = 0;
        unsigned int arg2 = 0;
        unsigned int arg3 = 0;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CACollectionView*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        ok &= jsval_to_uint32(cx, args.get(1), &arg1);
        ok &= jsval_to_uint32(cx, args.get(2), &arg2);
        ok &= jsval_to_uint32(cx, args.get(3), &arg3);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CACollectionViewDelegate_collectionViewDidDeselectCellAtIndexPath : Error processing arguments");
        cobj->collectionViewDidDeselectCellAtIndexPath(arg0, arg1, arg2, arg3);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CACollectionViewDelegate_collectionViewDidDeselectCellAtIndexPath : wrong number of arguments: %d, was expecting %d", argc, 4);
    return false;
}

void js_CrossApp_CACollectionViewDelegate_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOGINFO("jsbindings: finalizing JS object %p (CACollectionViewDelegate)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::CACollectionViewDelegate *nobj = static_cast<CrossApp::CACollectionViewDelegate *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
void js_register_autogentestbindings_js_CACollectionViewDelegate(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_CACollectionViewDelegate_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_CACollectionViewDelegate_class->name = "CACollectionViewDelegate";
    jsb_CrossApp_CACollectionViewDelegate_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_CACollectionViewDelegate_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_CACollectionViewDelegate_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_CACollectionViewDelegate_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_CACollectionViewDelegate_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_CACollectionViewDelegate_class->resolve = JS_ResolveStub;
    jsb_CrossApp_CACollectionViewDelegate_class->convert = JS_ConvertStub;
    jsb_CrossApp_CACollectionViewDelegate_class->finalize = js_CrossApp_CACollectionViewDelegate_finalize;
    jsb_CrossApp_CACollectionViewDelegate_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("collectionViewDidSelectCellAtIndexPath", js_autogentestbindings_js_CACollectionViewDelegate_collectionViewDidSelectCellAtIndexPath, 4, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("collectionViewDidDeselectCellAtIndexPath", js_autogentestbindings_js_CACollectionViewDelegate_collectionViewDidDeselectCellAtIndexPath, 4, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    JSFunctionSpec *st_funcs = NULL;

    jsb_CrossApp_CACollectionViewDelegate_prototype = JS_InitClass(
        cx, global,
        JS::NullPtr(), // parent proto
        jsb_CrossApp_CACollectionViewDelegate_class,
        dummy_constructor<CrossApp::CACollectionViewDelegate>, 0, // no constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27 
//  JS_SetPropertyAttributes(cx, global, "CACollectionViewDelegate", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::CACollectionViewDelegate> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_CACollectionViewDelegate_class;
        p->proto = jsb_CrossApp_CACollectionViewDelegate_prototype;
        p->parentProto = NULL;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
}

JSClass  *jsb_CrossApp_CACollectionViewDataSource_class;
JSObject *jsb_CrossApp_CACollectionViewDataSource_prototype;

bool js_autogentestbindings_js_CACollectionViewDataSource_numberOfSections(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CACollectionViewDataSource* cobj = (CrossApp::CACollectionViewDataSource *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CACollectionViewDataSource_numberOfSections : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CACollectionView* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CACollectionView*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CACollectionViewDataSource_numberOfSections : Error processing arguments");
        unsigned int ret = cobj->numberOfSections(arg0);
        jsval jsret = JSVAL_NULL;
        jsret = uint32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CACollectionViewDataSource_numberOfSections : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CACollectionViewDataSource_collectionViewHeightForRowAtIndexPath(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CACollectionViewDataSource* cobj = (CrossApp::CACollectionViewDataSource *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CACollectionViewDataSource_collectionViewHeightForRowAtIndexPath : Invalid Native Object");
    if (argc == 3) {
        CrossApp::CACollectionView* arg0 = nullptr;
        unsigned int arg1 = 0;
        unsigned int arg2 = 0;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CACollectionView*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        ok &= jsval_to_uint32(cx, args.get(1), &arg1);
        ok &= jsval_to_uint32(cx, args.get(2), &arg2);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CACollectionViewDataSource_collectionViewHeightForRowAtIndexPath : Error processing arguments");
        unsigned int ret = cobj->collectionViewHeightForRowAtIndexPath(arg0, arg1, arg2);
        jsval jsret = JSVAL_NULL;
        jsret = uint32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CACollectionViewDataSource_collectionViewHeightForRowAtIndexPath : wrong number of arguments: %d, was expecting %d", argc, 3);
    return false;
}
bool js_autogentestbindings_js_CACollectionViewDataSource_collectionViewHeightForHeaderInSection(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CACollectionViewDataSource* cobj = (CrossApp::CACollectionViewDataSource *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CACollectionViewDataSource_collectionViewHeightForHeaderInSection : Invalid Native Object");
    if (argc == 2) {
        CrossApp::CACollectionView* arg0 = nullptr;
        unsigned int arg1 = 0;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CACollectionView*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        ok &= jsval_to_uint32(cx, args.get(1), &arg1);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CACollectionViewDataSource_collectionViewHeightForHeaderInSection : Error processing arguments");
        unsigned int ret = cobj->collectionViewHeightForHeaderInSection(arg0, arg1);
        jsval jsret = JSVAL_NULL;
        jsret = uint32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CACollectionViewDataSource_collectionViewHeightForHeaderInSection : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_autogentestbindings_js_CACollectionViewDataSource_collectionViewHeightForFooterInSection(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CACollectionViewDataSource* cobj = (CrossApp::CACollectionViewDataSource *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CACollectionViewDataSource_collectionViewHeightForFooterInSection : Invalid Native Object");
    if (argc == 2) {
        CrossApp::CACollectionView* arg0 = nullptr;
        unsigned int arg1 = 0;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CACollectionView*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        ok &= jsval_to_uint32(cx, args.get(1), &arg1);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CACollectionViewDataSource_collectionViewHeightForFooterInSection : Error processing arguments");
        unsigned int ret = cobj->collectionViewHeightForFooterInSection(arg0, arg1);
        jsval jsret = JSVAL_NULL;
        jsret = uint32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CACollectionViewDataSource_collectionViewHeightForFooterInSection : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_autogentestbindings_js_CACollectionViewDataSource_collectionViewSectionViewForHeaderInSection(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CACollectionViewDataSource* cobj = (CrossApp::CACollectionViewDataSource *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CACollectionViewDataSource_collectionViewSectionViewForHeaderInSection : Invalid Native Object");
    if (argc == 3) {
        CrossApp::CACollectionView* arg0 = nullptr;
        CrossApp::DSize arg1;
        unsigned int arg2 = 0;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CACollectionView*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        ok &= jsval_to_dsize(cx, args.get(1), &arg1);
        ok &= jsval_to_uint32(cx, args.get(2), &arg2);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CACollectionViewDataSource_collectionViewSectionViewForHeaderInSection : Error processing arguments");
        CrossApp::CAView* ret = cobj->collectionViewSectionViewForHeaderInSection(arg0, arg1, arg2);
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAView>(cx, (CrossApp::CAView*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CACollectionViewDataSource_collectionViewSectionViewForHeaderInSection : wrong number of arguments: %d, was expecting %d", argc, 3);
    return false;
}
bool js_autogentestbindings_js_CACollectionViewDataSource_numberOfItemsInRowsInSection(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CACollectionViewDataSource* cobj = (CrossApp::CACollectionViewDataSource *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CACollectionViewDataSource_numberOfItemsInRowsInSection : Invalid Native Object");
    if (argc == 3) {
        CrossApp::CACollectionView* arg0 = nullptr;
        unsigned int arg1 = 0;
        unsigned int arg2 = 0;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CACollectionView*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        ok &= jsval_to_uint32(cx, args.get(1), &arg1);
        ok &= jsval_to_uint32(cx, args.get(2), &arg2);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CACollectionViewDataSource_numberOfItemsInRowsInSection : Error processing arguments");
        unsigned int ret = cobj->numberOfItemsInRowsInSection(arg0, arg1, arg2);
        jsval jsret = JSVAL_NULL;
        jsret = uint32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CACollectionViewDataSource_numberOfItemsInRowsInSection : wrong number of arguments: %d, was expecting %d", argc, 3);
    return false;
}
bool js_autogentestbindings_js_CACollectionViewDataSource_numberOfRowsInSection(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CACollectionViewDataSource* cobj = (CrossApp::CACollectionViewDataSource *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CACollectionViewDataSource_numberOfRowsInSection : Invalid Native Object");
    if (argc == 2) {
        CrossApp::CACollectionView* arg0 = nullptr;
        unsigned int arg1 = 0;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CACollectionView*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        ok &= jsval_to_uint32(cx, args.get(1), &arg1);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CACollectionViewDataSource_numberOfRowsInSection : Error processing arguments");
        unsigned int ret = cobj->numberOfRowsInSection(arg0, arg1);
        jsval jsret = JSVAL_NULL;
        jsret = uint32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CACollectionViewDataSource_numberOfRowsInSection : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_autogentestbindings_js_CACollectionViewDataSource_collectionViewWillDisplayCellAtIndex(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CACollectionViewDataSource* cobj = (CrossApp::CACollectionViewDataSource *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CACollectionViewDataSource_collectionViewWillDisplayCellAtIndex : Invalid Native Object");
    if (argc == 5) {
        CrossApp::CACollectionView* arg0 = nullptr;
        CrossApp::CACollectionViewCell* arg1 = nullptr;
        unsigned int arg2 = 0;
        unsigned int arg3 = 0;
        unsigned int arg4 = 0;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CACollectionView*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        do {
            if (args.get(1).isNull()) { arg1 = nullptr; break; }
            if (!args.get(1).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(1).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg1 = (CrossApp::CACollectionViewCell*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg1, cx, false, "Invalid Native Object");
        } while (0);
        ok &= jsval_to_uint32(cx, args.get(2), &arg2);
        ok &= jsval_to_uint32(cx, args.get(3), &arg3);
        ok &= jsval_to_uint32(cx, args.get(4), &arg4);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CACollectionViewDataSource_collectionViewWillDisplayCellAtIndex : Error processing arguments");
        cobj->collectionViewWillDisplayCellAtIndex(arg0, arg1, arg2, arg3, arg4);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CACollectionViewDataSource_collectionViewWillDisplayCellAtIndex : wrong number of arguments: %d, was expecting %d", argc, 5);
    return false;
}
bool js_autogentestbindings_js_CACollectionViewDataSource_collectionViewSectionViewForFooterInSection(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CACollectionViewDataSource* cobj = (CrossApp::CACollectionViewDataSource *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CACollectionViewDataSource_collectionViewSectionViewForFooterInSection : Invalid Native Object");
    if (argc == 3) {
        CrossApp::CACollectionView* arg0 = nullptr;
        CrossApp::DSize arg1;
        unsigned int arg2 = 0;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CACollectionView*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        ok &= jsval_to_dsize(cx, args.get(1), &arg1);
        ok &= jsval_to_uint32(cx, args.get(2), &arg2);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CACollectionViewDataSource_collectionViewSectionViewForFooterInSection : Error processing arguments");
        CrossApp::CAView* ret = cobj->collectionViewSectionViewForFooterInSection(arg0, arg1, arg2);
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAView>(cx, (CrossApp::CAView*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CACollectionViewDataSource_collectionViewSectionViewForFooterInSection : wrong number of arguments: %d, was expecting %d", argc, 3);
    return false;
}
bool js_autogentestbindings_js_CACollectionViewDataSource_collectionCellAtIndex(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CACollectionViewDataSource* cobj = (CrossApp::CACollectionViewDataSource *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CACollectionViewDataSource_collectionCellAtIndex : Invalid Native Object");
    if (argc == 5) {
        CrossApp::CACollectionView* arg0 = nullptr;
        CrossApp::DSize arg1;
        unsigned int arg2 = 0;
        unsigned int arg3 = 0;
        unsigned int arg4 = 0;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CACollectionView*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        ok &= jsval_to_dsize(cx, args.get(1), &arg1);
        ok &= jsval_to_uint32(cx, args.get(2), &arg2);
        ok &= jsval_to_uint32(cx, args.get(3), &arg3);
        ok &= jsval_to_uint32(cx, args.get(4), &arg4);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CACollectionViewDataSource_collectionCellAtIndex : Error processing arguments");
        CrossApp::CACollectionViewCell* ret = cobj->collectionCellAtIndex(arg0, arg1, arg2, arg3, arg4);
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CACollectionViewCell>(cx, (CrossApp::CACollectionViewCell*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CACollectionViewDataSource_collectionCellAtIndex : wrong number of arguments: %d, was expecting %d", argc, 5);
    return false;
}

void js_CrossApp_CACollectionViewDataSource_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOGINFO("jsbindings: finalizing JS object %p (CACollectionViewDataSource)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::CACollectionViewDataSource *nobj = static_cast<CrossApp::CACollectionViewDataSource *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
void js_register_autogentestbindings_js_CACollectionViewDataSource(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_CACollectionViewDataSource_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_CACollectionViewDataSource_class->name = "CACollectionViewDataSource";
    jsb_CrossApp_CACollectionViewDataSource_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_CACollectionViewDataSource_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_CACollectionViewDataSource_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_CACollectionViewDataSource_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_CACollectionViewDataSource_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_CACollectionViewDataSource_class->resolve = JS_ResolveStub;
    jsb_CrossApp_CACollectionViewDataSource_class->convert = JS_ConvertStub;
    jsb_CrossApp_CACollectionViewDataSource_class->finalize = js_CrossApp_CACollectionViewDataSource_finalize;
    jsb_CrossApp_CACollectionViewDataSource_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("numberOfSections", js_autogentestbindings_js_CACollectionViewDataSource_numberOfSections, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("collectionViewHeightForRowAtIndexPath", js_autogentestbindings_js_CACollectionViewDataSource_collectionViewHeightForRowAtIndexPath, 3, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("collectionViewHeightForHeaderInSection", js_autogentestbindings_js_CACollectionViewDataSource_collectionViewHeightForHeaderInSection, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("collectionViewHeightForFooterInSection", js_autogentestbindings_js_CACollectionViewDataSource_collectionViewHeightForFooterInSection, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("collectionViewSectionViewForHeaderInSection", js_autogentestbindings_js_CACollectionViewDataSource_collectionViewSectionViewForHeaderInSection, 3, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("numberOfItemsInRowsInSection", js_autogentestbindings_js_CACollectionViewDataSource_numberOfItemsInRowsInSection, 3, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("numberOfRowsInSection", js_autogentestbindings_js_CACollectionViewDataSource_numberOfRowsInSection, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("collectionViewWillDisplayCellAtIndex", js_autogentestbindings_js_CACollectionViewDataSource_collectionViewWillDisplayCellAtIndex, 5, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("collectionViewSectionViewForFooterInSection", js_autogentestbindings_js_CACollectionViewDataSource_collectionViewSectionViewForFooterInSection, 3, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("collectionCellAtIndex", js_autogentestbindings_js_CACollectionViewDataSource_collectionCellAtIndex, 5, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    JSFunctionSpec *st_funcs = NULL;

    jsb_CrossApp_CACollectionViewDataSource_prototype = JS_InitClass(
        cx, global,
        JS::NullPtr(), // parent proto
        jsb_CrossApp_CACollectionViewDataSource_class,
        dummy_constructor<CrossApp::CACollectionViewDataSource>, 0, // no constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27 
//  JS_SetPropertyAttributes(cx, global, "CACollectionViewDataSource", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::CACollectionViewDataSource> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_CACollectionViewDataSource_class;
        p->proto = jsb_CrossApp_CACollectionViewDataSource_prototype;
        p->parentProto = NULL;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
}

JSClass  *jsb_CrossApp_CACollectionView_class;
JSObject *jsb_CrossApp_CACollectionView_prototype;

bool js_autogentestbindings_js_CACollectionView_setCollectionFooterHeight(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CACollectionView* cobj = (CrossApp::CACollectionView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CACollectionView_setCollectionFooterHeight : Invalid Native Object");
    if (argc == 1) {
        unsigned int arg0 = 0;
        ok &= jsval_to_uint32(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CACollectionView_setCollectionFooterHeight : Error processing arguments");
        cobj->setCollectionFooterHeight(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CACollectionView_setCollectionFooterHeight : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CACollectionView_mouseMovedOutSide(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CACollectionView* cobj = (CrossApp::CACollectionView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CACollectionView_mouseMovedOutSide : Invalid Native Object");
    if (argc == 2) {
        CrossApp::CATouch* arg0 = nullptr;
        CrossApp::CAEvent* arg1 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CATouch*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        do {
            if (args.get(1).isNull()) { arg1 = nullptr; break; }
            if (!args.get(1).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(1).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg1 = (CrossApp::CAEvent*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg1, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CACollectionView_mouseMovedOutSide : Error processing arguments");
        cobj->mouseMovedOutSide(arg0, arg1);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CACollectionView_mouseMovedOutSide : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_autogentestbindings_js_CACollectionView_isAllowsSelection(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CACollectionView* cobj = (CrossApp::CACollectionView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CACollectionView_isAllowsSelection : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->isAllowsSelection();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CACollectionView_isAllowsSelection : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CACollectionView_ccTouchBegan(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CACollectionView* cobj = (CrossApp::CACollectionView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CACollectionView_ccTouchBegan : Invalid Native Object");
    if (argc == 2) {
        CrossApp::CATouch* arg0 = nullptr;
        CrossApp::CAEvent* arg1 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CATouch*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        do {
            if (args.get(1).isNull()) { arg1 = nullptr; break; }
            if (!args.get(1).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(1).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg1 = (CrossApp::CAEvent*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg1, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CACollectionView_ccTouchBegan : Error processing arguments");
        bool ret = cobj->ccTouchBegan(arg0, arg1);
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CACollectionView_ccTouchBegan : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_autogentestbindings_js_CACollectionView_setCollectionHeaderView(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CACollectionView* cobj = (CrossApp::CACollectionView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CACollectionView_setCollectionHeaderView : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAView* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAView*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CACollectionView_setCollectionHeaderView : Error processing arguments");
        cobj->setCollectionHeaderView(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CACollectionView_setCollectionHeaderView : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CACollectionView_getVertInterval(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CACollectionView* cobj = (CrossApp::CACollectionView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CACollectionView_getVertInterval : Invalid Native Object");
    if (argc == 0) {
        unsigned int ret = cobj->getVertInterval();
        jsval jsret = JSVAL_NULL;
        jsret = uint32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CACollectionView_getVertInterval : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CACollectionView_setCollectionFooterView(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CACollectionView* cobj = (CrossApp::CACollectionView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CACollectionView_setCollectionFooterView : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAView* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAView*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CACollectionView_setCollectionFooterView : Error processing arguments");
        cobj->setCollectionFooterView(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CACollectionView_setCollectionFooterView : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CACollectionView_getCollectionFooterView(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CACollectionView* cobj = (CrossApp::CACollectionView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CACollectionView_getCollectionFooterView : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CAView* ret = cobj->getCollectionFooterView();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAView>(cx, (CrossApp::CAView*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CACollectionView_getCollectionFooterView : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CACollectionView_setAlwaysTopSectionHeader(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CACollectionView* cobj = (CrossApp::CACollectionView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CACollectionView_setAlwaysTopSectionHeader : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        arg0 = JS::ToBoolean(args.get(0));
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CACollectionView_setAlwaysTopSectionHeader : Error processing arguments");
        cobj->setAlwaysTopSectionHeader(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CACollectionView_setAlwaysTopSectionHeader : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CACollectionView_mouseMoved(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CACollectionView* cobj = (CrossApp::CACollectionView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CACollectionView_mouseMoved : Invalid Native Object");
    if (argc == 2) {
        CrossApp::CATouch* arg0 = nullptr;
        CrossApp::CAEvent* arg1 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CATouch*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        do {
            if (args.get(1).isNull()) { arg1 = nullptr; break; }
            if (!args.get(1).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(1).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg1 = (CrossApp::CAEvent*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg1, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CACollectionView_mouseMoved : Error processing arguments");
        cobj->mouseMoved(arg0, arg1);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CACollectionView_mouseMoved : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_autogentestbindings_js_CACollectionView_isAlwaysBottomSectionFooter(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CACollectionView* cobj = (CrossApp::CACollectionView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CACollectionView_isAlwaysBottomSectionFooter : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->isAlwaysBottomSectionFooter();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CACollectionView_isAlwaysBottomSectionFooter : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CACollectionView_getHoriInterval(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CACollectionView* cobj = (CrossApp::CACollectionView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CACollectionView_getHoriInterval : Invalid Native Object");
    if (argc == 0) {
        unsigned int ret = cobj->getHoriInterval();
        jsval jsret = JSVAL_NULL;
        jsret = uint32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CACollectionView_getHoriInterval : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CACollectionView_clearData(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CACollectionView* cobj = (CrossApp::CACollectionView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CACollectionView_clearData : Invalid Native Object");
    if (argc == 0) {
        cobj->clearData();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CACollectionView_clearData : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CACollectionView_setCollectionViewDelegate(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CACollectionView* cobj = (CrossApp::CACollectionView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CACollectionView_setCollectionViewDelegate : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CACollectionViewDelegate* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CACollectionViewDelegate*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CACollectionView_setCollectionViewDelegate : Error processing arguments");
        cobj->setCollectionViewDelegate(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CACollectionView_setCollectionViewDelegate : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CACollectionView_setHoriInterval(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CACollectionView* cobj = (CrossApp::CACollectionView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CACollectionView_setHoriInterval : Invalid Native Object");
    if (argc == 1) {
        unsigned int arg0 = 0;
        ok &= jsval_to_uint32(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CACollectionView_setHoriInterval : Error processing arguments");
        cobj->setHoriInterval(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CACollectionView_setHoriInterval : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CACollectionView_setSelectRowAtIndexPath(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CACollectionView* cobj = (CrossApp::CACollectionView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CACollectionView_setSelectRowAtIndexPath : Invalid Native Object");
    if (argc == 3) {
        unsigned int arg0 = 0;
        unsigned int arg1 = 0;
        unsigned int arg2 = 0;
        ok &= jsval_to_uint32(cx, args.get(0), &arg0);
        ok &= jsval_to_uint32(cx, args.get(1), &arg1);
        ok &= jsval_to_uint32(cx, args.get(2), &arg2);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CACollectionView_setSelectRowAtIndexPath : Error processing arguments");
        cobj->setSelectRowAtIndexPath(arg0, arg1, arg2);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CACollectionView_setSelectRowAtIndexPath : wrong number of arguments: %d, was expecting %d", argc, 3);
    return false;
}
bool js_autogentestbindings_js_CACollectionView_init(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CACollectionView* cobj = (CrossApp::CACollectionView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CACollectionView_init : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->init();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CACollectionView_init : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CACollectionView_ccTouchEnded(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CACollectionView* cobj = (CrossApp::CACollectionView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CACollectionView_ccTouchEnded : Invalid Native Object");
    if (argc == 2) {
        CrossApp::CATouch* arg0 = nullptr;
        CrossApp::CAEvent* arg1 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CATouch*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        do {
            if (args.get(1).isNull()) { arg1 = nullptr; break; }
            if (!args.get(1).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(1).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg1 = (CrossApp::CAEvent*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg1, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CACollectionView_ccTouchEnded : Error processing arguments");
        cobj->ccTouchEnded(arg0, arg1);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CACollectionView_ccTouchEnded : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_autogentestbindings_js_CACollectionView_isAllowsMultipleSelection(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CACollectionView* cobj = (CrossApp::CACollectionView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CACollectionView_isAllowsMultipleSelection : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->isAllowsMultipleSelection();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CACollectionView_isAllowsMultipleSelection : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CACollectionView_ccTouchMoved(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CACollectionView* cobj = (CrossApp::CACollectionView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CACollectionView_ccTouchMoved : Invalid Native Object");
    if (argc == 2) {
        CrossApp::CATouch* arg0 = nullptr;
        CrossApp::CAEvent* arg1 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CATouch*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        do {
            if (args.get(1).isNull()) { arg1 = nullptr; break; }
            if (!args.get(1).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(1).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg1 = (CrossApp::CAEvent*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg1, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CACollectionView_ccTouchMoved : Error processing arguments");
        cobj->ccTouchMoved(arg0, arg1);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CACollectionView_ccTouchMoved : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_autogentestbindings_js_CACollectionView_setAllowsSelection(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CACollectionView* cobj = (CrossApp::CACollectionView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CACollectionView_setAllowsSelection : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        arg0 = JS::ToBoolean(args.get(0));
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CACollectionView_setAllowsSelection : Error processing arguments");
        cobj->setAllowsSelection(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CACollectionView_setAllowsSelection : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CACollectionView_reloadData(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CACollectionView* cobj = (CrossApp::CACollectionView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CACollectionView_reloadData : Invalid Native Object");
    if (argc == 0) {
        cobj->reloadData();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CACollectionView_reloadData : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CACollectionView_setAllowsMultipleSelection(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CACollectionView* cobj = (CrossApp::CACollectionView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CACollectionView_setAllowsMultipleSelection : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        arg0 = JS::ToBoolean(args.get(0));
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CACollectionView_setAllowsMultipleSelection : Error processing arguments");
        cobj->setAllowsMultipleSelection(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CACollectionView_setAllowsMultipleSelection : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CACollectionView_getCollectionHeaderView(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CACollectionView* cobj = (CrossApp::CACollectionView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CACollectionView_getCollectionHeaderView : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CAView* ret = cobj->getCollectionHeaderView();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAView>(cx, (CrossApp::CAView*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CACollectionView_getCollectionHeaderView : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CACollectionView_setCollectionViewDataSource(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CACollectionView* cobj = (CrossApp::CACollectionView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CACollectionView_setCollectionViewDataSource : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CACollectionViewDataSource* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CACollectionViewDataSource*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CACollectionView_setCollectionViewDataSource : Error processing arguments");
        cobj->setCollectionViewDataSource(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CACollectionView_setCollectionViewDataSource : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CACollectionView_setShowsScrollIndicators(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CACollectionView* cobj = (CrossApp::CACollectionView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CACollectionView_setShowsScrollIndicators : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        arg0 = JS::ToBoolean(args.get(0));
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CACollectionView_setShowsScrollIndicators : Error processing arguments");
        cobj->setShowsScrollIndicators(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CACollectionView_setShowsScrollIndicators : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CACollectionView_cellForRowAtIndexPath(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CACollectionView* cobj = (CrossApp::CACollectionView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CACollectionView_cellForRowAtIndexPath : Invalid Native Object");
    if (argc == 3) {
        unsigned int arg0 = 0;
        unsigned int arg1 = 0;
        unsigned int arg2 = 0;
        ok &= jsval_to_uint32(cx, args.get(0), &arg0);
        ok &= jsval_to_uint32(cx, args.get(1), &arg1);
        ok &= jsval_to_uint32(cx, args.get(2), &arg2);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CACollectionView_cellForRowAtIndexPath : Error processing arguments");
        CrossApp::CACollectionViewCell* ret = cobj->cellForRowAtIndexPath(arg0, arg1, arg2);
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CACollectionViewCell>(cx, (CrossApp::CACollectionViewCell*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CACollectionView_cellForRowAtIndexPath : wrong number of arguments: %d, was expecting %d", argc, 3);
    return false;
}
bool js_autogentestbindings_js_CACollectionView_displayingCollectionCell(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CACollectionView* cobj = (CrossApp::CACollectionView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CACollectionView_displayingCollectionCell : Invalid Native Object");
    if (argc == 0) {
        const CrossApp::CAVector<CrossApp::CACollectionViewCell *>& ret = cobj->displayingCollectionCell();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAVector<CrossApp::CACollectionViewCell >&>(cx, (CrossApp::CAVector<CrossApp::CACollectionViewCell *>&)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CACollectionView_displayingCollectionCell : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CACollectionView_getCollectionViewDataSource(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CACollectionView* cobj = (CrossApp::CACollectionView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CACollectionView_getCollectionViewDataSource : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CACollectionViewDataSource* ret = cobj->getCollectionViewDataSource();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CACollectionViewDataSource>(cx, (CrossApp::CACollectionViewDataSource*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CACollectionView_getCollectionViewDataSource : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CACollectionView_setAlwaysBottomSectionFooter(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CACollectionView* cobj = (CrossApp::CACollectionView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CACollectionView_setAlwaysBottomSectionFooter : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        arg0 = JS::ToBoolean(args.get(0));
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CACollectionView_setAlwaysBottomSectionFooter : Error processing arguments");
        cobj->setAlwaysBottomSectionFooter(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CACollectionView_setAlwaysBottomSectionFooter : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CACollectionView_onExitTransitionDidStart(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CACollectionView* cobj = (CrossApp::CACollectionView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CACollectionView_onExitTransitionDidStart : Invalid Native Object");
    if (argc == 0) {
        cobj->onExitTransitionDidStart();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CACollectionView_onExitTransitionDidStart : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CACollectionView_isAlwaysTopSectionHeader(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CACollectionView* cobj = (CrossApp::CACollectionView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CACollectionView_isAlwaysTopSectionHeader : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->isAlwaysTopSectionHeader();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CACollectionView_isAlwaysTopSectionHeader : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CACollectionView_getCollectionHeaderHeight(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CACollectionView* cobj = (CrossApp::CACollectionView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CACollectionView_getCollectionHeaderHeight : Invalid Native Object");
    if (argc == 0) {
        unsigned int ret = cobj->getCollectionHeaderHeight();
        jsval jsret = JSVAL_NULL;
        jsret = uint32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CACollectionView_getCollectionHeaderHeight : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CACollectionView_getCollectionViewDelegate(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CACollectionView* cobj = (CrossApp::CACollectionView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CACollectionView_getCollectionViewDelegate : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CACollectionViewDelegate* ret = cobj->getCollectionViewDelegate();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CACollectionViewDelegate>(cx, (CrossApp::CACollectionViewDelegate*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CACollectionView_getCollectionViewDelegate : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CACollectionView_setVertInterval(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CACollectionView* cobj = (CrossApp::CACollectionView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CACollectionView_setVertInterval : Invalid Native Object");
    if (argc == 1) {
        unsigned int arg0 = 0;
        ok &= jsval_to_uint32(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CACollectionView_setVertInterval : Error processing arguments");
        cobj->setVertInterval(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CACollectionView_setVertInterval : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CACollectionView_getCollectionFooterHeight(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CACollectionView* cobj = (CrossApp::CACollectionView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CACollectionView_getCollectionFooterHeight : Invalid Native Object");
    if (argc == 0) {
        unsigned int ret = cobj->getCollectionFooterHeight();
        jsval jsret = JSVAL_NULL;
        jsret = uint32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CACollectionView_getCollectionFooterHeight : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CACollectionView_ccTouchCancelled(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CACollectionView* cobj = (CrossApp::CACollectionView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CACollectionView_ccTouchCancelled : Invalid Native Object");
    if (argc == 2) {
        CrossApp::CATouch* arg0 = nullptr;
        CrossApp::CAEvent* arg1 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CATouch*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        do {
            if (args.get(1).isNull()) { arg1 = nullptr; break; }
            if (!args.get(1).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(1).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg1 = (CrossApp::CAEvent*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg1, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CACollectionView_ccTouchCancelled : Error processing arguments");
        cobj->ccTouchCancelled(arg0, arg1);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CACollectionView_ccTouchCancelled : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_autogentestbindings_js_CACollectionView_setCollectionHeaderHeight(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CACollectionView* cobj = (CrossApp::CACollectionView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CACollectionView_setCollectionHeaderHeight : Invalid Native Object");
    if (argc == 1) {
        unsigned int arg0 = 0;
        ok &= jsval_to_uint32(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CACollectionView_setCollectionHeaderHeight : Error processing arguments");
        cobj->setCollectionHeaderHeight(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CACollectionView_setCollectionHeaderHeight : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CACollectionView_setUnSelectRowAtIndexPath(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CACollectionView* cobj = (CrossApp::CACollectionView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CACollectionView_setUnSelectRowAtIndexPath : Invalid Native Object");
    if (argc == 3) {
        unsigned int arg0 = 0;
        unsigned int arg1 = 0;
        unsigned int arg2 = 0;
        ok &= jsval_to_uint32(cx, args.get(0), &arg0);
        ok &= jsval_to_uint32(cx, args.get(1), &arg1);
        ok &= jsval_to_uint32(cx, args.get(2), &arg2);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CACollectionView_setUnSelectRowAtIndexPath : Error processing arguments");
        cobj->setUnSelectRowAtIndexPath(arg0, arg1, arg2);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CACollectionView_setUnSelectRowAtIndexPath : wrong number of arguments: %d, was expecting %d", argc, 3);
    return false;
}
bool js_autogentestbindings_js_CACollectionView_getHighlightCollectionCell(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CACollectionView* cobj = (CrossApp::CACollectionView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CACollectionView_getHighlightCollectionCell : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CACollectionViewCell* ret = cobj->getHighlightCollectionCell();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CACollectionViewCell>(cx, (CrossApp::CACollectionViewCell*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CACollectionView_getHighlightCollectionCell : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CACollectionView_switchPCMode(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CACollectionView* cobj = (CrossApp::CACollectionView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CACollectionView_switchPCMode : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        arg0 = JS::ToBoolean(args.get(0));
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CACollectionView_switchPCMode : Error processing arguments");
        cobj->switchPCMode(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CACollectionView_switchPCMode : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CACollectionView_dequeueReusableCellWithIdentifier(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CACollectionView* cobj = (CrossApp::CACollectionView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CACollectionView_dequeueReusableCellWithIdentifier : Invalid Native Object");
    if (argc == 1) {
        const char* arg0 = nullptr;
        std::string arg0_tmp; ok &= jsval_to_std_string(cx, args.get(0), &arg0_tmp); arg0 = arg0_tmp.c_str();
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CACollectionView_dequeueReusableCellWithIdentifier : Error processing arguments");
        CrossApp::CACollectionViewCell* ret = cobj->dequeueReusableCellWithIdentifier(arg0);
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CACollectionViewCell>(cx, (CrossApp::CACollectionViewCell*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CACollectionView_dequeueReusableCellWithIdentifier : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CACollectionView_onEnterTransitionDidFinish(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CACollectionView* cobj = (CrossApp::CACollectionView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CACollectionView_onEnterTransitionDidFinish : Invalid Native Object");
    if (argc == 0) {
        cobj->onEnterTransitionDidFinish();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CACollectionView_onEnterTransitionDidFinish : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CACollectionView_createWithFrame(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        CrossApp::DRect arg0;
        ok &= jsval_to_drect(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CACollectionView_createWithFrame : Error processing arguments");
        CrossApp::CACollectionView* ret = CrossApp::CACollectionView::createWithFrame(arg0);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CACollectionView>(cx, (CrossApp::CACollectionView*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_autogentestbindings_js_CACollectionView_createWithFrame : wrong number of arguments");
    return false;
}

bool js_autogentestbindings_js_CACollectionView_createWithLayout(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        CrossApp::DRectLayout arg0;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (const CrossApp::DRectLayout&)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CACollectionView_createWithLayout : Error processing arguments");
        CrossApp::CACollectionView* ret = CrossApp::CACollectionView::createWithLayout(arg0);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CACollectionView>(cx, (CrossApp::CACollectionView*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_autogentestbindings_js_CACollectionView_createWithLayout : wrong number of arguments");
    return false;
}

bool js_autogentestbindings_js_CACollectionView_createWithCenter(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        CrossApp::DRect arg0;
        ok &= jsval_to_drect(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CACollectionView_createWithCenter : Error processing arguments");
        CrossApp::CACollectionView* ret = CrossApp::CACollectionView::createWithCenter(arg0);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CACollectionView>(cx, (CrossApp::CACollectionView*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_autogentestbindings_js_CACollectionView_createWithCenter : wrong number of arguments");
    return false;
}

bool js_autogentestbindings_js_CACollectionView_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    CrossApp::CACollectionView* cobj = new (std::nothrow) CrossApp::CACollectionView();
    TypeTest<CrossApp::CACollectionView> t;
    js_type_class_t *typeClass = nullptr;
    std::string typeName = t.s_name();
    auto typeMapIter = _js_global_type_map.find(typeName);
    CCAssert(typeMapIter != _js_global_type_map.end(), "Can't find the class type!");
    typeClass = typeMapIter->second;
    CCAssert(typeClass, "The value is null.");
    JS::RootedObject proto(cx, typeClass->proto.get());
    JS::RootedObject parent(cx, typeClass->parentProto.get());
    JS::RootedObject obj(cx, JS_NewObject(cx, typeClass->jsclass, proto, parent));
    args.rval().set(OBJECT_TO_JSVAL(obj));
    // link the native object with the javascript object
    js_proxy_t* p = jsb_new_proxy(cobj, obj);
    if (JS_HasProperty(cx, obj, "_ctor", &ok) && ok)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    return true;
}

extern JSObject *jsb_CrossApp_CAScrollView_prototype;

void js_CrossApp_CACollectionView_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOGINFO("jsbindings: finalizing JS object %p (CACollectionView)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::CACollectionView *nobj = static_cast<CrossApp::CACollectionView *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
void js_register_autogentestbindings_js_CACollectionView(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_CACollectionView_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_CACollectionView_class->name = "CACollectionView";
    jsb_CrossApp_CACollectionView_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_CACollectionView_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_CACollectionView_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_CACollectionView_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_CACollectionView_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_CACollectionView_class->resolve = JS_ResolveStub;
    jsb_CrossApp_CACollectionView_class->convert = JS_ConvertStub;
    jsb_CrossApp_CACollectionView_class->finalize = js_CrossApp_CACollectionView_finalize;
    jsb_CrossApp_CACollectionView_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("setCollectionFooterHeight", js_autogentestbindings_js_CACollectionView_setCollectionFooterHeight, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("mouseMovedOutSide", js_autogentestbindings_js_CACollectionView_mouseMovedOutSide, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isAllowsSelection", js_autogentestbindings_js_CACollectionView_isAllowsSelection, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("ccTouchBegan", js_autogentestbindings_js_CACollectionView_ccTouchBegan, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setCollectionHeaderView", js_autogentestbindings_js_CACollectionView_setCollectionHeaderView, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getVertInterval", js_autogentestbindings_js_CACollectionView_getVertInterval, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setCollectionFooterView", js_autogentestbindings_js_CACollectionView_setCollectionFooterView, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getCollectionFooterView", js_autogentestbindings_js_CACollectionView_getCollectionFooterView, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setAlwaysTopSectionHeader", js_autogentestbindings_js_CACollectionView_setAlwaysTopSectionHeader, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("mouseMoved", js_autogentestbindings_js_CACollectionView_mouseMoved, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isAlwaysBottomSectionFooter", js_autogentestbindings_js_CACollectionView_isAlwaysBottomSectionFooter, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getHoriInterval", js_autogentestbindings_js_CACollectionView_getHoriInterval, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("clearData", js_autogentestbindings_js_CACollectionView_clearData, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setCollectionViewDelegate", js_autogentestbindings_js_CACollectionView_setCollectionViewDelegate, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setHoriInterval", js_autogentestbindings_js_CACollectionView_setHoriInterval, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setSelectRowAtIndexPath", js_autogentestbindings_js_CACollectionView_setSelectRowAtIndexPath, 3, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("init", js_autogentestbindings_js_CACollectionView_init, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("ccTouchEnded", js_autogentestbindings_js_CACollectionView_ccTouchEnded, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isAllowsMultipleSelection", js_autogentestbindings_js_CACollectionView_isAllowsMultipleSelection, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("ccTouchMoved", js_autogentestbindings_js_CACollectionView_ccTouchMoved, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setAllowsSelection", js_autogentestbindings_js_CACollectionView_setAllowsSelection, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("reloadData", js_autogentestbindings_js_CACollectionView_reloadData, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setAllowsMultipleSelection", js_autogentestbindings_js_CACollectionView_setAllowsMultipleSelection, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getCollectionHeaderView", js_autogentestbindings_js_CACollectionView_getCollectionHeaderView, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setCollectionViewDataSource", js_autogentestbindings_js_CACollectionView_setCollectionViewDataSource, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setShowsScrollIndicators", js_autogentestbindings_js_CACollectionView_setShowsScrollIndicators, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("cellForRowAtIndexPath", js_autogentestbindings_js_CACollectionView_cellForRowAtIndexPath, 3, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("displayingCollectionCell", js_autogentestbindings_js_CACollectionView_displayingCollectionCell, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getCollectionViewDataSource", js_autogentestbindings_js_CACollectionView_getCollectionViewDataSource, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setAlwaysBottomSectionFooter", js_autogentestbindings_js_CACollectionView_setAlwaysBottomSectionFooter, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("onExitTransitionDidStart", js_autogentestbindings_js_CACollectionView_onExitTransitionDidStart, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isAlwaysTopSectionHeader", js_autogentestbindings_js_CACollectionView_isAlwaysTopSectionHeader, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getCollectionHeaderHeight", js_autogentestbindings_js_CACollectionView_getCollectionHeaderHeight, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getCollectionViewDelegate", js_autogentestbindings_js_CACollectionView_getCollectionViewDelegate, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setVertInterval", js_autogentestbindings_js_CACollectionView_setVertInterval, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getCollectionFooterHeight", js_autogentestbindings_js_CACollectionView_getCollectionFooterHeight, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("ccTouchCancelled", js_autogentestbindings_js_CACollectionView_ccTouchCancelled, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setCollectionHeaderHeight", js_autogentestbindings_js_CACollectionView_setCollectionHeaderHeight, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setUnSelectRowAtIndexPath", js_autogentestbindings_js_CACollectionView_setUnSelectRowAtIndexPath, 3, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getHighlightCollectionCell", js_autogentestbindings_js_CACollectionView_getHighlightCollectionCell, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("switchPCMode", js_autogentestbindings_js_CACollectionView_switchPCMode, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("dequeueReusableCellWithIdentifier", js_autogentestbindings_js_CACollectionView_dequeueReusableCellWithIdentifier, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("onEnterTransitionDidFinish", js_autogentestbindings_js_CACollectionView_onEnterTransitionDidFinish, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    static JSFunctionSpec st_funcs[] = {
        JS_FN("createWithFrame", js_autogentestbindings_js_CACollectionView_createWithFrame, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("createWithLayout", js_autogentestbindings_js_CACollectionView_createWithLayout, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("createWithCenter", js_autogentestbindings_js_CACollectionView_createWithCenter, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    jsb_CrossApp_CACollectionView_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_CAScrollView_prototype),
        jsb_CrossApp_CACollectionView_class,
        js_autogentestbindings_js_CACollectionView_constructor, 0, // constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27 
//  JS_SetPropertyAttributes(cx, global, "CACollectionView", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::CACollectionView> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_CACollectionView_class;
        p->proto = jsb_CrossApp_CACollectionView_prototype;
        p->parentProto = jsb_CrossApp_CAScrollView_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
}

JSClass  *jsb_CrossApp_CACollectionViewCell_class;
JSObject *jsb_CrossApp_CACollectionViewCell_prototype;

bool js_autogentestbindings_js_CACollectionViewCell_getContentView(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CACollectionViewCell* cobj = (CrossApp::CACollectionViewCell *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CACollectionViewCell_getContentView : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CAView* ret = cobj->getContentView();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAView>(cx, (CrossApp::CAView*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CACollectionViewCell_getContentView : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CACollectionViewCell_setReuseIdentifier(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CACollectionViewCell* cobj = (CrossApp::CACollectionViewCell *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CACollectionViewCell_setReuseIdentifier : Invalid Native Object");
    if (argc == 1) {
        std::string arg0;
        ok &= jsval_to_std_string(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CACollectionViewCell_setReuseIdentifier : Error processing arguments");
        cobj->setReuseIdentifier(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CACollectionViewCell_setReuseIdentifier : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CACollectionViewCell_isAllowsSelected(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CACollectionViewCell* cobj = (CrossApp::CACollectionViewCell *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CACollectionViewCell_isAllowsSelected : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->isAllowsSelected();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CACollectionViewCell_isAllowsSelected : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CACollectionViewCell_getReuseIdentifier(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CACollectionViewCell* cobj = (CrossApp::CACollectionViewCell *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CACollectionViewCell_getReuseIdentifier : Invalid Native Object");
    if (argc == 0) {
        const std::string& ret = cobj->getReuseIdentifier();
        jsval jsret = JSVAL_NULL;
        jsret = std_string_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CACollectionViewCell_getReuseIdentifier : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CACollectionViewCell_setAllowsSelected(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CACollectionViewCell* cobj = (CrossApp::CACollectionViewCell *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CACollectionViewCell_setAllowsSelected : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        arg0 = JS::ToBoolean(args.get(0));
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CACollectionViewCell_setAllowsSelected : Error processing arguments");
        cobj->setAllowsSelected(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CACollectionViewCell_setAllowsSelected : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CACollectionViewCell_setControlStateEffect(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CACollectionViewCell* cobj = (CrossApp::CACollectionViewCell *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CACollectionViewCell_setControlStateEffect : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        arg0 = JS::ToBoolean(args.get(0));
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CACollectionViewCell_setControlStateEffect : Error processing arguments");
        cobj->setControlStateEffect(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CACollectionViewCell_setControlStateEffect : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CACollectionViewCell_getRow(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CACollectionViewCell* cobj = (CrossApp::CACollectionViewCell *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CACollectionViewCell_getRow : Invalid Native Object");
    if (argc == 0) {
        unsigned int ret = cobj->getRow();
        jsval jsret = JSVAL_NULL;
        jsret = uint32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CACollectionViewCell_getRow : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CACollectionViewCell_getBackgroundView(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CACollectionViewCell* cobj = (CrossApp::CACollectionViewCell *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CACollectionViewCell_getBackgroundView : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CAView* ret = cobj->getBackgroundView();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAView>(cx, (CrossApp::CAView*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CACollectionViewCell_getBackgroundView : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CACollectionViewCell_getSection(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CACollectionViewCell* cobj = (CrossApp::CACollectionViewCell *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CACollectionViewCell_getSection : Invalid Native Object");
    if (argc == 0) {
        unsigned int ret = cobj->getSection();
        jsval jsret = JSVAL_NULL;
        jsret = uint32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CACollectionViewCell_getSection : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CACollectionViewCell_isControlStateEffect(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CACollectionViewCell* cobj = (CrossApp::CACollectionViewCell *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CACollectionViewCell_isControlStateEffect : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->isControlStateEffect();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CACollectionViewCell_isControlStateEffect : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CACollectionViewCell_getItem(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CACollectionViewCell* cobj = (CrossApp::CACollectionViewCell *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CACollectionViewCell_getItem : Invalid Native Object");
    if (argc == 0) {
        unsigned int ret = cobj->getItem();
        jsval jsret = JSVAL_NULL;
        jsret = uint32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CACollectionViewCell_getItem : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CACollectionViewCell_initWithReuseIdentifier(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CACollectionViewCell* cobj = (CrossApp::CACollectionViewCell *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CACollectionViewCell_initWithReuseIdentifier : Invalid Native Object");
    if (argc == 1) {
        std::string arg0;
        ok &= jsval_to_std_string(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CACollectionViewCell_initWithReuseIdentifier : Error processing arguments");
        bool ret = cobj->initWithReuseIdentifier(arg0);
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CACollectionViewCell_initWithReuseIdentifier : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CACollectionViewCell_setBackgroundView(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CACollectionViewCell* cobj = (CrossApp::CACollectionViewCell *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CACollectionViewCell_setBackgroundView : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAView* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAView*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CACollectionViewCell_setBackgroundView : Error processing arguments");
        cobj->setBackgroundView(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CACollectionViewCell_setBackgroundView : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CACollectionViewCell_create(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        std::string arg0;
        ok &= jsval_to_std_string(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CACollectionViewCell_create : Error processing arguments");
        CrossApp::CACollectionViewCell* ret = CrossApp::CACollectionViewCell::create(arg0);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CACollectionViewCell>(cx, (CrossApp::CACollectionViewCell*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_autogentestbindings_js_CACollectionViewCell_create : wrong number of arguments");
    return false;
}

bool js_autogentestbindings_js_CACollectionViewCell_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    CrossApp::CACollectionViewCell* cobj = new (std::nothrow) CrossApp::CACollectionViewCell();
    TypeTest<CrossApp::CACollectionViewCell> t;
    js_type_class_t *typeClass = nullptr;
    std::string typeName = t.s_name();
    auto typeMapIter = _js_global_type_map.find(typeName);
    CCAssert(typeMapIter != _js_global_type_map.end(), "Can't find the class type!");
    typeClass = typeMapIter->second;
    CCAssert(typeClass, "The value is null.");
    JS::RootedObject proto(cx, typeClass->proto.get());
    JS::RootedObject parent(cx, typeClass->parentProto.get());
    JS::RootedObject obj(cx, JS_NewObject(cx, typeClass->jsclass, proto, parent));
    args.rval().set(OBJECT_TO_JSVAL(obj));
    // link the native object with the javascript object
    js_proxy_t* p = jsb_new_proxy(cobj, obj);
    if (JS_HasProperty(cx, obj, "_ctor", &ok) && ok)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    return true;
}

extern JSObject *jsb_CrossApp_CAControl_prototype;

void js_CrossApp_CACollectionViewCell_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOGINFO("jsbindings: finalizing JS object %p (CACollectionViewCell)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::CACollectionViewCell *nobj = static_cast<CrossApp::CACollectionViewCell *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
void js_register_autogentestbindings_js_CACollectionViewCell(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_CACollectionViewCell_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_CACollectionViewCell_class->name = "CACollectionViewCell";
    jsb_CrossApp_CACollectionViewCell_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_CACollectionViewCell_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_CACollectionViewCell_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_CACollectionViewCell_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_CACollectionViewCell_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_CACollectionViewCell_class->resolve = JS_ResolveStub;
    jsb_CrossApp_CACollectionViewCell_class->convert = JS_ConvertStub;
    jsb_CrossApp_CACollectionViewCell_class->finalize = js_CrossApp_CACollectionViewCell_finalize;
    jsb_CrossApp_CACollectionViewCell_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("getContentView", js_autogentestbindings_js_CACollectionViewCell_getContentView, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setReuseIdentifier", js_autogentestbindings_js_CACollectionViewCell_setReuseIdentifier, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isAllowsSelected", js_autogentestbindings_js_CACollectionViewCell_isAllowsSelected, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getReuseIdentifier", js_autogentestbindings_js_CACollectionViewCell_getReuseIdentifier, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setAllowsSelected", js_autogentestbindings_js_CACollectionViewCell_setAllowsSelected, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setControlStateEffect", js_autogentestbindings_js_CACollectionViewCell_setControlStateEffect, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getRow", js_autogentestbindings_js_CACollectionViewCell_getRow, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getBackgroundView", js_autogentestbindings_js_CACollectionViewCell_getBackgroundView, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getSection", js_autogentestbindings_js_CACollectionViewCell_getSection, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isControlStateEffect", js_autogentestbindings_js_CACollectionViewCell_isControlStateEffect, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getItem", js_autogentestbindings_js_CACollectionViewCell_getItem, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("initWithReuseIdentifier", js_autogentestbindings_js_CACollectionViewCell_initWithReuseIdentifier, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setBackgroundView", js_autogentestbindings_js_CACollectionViewCell_setBackgroundView, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    static JSFunctionSpec st_funcs[] = {
        JS_FN("create", js_autogentestbindings_js_CACollectionViewCell_create, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    jsb_CrossApp_CACollectionViewCell_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_CAControl_prototype),
        jsb_CrossApp_CACollectionViewCell_class,
        js_autogentestbindings_js_CACollectionViewCell_constructor, 0, // constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27 
//  JS_SetPropertyAttributes(cx, global, "CACollectionViewCell", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::CACollectionViewCell> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_CACollectionViewCell_class;
        p->proto = jsb_CrossApp_CACollectionViewCell_prototype;
        p->parentProto = jsb_CrossApp_CAControl_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
}

JSClass  *jsb_CrossApp_CAAutoCollectionViewDelegate_class;
JSObject *jsb_CrossApp_CAAutoCollectionViewDelegate_prototype;

bool js_autogentestbindings_js_CAAutoCollectionViewDelegate_collectionViewDidSelectCellAtIndexPath(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAAutoCollectionViewDelegate* cobj = (CrossApp::CAAutoCollectionViewDelegate *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAAutoCollectionViewDelegate_collectionViewDidSelectCellAtIndexPath : Invalid Native Object");
    if (argc == 3) {
        CrossApp::CAAutoCollectionView* arg0 = nullptr;
        unsigned int arg1 = 0;
        unsigned int arg2 = 0;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAAutoCollectionView*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        ok &= jsval_to_uint32(cx, args.get(1), &arg1);
        ok &= jsval_to_uint32(cx, args.get(2), &arg2);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAAutoCollectionViewDelegate_collectionViewDidSelectCellAtIndexPath : Error processing arguments");
        cobj->collectionViewDidSelectCellAtIndexPath(arg0, arg1, arg2);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAAutoCollectionViewDelegate_collectionViewDidSelectCellAtIndexPath : wrong number of arguments: %d, was expecting %d", argc, 3);
    return false;
}
bool js_autogentestbindings_js_CAAutoCollectionViewDelegate_collectionViewDidDeselectCellAtIndexPath(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAAutoCollectionViewDelegate* cobj = (CrossApp::CAAutoCollectionViewDelegate *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAAutoCollectionViewDelegate_collectionViewDidDeselectCellAtIndexPath : Invalid Native Object");
    if (argc == 3) {
        CrossApp::CAAutoCollectionView* arg0 = nullptr;
        unsigned int arg1 = 0;
        unsigned int arg2 = 0;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAAutoCollectionView*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        ok &= jsval_to_uint32(cx, args.get(1), &arg1);
        ok &= jsval_to_uint32(cx, args.get(2), &arg2);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAAutoCollectionViewDelegate_collectionViewDidDeselectCellAtIndexPath : Error processing arguments");
        cobj->collectionViewDidDeselectCellAtIndexPath(arg0, arg1, arg2);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAAutoCollectionViewDelegate_collectionViewDidDeselectCellAtIndexPath : wrong number of arguments: %d, was expecting %d", argc, 3);
    return false;
}

void js_CrossApp_CAAutoCollectionViewDelegate_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOGINFO("jsbindings: finalizing JS object %p (CAAutoCollectionViewDelegate)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::CAAutoCollectionViewDelegate *nobj = static_cast<CrossApp::CAAutoCollectionViewDelegate *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
void js_register_autogentestbindings_js_CAAutoCollectionViewDelegate(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_CAAutoCollectionViewDelegate_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_CAAutoCollectionViewDelegate_class->name = "CAAutoCollectionViewDelegate";
    jsb_CrossApp_CAAutoCollectionViewDelegate_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_CAAutoCollectionViewDelegate_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_CAAutoCollectionViewDelegate_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_CAAutoCollectionViewDelegate_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_CAAutoCollectionViewDelegate_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_CAAutoCollectionViewDelegate_class->resolve = JS_ResolveStub;
    jsb_CrossApp_CAAutoCollectionViewDelegate_class->convert = JS_ConvertStub;
    jsb_CrossApp_CAAutoCollectionViewDelegate_class->finalize = js_CrossApp_CAAutoCollectionViewDelegate_finalize;
    jsb_CrossApp_CAAutoCollectionViewDelegate_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("collectionViewDidSelectCellAtIndexPath", js_autogentestbindings_js_CAAutoCollectionViewDelegate_collectionViewDidSelectCellAtIndexPath, 3, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("collectionViewDidDeselectCellAtIndexPath", js_autogentestbindings_js_CAAutoCollectionViewDelegate_collectionViewDidDeselectCellAtIndexPath, 3, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    JSFunctionSpec *st_funcs = NULL;

    jsb_CrossApp_CAAutoCollectionViewDelegate_prototype = JS_InitClass(
        cx, global,
        JS::NullPtr(), // parent proto
        jsb_CrossApp_CAAutoCollectionViewDelegate_class,
        dummy_constructor<CrossApp::CAAutoCollectionViewDelegate>, 0, // no constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27 
//  JS_SetPropertyAttributes(cx, global, "CAAutoCollectionViewDelegate", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::CAAutoCollectionViewDelegate> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_CAAutoCollectionViewDelegate_class;
        p->proto = jsb_CrossApp_CAAutoCollectionViewDelegate_prototype;
        p->parentProto = NULL;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
}

JSClass  *jsb_CrossApp_CAAutoCollectionViewDataSource_class;
JSObject *jsb_CrossApp_CAAutoCollectionViewDataSource_prototype;

bool js_autogentestbindings_js_CAAutoCollectionViewDataSource_numberOfItemsInSection(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAAutoCollectionViewDataSource* cobj = (CrossApp::CAAutoCollectionViewDataSource *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAAutoCollectionViewDataSource_numberOfItemsInSection : Invalid Native Object");
    if (argc == 2) {
        CrossApp::CAAutoCollectionView* arg0 = nullptr;
        unsigned int arg1 = 0;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAAutoCollectionView*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        ok &= jsval_to_uint32(cx, args.get(1), &arg1);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAAutoCollectionViewDataSource_numberOfItemsInSection : Error processing arguments");
        unsigned int ret = cobj->numberOfItemsInSection(arg0, arg1);
        jsval jsret = JSVAL_NULL;
        jsret = uint32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAAutoCollectionViewDataSource_numberOfItemsInSection : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_autogentestbindings_js_CAAutoCollectionViewDataSource_numberOfSections(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAAutoCollectionViewDataSource* cobj = (CrossApp::CAAutoCollectionViewDataSource *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAAutoCollectionViewDataSource_numberOfSections : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAAutoCollectionView* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAAutoCollectionView*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAAutoCollectionViewDataSource_numberOfSections : Error processing arguments");
        unsigned int ret = cobj->numberOfSections(arg0);
        jsval jsret = JSVAL_NULL;
        jsret = uint32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAAutoCollectionViewDataSource_numberOfSections : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAAutoCollectionViewDataSource_collectionViewHeightForHeaderInSection(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAAutoCollectionViewDataSource* cobj = (CrossApp::CAAutoCollectionViewDataSource *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAAutoCollectionViewDataSource_collectionViewHeightForHeaderInSection : Invalid Native Object");
    if (argc == 2) {
        CrossApp::CAAutoCollectionView* arg0 = nullptr;
        unsigned int arg1 = 0;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAAutoCollectionView*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        ok &= jsval_to_uint32(cx, args.get(1), &arg1);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAAutoCollectionViewDataSource_collectionViewHeightForHeaderInSection : Error processing arguments");
        unsigned int ret = cobj->collectionViewHeightForHeaderInSection(arg0, arg1);
        jsval jsret = JSVAL_NULL;
        jsret = uint32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAAutoCollectionViewDataSource_collectionViewHeightForHeaderInSection : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_autogentestbindings_js_CAAutoCollectionViewDataSource_collectionViewHeightForFooterInSection(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAAutoCollectionViewDataSource* cobj = (CrossApp::CAAutoCollectionViewDataSource *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAAutoCollectionViewDataSource_collectionViewHeightForFooterInSection : Invalid Native Object");
    if (argc == 2) {
        CrossApp::CAAutoCollectionView* arg0 = nullptr;
        unsigned int arg1 = 0;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAAutoCollectionView*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        ok &= jsval_to_uint32(cx, args.get(1), &arg1);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAAutoCollectionViewDataSource_collectionViewHeightForFooterInSection : Error processing arguments");
        unsigned int ret = cobj->collectionViewHeightForFooterInSection(arg0, arg1);
        jsval jsret = JSVAL_NULL;
        jsret = uint32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAAutoCollectionViewDataSource_collectionViewHeightForFooterInSection : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_autogentestbindings_js_CAAutoCollectionViewDataSource_collectionViewSectionViewForHeaderInSection(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAAutoCollectionViewDataSource* cobj = (CrossApp::CAAutoCollectionViewDataSource *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAAutoCollectionViewDataSource_collectionViewSectionViewForHeaderInSection : Invalid Native Object");
    if (argc == 3) {
        CrossApp::CAAutoCollectionView* arg0 = nullptr;
        CrossApp::DSize arg1;
        unsigned int arg2 = 0;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAAutoCollectionView*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        ok &= jsval_to_dsize(cx, args.get(1), &arg1);
        ok &= jsval_to_uint32(cx, args.get(2), &arg2);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAAutoCollectionViewDataSource_collectionViewSectionViewForHeaderInSection : Error processing arguments");
        CrossApp::CAView* ret = cobj->collectionViewSectionViewForHeaderInSection(arg0, arg1, arg2);
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAView>(cx, (CrossApp::CAView*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAAutoCollectionViewDataSource_collectionViewSectionViewForHeaderInSection : wrong number of arguments: %d, was expecting %d", argc, 3);
    return false;
}
bool js_autogentestbindings_js_CAAutoCollectionViewDataSource_collectionViewWillDisplayCellAtIndex(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAAutoCollectionViewDataSource* cobj = (CrossApp::CAAutoCollectionViewDataSource *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAAutoCollectionViewDataSource_collectionViewWillDisplayCellAtIndex : Invalid Native Object");
    if (argc == 4) {
        CrossApp::CAAutoCollectionView* arg0 = nullptr;
        CrossApp::CACollectionViewCell* arg1 = nullptr;
        unsigned int arg2 = 0;
        unsigned int arg3 = 0;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAAutoCollectionView*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        do {
            if (args.get(1).isNull()) { arg1 = nullptr; break; }
            if (!args.get(1).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(1).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg1 = (CrossApp::CACollectionViewCell*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg1, cx, false, "Invalid Native Object");
        } while (0);
        ok &= jsval_to_uint32(cx, args.get(2), &arg2);
        ok &= jsval_to_uint32(cx, args.get(3), &arg3);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAAutoCollectionViewDataSource_collectionViewWillDisplayCellAtIndex : Error processing arguments");
        cobj->collectionViewWillDisplayCellAtIndex(arg0, arg1, arg2, arg3);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAAutoCollectionViewDataSource_collectionViewWillDisplayCellAtIndex : wrong number of arguments: %d, was expecting %d", argc, 4);
    return false;
}
bool js_autogentestbindings_js_CAAutoCollectionViewDataSource_collectionViewSizeForItemAtIndexPath(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAAutoCollectionViewDataSource* cobj = (CrossApp::CAAutoCollectionViewDataSource *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAAutoCollectionViewDataSource_collectionViewSizeForItemAtIndexPath : Invalid Native Object");
    if (argc == 3) {
        CrossApp::CAAutoCollectionView* arg0 = nullptr;
        unsigned int arg1 = 0;
        unsigned int arg2 = 0;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAAutoCollectionView*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        ok &= jsval_to_uint32(cx, args.get(1), &arg1);
        ok &= jsval_to_uint32(cx, args.get(2), &arg2);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAAutoCollectionViewDataSource_collectionViewSizeForItemAtIndexPath : Error processing arguments");
        CrossApp::DSize ret = cobj->collectionViewSizeForItemAtIndexPath(arg0, arg1, arg2);
        jsval jsret = JSVAL_NULL;
        jsret = dsize_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAAutoCollectionViewDataSource_collectionViewSizeForItemAtIndexPath : wrong number of arguments: %d, was expecting %d", argc, 3);
    return false;
}
bool js_autogentestbindings_js_CAAutoCollectionViewDataSource_collectionViewSectionViewForFooterInSection(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAAutoCollectionViewDataSource* cobj = (CrossApp::CAAutoCollectionViewDataSource *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAAutoCollectionViewDataSource_collectionViewSectionViewForFooterInSection : Invalid Native Object");
    if (argc == 3) {
        CrossApp::CAAutoCollectionView* arg0 = nullptr;
        CrossApp::DSize arg1;
        unsigned int arg2 = 0;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAAutoCollectionView*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        ok &= jsval_to_dsize(cx, args.get(1), &arg1);
        ok &= jsval_to_uint32(cx, args.get(2), &arg2);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAAutoCollectionViewDataSource_collectionViewSectionViewForFooterInSection : Error processing arguments");
        CrossApp::CAView* ret = cobj->collectionViewSectionViewForFooterInSection(arg0, arg1, arg2);
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAView>(cx, (CrossApp::CAView*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAAutoCollectionViewDataSource_collectionViewSectionViewForFooterInSection : wrong number of arguments: %d, was expecting %d", argc, 3);
    return false;
}
bool js_autogentestbindings_js_CAAutoCollectionViewDataSource_collectionCellAtIndex(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAAutoCollectionViewDataSource* cobj = (CrossApp::CAAutoCollectionViewDataSource *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAAutoCollectionViewDataSource_collectionCellAtIndex : Invalid Native Object");
    if (argc == 4) {
        CrossApp::CAAutoCollectionView* arg0 = nullptr;
        CrossApp::DSize arg1;
        unsigned int arg2 = 0;
        unsigned int arg3 = 0;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAAutoCollectionView*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        ok &= jsval_to_dsize(cx, args.get(1), &arg1);
        ok &= jsval_to_uint32(cx, args.get(2), &arg2);
        ok &= jsval_to_uint32(cx, args.get(3), &arg3);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAAutoCollectionViewDataSource_collectionCellAtIndex : Error processing arguments");
        CrossApp::CACollectionViewCell* ret = cobj->collectionCellAtIndex(arg0, arg1, arg2, arg3);
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CACollectionViewCell>(cx, (CrossApp::CACollectionViewCell*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAAutoCollectionViewDataSource_collectionCellAtIndex : wrong number of arguments: %d, was expecting %d", argc, 4);
    return false;
}

void js_CrossApp_CAAutoCollectionViewDataSource_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOGINFO("jsbindings: finalizing JS object %p (CAAutoCollectionViewDataSource)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::CAAutoCollectionViewDataSource *nobj = static_cast<CrossApp::CAAutoCollectionViewDataSource *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
void js_register_autogentestbindings_js_CAAutoCollectionViewDataSource(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_CAAutoCollectionViewDataSource_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_CAAutoCollectionViewDataSource_class->name = "CAAutoCollectionViewDataSource";
    jsb_CrossApp_CAAutoCollectionViewDataSource_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_CAAutoCollectionViewDataSource_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_CAAutoCollectionViewDataSource_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_CAAutoCollectionViewDataSource_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_CAAutoCollectionViewDataSource_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_CAAutoCollectionViewDataSource_class->resolve = JS_ResolveStub;
    jsb_CrossApp_CAAutoCollectionViewDataSource_class->convert = JS_ConvertStub;
    jsb_CrossApp_CAAutoCollectionViewDataSource_class->finalize = js_CrossApp_CAAutoCollectionViewDataSource_finalize;
    jsb_CrossApp_CAAutoCollectionViewDataSource_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("numberOfItemsInSection", js_autogentestbindings_js_CAAutoCollectionViewDataSource_numberOfItemsInSection, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("numberOfSections", js_autogentestbindings_js_CAAutoCollectionViewDataSource_numberOfSections, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("collectionViewHeightForHeaderInSection", js_autogentestbindings_js_CAAutoCollectionViewDataSource_collectionViewHeightForHeaderInSection, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("collectionViewHeightForFooterInSection", js_autogentestbindings_js_CAAutoCollectionViewDataSource_collectionViewHeightForFooterInSection, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("collectionViewSectionViewForHeaderInSection", js_autogentestbindings_js_CAAutoCollectionViewDataSource_collectionViewSectionViewForHeaderInSection, 3, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("collectionViewWillDisplayCellAtIndex", js_autogentestbindings_js_CAAutoCollectionViewDataSource_collectionViewWillDisplayCellAtIndex, 4, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("collectionViewSizeForItemAtIndexPath", js_autogentestbindings_js_CAAutoCollectionViewDataSource_collectionViewSizeForItemAtIndexPath, 3, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("collectionViewSectionViewForFooterInSection", js_autogentestbindings_js_CAAutoCollectionViewDataSource_collectionViewSectionViewForFooterInSection, 3, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("collectionCellAtIndex", js_autogentestbindings_js_CAAutoCollectionViewDataSource_collectionCellAtIndex, 4, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    JSFunctionSpec *st_funcs = NULL;

    jsb_CrossApp_CAAutoCollectionViewDataSource_prototype = JS_InitClass(
        cx, global,
        JS::NullPtr(), // parent proto
        jsb_CrossApp_CAAutoCollectionViewDataSource_class,
        dummy_constructor<CrossApp::CAAutoCollectionViewDataSource>, 0, // no constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27 
//  JS_SetPropertyAttributes(cx, global, "CAAutoCollectionViewDataSource", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::CAAutoCollectionViewDataSource> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_CAAutoCollectionViewDataSource_class;
        p->proto = jsb_CrossApp_CAAutoCollectionViewDataSource_prototype;
        p->parentProto = NULL;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
}

JSClass  *jsb_CrossApp_CAAutoCollectionView_class;
JSObject *jsb_CrossApp_CAAutoCollectionView_prototype;

bool js_autogentestbindings_js_CAAutoCollectionView_setCollectionFooterHeight(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAAutoCollectionView* cobj = (CrossApp::CAAutoCollectionView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAAutoCollectionView_setCollectionFooterHeight : Invalid Native Object");
    if (argc == 1) {
        unsigned int arg0 = 0;
        ok &= jsval_to_uint32(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAAutoCollectionView_setCollectionFooterHeight : Error processing arguments");
        cobj->setCollectionFooterHeight(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAAutoCollectionView_setCollectionFooterHeight : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAAutoCollectionView_mouseMovedOutSide(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAAutoCollectionView* cobj = (CrossApp::CAAutoCollectionView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAAutoCollectionView_mouseMovedOutSide : Invalid Native Object");
    if (argc == 2) {
        CrossApp::CATouch* arg0 = nullptr;
        CrossApp::CAEvent* arg1 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CATouch*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        do {
            if (args.get(1).isNull()) { arg1 = nullptr; break; }
            if (!args.get(1).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(1).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg1 = (CrossApp::CAEvent*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg1, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAAutoCollectionView_mouseMovedOutSide : Error processing arguments");
        cobj->mouseMovedOutSide(arg0, arg1);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAAutoCollectionView_mouseMovedOutSide : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_autogentestbindings_js_CAAutoCollectionView_isAllowsSelection(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAAutoCollectionView* cobj = (CrossApp::CAAutoCollectionView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAAutoCollectionView_isAllowsSelection : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->isAllowsSelection();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAAutoCollectionView_isAllowsSelection : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAAutoCollectionView_getCellVertAlign(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAAutoCollectionView* cobj = (CrossApp::CAAutoCollectionView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAAutoCollectionView_getCellVertAlign : Invalid Native Object");
    if (argc == 0) {
        int ret = (int)cobj->getCellVertAlign();
        jsval jsret = JSVAL_NULL;
        jsret = int32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAAutoCollectionView_getCellVertAlign : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAAutoCollectionView_ccTouchBegan(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAAutoCollectionView* cobj = (CrossApp::CAAutoCollectionView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAAutoCollectionView_ccTouchBegan : Invalid Native Object");
    if (argc == 2) {
        CrossApp::CATouch* arg0 = nullptr;
        CrossApp::CAEvent* arg1 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CATouch*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        do {
            if (args.get(1).isNull()) { arg1 = nullptr; break; }
            if (!args.get(1).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(1).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg1 = (CrossApp::CAEvent*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg1, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAAutoCollectionView_ccTouchBegan : Error processing arguments");
        bool ret = cobj->ccTouchBegan(arg0, arg1);
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAAutoCollectionView_ccTouchBegan : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_autogentestbindings_js_CAAutoCollectionView_setCollectionHeaderView(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAAutoCollectionView* cobj = (CrossApp::CAAutoCollectionView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAAutoCollectionView_setCollectionHeaderView : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAView* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAView*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAAutoCollectionView_setCollectionHeaderView : Error processing arguments");
        cobj->setCollectionHeaderView(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAAutoCollectionView_setCollectionHeaderView : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAAutoCollectionView_getOrientation(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAAutoCollectionView* cobj = (CrossApp::CAAutoCollectionView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAAutoCollectionView_getOrientation : Invalid Native Object");
    if (argc == 0) {
        int ret = (int)cobj->getOrientation();
        jsval jsret = JSVAL_NULL;
        jsret = int32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAAutoCollectionView_getOrientation : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAAutoCollectionView_setCollectionFooterView(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAAutoCollectionView* cobj = (CrossApp::CAAutoCollectionView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAAutoCollectionView_setCollectionFooterView : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAView* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAView*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAAutoCollectionView_setCollectionFooterView : Error processing arguments");
        cobj->setCollectionFooterView(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAAutoCollectionView_setCollectionFooterView : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAAutoCollectionView_getCollectionFooterView(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAAutoCollectionView* cobj = (CrossApp::CAAutoCollectionView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAAutoCollectionView_getCollectionFooterView : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CAView* ret = cobj->getCollectionFooterView();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAView>(cx, (CrossApp::CAView*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAAutoCollectionView_getCollectionFooterView : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAAutoCollectionView_setHoriCellInterval(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAAutoCollectionView* cobj = (CrossApp::CAAutoCollectionView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAAutoCollectionView_setHoriCellInterval : Invalid Native Object");
    if (argc == 1) {
        unsigned int arg0 = 0;
        ok &= jsval_to_uint32(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAAutoCollectionView_setHoriCellInterval : Error processing arguments");
        cobj->setHoriCellInterval(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAAutoCollectionView_setHoriCellInterval : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAAutoCollectionView_getCellHoriAlign(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAAutoCollectionView* cobj = (CrossApp::CAAutoCollectionView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAAutoCollectionView_getCellHoriAlign : Invalid Native Object");
    if (argc == 0) {
        int ret = (int)cobj->getCellHoriAlign();
        jsval jsret = JSVAL_NULL;
        jsret = int32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAAutoCollectionView_getCellHoriAlign : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAAutoCollectionView_getVertMargins(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAAutoCollectionView* cobj = (CrossApp::CAAutoCollectionView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAAutoCollectionView_getVertMargins : Invalid Native Object");
    if (argc == 0) {
        unsigned int ret = cobj->getVertMargins();
        jsval jsret = JSVAL_NULL;
        jsret = uint32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAAutoCollectionView_getVertMargins : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAAutoCollectionView_isAlwaysBottomSectionFooter(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAAutoCollectionView* cobj = (CrossApp::CAAutoCollectionView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAAutoCollectionView_isAlwaysBottomSectionFooter : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->isAlwaysBottomSectionFooter();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAAutoCollectionView_isAlwaysBottomSectionFooter : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAAutoCollectionView_setCollectionViewDelegate(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAAutoCollectionView* cobj = (CrossApp::CAAutoCollectionView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAAutoCollectionView_setCollectionViewDelegate : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAAutoCollectionViewDelegate* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAAutoCollectionViewDelegate*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAAutoCollectionView_setCollectionViewDelegate : Error processing arguments");
        cobj->setCollectionViewDelegate(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAAutoCollectionView_setCollectionViewDelegate : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAAutoCollectionView_mouseMoved(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAAutoCollectionView* cobj = (CrossApp::CAAutoCollectionView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAAutoCollectionView_mouseMoved : Invalid Native Object");
    if (argc == 2) {
        CrossApp::CATouch* arg0 = nullptr;
        CrossApp::CAEvent* arg1 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CATouch*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        do {
            if (args.get(1).isNull()) { arg1 = nullptr; break; }
            if (!args.get(1).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(1).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg1 = (CrossApp::CAEvent*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg1, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAAutoCollectionView_mouseMoved : Error processing arguments");
        cobj->mouseMoved(arg0, arg1);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAAutoCollectionView_mouseMoved : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_autogentestbindings_js_CAAutoCollectionView_setCellHoriAlign(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAAutoCollectionView* cobj = (CrossApp::CAAutoCollectionView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAAutoCollectionView_setCellHoriAlign : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAAutoCollectionView::CellHoriAlign arg0;
        ok &= jsval_to_int32(cx, args.get(0), (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAAutoCollectionView_setCellHoriAlign : Error processing arguments");
        cobj->setCellHoriAlign(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAAutoCollectionView_setCellHoriAlign : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAAutoCollectionView_setSelectRowAtIndexPath(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAAutoCollectionView* cobj = (CrossApp::CAAutoCollectionView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAAutoCollectionView_setSelectRowAtIndexPath : Invalid Native Object");
    if (argc == 2) {
        unsigned int arg0 = 0;
        unsigned int arg1 = 0;
        ok &= jsval_to_uint32(cx, args.get(0), &arg0);
        ok &= jsval_to_uint32(cx, args.get(1), &arg1);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAAutoCollectionView_setSelectRowAtIndexPath : Error processing arguments");
        cobj->setSelectRowAtIndexPath(arg0, arg1);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAAutoCollectionView_setSelectRowAtIndexPath : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_autogentestbindings_js_CAAutoCollectionView_init(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAAutoCollectionView* cobj = (CrossApp::CAAutoCollectionView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAAutoCollectionView_init : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->init();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAAutoCollectionView_init : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAAutoCollectionView_getHoriCellInterval(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAAutoCollectionView* cobj = (CrossApp::CAAutoCollectionView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAAutoCollectionView_getHoriCellInterval : Invalid Native Object");
    if (argc == 0) {
        unsigned int ret = cobj->getHoriCellInterval();
        jsval jsret = JSVAL_NULL;
        jsret = uint32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAAutoCollectionView_getHoriCellInterval : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAAutoCollectionView_isAllowsMultipleSelection(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAAutoCollectionView* cobj = (CrossApp::CAAutoCollectionView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAAutoCollectionView_isAllowsMultipleSelection : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->isAllowsMultipleSelection();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAAutoCollectionView_isAllowsMultipleSelection : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAAutoCollectionView_setVertMargins(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAAutoCollectionView* cobj = (CrossApp::CAAutoCollectionView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAAutoCollectionView_setVertMargins : Invalid Native Object");
    if (argc == 1) {
        unsigned int arg0 = 0;
        ok &= jsval_to_uint32(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAAutoCollectionView_setVertMargins : Error processing arguments");
        cobj->setVertMargins(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAAutoCollectionView_setVertMargins : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAAutoCollectionView_setAllowsSelection(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAAutoCollectionView* cobj = (CrossApp::CAAutoCollectionView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAAutoCollectionView_setAllowsSelection : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        arg0 = JS::ToBoolean(args.get(0));
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAAutoCollectionView_setAllowsSelection : Error processing arguments");
        cobj->setAllowsSelection(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAAutoCollectionView_setAllowsSelection : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAAutoCollectionView_reloadData(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAAutoCollectionView* cobj = (CrossApp::CAAutoCollectionView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAAutoCollectionView_reloadData : Invalid Native Object");
    if (argc == 0) {
        cobj->reloadData();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAAutoCollectionView_reloadData : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAAutoCollectionView_setAllowsMultipleSelection(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAAutoCollectionView* cobj = (CrossApp::CAAutoCollectionView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAAutoCollectionView_setAllowsMultipleSelection : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        arg0 = JS::ToBoolean(args.get(0));
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAAutoCollectionView_setAllowsMultipleSelection : Error processing arguments");
        cobj->setAllowsMultipleSelection(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAAutoCollectionView_setAllowsMultipleSelection : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAAutoCollectionView_getCollectionHeaderView(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAAutoCollectionView* cobj = (CrossApp::CAAutoCollectionView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAAutoCollectionView_getCollectionHeaderView : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CAView* ret = cobj->getCollectionHeaderView();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAView>(cx, (CrossApp::CAView*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAAutoCollectionView_getCollectionHeaderView : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAAutoCollectionView_setCollectionViewDataSource(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAAutoCollectionView* cobj = (CrossApp::CAAutoCollectionView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAAutoCollectionView_setCollectionViewDataSource : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAAutoCollectionViewDataSource* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAAutoCollectionViewDataSource*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAAutoCollectionView_setCollectionViewDataSource : Error processing arguments");
        cobj->setCollectionViewDataSource(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAAutoCollectionView_setCollectionViewDataSource : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAAutoCollectionView_setAlwaysTopSectionHeader(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAAutoCollectionView* cobj = (CrossApp::CAAutoCollectionView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAAutoCollectionView_setAlwaysTopSectionHeader : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        arg0 = JS::ToBoolean(args.get(0));
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAAutoCollectionView_setAlwaysTopSectionHeader : Error processing arguments");
        cobj->setAlwaysTopSectionHeader(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAAutoCollectionView_setAlwaysTopSectionHeader : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAAutoCollectionView_setShowsScrollIndicators(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAAutoCollectionView* cobj = (CrossApp::CAAutoCollectionView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAAutoCollectionView_setShowsScrollIndicators : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        arg0 = JS::ToBoolean(args.get(0));
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAAutoCollectionView_setShowsScrollIndicators : Error processing arguments");
        cobj->setShowsScrollIndicators(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAAutoCollectionView_setShowsScrollIndicators : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAAutoCollectionView_cellForRowAtIndexPath(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAAutoCollectionView* cobj = (CrossApp::CAAutoCollectionView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAAutoCollectionView_cellForRowAtIndexPath : Invalid Native Object");
    if (argc == 3) {
        unsigned int arg0 = 0;
        unsigned int arg1 = 0;
        unsigned int arg2 = 0;
        ok &= jsval_to_uint32(cx, args.get(0), &arg0);
        ok &= jsval_to_uint32(cx, args.get(1), &arg1);
        ok &= jsval_to_uint32(cx, args.get(2), &arg2);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAAutoCollectionView_cellForRowAtIndexPath : Error processing arguments");
        CrossApp::CACollectionViewCell* ret = cobj->cellForRowAtIndexPath(arg0, arg1, arg2);
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CACollectionViewCell>(cx, (CrossApp::CACollectionViewCell*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAAutoCollectionView_cellForRowAtIndexPath : wrong number of arguments: %d, was expecting %d", argc, 3);
    return false;
}
bool js_autogentestbindings_js_CAAutoCollectionView_displayingCollectionCell(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAAutoCollectionView* cobj = (CrossApp::CAAutoCollectionView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAAutoCollectionView_displayingCollectionCell : Invalid Native Object");
    if (argc == 0) {
        const CrossApp::CAVector<CrossApp::CACollectionViewCell *>& ret = cobj->displayingCollectionCell();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAVector<CrossApp::CACollectionViewCell >&>(cx, (CrossApp::CAVector<CrossApp::CACollectionViewCell *>&)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAAutoCollectionView_displayingCollectionCell : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAAutoCollectionView_getCollectionViewDataSource(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAAutoCollectionView* cobj = (CrossApp::CAAutoCollectionView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAAutoCollectionView_getCollectionViewDataSource : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CAAutoCollectionViewDataSource* ret = cobj->getCollectionViewDataSource();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAAutoCollectionViewDataSource>(cx, (CrossApp::CAAutoCollectionViewDataSource*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAAutoCollectionView_getCollectionViewDataSource : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAAutoCollectionView_ccTouchMoved(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAAutoCollectionView* cobj = (CrossApp::CAAutoCollectionView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAAutoCollectionView_ccTouchMoved : Invalid Native Object");
    if (argc == 2) {
        CrossApp::CATouch* arg0 = nullptr;
        CrossApp::CAEvent* arg1 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CATouch*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        do {
            if (args.get(1).isNull()) { arg1 = nullptr; break; }
            if (!args.get(1).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(1).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg1 = (CrossApp::CAEvent*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg1, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAAutoCollectionView_ccTouchMoved : Error processing arguments");
        cobj->ccTouchMoved(arg0, arg1);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAAutoCollectionView_ccTouchMoved : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_autogentestbindings_js_CAAutoCollectionView_setAlwaysBottomSectionFooter(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAAutoCollectionView* cobj = (CrossApp::CAAutoCollectionView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAAutoCollectionView_setAlwaysBottomSectionFooter : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        arg0 = JS::ToBoolean(args.get(0));
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAAutoCollectionView_setAlwaysBottomSectionFooter : Error processing arguments");
        cobj->setAlwaysBottomSectionFooter(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAAutoCollectionView_setAlwaysBottomSectionFooter : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAAutoCollectionView_onExitTransitionDidStart(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAAutoCollectionView* cobj = (CrossApp::CAAutoCollectionView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAAutoCollectionView_onExitTransitionDidStart : Invalid Native Object");
    if (argc == 0) {
        cobj->onExitTransitionDidStart();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAAutoCollectionView_onExitTransitionDidStart : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAAutoCollectionView_setCellVertAlign(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAAutoCollectionView* cobj = (CrossApp::CAAutoCollectionView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAAutoCollectionView_setCellVertAlign : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAAutoCollectionView::CellVertAlign arg0;
        ok &= jsval_to_int32(cx, args.get(0), (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAAutoCollectionView_setCellVertAlign : Error processing arguments");
        cobj->setCellVertAlign(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAAutoCollectionView_setCellVertAlign : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAAutoCollectionView_isAlwaysTopSectionHeader(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAAutoCollectionView* cobj = (CrossApp::CAAutoCollectionView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAAutoCollectionView_isAlwaysTopSectionHeader : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->isAlwaysTopSectionHeader();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAAutoCollectionView_isAlwaysTopSectionHeader : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAAutoCollectionView_getCollectionHeaderHeight(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAAutoCollectionView* cobj = (CrossApp::CAAutoCollectionView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAAutoCollectionView_getCollectionHeaderHeight : Invalid Native Object");
    if (argc == 0) {
        unsigned int ret = cobj->getCollectionHeaderHeight();
        jsval jsret = JSVAL_NULL;
        jsret = uint32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAAutoCollectionView_getCollectionHeaderHeight : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAAutoCollectionView_setOrientation(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAAutoCollectionView* cobj = (CrossApp::CAAutoCollectionView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAAutoCollectionView_setOrientation : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAAutoCollectionView::Orientation arg0;
        ok &= jsval_to_int32(cx, args.get(0), (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAAutoCollectionView_setOrientation : Error processing arguments");
        cobj->setOrientation(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAAutoCollectionView_setOrientation : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAAutoCollectionView_getCollectionViewDelegate(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAAutoCollectionView* cobj = (CrossApp::CAAutoCollectionView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAAutoCollectionView_getCollectionViewDelegate : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CAAutoCollectionViewDelegate* ret = cobj->getCollectionViewDelegate();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAAutoCollectionViewDelegate>(cx, (CrossApp::CAAutoCollectionViewDelegate*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAAutoCollectionView_getCollectionViewDelegate : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAAutoCollectionView_getVertCellInterval(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAAutoCollectionView* cobj = (CrossApp::CAAutoCollectionView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAAutoCollectionView_getVertCellInterval : Invalid Native Object");
    if (argc == 0) {
        unsigned int ret = cobj->getVertCellInterval();
        jsval jsret = JSVAL_NULL;
        jsret = uint32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAAutoCollectionView_getVertCellInterval : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAAutoCollectionView_ccTouchEnded(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAAutoCollectionView* cobj = (CrossApp::CAAutoCollectionView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAAutoCollectionView_ccTouchEnded : Invalid Native Object");
    if (argc == 2) {
        CrossApp::CATouch* arg0 = nullptr;
        CrossApp::CAEvent* arg1 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CATouch*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        do {
            if (args.get(1).isNull()) { arg1 = nullptr; break; }
            if (!args.get(1).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(1).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg1 = (CrossApp::CAEvent*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg1, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAAutoCollectionView_ccTouchEnded : Error processing arguments");
        cobj->ccTouchEnded(arg0, arg1);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAAutoCollectionView_ccTouchEnded : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_autogentestbindings_js_CAAutoCollectionView_getCollectionFooterHeight(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAAutoCollectionView* cobj = (CrossApp::CAAutoCollectionView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAAutoCollectionView_getCollectionFooterHeight : Invalid Native Object");
    if (argc == 0) {
        unsigned int ret = cobj->getCollectionFooterHeight();
        jsval jsret = JSVAL_NULL;
        jsret = uint32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAAutoCollectionView_getCollectionFooterHeight : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAAutoCollectionView_ccTouchCancelled(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAAutoCollectionView* cobj = (CrossApp::CAAutoCollectionView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAAutoCollectionView_ccTouchCancelled : Invalid Native Object");
    if (argc == 2) {
        CrossApp::CATouch* arg0 = nullptr;
        CrossApp::CAEvent* arg1 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CATouch*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        do {
            if (args.get(1).isNull()) { arg1 = nullptr; break; }
            if (!args.get(1).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(1).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg1 = (CrossApp::CAEvent*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg1, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAAutoCollectionView_ccTouchCancelled : Error processing arguments");
        cobj->ccTouchCancelled(arg0, arg1);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAAutoCollectionView_ccTouchCancelled : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_autogentestbindings_js_CAAutoCollectionView_setHoriMargins(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAAutoCollectionView* cobj = (CrossApp::CAAutoCollectionView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAAutoCollectionView_setHoriMargins : Invalid Native Object");
    if (argc == 1) {
        unsigned int arg0 = 0;
        ok &= jsval_to_uint32(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAAutoCollectionView_setHoriMargins : Error processing arguments");
        cobj->setHoriMargins(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAAutoCollectionView_setHoriMargins : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAAutoCollectionView_setCollectionHeaderHeight(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAAutoCollectionView* cobj = (CrossApp::CAAutoCollectionView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAAutoCollectionView_setCollectionHeaderHeight : Invalid Native Object");
    if (argc == 1) {
        unsigned int arg0 = 0;
        ok &= jsval_to_uint32(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAAutoCollectionView_setCollectionHeaderHeight : Error processing arguments");
        cobj->setCollectionHeaderHeight(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAAutoCollectionView_setCollectionHeaderHeight : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAAutoCollectionView_setUnSelectRowAtIndexPath(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAAutoCollectionView* cobj = (CrossApp::CAAutoCollectionView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAAutoCollectionView_setUnSelectRowAtIndexPath : Invalid Native Object");
    if (argc == 2) {
        unsigned int arg0 = 0;
        unsigned int arg1 = 0;
        ok &= jsval_to_uint32(cx, args.get(0), &arg0);
        ok &= jsval_to_uint32(cx, args.get(1), &arg1);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAAutoCollectionView_setUnSelectRowAtIndexPath : Error processing arguments");
        cobj->setUnSelectRowAtIndexPath(arg0, arg1);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAAutoCollectionView_setUnSelectRowAtIndexPath : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_autogentestbindings_js_CAAutoCollectionView_getHighlightCollectionCell(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAAutoCollectionView* cobj = (CrossApp::CAAutoCollectionView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAAutoCollectionView_getHighlightCollectionCell : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CACollectionViewCell* ret = cobj->getHighlightCollectionCell();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CACollectionViewCell>(cx, (CrossApp::CACollectionViewCell*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAAutoCollectionView_getHighlightCollectionCell : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAAutoCollectionView_setVertCellInterval(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAAutoCollectionView* cobj = (CrossApp::CAAutoCollectionView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAAutoCollectionView_setVertCellInterval : Invalid Native Object");
    if (argc == 1) {
        unsigned int arg0 = 0;
        ok &= jsval_to_uint32(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAAutoCollectionView_setVertCellInterval : Error processing arguments");
        cobj->setVertCellInterval(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAAutoCollectionView_setVertCellInterval : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAAutoCollectionView_switchPCMode(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAAutoCollectionView* cobj = (CrossApp::CAAutoCollectionView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAAutoCollectionView_switchPCMode : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        arg0 = JS::ToBoolean(args.get(0));
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAAutoCollectionView_switchPCMode : Error processing arguments");
        cobj->switchPCMode(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAAutoCollectionView_switchPCMode : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAAutoCollectionView_getHoriMargins(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAAutoCollectionView* cobj = (CrossApp::CAAutoCollectionView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAAutoCollectionView_getHoriMargins : Invalid Native Object");
    if (argc == 0) {
        unsigned int ret = cobj->getHoriMargins();
        jsval jsret = JSVAL_NULL;
        jsret = uint32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAAutoCollectionView_getHoriMargins : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAAutoCollectionView_dequeueReusableCellWithIdentifier(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAAutoCollectionView* cobj = (CrossApp::CAAutoCollectionView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAAutoCollectionView_dequeueReusableCellWithIdentifier : Invalid Native Object");
    if (argc == 1) {
        const char* arg0 = nullptr;
        std::string arg0_tmp; ok &= jsval_to_std_string(cx, args.get(0), &arg0_tmp); arg0 = arg0_tmp.c_str();
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAAutoCollectionView_dequeueReusableCellWithIdentifier : Error processing arguments");
        CrossApp::CACollectionViewCell* ret = cobj->dequeueReusableCellWithIdentifier(arg0);
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CACollectionViewCell>(cx, (CrossApp::CACollectionViewCell*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAAutoCollectionView_dequeueReusableCellWithIdentifier : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAAutoCollectionView_onEnterTransitionDidFinish(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAAutoCollectionView* cobj = (CrossApp::CAAutoCollectionView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAAutoCollectionView_onEnterTransitionDidFinish : Invalid Native Object");
    if (argc == 0) {
        cobj->onEnterTransitionDidFinish();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAAutoCollectionView_onEnterTransitionDidFinish : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAAutoCollectionView_createWithFrame(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        CrossApp::DRect arg0;
        ok &= jsval_to_drect(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAAutoCollectionView_createWithFrame : Error processing arguments");
        CrossApp::CAAutoCollectionView* ret = CrossApp::CAAutoCollectionView::createWithFrame(arg0);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAAutoCollectionView>(cx, (CrossApp::CAAutoCollectionView*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_autogentestbindings_js_CAAutoCollectionView_createWithFrame : wrong number of arguments");
    return false;
}

bool js_autogentestbindings_js_CAAutoCollectionView_createWithLayout(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        CrossApp::DRectLayout arg0;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (const CrossApp::DRectLayout&)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAAutoCollectionView_createWithLayout : Error processing arguments");
        CrossApp::CAAutoCollectionView* ret = CrossApp::CAAutoCollectionView::createWithLayout(arg0);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAAutoCollectionView>(cx, (CrossApp::CAAutoCollectionView*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_autogentestbindings_js_CAAutoCollectionView_createWithLayout : wrong number of arguments");
    return false;
}

bool js_autogentestbindings_js_CAAutoCollectionView_createWithCenter(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        CrossApp::DRect arg0;
        ok &= jsval_to_drect(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAAutoCollectionView_createWithCenter : Error processing arguments");
        CrossApp::CAAutoCollectionView* ret = CrossApp::CAAutoCollectionView::createWithCenter(arg0);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAAutoCollectionView>(cx, (CrossApp::CAAutoCollectionView*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_autogentestbindings_js_CAAutoCollectionView_createWithCenter : wrong number of arguments");
    return false;
}

bool js_autogentestbindings_js_CAAutoCollectionView_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    CrossApp::CAAutoCollectionView* cobj = new (std::nothrow) CrossApp::CAAutoCollectionView();
    TypeTest<CrossApp::CAAutoCollectionView> t;
    js_type_class_t *typeClass = nullptr;
    std::string typeName = t.s_name();
    auto typeMapIter = _js_global_type_map.find(typeName);
    CCAssert(typeMapIter != _js_global_type_map.end(), "Can't find the class type!");
    typeClass = typeMapIter->second;
    CCAssert(typeClass, "The value is null.");
    JS::RootedObject proto(cx, typeClass->proto.get());
    JS::RootedObject parent(cx, typeClass->parentProto.get());
    JS::RootedObject obj(cx, JS_NewObject(cx, typeClass->jsclass, proto, parent));
    args.rval().set(OBJECT_TO_JSVAL(obj));
    // link the native object with the javascript object
    js_proxy_t* p = jsb_new_proxy(cobj, obj);
    if (JS_HasProperty(cx, obj, "_ctor", &ok) && ok)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    return true;
}

extern JSObject *jsb_CrossApp_CAScrollView_prototype;

void js_CrossApp_CAAutoCollectionView_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOGINFO("jsbindings: finalizing JS object %p (CAAutoCollectionView)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::CAAutoCollectionView *nobj = static_cast<CrossApp::CAAutoCollectionView *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
void js_register_autogentestbindings_js_CAAutoCollectionView(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_CAAutoCollectionView_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_CAAutoCollectionView_class->name = "CAAutoCollectionView";
    jsb_CrossApp_CAAutoCollectionView_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_CAAutoCollectionView_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_CAAutoCollectionView_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_CAAutoCollectionView_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_CAAutoCollectionView_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_CAAutoCollectionView_class->resolve = JS_ResolveStub;
    jsb_CrossApp_CAAutoCollectionView_class->convert = JS_ConvertStub;
    jsb_CrossApp_CAAutoCollectionView_class->finalize = js_CrossApp_CAAutoCollectionView_finalize;
    jsb_CrossApp_CAAutoCollectionView_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("setCollectionFooterHeight", js_autogentestbindings_js_CAAutoCollectionView_setCollectionFooterHeight, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("mouseMovedOutSide", js_autogentestbindings_js_CAAutoCollectionView_mouseMovedOutSide, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isAllowsSelection", js_autogentestbindings_js_CAAutoCollectionView_isAllowsSelection, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getCellVertAlign", js_autogentestbindings_js_CAAutoCollectionView_getCellVertAlign, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("ccTouchBegan", js_autogentestbindings_js_CAAutoCollectionView_ccTouchBegan, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setCollectionHeaderView", js_autogentestbindings_js_CAAutoCollectionView_setCollectionHeaderView, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getOrientation", js_autogentestbindings_js_CAAutoCollectionView_getOrientation, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setCollectionFooterView", js_autogentestbindings_js_CAAutoCollectionView_setCollectionFooterView, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getCollectionFooterView", js_autogentestbindings_js_CAAutoCollectionView_getCollectionFooterView, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setHoriCellInterval", js_autogentestbindings_js_CAAutoCollectionView_setHoriCellInterval, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getCellHoriAlign", js_autogentestbindings_js_CAAutoCollectionView_getCellHoriAlign, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getVertMargins", js_autogentestbindings_js_CAAutoCollectionView_getVertMargins, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isAlwaysBottomSectionFooter", js_autogentestbindings_js_CAAutoCollectionView_isAlwaysBottomSectionFooter, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setCollectionViewDelegate", js_autogentestbindings_js_CAAutoCollectionView_setCollectionViewDelegate, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("mouseMoved", js_autogentestbindings_js_CAAutoCollectionView_mouseMoved, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setCellHoriAlign", js_autogentestbindings_js_CAAutoCollectionView_setCellHoriAlign, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setSelectRowAtIndexPath", js_autogentestbindings_js_CAAutoCollectionView_setSelectRowAtIndexPath, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("init", js_autogentestbindings_js_CAAutoCollectionView_init, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getHoriCellInterval", js_autogentestbindings_js_CAAutoCollectionView_getHoriCellInterval, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isAllowsMultipleSelection", js_autogentestbindings_js_CAAutoCollectionView_isAllowsMultipleSelection, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setVertMargins", js_autogentestbindings_js_CAAutoCollectionView_setVertMargins, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setAllowsSelection", js_autogentestbindings_js_CAAutoCollectionView_setAllowsSelection, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("reloadData", js_autogentestbindings_js_CAAutoCollectionView_reloadData, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setAllowsMultipleSelection", js_autogentestbindings_js_CAAutoCollectionView_setAllowsMultipleSelection, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getCollectionHeaderView", js_autogentestbindings_js_CAAutoCollectionView_getCollectionHeaderView, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setCollectionViewDataSource", js_autogentestbindings_js_CAAutoCollectionView_setCollectionViewDataSource, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setAlwaysTopSectionHeader", js_autogentestbindings_js_CAAutoCollectionView_setAlwaysTopSectionHeader, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setShowsScrollIndicators", js_autogentestbindings_js_CAAutoCollectionView_setShowsScrollIndicators, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("cellForRowAtIndexPath", js_autogentestbindings_js_CAAutoCollectionView_cellForRowAtIndexPath, 3, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("displayingCollectionCell", js_autogentestbindings_js_CAAutoCollectionView_displayingCollectionCell, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getCollectionViewDataSource", js_autogentestbindings_js_CAAutoCollectionView_getCollectionViewDataSource, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("ccTouchMoved", js_autogentestbindings_js_CAAutoCollectionView_ccTouchMoved, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setAlwaysBottomSectionFooter", js_autogentestbindings_js_CAAutoCollectionView_setAlwaysBottomSectionFooter, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("onExitTransitionDidStart", js_autogentestbindings_js_CAAutoCollectionView_onExitTransitionDidStart, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setCellVertAlign", js_autogentestbindings_js_CAAutoCollectionView_setCellVertAlign, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isAlwaysTopSectionHeader", js_autogentestbindings_js_CAAutoCollectionView_isAlwaysTopSectionHeader, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getCollectionHeaderHeight", js_autogentestbindings_js_CAAutoCollectionView_getCollectionHeaderHeight, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setOrientation", js_autogentestbindings_js_CAAutoCollectionView_setOrientation, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getCollectionViewDelegate", js_autogentestbindings_js_CAAutoCollectionView_getCollectionViewDelegate, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getVertCellInterval", js_autogentestbindings_js_CAAutoCollectionView_getVertCellInterval, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("ccTouchEnded", js_autogentestbindings_js_CAAutoCollectionView_ccTouchEnded, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getCollectionFooterHeight", js_autogentestbindings_js_CAAutoCollectionView_getCollectionFooterHeight, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("ccTouchCancelled", js_autogentestbindings_js_CAAutoCollectionView_ccTouchCancelled, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setHoriMargins", js_autogentestbindings_js_CAAutoCollectionView_setHoriMargins, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setCollectionHeaderHeight", js_autogentestbindings_js_CAAutoCollectionView_setCollectionHeaderHeight, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setUnSelectRowAtIndexPath", js_autogentestbindings_js_CAAutoCollectionView_setUnSelectRowAtIndexPath, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getHighlightCollectionCell", js_autogentestbindings_js_CAAutoCollectionView_getHighlightCollectionCell, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setVertCellInterval", js_autogentestbindings_js_CAAutoCollectionView_setVertCellInterval, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("switchPCMode", js_autogentestbindings_js_CAAutoCollectionView_switchPCMode, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getHoriMargins", js_autogentestbindings_js_CAAutoCollectionView_getHoriMargins, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("dequeueReusableCellWithIdentifier", js_autogentestbindings_js_CAAutoCollectionView_dequeueReusableCellWithIdentifier, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("onEnterTransitionDidFinish", js_autogentestbindings_js_CAAutoCollectionView_onEnterTransitionDidFinish, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    static JSFunctionSpec st_funcs[] = {
        JS_FN("createWithFrame", js_autogentestbindings_js_CAAutoCollectionView_createWithFrame, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("createWithLayout", js_autogentestbindings_js_CAAutoCollectionView_createWithLayout, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("createWithCenter", js_autogentestbindings_js_CAAutoCollectionView_createWithCenter, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    jsb_CrossApp_CAAutoCollectionView_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_CAScrollView_prototype),
        jsb_CrossApp_CAAutoCollectionView_class,
        js_autogentestbindings_js_CAAutoCollectionView_constructor, 0, // constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27 
//  JS_SetPropertyAttributes(cx, global, "CAAutoCollectionView", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::CAAutoCollectionView> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_CAAutoCollectionView_class;
        p->proto = jsb_CrossApp_CAAutoCollectionView_prototype;
        p->parentProto = jsb_CrossApp_CAScrollView_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
}

JSClass  *jsb_CrossApp_CAAlertView_class;
JSObject *jsb_CrossApp_CAAlertView_prototype;

bool js_autogentestbindings_js_CAAlertView_setAlertMessage(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAAlertView* cobj = (CrossApp::CAAlertView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAAlertView_setAlertMessage : Invalid Native Object");
    if (argc == 1) {
        std::string arg0;
        ok &= jsval_to_std_string(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAAlertView_setAlertMessage : Error processing arguments");
        cobj->setAlertMessage(arg0);
        args.rval().setUndefined();
        return true;
    }
    if (argc == 2) {
        std::string arg0;
        CrossApp::CAColor4B arg1;
        ok &= jsval_to_std_string(cx, args.get(0), &arg0);
        ok &= jsval_to_cacolor4b(cx, args.get(1), &arg1);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAAlertView_setAlertMessage : Error processing arguments");
        cobj->setAlertMessage(arg0, arg1);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAAlertView_setAlertMessage : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAAlertView_hide(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAAlertView* cobj = (CrossApp::CAAlertView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAAlertView_hide : Invalid Native Object");
    if (argc == 0) {
        cobj->hide();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAAlertView_hide : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAAlertView_show(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAAlertView* cobj = (CrossApp::CAAlertView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAAlertView_show : Invalid Native Object");
    if (argc == 0) {
        cobj->show();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAAlertView_show : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAAlertView_setTitle(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAAlertView* cobj = (CrossApp::CAAlertView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAAlertView_setTitle : Invalid Native Object");
    if (argc == 1) {
        std::string arg0;
        ok &= jsval_to_std_string(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAAlertView_setTitle : Error processing arguments");
        cobj->setTitle(arg0);
        args.rval().setUndefined();
        return true;
    }
    if (argc == 2) {
        std::string arg0;
        CrossApp::CAColor4B arg1;
        ok &= jsval_to_std_string(cx, args.get(0), &arg0);
        ok &= jsval_to_cacolor4b(cx, args.get(1), &arg1);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAAlertView_setTitle : Error processing arguments");
        cobj->setTitle(arg0, arg1);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAAlertView_setTitle : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAAlertView_addButton(JSContext *cx, uint32_t argc, jsval *vp)
{
    bool ok = true;
    CrossApp::CAAlertView* cobj = nullptr;

    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx);
    obj = args.thisv().toObjectOrNull();
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    cobj = (CrossApp::CAAlertView *)(proxy ? proxy->ptr : nullptr);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAAlertView_addButton : Invalid Native Object");
    do {
        if (argc == 1) {
            CrossApp::CAButton* arg0 = nullptr;
            do {
                if (args.get(0).isNull()) { arg0 = nullptr; break; }
                if (!args.get(0).isObject()) { ok = false; break; }
                js_proxy_t *jsProxy;
                JSObject *tmpObj = args.get(0).toObjectOrNull();
                jsProxy = jsb_get_js_proxy(tmpObj);
                arg0 = (CrossApp::CAButton*)(jsProxy ? jsProxy->ptr : NULL);
                JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
            } while (0);
            if (!ok) { ok = true; break; }
            cobj->addButton(arg0);
            args.rval().setUndefined();
            return true;
        }
    } while(0);

    do {
        if (argc == 1) {
            std::string arg0;
            ok &= jsval_to_std_string(cx, args.get(0), &arg0);
            if (!ok) { ok = true; break; }
            cobj->addButton(arg0);
            args.rval().setUndefined();
            return true;
        }
    } while(0);

    do {
        if (argc == 2) {
            std::string arg0;
            ok &= jsval_to_std_string(cx, args.get(0), &arg0);
            if (!ok) { ok = true; break; }
            CrossApp::CAColor4B arg1;
            ok &= jsval_to_cacolor4b(cx, args.get(1), &arg1);
            if (!ok) { ok = true; break; }
            cobj->addButton(arg0, arg1);
            args.rval().setUndefined();
            return true;
        }
    } while(0);

    do {
        if (argc == 3) {
            std::string arg0;
            ok &= jsval_to_std_string(cx, args.get(0), &arg0);
            if (!ok) { ok = true; break; }
            CrossApp::CAColor4B arg1;
            ok &= jsval_to_cacolor4b(cx, args.get(1), &arg1);
            if (!ok) { ok = true; break; }
            CrossApp::CAImage* arg2 = nullptr;
            do {
                if (args.get(2).isNull()) { arg2 = nullptr; break; }
                if (!args.get(2).isObject()) { ok = false; break; }
                js_proxy_t *jsProxy;
                JSObject *tmpObj = args.get(2).toObjectOrNull();
                jsProxy = jsb_get_js_proxy(tmpObj);
                arg2 = (CrossApp::CAImage*)(jsProxy ? jsProxy->ptr : NULL);
                JSB_PRECONDITION2( arg2, cx, false, "Invalid Native Object");
            } while (0);
            if (!ok) { ok = true; break; }
            cobj->addButton(arg0, arg1, arg2);
            args.rval().setUndefined();
            return true;
        }
    } while(0);

    do {
        if (argc == 4) {
            std::string arg0;
            ok &= jsval_to_std_string(cx, args.get(0), &arg0);
            if (!ok) { ok = true; break; }
            CrossApp::CAColor4B arg1;
            ok &= jsval_to_cacolor4b(cx, args.get(1), &arg1);
            if (!ok) { ok = true; break; }
            CrossApp::CAImage* arg2 = nullptr;
            do {
                if (args.get(2).isNull()) { arg2 = nullptr; break; }
                if (!args.get(2).isObject()) { ok = false; break; }
                js_proxy_t *jsProxy;
                JSObject *tmpObj = args.get(2).toObjectOrNull();
                jsProxy = jsb_get_js_proxy(tmpObj);
                arg2 = (CrossApp::CAImage*)(jsProxy ? jsProxy->ptr : NULL);
                JSB_PRECONDITION2( arg2, cx, false, "Invalid Native Object");
            } while (0);
            if (!ok) { ok = true; break; }
            CrossApp::CAImage* arg3 = nullptr;
            do {
                if (args.get(3).isNull()) { arg3 = nullptr; break; }
                if (!args.get(3).isObject()) { ok = false; break; }
                js_proxy_t *jsProxy;
                JSObject *tmpObj = args.get(3).toObjectOrNull();
                jsProxy = jsb_get_js_proxy(tmpObj);
                arg3 = (CrossApp::CAImage*)(jsProxy ? jsProxy->ptr : NULL);
                JSB_PRECONDITION2( arg3, cx, false, "Invalid Native Object");
            } while (0);
            if (!ok) { ok = true; break; }
            cobj->addButton(arg0, arg1, arg2, arg3);
            args.rval().setUndefined();
            return true;
        }
    } while(0);

    JS_ReportError(cx, "js_autogentestbindings_js_CAAlertView_addButton : wrong number of arguments");
    return false;
}
bool js_autogentestbindings_js_CAAlertView_setMessageFontName(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAAlertView* cobj = (CrossApp::CAAlertView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAAlertView_setMessageFontName : Invalid Native Object");
    if (argc == 1) {
        std::string arg0;
        ok &= jsval_to_std_string(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAAlertView_setMessageFontName : Error processing arguments");
        cobj->setMessageFontName(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAAlertView_setMessageFontName : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAAlertView_create(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    if (argc == 0) {
        CrossApp::CAAlertView* ret = CrossApp::CAAlertView::create();
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAAlertView>(cx, (CrossApp::CAAlertView*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_autogentestbindings_js_CAAlertView_create : wrong number of arguments");
    return false;
}

bool js_autogentestbindings_js_CAAlertView_hideWithDisplayed(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    if (argc == 0) {
        bool ret = CrossApp::CAAlertView::hideWithDisplayed();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_autogentestbindings_js_CAAlertView_hideWithDisplayed : wrong number of arguments");
    return false;
}

bool js_autogentestbindings_js_CAAlertView_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    CrossApp::CAAlertView* cobj = new (std::nothrow) CrossApp::CAAlertView();
    TypeTest<CrossApp::CAAlertView> t;
    js_type_class_t *typeClass = nullptr;
    std::string typeName = t.s_name();
    auto typeMapIter = _js_global_type_map.find(typeName);
    CCAssert(typeMapIter != _js_global_type_map.end(), "Can't find the class type!");
    typeClass = typeMapIter->second;
    CCAssert(typeClass, "The value is null.");
    JS::RootedObject proto(cx, typeClass->proto.get());
    JS::RootedObject parent(cx, typeClass->parentProto.get());
    JS::RootedObject obj(cx, JS_NewObject(cx, typeClass->jsclass, proto, parent));
    args.rval().set(OBJECT_TO_JSVAL(obj));
    // link the native object with the javascript object
    js_proxy_t* p = jsb_new_proxy(cobj, obj);
    if (JS_HasProperty(cx, obj, "_ctor", &ok) && ok)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    return true;
}

extern JSObject *jsb_CrossApp_CAView_prototype;

void js_CrossApp_CAAlertView_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOGINFO("jsbindings: finalizing JS object %p (CAAlertView)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::CAAlertView *nobj = static_cast<CrossApp::CAAlertView *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
void js_register_autogentestbindings_js_CAAlertView(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_CAAlertView_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_CAAlertView_class->name = "CAAlertView";
    jsb_CrossApp_CAAlertView_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_CAAlertView_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_CAAlertView_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_CAAlertView_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_CAAlertView_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_CAAlertView_class->resolve = JS_ResolveStub;
    jsb_CrossApp_CAAlertView_class->convert = JS_ConvertStub;
    jsb_CrossApp_CAAlertView_class->finalize = js_CrossApp_CAAlertView_finalize;
    jsb_CrossApp_CAAlertView_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("setAlertMessage", js_autogentestbindings_js_CAAlertView_setAlertMessage, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("hide", js_autogentestbindings_js_CAAlertView_hide, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("show", js_autogentestbindings_js_CAAlertView_show, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setTitle", js_autogentestbindings_js_CAAlertView_setTitle, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("addButton", js_autogentestbindings_js_CAAlertView_addButton, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setMessageFontName", js_autogentestbindings_js_CAAlertView_setMessageFontName, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    static JSFunctionSpec st_funcs[] = {
        JS_FN("create", js_autogentestbindings_js_CAAlertView_create, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("hideWithDisplayed", js_autogentestbindings_js_CAAlertView_hideWithDisplayed, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    jsb_CrossApp_CAAlertView_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_CAView_prototype),
        jsb_CrossApp_CAAlertView_class,
        js_autogentestbindings_js_CAAlertView_constructor, 0, // constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27 
//  JS_SetPropertyAttributes(cx, global, "CAAlertView", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::CAAlertView> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_CAAlertView_class;
        p->proto = jsb_CrossApp_CAAlertView_prototype;
        p->parentProto = jsb_CrossApp_CAView_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
}

JSClass  *jsb_CrossApp_CAPickerViewDelegate_class;
JSObject *jsb_CrossApp_CAPickerViewDelegate_prototype;

bool js_autogentestbindings_js_CAPickerViewDelegate_didSelectRow(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAPickerViewDelegate* cobj = (CrossApp::CAPickerViewDelegate *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAPickerViewDelegate_didSelectRow : Invalid Native Object");
    if (argc == 3) {
        CrossApp::CAPickerView* arg0 = nullptr;
        unsigned int arg1 = 0;
        unsigned int arg2 = 0;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAPickerView*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        ok &= jsval_to_uint32(cx, args.get(1), &arg1);
        ok &= jsval_to_uint32(cx, args.get(2), &arg2);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAPickerViewDelegate_didSelectRow : Error processing arguments");
        cobj->didSelectRow(arg0, arg1, arg2);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAPickerViewDelegate_didSelectRow : wrong number of arguments: %d, was expecting %d", argc, 3);
    return false;
}

void js_CrossApp_CAPickerViewDelegate_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOGINFO("jsbindings: finalizing JS object %p (CAPickerViewDelegate)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::CAPickerViewDelegate *nobj = static_cast<CrossApp::CAPickerViewDelegate *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
void js_register_autogentestbindings_js_CAPickerViewDelegate(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_CAPickerViewDelegate_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_CAPickerViewDelegate_class->name = "CAPickerViewDelegate";
    jsb_CrossApp_CAPickerViewDelegate_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_CAPickerViewDelegate_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_CAPickerViewDelegate_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_CAPickerViewDelegate_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_CAPickerViewDelegate_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_CAPickerViewDelegate_class->resolve = JS_ResolveStub;
    jsb_CrossApp_CAPickerViewDelegate_class->convert = JS_ConvertStub;
    jsb_CrossApp_CAPickerViewDelegate_class->finalize = js_CrossApp_CAPickerViewDelegate_finalize;
    jsb_CrossApp_CAPickerViewDelegate_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("didSelectRow", js_autogentestbindings_js_CAPickerViewDelegate_didSelectRow, 3, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    JSFunctionSpec *st_funcs = NULL;

    jsb_CrossApp_CAPickerViewDelegate_prototype = JS_InitClass(
        cx, global,
        JS::NullPtr(), // parent proto
        jsb_CrossApp_CAPickerViewDelegate_class,
        dummy_constructor<CrossApp::CAPickerViewDelegate>, 0, // no constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27 
//  JS_SetPropertyAttributes(cx, global, "CAPickerViewDelegate", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::CAPickerViewDelegate> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_CAPickerViewDelegate_class;
        p->proto = jsb_CrossApp_CAPickerViewDelegate_prototype;
        p->parentProto = NULL;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
}

JSClass  *jsb_CrossApp_CAPickerViewDataSource_class;
JSObject *jsb_CrossApp_CAPickerViewDataSource_prototype;

bool js_autogentestbindings_js_CAPickerViewDataSource_numberOfComponentsInPickerView(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAPickerViewDataSource* cobj = (CrossApp::CAPickerViewDataSource *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAPickerViewDataSource_numberOfComponentsInPickerView : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAPickerView* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAPickerView*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAPickerViewDataSource_numberOfComponentsInPickerView : Error processing arguments");
        unsigned int ret = cobj->numberOfComponentsInPickerView(arg0);
        jsval jsret = JSVAL_NULL;
        jsret = uint32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAPickerViewDataSource_numberOfComponentsInPickerView : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAPickerViewDataSource_numberOfRowsInComponent(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAPickerViewDataSource* cobj = (CrossApp::CAPickerViewDataSource *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAPickerViewDataSource_numberOfRowsInComponent : Invalid Native Object");
    if (argc == 2) {
        CrossApp::CAPickerView* arg0 = nullptr;
        unsigned int arg1 = 0;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAPickerView*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        ok &= jsval_to_uint32(cx, args.get(1), &arg1);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAPickerViewDataSource_numberOfRowsInComponent : Error processing arguments");
        unsigned int ret = cobj->numberOfRowsInComponent(arg0, arg1);
        jsval jsret = JSVAL_NULL;
        jsret = uint32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAPickerViewDataSource_numberOfRowsInComponent : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_autogentestbindings_js_CAPickerViewDataSource_viewForSelect(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAPickerViewDataSource* cobj = (CrossApp::CAPickerViewDataSource *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAPickerViewDataSource_viewForSelect : Invalid Native Object");
    if (argc == 3) {
        CrossApp::CAPickerView* arg0 = nullptr;
        unsigned int arg1 = 0;
        CrossApp::DSize arg2;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAPickerView*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        ok &= jsval_to_uint32(cx, args.get(1), &arg1);
        ok &= jsval_to_dsize(cx, args.get(2), &arg2);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAPickerViewDataSource_viewForSelect : Error processing arguments");
        CrossApp::CAView* ret = cobj->viewForSelect(arg0, arg1, arg2);
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAView>(cx, (CrossApp::CAView*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAPickerViewDataSource_viewForSelect : wrong number of arguments: %d, was expecting %d", argc, 3);
    return false;
}
bool js_autogentestbindings_js_CAPickerViewDataSource_viewForRow(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAPickerViewDataSource* cobj = (CrossApp::CAPickerViewDataSource *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAPickerViewDataSource_viewForRow : Invalid Native Object");
    if (argc == 3) {
        CrossApp::CAPickerView* arg0 = nullptr;
        unsigned int arg1 = 0;
        unsigned int arg2 = 0;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAPickerView*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        ok &= jsval_to_uint32(cx, args.get(1), &arg1);
        ok &= jsval_to_uint32(cx, args.get(2), &arg2);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAPickerViewDataSource_viewForRow : Error processing arguments");
        CrossApp::CAView* ret = cobj->viewForRow(arg0, arg1, arg2);
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAView>(cx, (CrossApp::CAView*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAPickerViewDataSource_viewForRow : wrong number of arguments: %d, was expecting %d", argc, 3);
    return false;
}
bool js_autogentestbindings_js_CAPickerViewDataSource_widthForComponent(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAPickerViewDataSource* cobj = (CrossApp::CAPickerViewDataSource *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAPickerViewDataSource_widthForComponent : Invalid Native Object");
    if (argc == 2) {
        CrossApp::CAPickerView* arg0 = nullptr;
        unsigned int arg1 = 0;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAPickerView*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        ok &= jsval_to_uint32(cx, args.get(1), &arg1);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAPickerViewDataSource_widthForComponent : Error processing arguments");
        double ret = cobj->widthForComponent(arg0, arg1);
        jsval jsret = JSVAL_NULL;
        jsret = DOUBLE_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAPickerViewDataSource_widthForComponent : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_autogentestbindings_js_CAPickerViewDataSource_titleForRow(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAPickerViewDataSource* cobj = (CrossApp::CAPickerViewDataSource *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAPickerViewDataSource_titleForRow : Invalid Native Object");
    if (argc == 3) {
        CrossApp::CAPickerView* arg0 = nullptr;
        unsigned int arg1 = 0;
        unsigned int arg2 = 0;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAPickerView*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        ok &= jsval_to_uint32(cx, args.get(1), &arg1);
        ok &= jsval_to_uint32(cx, args.get(2), &arg2);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAPickerViewDataSource_titleForRow : Error processing arguments");
        const char* ret = cobj->titleForRow(arg0, arg1, arg2);
        jsval jsret = JSVAL_NULL;
        jsret = c_string_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAPickerViewDataSource_titleForRow : wrong number of arguments: %d, was expecting %d", argc, 3);
    return false;
}
bool js_autogentestbindings_js_CAPickerViewDataSource_rowHeightForComponent(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAPickerViewDataSource* cobj = (CrossApp::CAPickerViewDataSource *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAPickerViewDataSource_rowHeightForComponent : Invalid Native Object");
    if (argc == 2) {
        CrossApp::CAPickerView* arg0 = nullptr;
        unsigned int arg1 = 0;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAPickerView*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        ok &= jsval_to_uint32(cx, args.get(1), &arg1);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAPickerViewDataSource_rowHeightForComponent : Error processing arguments");
        double ret = cobj->rowHeightForComponent(arg0, arg1);
        jsval jsret = JSVAL_NULL;
        jsret = DOUBLE_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAPickerViewDataSource_rowHeightForComponent : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}

void js_CrossApp_CAPickerViewDataSource_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOGINFO("jsbindings: finalizing JS object %p (CAPickerViewDataSource)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::CAPickerViewDataSource *nobj = static_cast<CrossApp::CAPickerViewDataSource *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
void js_register_autogentestbindings_js_CAPickerViewDataSource(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_CAPickerViewDataSource_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_CAPickerViewDataSource_class->name = "CAPickerViewDataSource";
    jsb_CrossApp_CAPickerViewDataSource_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_CAPickerViewDataSource_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_CAPickerViewDataSource_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_CAPickerViewDataSource_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_CAPickerViewDataSource_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_CAPickerViewDataSource_class->resolve = JS_ResolveStub;
    jsb_CrossApp_CAPickerViewDataSource_class->convert = JS_ConvertStub;
    jsb_CrossApp_CAPickerViewDataSource_class->finalize = js_CrossApp_CAPickerViewDataSource_finalize;
    jsb_CrossApp_CAPickerViewDataSource_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("numberOfComponentsInPickerView", js_autogentestbindings_js_CAPickerViewDataSource_numberOfComponentsInPickerView, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("numberOfRowsInComponent", js_autogentestbindings_js_CAPickerViewDataSource_numberOfRowsInComponent, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("viewForSelect", js_autogentestbindings_js_CAPickerViewDataSource_viewForSelect, 3, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("viewForRow", js_autogentestbindings_js_CAPickerViewDataSource_viewForRow, 3, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("widthForComponent", js_autogentestbindings_js_CAPickerViewDataSource_widthForComponent, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("titleForRow", js_autogentestbindings_js_CAPickerViewDataSource_titleForRow, 3, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("rowHeightForComponent", js_autogentestbindings_js_CAPickerViewDataSource_rowHeightForComponent, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    JSFunctionSpec *st_funcs = NULL;

    jsb_CrossApp_CAPickerViewDataSource_prototype = JS_InitClass(
        cx, global,
        JS::NullPtr(), // parent proto
        jsb_CrossApp_CAPickerViewDataSource_class,
        dummy_constructor<CrossApp::CAPickerViewDataSource>, 0, // no constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27 
//  JS_SetPropertyAttributes(cx, global, "CAPickerViewDataSource", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::CAPickerViewDataSource> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_CAPickerViewDataSource_class;
        p->proto = jsb_CrossApp_CAPickerViewDataSource_prototype;
        p->parentProto = NULL;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
}

JSClass  *jsb_CrossApp_CAPickerView_class;
JSObject *jsb_CrossApp_CAPickerView_prototype;

bool js_autogentestbindings_js_CAPickerView_setFontSizeNormal(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAPickerView* cobj = (CrossApp::CAPickerView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAPickerView_setFontSizeNormal : Invalid Native Object");
    if (argc == 1) {
        double arg0 = 0;
        ok &= JS::ToNumber( cx, args.get(0), &arg0) && !isnan(arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAPickerView_setFontSizeNormal : Error processing arguments");
        cobj->setFontSizeNormal(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAPickerView_setFontSizeNormal : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAPickerView_getFontSizeNormal(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAPickerView* cobj = (CrossApp::CAPickerView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAPickerView_getFontSizeNormal : Invalid Native Object");
    if (argc == 0) {
        double ret = cobj->getFontSizeNormal();
        jsval jsret = JSVAL_NULL;
        jsret = DOUBLE_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAPickerView_getFontSizeNormal : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAPickerView_getPickerViewDataSource(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAPickerView* cobj = (CrossApp::CAPickerView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAPickerView_getPickerViewDataSource : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CAPickerViewDataSource* ret = cobj->getPickerViewDataSource();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAPickerViewDataSource>(cx, (CrossApp::CAPickerViewDataSource*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAPickerView_getPickerViewDataSource : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAPickerView_reloadAllComponents(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAPickerView* cobj = (CrossApp::CAPickerView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAPickerView_reloadAllComponents : Invalid Native Object");
    if (argc == 0) {
        cobj->reloadAllComponents();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAPickerView_reloadAllComponents : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAPickerView_getPickerViewDelegate(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAPickerView* cobj = (CrossApp::CAPickerView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAPickerView_getPickerViewDelegate : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CAPickerViewDelegate* ret = cobj->getPickerViewDelegate();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAPickerViewDelegate>(cx, (CrossApp::CAPickerViewDelegate*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAPickerView_getPickerViewDelegate : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAPickerView_getFontSizeSelected(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAPickerView* cobj = (CrossApp::CAPickerView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAPickerView_getFontSizeSelected : Invalid Native Object");
    if (argc == 0) {
        double ret = cobj->getFontSizeSelected();
        jsval jsret = JSVAL_NULL;
        jsret = DOUBLE_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAPickerView_getFontSizeSelected : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAPickerView_init(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAPickerView* cobj = (CrossApp::CAPickerView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAPickerView_init : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->init();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAPickerView_init : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAPickerView_reloadComponent(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAPickerView* cobj = (CrossApp::CAPickerView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAPickerView_reloadComponent : Invalid Native Object");
    if (argc == 2) {
        unsigned int arg0 = 0;
        unsigned int arg1 = 0;
        ok &= jsval_to_uint32(cx, args.get(0), &arg0);
        ok &= jsval_to_uint32(cx, args.get(1), &arg1);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAPickerView_reloadComponent : Error processing arguments");
        cobj->reloadComponent(arg0, arg1);
        args.rval().setUndefined();
        return true;
    }
    if (argc == 3) {
        unsigned int arg0 = 0;
        unsigned int arg1 = 0;
        bool arg2;
        ok &= jsval_to_uint32(cx, args.get(0), &arg0);
        ok &= jsval_to_uint32(cx, args.get(1), &arg1);
        arg2 = JS::ToBoolean(args.get(2));
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAPickerView_reloadComponent : Error processing arguments");
        cobj->reloadComponent(arg0, arg1, arg2);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAPickerView_reloadComponent : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_autogentestbindings_js_CAPickerView_getFontColorSelected(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAPickerView* cobj = (CrossApp::CAPickerView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAPickerView_getFontColorSelected : Invalid Native Object");
    if (argc == 0) {
        const CrossApp::CAColor4B& ret = cobj->getFontColorSelected();
        jsval jsret = JSVAL_NULL;
        jsret = cacolor4b_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAPickerView_getFontColorSelected : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAPickerView_visitEve(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAPickerView* cobj = (CrossApp::CAPickerView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAPickerView_visitEve : Invalid Native Object");
    if (argc == 0) {
        cobj->visitEve();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAPickerView_visitEve : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAPickerView_setBackgroundColor(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAPickerView* cobj = (CrossApp::CAPickerView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAPickerView_setBackgroundColor : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAColor4B arg0;
        ok &= jsval_to_cacolor4b(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAPickerView_setBackgroundColor : Error processing arguments");
        cobj->setBackgroundColor(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAPickerView_setBackgroundColor : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAPickerView_setFontColorNormal(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAPickerView* cobj = (CrossApp::CAPickerView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAPickerView_setFontColorNormal : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAColor4B arg0;
        ok &= jsval_to_cacolor4b(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAPickerView_setFontColorNormal : Error processing arguments");
        cobj->setFontColorNormal(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAPickerView_setFontColorNormal : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAPickerView_onExitTransitionDidStart(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAPickerView* cobj = (CrossApp::CAPickerView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAPickerView_onExitTransitionDidStart : Invalid Native Object");
    if (argc == 0) {
        cobj->onExitTransitionDidStart();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAPickerView_onExitTransitionDidStart : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAPickerView_numberOfRowsInComponent(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAPickerView* cobj = (CrossApp::CAPickerView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAPickerView_numberOfRowsInComponent : Invalid Native Object");
    if (argc == 1) {
        unsigned int arg0 = 0;
        ok &= jsval_to_uint32(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAPickerView_numberOfRowsInComponent : Error processing arguments");
        int ret = cobj->numberOfRowsInComponent(arg0);
        jsval jsret = JSVAL_NULL;
        jsret = int32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAPickerView_numberOfRowsInComponent : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAPickerView_getSeparateColor(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAPickerView* cobj = (CrossApp::CAPickerView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAPickerView_getSeparateColor : Invalid Native Object");
    if (argc == 0) {
        const CrossApp::CAColor4B& ret = cobj->getSeparateColor();
        jsval jsret = JSVAL_NULL;
        jsret = cacolor4b_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAPickerView_getSeparateColor : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAPickerView_selectRow(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAPickerView* cobj = (CrossApp::CAPickerView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAPickerView_selectRow : Invalid Native Object");
    if (argc == 2) {
        unsigned int arg0 = 0;
        unsigned int arg1 = 0;
        ok &= jsval_to_uint32(cx, args.get(0), &arg0);
        ok &= jsval_to_uint32(cx, args.get(1), &arg1);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAPickerView_selectRow : Error processing arguments");
        cobj->selectRow(arg0, arg1);
        args.rval().setUndefined();
        return true;
    }
    if (argc == 3) {
        unsigned int arg0 = 0;
        unsigned int arg1 = 0;
        bool arg2;
        ok &= jsval_to_uint32(cx, args.get(0), &arg0);
        ok &= jsval_to_uint32(cx, args.get(1), &arg1);
        arg2 = JS::ToBoolean(args.get(2));
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAPickerView_selectRow : Error processing arguments");
        cobj->selectRow(arg0, arg1, arg2);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAPickerView_selectRow : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_autogentestbindings_js_CAPickerView_setPickerViewDataSource(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAPickerView* cobj = (CrossApp::CAPickerView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAPickerView_setPickerViewDataSource : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAPickerViewDataSource* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAPickerViewDataSource*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAPickerView_setPickerViewDataSource : Error processing arguments");
        cobj->setPickerViewDataSource(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAPickerView_setPickerViewDataSource : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAPickerView_numberOfComponents(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAPickerView* cobj = (CrossApp::CAPickerView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAPickerView_numberOfComponents : Invalid Native Object");
    if (argc == 0) {
        int ret = cobj->numberOfComponents();
        jsval jsret = JSVAL_NULL;
        jsret = int32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAPickerView_numberOfComponents : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAPickerView_setFontColorSelected(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAPickerView* cobj = (CrossApp::CAPickerView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAPickerView_setFontColorSelected : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAColor4B arg0;
        ok &= jsval_to_cacolor4b(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAPickerView_setFontColorSelected : Error processing arguments");
        cobj->setFontColorSelected(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAPickerView_setFontColorSelected : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAPickerView_rowSizeForComponent(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAPickerView* cobj = (CrossApp::CAPickerView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAPickerView_rowSizeForComponent : Invalid Native Object");
    if (argc == 1) {
        unsigned int arg0 = 0;
        ok &= jsval_to_uint32(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAPickerView_rowSizeForComponent : Error processing arguments");
        CrossApp::DSize ret = cobj->rowSizeForComponent(arg0);
        jsval jsret = JSVAL_NULL;
        jsret = dsize_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAPickerView_rowSizeForComponent : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAPickerView_selectedRowInComponent(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAPickerView* cobj = (CrossApp::CAPickerView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAPickerView_selectedRowInComponent : Invalid Native Object");
    if (argc == 1) {
        unsigned int arg0 = 0;
        ok &= jsval_to_uint32(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAPickerView_selectedRowInComponent : Error processing arguments");
        int ret = cobj->selectedRowInComponent(arg0);
        jsval jsret = JSVAL_NULL;
        jsret = int32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAPickerView_selectedRowInComponent : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAPickerView_setSeparateColor(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAPickerView* cobj = (CrossApp::CAPickerView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAPickerView_setSeparateColor : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAColor4B arg0;
        ok &= jsval_to_cacolor4b(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAPickerView_setSeparateColor : Error processing arguments");
        cobj->setSeparateColor(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAPickerView_setSeparateColor : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAPickerView_setPickerViewDelegate(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAPickerView* cobj = (CrossApp::CAPickerView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAPickerView_setPickerViewDelegate : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAPickerViewDelegate* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAPickerViewDelegate*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAPickerView_setPickerViewDelegate : Error processing arguments");
        cobj->setPickerViewDelegate(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAPickerView_setPickerViewDelegate : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAPickerView_getFontColorNormal(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAPickerView* cobj = (CrossApp::CAPickerView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAPickerView_getFontColorNormal : Invalid Native Object");
    if (argc == 0) {
        const CrossApp::CAColor4B& ret = cobj->getFontColorNormal();
        jsval jsret = JSVAL_NULL;
        jsret = cacolor4b_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAPickerView_getFontColorNormal : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAPickerView_onEnterTransitionDidFinish(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAPickerView* cobj = (CrossApp::CAPickerView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAPickerView_onEnterTransitionDidFinish : Invalid Native Object");
    if (argc == 0) {
        cobj->onEnterTransitionDidFinish();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAPickerView_onEnterTransitionDidFinish : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAPickerView_viewForRow(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAPickerView* cobj = (CrossApp::CAPickerView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAPickerView_viewForRow : Invalid Native Object");
    if (argc == 2) {
        unsigned int arg0 = 0;
        unsigned int arg1 = 0;
        ok &= jsval_to_uint32(cx, args.get(0), &arg0);
        ok &= jsval_to_uint32(cx, args.get(1), &arg1);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAPickerView_viewForRow : Error processing arguments");
        CrossApp::CAView* ret = cobj->viewForRow(arg0, arg1);
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAView>(cx, (CrossApp::CAView*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAPickerView_viewForRow : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_autogentestbindings_js_CAPickerView_setFontSizeSelected(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAPickerView* cobj = (CrossApp::CAPickerView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAPickerView_setFontSizeSelected : Invalid Native Object");
    if (argc == 1) {
        double arg0 = 0;
        ok &= JS::ToNumber( cx, args.get(0), &arg0) && !isnan(arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAPickerView_setFontSizeSelected : Error processing arguments");
        cobj->setFontSizeSelected(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAPickerView_setFontSizeSelected : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAPickerView_create(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    if (argc == 0) {
        CrossApp::CAPickerView* ret = CrossApp::CAPickerView::create();
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAPickerView>(cx, (CrossApp::CAPickerView*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_autogentestbindings_js_CAPickerView_create : wrong number of arguments");
    return false;
}

bool js_autogentestbindings_js_CAPickerView_createWithFrame(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        CrossApp::DRect arg0;
        ok &= jsval_to_drect(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAPickerView_createWithFrame : Error processing arguments");
        CrossApp::CAPickerView* ret = CrossApp::CAPickerView::createWithFrame(arg0);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAPickerView>(cx, (CrossApp::CAPickerView*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_autogentestbindings_js_CAPickerView_createWithFrame : wrong number of arguments");
    return false;
}

bool js_autogentestbindings_js_CAPickerView_createWithLayout(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        CrossApp::DRectLayout arg0;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (const CrossApp::DRectLayout&)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAPickerView_createWithLayout : Error processing arguments");
        CrossApp::CAPickerView* ret = CrossApp::CAPickerView::createWithLayout(arg0);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAPickerView>(cx, (CrossApp::CAPickerView*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_autogentestbindings_js_CAPickerView_createWithLayout : wrong number of arguments");
    return false;
}

bool js_autogentestbindings_js_CAPickerView_createWithCenter(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        CrossApp::DRect arg0;
        ok &= jsval_to_drect(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAPickerView_createWithCenter : Error processing arguments");
        CrossApp::CAPickerView* ret = CrossApp::CAPickerView::createWithCenter(arg0);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAPickerView>(cx, (CrossApp::CAPickerView*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_autogentestbindings_js_CAPickerView_createWithCenter : wrong number of arguments");
    return false;
}

bool js_autogentestbindings_js_CAPickerView_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    CrossApp::CAPickerView* cobj = new (std::nothrow) CrossApp::CAPickerView();
    TypeTest<CrossApp::CAPickerView> t;
    js_type_class_t *typeClass = nullptr;
    std::string typeName = t.s_name();
    auto typeMapIter = _js_global_type_map.find(typeName);
    CCAssert(typeMapIter != _js_global_type_map.end(), "Can't find the class type!");
    typeClass = typeMapIter->second;
    CCAssert(typeClass, "The value is null.");
    JS::RootedObject proto(cx, typeClass->proto.get());
    JS::RootedObject parent(cx, typeClass->parentProto.get());
    JS::RootedObject obj(cx, JS_NewObject(cx, typeClass->jsclass, proto, parent));
    args.rval().set(OBJECT_TO_JSVAL(obj));
    // link the native object with the javascript object
    js_proxy_t* p = jsb_new_proxy(cobj, obj);
    if (JS_HasProperty(cx, obj, "_ctor", &ok) && ok)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    return true;
}

extern JSObject *jsb_CrossApp_CAView_prototype;

void js_CrossApp_CAPickerView_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOGINFO("jsbindings: finalizing JS object %p (CAPickerView)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::CAPickerView *nobj = static_cast<CrossApp::CAPickerView *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
void js_register_autogentestbindings_js_CAPickerView(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_CAPickerView_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_CAPickerView_class->name = "CAPickerView";
    jsb_CrossApp_CAPickerView_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_CAPickerView_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_CAPickerView_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_CAPickerView_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_CAPickerView_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_CAPickerView_class->resolve = JS_ResolveStub;
    jsb_CrossApp_CAPickerView_class->convert = JS_ConvertStub;
    jsb_CrossApp_CAPickerView_class->finalize = js_CrossApp_CAPickerView_finalize;
    jsb_CrossApp_CAPickerView_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("setFontSizeNormal", js_autogentestbindings_js_CAPickerView_setFontSizeNormal, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getFontSizeNormal", js_autogentestbindings_js_CAPickerView_getFontSizeNormal, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getPickerViewDataSource", js_autogentestbindings_js_CAPickerView_getPickerViewDataSource, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("reloadAllComponents", js_autogentestbindings_js_CAPickerView_reloadAllComponents, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getPickerViewDelegate", js_autogentestbindings_js_CAPickerView_getPickerViewDelegate, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getFontSizeSelected", js_autogentestbindings_js_CAPickerView_getFontSizeSelected, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("init", js_autogentestbindings_js_CAPickerView_init, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("reloadComponent", js_autogentestbindings_js_CAPickerView_reloadComponent, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getFontColorSelected", js_autogentestbindings_js_CAPickerView_getFontColorSelected, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("visitEve", js_autogentestbindings_js_CAPickerView_visitEve, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setBackgroundColor", js_autogentestbindings_js_CAPickerView_setBackgroundColor, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setFontColorNormal", js_autogentestbindings_js_CAPickerView_setFontColorNormal, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("onExitTransitionDidStart", js_autogentestbindings_js_CAPickerView_onExitTransitionDidStart, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("numberOfRowsInComponent", js_autogentestbindings_js_CAPickerView_numberOfRowsInComponent, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getSeparateColor", js_autogentestbindings_js_CAPickerView_getSeparateColor, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("selectRow", js_autogentestbindings_js_CAPickerView_selectRow, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setPickerViewDataSource", js_autogentestbindings_js_CAPickerView_setPickerViewDataSource, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("numberOfComponents", js_autogentestbindings_js_CAPickerView_numberOfComponents, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setFontColorSelected", js_autogentestbindings_js_CAPickerView_setFontColorSelected, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("rowSizeForComponent", js_autogentestbindings_js_CAPickerView_rowSizeForComponent, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("selectedRowInComponent", js_autogentestbindings_js_CAPickerView_selectedRowInComponent, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setSeparateColor", js_autogentestbindings_js_CAPickerView_setSeparateColor, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setPickerViewDelegate", js_autogentestbindings_js_CAPickerView_setPickerViewDelegate, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getFontColorNormal", js_autogentestbindings_js_CAPickerView_getFontColorNormal, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("onEnterTransitionDidFinish", js_autogentestbindings_js_CAPickerView_onEnterTransitionDidFinish, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("viewForRow", js_autogentestbindings_js_CAPickerView_viewForRow, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setFontSizeSelected", js_autogentestbindings_js_CAPickerView_setFontSizeSelected, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    static JSFunctionSpec st_funcs[] = {
        JS_FN("create", js_autogentestbindings_js_CAPickerView_create, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("createWithFrame", js_autogentestbindings_js_CAPickerView_createWithFrame, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("createWithLayout", js_autogentestbindings_js_CAPickerView_createWithLayout, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("createWithCenter", js_autogentestbindings_js_CAPickerView_createWithCenter, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    jsb_CrossApp_CAPickerView_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_CAView_prototype),
        jsb_CrossApp_CAPickerView_class,
        js_autogentestbindings_js_CAPickerView_constructor, 0, // constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27 
//  JS_SetPropertyAttributes(cx, global, "CAPickerView", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::CAPickerView> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_CAPickerView_class;
        p->proto = jsb_CrossApp_CAPickerView_prototype;
        p->parentProto = jsb_CrossApp_CAView_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
}

JSClass  *jsb_CrossApp_CADatePickerViewDelegate_class;
JSObject *jsb_CrossApp_CADatePickerViewDelegate_prototype;

bool js_autogentestbindings_js_CADatePickerViewDelegate_didSelectRow(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CADatePickerViewDelegate* cobj = (CrossApp::CADatePickerViewDelegate *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CADatePickerViewDelegate_didSelectRow : Invalid Native Object");
    if (argc == 1) {
        tm arg0;
        #pragma warning NO CONVERSION TO NATIVE FOR tm
		ok = false;
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CADatePickerViewDelegate_didSelectRow : Error processing arguments");
        cobj->didSelectRow(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CADatePickerViewDelegate_didSelectRow : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}

void js_CrossApp_CADatePickerViewDelegate_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOGINFO("jsbindings: finalizing JS object %p (CADatePickerViewDelegate)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::CADatePickerViewDelegate *nobj = static_cast<CrossApp::CADatePickerViewDelegate *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
void js_register_autogentestbindings_js_CADatePickerViewDelegate(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_CADatePickerViewDelegate_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_CADatePickerViewDelegate_class->name = "CADatePickerViewDelegate";
    jsb_CrossApp_CADatePickerViewDelegate_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_CADatePickerViewDelegate_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_CADatePickerViewDelegate_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_CADatePickerViewDelegate_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_CADatePickerViewDelegate_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_CADatePickerViewDelegate_class->resolve = JS_ResolveStub;
    jsb_CrossApp_CADatePickerViewDelegate_class->convert = JS_ConvertStub;
    jsb_CrossApp_CADatePickerViewDelegate_class->finalize = js_CrossApp_CADatePickerViewDelegate_finalize;
    jsb_CrossApp_CADatePickerViewDelegate_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("didSelectRow", js_autogentestbindings_js_CADatePickerViewDelegate_didSelectRow, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    JSFunctionSpec *st_funcs = NULL;

    jsb_CrossApp_CADatePickerViewDelegate_prototype = JS_InitClass(
        cx, global,
        JS::NullPtr(), // parent proto
        jsb_CrossApp_CADatePickerViewDelegate_class,
        dummy_constructor<CrossApp::CADatePickerViewDelegate>, 0, // no constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27 
//  JS_SetPropertyAttributes(cx, global, "CADatePickerViewDelegate", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::CADatePickerViewDelegate> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_CADatePickerViewDelegate_class;
        p->proto = jsb_CrossApp_CADatePickerViewDelegate_prototype;
        p->parentProto = NULL;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
}

JSClass  *jsb_CrossApp_CADatePickerView_class;
JSObject *jsb_CrossApp_CADatePickerView_prototype;

bool js_autogentestbindings_js_CADatePickerView_getDelegate(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CADatePickerView* cobj = (CrossApp::CADatePickerView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CADatePickerView_getDelegate : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CADatePickerViewDelegate* ret = cobj->getDelegate();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CADatePickerViewDelegate>(cx, (CrossApp::CADatePickerViewDelegate*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CADatePickerView_getDelegate : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CADatePickerView_onEnter(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CADatePickerView* cobj = (CrossApp::CADatePickerView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CADatePickerView_onEnter : Invalid Native Object");
    if (argc == 0) {
        cobj->onEnter();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CADatePickerView_onEnter : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CADatePickerView_onExit(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CADatePickerView* cobj = (CrossApp::CADatePickerView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CADatePickerView_onExit : Invalid Native Object");
    if (argc == 0) {
        cobj->onExit();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CADatePickerView_onExit : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CADatePickerView_init(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CADatePickerView* cobj = (CrossApp::CADatePickerView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CADatePickerView_init : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->init();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CADatePickerView_init : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CADatePickerView_setDelegate(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CADatePickerView* cobj = (CrossApp::CADatePickerView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CADatePickerView_setDelegate : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CADatePickerViewDelegate* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CADatePickerViewDelegate*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CADatePickerView_setDelegate : Error processing arguments");
        cobj->setDelegate(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CADatePickerView_setDelegate : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CADatePickerView_setDate(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CADatePickerView* cobj = (CrossApp::CADatePickerView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CADatePickerView_setDate : Invalid Native Object");
    if (argc == 4) {
        int arg0 = 0;
        int arg1 = 0;
        int arg2 = 0;
        bool arg3;
        ok &= jsval_to_int32(cx, args.get(0), (int32_t *)&arg0);
        ok &= jsval_to_int32(cx, args.get(1), (int32_t *)&arg1);
        ok &= jsval_to_int32(cx, args.get(2), (int32_t *)&arg2);
        arg3 = JS::ToBoolean(args.get(3));
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CADatePickerView_setDate : Error processing arguments");
        cobj->setDate(arg0, arg1, arg2, arg3);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CADatePickerView_setDate : wrong number of arguments: %d, was expecting %d", argc, 4);
    return false;
}
bool js_autogentestbindings_js_CADatePickerView_create(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        CrossApp::CADatePickerMode arg0;
        ok &= jsval_to_int32(cx, args.get(0), (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CADatePickerView_create : Error processing arguments");
        CrossApp::CADatePickerView* ret = CrossApp::CADatePickerView::create(arg0);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CADatePickerView>(cx, (CrossApp::CADatePickerView*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_autogentestbindings_js_CADatePickerView_create : wrong number of arguments");
    return false;
}

bool js_autogentestbindings_js_CADatePickerView_createWithFrame(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 2) {
        CrossApp::DRect arg0;
        CrossApp::CADatePickerMode arg1;
        ok &= jsval_to_drect(cx, args.get(0), &arg0);
        ok &= jsval_to_int32(cx, args.get(1), (int32_t *)&arg1);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CADatePickerView_createWithFrame : Error processing arguments");
        CrossApp::CADatePickerView* ret = CrossApp::CADatePickerView::createWithFrame(arg0, arg1);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CADatePickerView>(cx, (CrossApp::CADatePickerView*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_autogentestbindings_js_CADatePickerView_createWithFrame : wrong number of arguments");
    return false;
}

bool js_autogentestbindings_js_CADatePickerView_createWithLayout(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 2) {
        CrossApp::DRectLayout arg0;
        CrossApp::CADatePickerMode arg1;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (const CrossApp::DRectLayout&)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        ok &= jsval_to_int32(cx, args.get(1), (int32_t *)&arg1);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CADatePickerView_createWithLayout : Error processing arguments");
        CrossApp::CADatePickerView* ret = CrossApp::CADatePickerView::createWithLayout(arg0, arg1);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CADatePickerView>(cx, (CrossApp::CADatePickerView*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_autogentestbindings_js_CADatePickerView_createWithLayout : wrong number of arguments");
    return false;
}

bool js_autogentestbindings_js_CADatePickerView_createWithCenter(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 2) {
        CrossApp::DRect arg0;
        CrossApp::CADatePickerMode arg1;
        ok &= jsval_to_drect(cx, args.get(0), &arg0);
        ok &= jsval_to_int32(cx, args.get(1), (int32_t *)&arg1);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CADatePickerView_createWithCenter : Error processing arguments");
        CrossApp::CADatePickerView* ret = CrossApp::CADatePickerView::createWithCenter(arg0, arg1);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CADatePickerView>(cx, (CrossApp::CADatePickerView*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_autogentestbindings_js_CADatePickerView_createWithCenter : wrong number of arguments");
    return false;
}

bool js_autogentestbindings_js_CADatePickerView_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    CrossApp::CADatePickerMode arg0;
    ok &= jsval_to_int32(cx, args.get(0), (int32_t *)&arg0);
    JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CADatePickerView_constructor : Error processing arguments");
    CrossApp::CADatePickerView* cobj = new (std::nothrow) CrossApp::CADatePickerView(arg0);
    TypeTest<CrossApp::CADatePickerView> t;
    js_type_class_t *typeClass = nullptr;
    std::string typeName = t.s_name();
    auto typeMapIter = _js_global_type_map.find(typeName);
    CCAssert(typeMapIter != _js_global_type_map.end(), "Can't find the class type!");
    typeClass = typeMapIter->second;
    CCAssert(typeClass, "The value is null.");
    JS::RootedObject proto(cx, typeClass->proto.get());
    JS::RootedObject parent(cx, typeClass->parentProto.get());
    JS::RootedObject obj(cx, JS_NewObject(cx, typeClass->jsclass, proto, parent));
    args.rval().set(OBJECT_TO_JSVAL(obj));
    // link the native object with the javascript object
    js_proxy_t* p = jsb_new_proxy(cobj, obj);
    if (JS_HasProperty(cx, obj, "_ctor", &ok) && ok)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    return true;
}

extern JSObject *jsb_CrossApp_CAControl_prototype;

void js_CrossApp_CADatePickerView_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOGINFO("jsbindings: finalizing JS object %p (CADatePickerView)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::CADatePickerView *nobj = static_cast<CrossApp::CADatePickerView *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
void js_register_autogentestbindings_js_CADatePickerView(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_CADatePickerView_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_CADatePickerView_class->name = "CADatePickerView";
    jsb_CrossApp_CADatePickerView_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_CADatePickerView_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_CADatePickerView_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_CADatePickerView_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_CADatePickerView_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_CADatePickerView_class->resolve = JS_ResolveStub;
    jsb_CrossApp_CADatePickerView_class->convert = JS_ConvertStub;
    jsb_CrossApp_CADatePickerView_class->finalize = js_CrossApp_CADatePickerView_finalize;
    jsb_CrossApp_CADatePickerView_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("getDelegate", js_autogentestbindings_js_CADatePickerView_getDelegate, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("onEnter", js_autogentestbindings_js_CADatePickerView_onEnter, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("onExit", js_autogentestbindings_js_CADatePickerView_onExit, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("init", js_autogentestbindings_js_CADatePickerView_init, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setDelegate", js_autogentestbindings_js_CADatePickerView_setDelegate, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setDate", js_autogentestbindings_js_CADatePickerView_setDate, 4, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    static JSFunctionSpec st_funcs[] = {
        JS_FN("create", js_autogentestbindings_js_CADatePickerView_create, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("createWithFrame", js_autogentestbindings_js_CADatePickerView_createWithFrame, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("createWithLayout", js_autogentestbindings_js_CADatePickerView_createWithLayout, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("createWithCenter", js_autogentestbindings_js_CADatePickerView_createWithCenter, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    jsb_CrossApp_CADatePickerView_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_CAControl_prototype),
        jsb_CrossApp_CADatePickerView_class,
        js_autogentestbindings_js_CADatePickerView_constructor, 0, // constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27 
//  JS_SetPropertyAttributes(cx, global, "CADatePickerView", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::CADatePickerView> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_CADatePickerView_class;
        p->proto = jsb_CrossApp_CADatePickerView_prototype;
        p->parentProto = jsb_CrossApp_CAControl_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
}

JSClass  *jsb_CrossApp_CAWebViewDelegate_class;
JSObject *jsb_CrossApp_CAWebViewDelegate_prototype;

bool js_autogentestbindings_js_CAWebViewDelegate_onShouldStartLoading(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAWebViewDelegate* cobj = (CrossApp::CAWebViewDelegate *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAWebViewDelegate_onShouldStartLoading : Invalid Native Object");
    if (argc == 2) {
        CrossApp::CAWebView* arg0 = nullptr;
        std::string arg1;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAWebView*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        ok &= jsval_to_std_string(cx, args.get(1), &arg1);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAWebViewDelegate_onShouldStartLoading : Error processing arguments");
        bool ret = cobj->onShouldStartLoading(arg0, arg1);
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAWebViewDelegate_onShouldStartLoading : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_autogentestbindings_js_CAWebViewDelegate_onJSCallback(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAWebViewDelegate* cobj = (CrossApp::CAWebViewDelegate *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAWebViewDelegate_onJSCallback : Invalid Native Object");
    if (argc == 2) {
        CrossApp::CAWebView* arg0 = nullptr;
        std::string arg1;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAWebView*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        ok &= jsval_to_std_string(cx, args.get(1), &arg1);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAWebViewDelegate_onJSCallback : Error processing arguments");
        cobj->onJSCallback(arg0, arg1);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAWebViewDelegate_onJSCallback : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_autogentestbindings_js_CAWebViewDelegate_onDidFailLoading(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAWebViewDelegate* cobj = (CrossApp::CAWebViewDelegate *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAWebViewDelegate_onDidFailLoading : Invalid Native Object");
    if (argc == 2) {
        CrossApp::CAWebView* arg0 = nullptr;
        std::string arg1;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAWebView*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        ok &= jsval_to_std_string(cx, args.get(1), &arg1);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAWebViewDelegate_onDidFailLoading : Error processing arguments");
        cobj->onDidFailLoading(arg0, arg1);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAWebViewDelegate_onDidFailLoading : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_autogentestbindings_js_CAWebViewDelegate_onDidFinishLoading(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAWebViewDelegate* cobj = (CrossApp::CAWebViewDelegate *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAWebViewDelegate_onDidFinishLoading : Invalid Native Object");
    if (argc == 2) {
        CrossApp::CAWebView* arg0 = nullptr;
        std::string arg1;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAWebView*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        ok &= jsval_to_std_string(cx, args.get(1), &arg1);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAWebViewDelegate_onDidFinishLoading : Error processing arguments");
        cobj->onDidFinishLoading(arg0, arg1);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAWebViewDelegate_onDidFinishLoading : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}

void js_CrossApp_CAWebViewDelegate_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOGINFO("jsbindings: finalizing JS object %p (CAWebViewDelegate)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::CAWebViewDelegate *nobj = static_cast<CrossApp::CAWebViewDelegate *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
void js_register_autogentestbindings_js_CAWebViewDelegate(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_CAWebViewDelegate_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_CAWebViewDelegate_class->name = "CAWebViewDelegate";
    jsb_CrossApp_CAWebViewDelegate_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_CAWebViewDelegate_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_CAWebViewDelegate_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_CAWebViewDelegate_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_CAWebViewDelegate_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_CAWebViewDelegate_class->resolve = JS_ResolveStub;
    jsb_CrossApp_CAWebViewDelegate_class->convert = JS_ConvertStub;
    jsb_CrossApp_CAWebViewDelegate_class->finalize = js_CrossApp_CAWebViewDelegate_finalize;
    jsb_CrossApp_CAWebViewDelegate_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("onShouldStartLoading", js_autogentestbindings_js_CAWebViewDelegate_onShouldStartLoading, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("onJSCallback", js_autogentestbindings_js_CAWebViewDelegate_onJSCallback, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("onDidFailLoading", js_autogentestbindings_js_CAWebViewDelegate_onDidFailLoading, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("onDidFinishLoading", js_autogentestbindings_js_CAWebViewDelegate_onDidFinishLoading, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    JSFunctionSpec *st_funcs = NULL;

    jsb_CrossApp_CAWebViewDelegate_prototype = JS_InitClass(
        cx, global,
        JS::NullPtr(), // parent proto
        jsb_CrossApp_CAWebViewDelegate_class,
        dummy_constructor<CrossApp::CAWebViewDelegate>, 0, // no constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27 
//  JS_SetPropertyAttributes(cx, global, "CAWebViewDelegate", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::CAWebViewDelegate> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_CAWebViewDelegate_class;
        p->proto = jsb_CrossApp_CAWebViewDelegate_prototype;
        p->parentProto = NULL;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
}

JSClass  *jsb_CrossApp_CAWebView_class;
JSObject *jsb_CrossApp_CAWebView_prototype;

bool js_autogentestbindings_js_CAWebView_draw(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAWebView* cobj = (CrossApp::CAWebView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAWebView_draw : Invalid Native Object");
    if (argc == 0) {
        cobj->draw();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAWebView_draw : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAWebView_canGoBack(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAWebView* cobj = (CrossApp::CAWebView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAWebView_canGoBack : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->canGoBack();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAWebView_canGoBack : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAWebView_loadHTMLString(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAWebView* cobj = (CrossApp::CAWebView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAWebView_loadHTMLString : Invalid Native Object");
    if (argc == 2) {
        std::string arg0;
        std::string arg1;
        ok &= jsval_to_std_string(cx, args.get(0), &arg0);
        ok &= jsval_to_std_string(cx, args.get(1), &arg1);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAWebView_loadHTMLString : Error processing arguments");
        cobj->loadHTMLString(arg0, arg1);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAWebView_loadHTMLString : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_autogentestbindings_js_CAWebView_reload(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAWebView* cobj = (CrossApp::CAWebView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAWebView_reload : Invalid Native Object");
    if (argc == 0) {
        cobj->reload();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAWebView_reload : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAWebView_goForward(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAWebView* cobj = (CrossApp::CAWebView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAWebView_goForward : Invalid Native Object");
    if (argc == 0) {
        cobj->goForward();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAWebView_goForward : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAWebView_goBack(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAWebView* cobj = (CrossApp::CAWebView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAWebView_goBack : Invalid Native Object");
    if (argc == 0) {
        cobj->goBack();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAWebView_goBack : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAWebView_setScalesPageToFit(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAWebView* cobj = (CrossApp::CAWebView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAWebView_setScalesPageToFit : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        arg0 = JS::ToBoolean(args.get(0));
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAWebView_setScalesPageToFit : Error processing arguments");
        cobj->setScalesPageToFit(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAWebView_setScalesPageToFit : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAWebView_getWebViewDelegate(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAWebView* cobj = (CrossApp::CAWebView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAWebView_getWebViewDelegate : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CAWebViewDelegate* ret = cobj->getWebViewDelegate();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAWebViewDelegate>(cx, (CrossApp::CAWebViewDelegate*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAWebView_getWebViewDelegate : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAWebView_init(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAWebView* cobj = (CrossApp::CAWebView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAWebView_init : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->init();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAWebView_init : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAWebView_showNativeWeb(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAWebView* cobj = (CrossApp::CAWebView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAWebView_showNativeWeb : Invalid Native Object");
    if (argc == 0) {
        cobj->showNativeWeb();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAWebView_showNativeWeb : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAWebView_loadFile(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAWebView* cobj = (CrossApp::CAWebView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAWebView_loadFile : Invalid Native Object");
    if (argc == 1) {
        std::string arg0;
        ok &= jsval_to_std_string(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAWebView_loadFile : Error processing arguments");
        cobj->loadFile(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAWebView_loadFile : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAWebView_loadURL(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAWebView* cobj = (CrossApp::CAWebView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAWebView_loadURL : Invalid Native Object");
    if (argc == 1) {
        std::string arg0;
        ok &= jsval_to_std_string(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAWebView_loadURL : Error processing arguments");
        cobj->loadURL(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAWebView_loadURL : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAWebView_evaluateJS(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAWebView* cobj = (CrossApp::CAWebView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAWebView_evaluateJS : Invalid Native Object");
    if (argc == 1) {
        std::string arg0;
        ok &= jsval_to_std_string(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAWebView_evaluateJS : Error processing arguments");
        std::string ret = cobj->evaluateJS(arg0);
        jsval jsret = JSVAL_NULL;
        jsret = std_string_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAWebView_evaluateJS : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAWebView_showLoadingActivity(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAWebView* cobj = (CrossApp::CAWebView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAWebView_showLoadingActivity : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        arg0 = JS::ToBoolean(args.get(0));
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAWebView_showLoadingActivity : Error processing arguments");
        cobj->showLoadingActivity(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAWebView_showLoadingActivity : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAWebView_setJavascriptInterfaceScheme(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAWebView* cobj = (CrossApp::CAWebView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAWebView_setJavascriptInterfaceScheme : Invalid Native Object");
    if (argc == 1) {
        std::string arg0;
        ok &= jsval_to_std_string(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAWebView_setJavascriptInterfaceScheme : Error processing arguments");
        cobj->setJavascriptInterfaceScheme(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAWebView_setJavascriptInterfaceScheme : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAWebView_update(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAWebView* cobj = (CrossApp::CAWebView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAWebView_update : Invalid Native Object");
    if (argc == 1) {
        double arg0 = 0;
        ok &= JS::ToNumber( cx, args.get(0), &arg0) && !isnan(arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAWebView_update : Error processing arguments");
        cobj->update(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAWebView_update : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAWebView_setActivityView(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAWebView* cobj = (CrossApp::CAWebView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAWebView_setActivityView : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAActivityIndicatorView* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAActivityIndicatorView*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAWebView_setActivityView : Error processing arguments");
        cobj->setActivityView(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAWebView_setActivityView : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAWebView_setWebViewDelegate(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAWebView* cobj = (CrossApp::CAWebView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAWebView_setWebViewDelegate : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAWebViewDelegate* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAWebViewDelegate*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAWebView_setWebViewDelegate : Error processing arguments");
        cobj->setWebViewDelegate(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAWebView_setWebViewDelegate : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAWebView_canGoForward(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAWebView* cobj = (CrossApp::CAWebView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAWebView_canGoForward : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->canGoForward();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAWebView_canGoForward : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAWebView_stopLoading(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAWebView* cobj = (CrossApp::CAWebView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAWebView_stopLoading : Invalid Native Object");
    if (argc == 0) {
        cobj->stopLoading();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAWebView_stopLoading : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAWebView_getHTMLSource(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAWebView* cobj = (CrossApp::CAWebView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAWebView_getHTMLSource : Invalid Native Object");
    if (argc == 0) {
        std::string ret = cobj->getHTMLSource();
        jsval jsret = JSVAL_NULL;
        jsret = std_string_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAWebView_getHTMLSource : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAWebView_setVisible(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAWebView* cobj = (CrossApp::CAWebView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAWebView_setVisible : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        arg0 = JS::ToBoolean(args.get(0));
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAWebView_setVisible : Error processing arguments");
        cobj->setVisible(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAWebView_setVisible : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAWebView_hideNativeWebAndShowImage(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAWebView* cobj = (CrossApp::CAWebView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAWebView_hideNativeWebAndShowImage : Invalid Native Object");
    if (argc == 0) {
        cobj->hideNativeWebAndShowImage();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAWebView_hideNativeWebAndShowImage : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAWebView_createWithFrame(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        CrossApp::DRect arg0;
        ok &= jsval_to_drect(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAWebView_createWithFrame : Error processing arguments");
        CrossApp::CAWebView* ret = CrossApp::CAWebView::createWithFrame(arg0);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAWebView>(cx, (CrossApp::CAWebView*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_autogentestbindings_js_CAWebView_createWithFrame : wrong number of arguments");
    return false;
}

bool js_autogentestbindings_js_CAWebView_createWithLayout(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        CrossApp::DRectLayout arg0;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (const CrossApp::DRectLayout&)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAWebView_createWithLayout : Error processing arguments");
        CrossApp::CAWebView* ret = CrossApp::CAWebView::createWithLayout(arg0);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAWebView>(cx, (CrossApp::CAWebView*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_autogentestbindings_js_CAWebView_createWithLayout : wrong number of arguments");
    return false;
}

bool js_autogentestbindings_js_CAWebView_createWithCenter(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        CrossApp::DRect arg0;
        ok &= jsval_to_drect(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAWebView_createWithCenter : Error processing arguments");
        CrossApp::CAWebView* ret = CrossApp::CAWebView::createWithCenter(arg0);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAWebView>(cx, (CrossApp::CAWebView*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_autogentestbindings_js_CAWebView_createWithCenter : wrong number of arguments");
    return false;
}

bool js_autogentestbindings_js_CAWebView_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    CrossApp::CAWebView* cobj = new (std::nothrow) CrossApp::CAWebView();
    TypeTest<CrossApp::CAWebView> t;
    js_type_class_t *typeClass = nullptr;
    std::string typeName = t.s_name();
    auto typeMapIter = _js_global_type_map.find(typeName);
    CCAssert(typeMapIter != _js_global_type_map.end(), "Can't find the class type!");
    typeClass = typeMapIter->second;
    CCAssert(typeClass, "The value is null.");
    JS::RootedObject proto(cx, typeClass->proto.get());
    JS::RootedObject parent(cx, typeClass->parentProto.get());
    JS::RootedObject obj(cx, JS_NewObject(cx, typeClass->jsclass, proto, parent));
    args.rval().set(OBJECT_TO_JSVAL(obj));
    // link the native object with the javascript object
    js_proxy_t* p = jsb_new_proxy(cobj, obj);
    if (JS_HasProperty(cx, obj, "_ctor", &ok) && ok)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    return true;
}

extern JSObject *jsb_CrossApp_CAView_prototype;

void js_CrossApp_CAWebView_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOGINFO("jsbindings: finalizing JS object %p (CAWebView)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::CAWebView *nobj = static_cast<CrossApp::CAWebView *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
void js_register_autogentestbindings_js_CAWebView(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_CAWebView_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_CAWebView_class->name = "CAWebView";
    jsb_CrossApp_CAWebView_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_CAWebView_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_CAWebView_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_CAWebView_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_CAWebView_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_CAWebView_class->resolve = JS_ResolveStub;
    jsb_CrossApp_CAWebView_class->convert = JS_ConvertStub;
    jsb_CrossApp_CAWebView_class->finalize = js_CrossApp_CAWebView_finalize;
    jsb_CrossApp_CAWebView_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("draw", js_autogentestbindings_js_CAWebView_draw, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("canGoBack", js_autogentestbindings_js_CAWebView_canGoBack, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("loadHTMLString", js_autogentestbindings_js_CAWebView_loadHTMLString, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("reload", js_autogentestbindings_js_CAWebView_reload, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("goForward", js_autogentestbindings_js_CAWebView_goForward, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("goBack", js_autogentestbindings_js_CAWebView_goBack, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setScalesPageToFit", js_autogentestbindings_js_CAWebView_setScalesPageToFit, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getWebViewDelegate", js_autogentestbindings_js_CAWebView_getWebViewDelegate, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("init", js_autogentestbindings_js_CAWebView_init, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("showNativeWeb", js_autogentestbindings_js_CAWebView_showNativeWeb, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("loadFile", js_autogentestbindings_js_CAWebView_loadFile, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("loadURL", js_autogentestbindings_js_CAWebView_loadURL, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("evaluateJS", js_autogentestbindings_js_CAWebView_evaluateJS, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("showLoadingActivity", js_autogentestbindings_js_CAWebView_showLoadingActivity, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setJavascriptInterfaceScheme", js_autogentestbindings_js_CAWebView_setJavascriptInterfaceScheme, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("update", js_autogentestbindings_js_CAWebView_update, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setActivityView", js_autogentestbindings_js_CAWebView_setActivityView, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setWebViewDelegate", js_autogentestbindings_js_CAWebView_setWebViewDelegate, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("canGoForward", js_autogentestbindings_js_CAWebView_canGoForward, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("stopLoading", js_autogentestbindings_js_CAWebView_stopLoading, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getHTMLSource", js_autogentestbindings_js_CAWebView_getHTMLSource, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setVisible", js_autogentestbindings_js_CAWebView_setVisible, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("hideNativeWebAndShowImage", js_autogentestbindings_js_CAWebView_hideNativeWebAndShowImage, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    static JSFunctionSpec st_funcs[] = {
        JS_FN("createWithFrame", js_autogentestbindings_js_CAWebView_createWithFrame, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("createWithLayout", js_autogentestbindings_js_CAWebView_createWithLayout, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("createWithCenter", js_autogentestbindings_js_CAWebView_createWithCenter, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    jsb_CrossApp_CAWebView_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_CAView_prototype),
        jsb_CrossApp_CAWebView_class,
        js_autogentestbindings_js_CAWebView_constructor, 0, // constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27 
//  JS_SetPropertyAttributes(cx, global, "CAWebView", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::CAWebView> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_CAWebView_class;
        p->proto = jsb_CrossApp_CAWebView_prototype;
        p->parentProto = jsb_CrossApp_CAView_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
}

JSClass  *jsb_CrossApp_CADrawView_class;
JSObject *jsb_CrossApp_CADrawView_prototype;

bool js_autogentestbindings_js_CADrawView_draw(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CADrawView* cobj = (CrossApp::CADrawView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CADrawView_draw : Invalid Native Object");
    if (argc == 0) {
        cobj->draw();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CADrawView_draw : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CADrawView_getBlendFunc(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CADrawView* cobj = (CrossApp::CADrawView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CADrawView_getBlendFunc : Invalid Native Object");
    if (argc == 0) {
        CrossApp::_ccBlendFunc ret = cobj->getBlendFunc();
        jsval jsret = JSVAL_NULL;
        #pragma warning NO CONVERSION FROM NATIVE FOR _ccBlendFunc;
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CADrawView_getBlendFunc : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CADrawView_drawPolygon(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CADrawView* cobj = (CrossApp::CADrawView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CADrawView_drawPolygon : Invalid Native Object");
    if (argc == 5) {
        CrossApp::DPoint* arg0 = 0;
        unsigned int arg1 = 0;
        CrossApp::CAColor4F arg2;
        double arg3 = 0;
        CrossApp::CAColor4F arg4;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::DPoint*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        ok &= jsval_to_uint32(cx, args.get(1), &arg1);
        ok &= jsval_to_cacolor4f(cx, args.get(2), &arg2);
        ok &= JS::ToNumber( cx, args.get(3), &arg3) && !isnan(arg3);
        ok &= jsval_to_cacolor4f(cx, args.get(4), &arg4);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CADrawView_drawPolygon : Error processing arguments");
        cobj->drawPolygon(arg0, arg1, arg2, arg3, arg4);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CADrawView_drawPolygon : wrong number of arguments: %d, was expecting %d", argc, 5);
    return false;
}
bool js_autogentestbindings_js_CADrawView_clear(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CADrawView* cobj = (CrossApp::CADrawView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CADrawView_clear : Invalid Native Object");
    if (argc == 0) {
        cobj->clear();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CADrawView_clear : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CADrawView_setBlendFunc(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CADrawView* cobj = (CrossApp::CADrawView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CADrawView_setBlendFunc : Invalid Native Object");
    if (argc == 1) {
        CrossApp::_ccBlendFunc arg0;
        #pragma warning NO CONVERSION TO NATIVE FOR _ccBlendFunc
		ok = false;
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CADrawView_setBlendFunc : Error processing arguments");
        cobj->setBlendFunc(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CADrawView_setBlendFunc : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CADrawView_init(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CADrawView* cobj = (CrossApp::CADrawView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CADrawView_init : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->init();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CADrawView_init : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CADrawView_drawDot(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CADrawView* cobj = (CrossApp::CADrawView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CADrawView_drawDot : Invalid Native Object");
    if (argc == 3) {
        CrossApp::DPoint arg0 = 0;
        double arg1 = 0;
        CrossApp::CAColor4F arg2;
        ok &= jsval_to_dpoint(cx, args.get(0), &arg0);
        ok &= JS::ToNumber( cx, args.get(1), &arg1) && !isnan(arg1);
        ok &= jsval_to_cacolor4f(cx, args.get(2), &arg2);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CADrawView_drawDot : Error processing arguments");
        cobj->drawDot(arg0, arg1, arg2);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CADrawView_drawDot : wrong number of arguments: %d, was expecting %d", argc, 3);
    return false;
}
bool js_autogentestbindings_js_CADrawView_drawSegment(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CADrawView* cobj = (CrossApp::CADrawView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CADrawView_drawSegment : Invalid Native Object");
    if (argc == 4) {
        CrossApp::DPoint arg0 = 0;
        CrossApp::DPoint arg1 = 0;
        double arg2 = 0;
        CrossApp::CAColor4F arg3;
        ok &= jsval_to_dpoint(cx, args.get(0), &arg0);
        ok &= jsval_to_dpoint(cx, args.get(1), &arg1);
        ok &= JS::ToNumber( cx, args.get(2), &arg2) && !isnan(arg2);
        ok &= jsval_to_cacolor4f(cx, args.get(3), &arg3);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CADrawView_drawSegment : Error processing arguments");
        cobj->drawSegment(arg0, arg1, arg2, arg3);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CADrawView_drawSegment : wrong number of arguments: %d, was expecting %d", argc, 4);
    return false;
}
bool js_autogentestbindings_js_CADrawView_listenBackToForeground(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CADrawView* cobj = (CrossApp::CADrawView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CADrawView_listenBackToForeground : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAObject* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAObject*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CADrawView_listenBackToForeground : Error processing arguments");
        cobj->listenBackToForeground(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CADrawView_listenBackToForeground : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CADrawView_create(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    if (argc == 0) {
        CrossApp::CADrawView* ret = CrossApp::CADrawView::create();
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CADrawView>(cx, (CrossApp::CADrawView*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_autogentestbindings_js_CADrawView_create : wrong number of arguments");
    return false;
}

bool js_autogentestbindings_js_CADrawView_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    CrossApp::CADrawView* cobj = new (std::nothrow) CrossApp::CADrawView();
    TypeTest<CrossApp::CADrawView> t;
    js_type_class_t *typeClass = nullptr;
    std::string typeName = t.s_name();
    auto typeMapIter = _js_global_type_map.find(typeName);
    CCAssert(typeMapIter != _js_global_type_map.end(), "Can't find the class type!");
    typeClass = typeMapIter->second;
    CCAssert(typeClass, "The value is null.");
    JS::RootedObject proto(cx, typeClass->proto.get());
    JS::RootedObject parent(cx, typeClass->parentProto.get());
    JS::RootedObject obj(cx, JS_NewObject(cx, typeClass->jsclass, proto, parent));
    args.rval().set(OBJECT_TO_JSVAL(obj));
    // link the native object with the javascript object
    js_proxy_t* p = jsb_new_proxy(cobj, obj);
    if (JS_HasProperty(cx, obj, "_ctor", &ok) && ok)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    return true;
}

extern JSObject *jsb_CrossApp_CAView_prototype;

void js_CrossApp_CADrawView_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOGINFO("jsbindings: finalizing JS object %p (CADrawView)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::CADrawView *nobj = static_cast<CrossApp::CADrawView *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
void js_register_autogentestbindings_js_CADrawView(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_CADrawView_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_CADrawView_class->name = "CADrawView";
    jsb_CrossApp_CADrawView_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_CADrawView_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_CADrawView_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_CADrawView_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_CADrawView_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_CADrawView_class->resolve = JS_ResolveStub;
    jsb_CrossApp_CADrawView_class->convert = JS_ConvertStub;
    jsb_CrossApp_CADrawView_class->finalize = js_CrossApp_CADrawView_finalize;
    jsb_CrossApp_CADrawView_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("draw", js_autogentestbindings_js_CADrawView_draw, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getBlendFunc", js_autogentestbindings_js_CADrawView_getBlendFunc, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("drawPolygon", js_autogentestbindings_js_CADrawView_drawPolygon, 5, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("clear", js_autogentestbindings_js_CADrawView_clear, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setBlendFunc", js_autogentestbindings_js_CADrawView_setBlendFunc, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("init", js_autogentestbindings_js_CADrawView_init, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("drawDot", js_autogentestbindings_js_CADrawView_drawDot, 3, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("drawSegment", js_autogentestbindings_js_CADrawView_drawSegment, 4, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("listenBackToForeground", js_autogentestbindings_js_CADrawView_listenBackToForeground, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    static JSFunctionSpec st_funcs[] = {
        JS_FN("create", js_autogentestbindings_js_CADrawView_create, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    jsb_CrossApp_CADrawView_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_CAView_prototype),
        jsb_CrossApp_CADrawView_class,
        js_autogentestbindings_js_CADrawView_constructor, 0, // constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27 
//  JS_SetPropertyAttributes(cx, global, "CADrawView", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::CADrawView> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_CADrawView_class;
        p->proto = jsb_CrossApp_CADrawView_prototype;
        p->parentProto = jsb_CrossApp_CAView_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
}

JSClass  *jsb_CrossApp_CAWaterfallViewDataSource_class;
JSObject *jsb_CrossApp_CAWaterfallViewDataSource_prototype;

bool js_autogentestbindings_js_CAWaterfallViewDataSource_waterfallViewWillDisplayCellAtIndex(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAWaterfallViewDataSource* cobj = (CrossApp::CAWaterfallViewDataSource *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAWaterfallViewDataSource_waterfallViewWillDisplayCellAtIndex : Invalid Native Object");
    if (argc == 3) {
        CrossApp::CAWaterfallView* arg0 = nullptr;
        CrossApp::CAWaterfallViewCell* arg1 = nullptr;
        unsigned int arg2 = 0;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAWaterfallView*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        do {
            if (args.get(1).isNull()) { arg1 = nullptr; break; }
            if (!args.get(1).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(1).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg1 = (CrossApp::CAWaterfallViewCell*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg1, cx, false, "Invalid Native Object");
        } while (0);
        ok &= jsval_to_uint32(cx, args.get(2), &arg2);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAWaterfallViewDataSource_waterfallViewWillDisplayCellAtIndex : Error processing arguments");
        cobj->waterfallViewWillDisplayCellAtIndex(arg0, arg1, arg2);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAWaterfallViewDataSource_waterfallViewWillDisplayCellAtIndex : wrong number of arguments: %d, was expecting %d", argc, 3);
    return false;
}
bool js_autogentestbindings_js_CAWaterfallViewDataSource_waterfallViewSectionViewForHeader(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAWaterfallViewDataSource* cobj = (CrossApp::CAWaterfallViewDataSource *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAWaterfallViewDataSource_waterfallViewSectionViewForHeader : Invalid Native Object");
    if (argc == 2) {
        CrossApp::CAWaterfallView* arg0 = nullptr;
        CrossApp::DSize arg1;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAWaterfallView*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        ok &= jsval_to_dsize(cx, args.get(1), &arg1);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAWaterfallViewDataSource_waterfallViewSectionViewForHeader : Error processing arguments");
        CrossApp::CAView* ret = cobj->waterfallViewSectionViewForHeader(arg0, arg1);
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAView>(cx, (CrossApp::CAView*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAWaterfallViewDataSource_waterfallViewSectionViewForHeader : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_autogentestbindings_js_CAWaterfallViewDataSource_waterfallViewHeightForItemAtIndex(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAWaterfallViewDataSource* cobj = (CrossApp::CAWaterfallViewDataSource *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAWaterfallViewDataSource_waterfallViewHeightForItemAtIndex : Invalid Native Object");
    if (argc == 2) {
        CrossApp::CAWaterfallView* arg0 = nullptr;
        unsigned int arg1 = 0;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAWaterfallView*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        ok &= jsval_to_uint32(cx, args.get(1), &arg1);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAWaterfallViewDataSource_waterfallViewHeightForItemAtIndex : Error processing arguments");
        unsigned int ret = cobj->waterfallViewHeightForItemAtIndex(arg0, arg1);
        jsval jsret = JSVAL_NULL;
        jsret = uint32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAWaterfallViewDataSource_waterfallViewHeightForItemAtIndex : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_autogentestbindings_js_CAWaterfallViewDataSource_numberOfItems(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAWaterfallViewDataSource* cobj = (CrossApp::CAWaterfallViewDataSource *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAWaterfallViewDataSource_numberOfItems : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAWaterfallView* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAWaterfallView*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAWaterfallViewDataSource_numberOfItems : Error processing arguments");
        unsigned int ret = cobj->numberOfItems(arg0);
        jsval jsret = JSVAL_NULL;
        jsret = uint32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAWaterfallViewDataSource_numberOfItems : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAWaterfallViewDataSource_waterfallCellAtIndex(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAWaterfallViewDataSource* cobj = (CrossApp::CAWaterfallViewDataSource *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAWaterfallViewDataSource_waterfallCellAtIndex : Invalid Native Object");
    if (argc == 3) {
        CrossApp::CAWaterfallView* arg0 = nullptr;
        CrossApp::DSize arg1;
        unsigned int arg2 = 0;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAWaterfallView*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        ok &= jsval_to_dsize(cx, args.get(1), &arg1);
        ok &= jsval_to_uint32(cx, args.get(2), &arg2);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAWaterfallViewDataSource_waterfallCellAtIndex : Error processing arguments");
        CrossApp::CAWaterfallViewCell* ret = cobj->waterfallCellAtIndex(arg0, arg1, arg2);
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAWaterfallViewCell>(cx, (CrossApp::CAWaterfallViewCell*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAWaterfallViewDataSource_waterfallCellAtIndex : wrong number of arguments: %d, was expecting %d", argc, 3);
    return false;
}
bool js_autogentestbindings_js_CAWaterfallViewDataSource_waterfallViewHeightForFooter(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAWaterfallViewDataSource* cobj = (CrossApp::CAWaterfallViewDataSource *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAWaterfallViewDataSource_waterfallViewHeightForFooter : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAWaterfallView* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAWaterfallView*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAWaterfallViewDataSource_waterfallViewHeightForFooter : Error processing arguments");
        unsigned int ret = cobj->waterfallViewHeightForFooter(arg0);
        jsval jsret = JSVAL_NULL;
        jsret = uint32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAWaterfallViewDataSource_waterfallViewHeightForFooter : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAWaterfallViewDataSource_waterfallViewSectionViewForFooter(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAWaterfallViewDataSource* cobj = (CrossApp::CAWaterfallViewDataSource *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAWaterfallViewDataSource_waterfallViewSectionViewForFooter : Invalid Native Object");
    if (argc == 2) {
        CrossApp::CAWaterfallView* arg0 = nullptr;
        CrossApp::DSize arg1;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAWaterfallView*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        ok &= jsval_to_dsize(cx, args.get(1), &arg1);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAWaterfallViewDataSource_waterfallViewSectionViewForFooter : Error processing arguments");
        CrossApp::CAView* ret = cobj->waterfallViewSectionViewForFooter(arg0, arg1);
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAView>(cx, (CrossApp::CAView*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAWaterfallViewDataSource_waterfallViewSectionViewForFooter : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_autogentestbindings_js_CAWaterfallViewDataSource_waterfallViewHeightForHeader(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAWaterfallViewDataSource* cobj = (CrossApp::CAWaterfallViewDataSource *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAWaterfallViewDataSource_waterfallViewHeightForHeader : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAWaterfallView* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAWaterfallView*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAWaterfallViewDataSource_waterfallViewHeightForHeader : Error processing arguments");
        unsigned int ret = cobj->waterfallViewHeightForHeader(arg0);
        jsval jsret = JSVAL_NULL;
        jsret = uint32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAWaterfallViewDataSource_waterfallViewHeightForHeader : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}

void js_CrossApp_CAWaterfallViewDataSource_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOGINFO("jsbindings: finalizing JS object %p (CAWaterfallViewDataSource)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::CAWaterfallViewDataSource *nobj = static_cast<CrossApp::CAWaterfallViewDataSource *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
void js_register_autogentestbindings_js_CAWaterfallViewDataSource(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_CAWaterfallViewDataSource_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_CAWaterfallViewDataSource_class->name = "CAWaterfallViewDataSource";
    jsb_CrossApp_CAWaterfallViewDataSource_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_CAWaterfallViewDataSource_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_CAWaterfallViewDataSource_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_CAWaterfallViewDataSource_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_CAWaterfallViewDataSource_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_CAWaterfallViewDataSource_class->resolve = JS_ResolveStub;
    jsb_CrossApp_CAWaterfallViewDataSource_class->convert = JS_ConvertStub;
    jsb_CrossApp_CAWaterfallViewDataSource_class->finalize = js_CrossApp_CAWaterfallViewDataSource_finalize;
    jsb_CrossApp_CAWaterfallViewDataSource_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("waterfallViewWillDisplayCellAtIndex", js_autogentestbindings_js_CAWaterfallViewDataSource_waterfallViewWillDisplayCellAtIndex, 3, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("waterfallViewSectionViewForHeader", js_autogentestbindings_js_CAWaterfallViewDataSource_waterfallViewSectionViewForHeader, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("waterfallViewHeightForItemAtIndex", js_autogentestbindings_js_CAWaterfallViewDataSource_waterfallViewHeightForItemAtIndex, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("numberOfItems", js_autogentestbindings_js_CAWaterfallViewDataSource_numberOfItems, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("waterfallCellAtIndex", js_autogentestbindings_js_CAWaterfallViewDataSource_waterfallCellAtIndex, 3, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("waterfallViewHeightForFooter", js_autogentestbindings_js_CAWaterfallViewDataSource_waterfallViewHeightForFooter, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("waterfallViewSectionViewForFooter", js_autogentestbindings_js_CAWaterfallViewDataSource_waterfallViewSectionViewForFooter, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("waterfallViewHeightForHeader", js_autogentestbindings_js_CAWaterfallViewDataSource_waterfallViewHeightForHeader, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    JSFunctionSpec *st_funcs = NULL;

    jsb_CrossApp_CAWaterfallViewDataSource_prototype = JS_InitClass(
        cx, global,
        JS::NullPtr(), // parent proto
        jsb_CrossApp_CAWaterfallViewDataSource_class,
        dummy_constructor<CrossApp::CAWaterfallViewDataSource>, 0, // no constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27 
//  JS_SetPropertyAttributes(cx, global, "CAWaterfallViewDataSource", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::CAWaterfallViewDataSource> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_CAWaterfallViewDataSource_class;
        p->proto = jsb_CrossApp_CAWaterfallViewDataSource_prototype;
        p->parentProto = NULL;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
}

JSClass  *jsb_CrossApp_CAWaterfallViewDelegate_class;
JSObject *jsb_CrossApp_CAWaterfallViewDelegate_prototype;

bool js_autogentestbindings_js_CAWaterfallViewDelegate_waterfallViewDidSelectCellAtIndexPath(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAWaterfallViewDelegate* cobj = (CrossApp::CAWaterfallViewDelegate *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAWaterfallViewDelegate_waterfallViewDidSelectCellAtIndexPath : Invalid Native Object");
    if (argc == 2) {
        CrossApp::CAWaterfallView* arg0 = nullptr;
        unsigned int arg1 = 0;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAWaterfallView*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        ok &= jsval_to_uint32(cx, args.get(1), &arg1);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAWaterfallViewDelegate_waterfallViewDidSelectCellAtIndexPath : Error processing arguments");
        cobj->waterfallViewDidSelectCellAtIndexPath(arg0, arg1);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAWaterfallViewDelegate_waterfallViewDidSelectCellAtIndexPath : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_autogentestbindings_js_CAWaterfallViewDelegate_waterfallViewDidDeselectCellAtIndexPath(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAWaterfallViewDelegate* cobj = (CrossApp::CAWaterfallViewDelegate *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAWaterfallViewDelegate_waterfallViewDidDeselectCellAtIndexPath : Invalid Native Object");
    if (argc == 2) {
        CrossApp::CAWaterfallView* arg0 = nullptr;
        unsigned int arg1 = 0;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAWaterfallView*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        ok &= jsval_to_uint32(cx, args.get(1), &arg1);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAWaterfallViewDelegate_waterfallViewDidDeselectCellAtIndexPath : Error processing arguments");
        cobj->waterfallViewDidDeselectCellAtIndexPath(arg0, arg1);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAWaterfallViewDelegate_waterfallViewDidDeselectCellAtIndexPath : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}

void js_CrossApp_CAWaterfallViewDelegate_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOGINFO("jsbindings: finalizing JS object %p (CAWaterfallViewDelegate)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::CAWaterfallViewDelegate *nobj = static_cast<CrossApp::CAWaterfallViewDelegate *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
void js_register_autogentestbindings_js_CAWaterfallViewDelegate(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_CAWaterfallViewDelegate_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_CAWaterfallViewDelegate_class->name = "CAWaterfallViewDelegate";
    jsb_CrossApp_CAWaterfallViewDelegate_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_CAWaterfallViewDelegate_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_CAWaterfallViewDelegate_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_CAWaterfallViewDelegate_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_CAWaterfallViewDelegate_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_CAWaterfallViewDelegate_class->resolve = JS_ResolveStub;
    jsb_CrossApp_CAWaterfallViewDelegate_class->convert = JS_ConvertStub;
    jsb_CrossApp_CAWaterfallViewDelegate_class->finalize = js_CrossApp_CAWaterfallViewDelegate_finalize;
    jsb_CrossApp_CAWaterfallViewDelegate_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("waterfallViewDidSelectCellAtIndexPath", js_autogentestbindings_js_CAWaterfallViewDelegate_waterfallViewDidSelectCellAtIndexPath, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("waterfallViewDidDeselectCellAtIndexPath", js_autogentestbindings_js_CAWaterfallViewDelegate_waterfallViewDidDeselectCellAtIndexPath, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    JSFunctionSpec *st_funcs = NULL;

    jsb_CrossApp_CAWaterfallViewDelegate_prototype = JS_InitClass(
        cx, global,
        JS::NullPtr(), // parent proto
        jsb_CrossApp_CAWaterfallViewDelegate_class,
        dummy_constructor<CrossApp::CAWaterfallViewDelegate>, 0, // no constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27 
//  JS_SetPropertyAttributes(cx, global, "CAWaterfallViewDelegate", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::CAWaterfallViewDelegate> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_CAWaterfallViewDelegate_class;
        p->proto = jsb_CrossApp_CAWaterfallViewDelegate_prototype;
        p->parentProto = NULL;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
}

JSClass  *jsb_CrossApp_CAWaterfallView_class;
JSObject *jsb_CrossApp_CAWaterfallView_prototype;

bool js_autogentestbindings_js_CAWaterfallView_setWaterfallViewDelegate(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAWaterfallView* cobj = (CrossApp::CAWaterfallView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAWaterfallView_setWaterfallViewDelegate : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAWaterfallViewDelegate* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAWaterfallViewDelegate*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAWaterfallView_setWaterfallViewDelegate : Error processing arguments");
        cobj->setWaterfallViewDelegate(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAWaterfallView_setWaterfallViewDelegate : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAWaterfallView_isAllowsSelection(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAWaterfallView* cobj = (CrossApp::CAWaterfallView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAWaterfallView_isAllowsSelection : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->isAllowsSelection();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAWaterfallView_isAllowsSelection : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAWaterfallView_mouseMovedOutSide(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAWaterfallView* cobj = (CrossApp::CAWaterfallView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAWaterfallView_mouseMovedOutSide : Invalid Native Object");
    if (argc == 2) {
        CrossApp::CATouch* arg0 = nullptr;
        CrossApp::CAEvent* arg1 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CATouch*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        do {
            if (args.get(1).isNull()) { arg1 = nullptr; break; }
            if (!args.get(1).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(1).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg1 = (CrossApp::CAEvent*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg1, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAWaterfallView_mouseMovedOutSide : Error processing arguments");
        cobj->mouseMovedOutSide(arg0, arg1);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAWaterfallView_mouseMovedOutSide : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_autogentestbindings_js_CAWaterfallView_getWaterfallViewDataSource(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAWaterfallView* cobj = (CrossApp::CAWaterfallView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAWaterfallView_getWaterfallViewDataSource : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CAWaterfallViewDataSource* ret = cobj->getWaterfallViewDataSource();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAWaterfallViewDataSource>(cx, (CrossApp::CAWaterfallViewDataSource*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAWaterfallView_getWaterfallViewDataSource : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAWaterfallView_ccTouchBegan(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAWaterfallView* cobj = (CrossApp::CAWaterfallView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAWaterfallView_ccTouchBegan : Invalid Native Object");
    if (argc == 2) {
        CrossApp::CATouch* arg0 = nullptr;
        CrossApp::CAEvent* arg1 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CATouch*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        do {
            if (args.get(1).isNull()) { arg1 = nullptr; break; }
            if (!args.get(1).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(1).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg1 = (CrossApp::CAEvent*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg1, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAWaterfallView_ccTouchBegan : Error processing arguments");
        bool ret = cobj->ccTouchBegan(arg0, arg1);
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAWaterfallView_ccTouchBegan : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_autogentestbindings_js_CAWaterfallView_setColumnMargin(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAWaterfallView* cobj = (CrossApp::CAWaterfallView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAWaterfallView_setColumnMargin : Invalid Native Object");
    if (argc == 1) {
        unsigned int arg0 = 0;
        ok &= jsval_to_uint32(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAWaterfallView_setColumnMargin : Error processing arguments");
        cobj->setColumnMargin(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAWaterfallView_setColumnMargin : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAWaterfallView_getWaterfallHeaderView(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAWaterfallView* cobj = (CrossApp::CAWaterfallView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAWaterfallView_getWaterfallHeaderView : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CAView* ret = cobj->getWaterfallHeaderView();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAView>(cx, (CrossApp::CAView*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAWaterfallView_getWaterfallHeaderView : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAWaterfallView_getColumnCount(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAWaterfallView* cobj = (CrossApp::CAWaterfallView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAWaterfallView_getColumnCount : Invalid Native Object");
    if (argc == 0) {
        unsigned int ret = cobj->getColumnCount();
        jsval jsret = JSVAL_NULL;
        jsret = uint32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAWaterfallView_getColumnCount : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAWaterfallView_setAlwaysTopSectionHeader(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAWaterfallView* cobj = (CrossApp::CAWaterfallView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAWaterfallView_setAlwaysTopSectionHeader : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        arg0 = JS::ToBoolean(args.get(0));
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAWaterfallView_setAlwaysTopSectionHeader : Error processing arguments");
        cobj->setAlwaysTopSectionHeader(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAWaterfallView_setAlwaysTopSectionHeader : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAWaterfallView_getWaterfallViewDelegate(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAWaterfallView* cobj = (CrossApp::CAWaterfallView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAWaterfallView_getWaterfallViewDelegate : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CAWaterfallViewDelegate* ret = cobj->getWaterfallViewDelegate();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAWaterfallViewDelegate>(cx, (CrossApp::CAWaterfallViewDelegate*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAWaterfallView_getWaterfallViewDelegate : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAWaterfallView_isAlwaysBottomSectionFooter(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAWaterfallView* cobj = (CrossApp::CAWaterfallView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAWaterfallView_isAlwaysBottomSectionFooter : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->isAlwaysBottomSectionFooter();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAWaterfallView_isAlwaysBottomSectionFooter : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAWaterfallView_getWaterfallHeaderHeight(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAWaterfallView* cobj = (CrossApp::CAWaterfallView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAWaterfallView_getWaterfallHeaderHeight : Invalid Native Object");
    if (argc == 0) {
        unsigned int ret = cobj->getWaterfallHeaderHeight();
        jsval jsret = JSVAL_NULL;
        jsret = uint32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAWaterfallView_getWaterfallHeaderHeight : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAWaterfallView_setColumnCount(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAWaterfallView* cobj = (CrossApp::CAWaterfallView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAWaterfallView_setColumnCount : Invalid Native Object");
    if (argc == 1) {
        unsigned int arg0 = 0;
        ok &= jsval_to_uint32(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAWaterfallView_setColumnCount : Error processing arguments");
        cobj->setColumnCount(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAWaterfallView_setColumnCount : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAWaterfallView_setWaterfallHeaderView(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAWaterfallView* cobj = (CrossApp::CAWaterfallView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAWaterfallView_setWaterfallHeaderView : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAView* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAView*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAWaterfallView_setWaterfallHeaderView : Error processing arguments");
        cobj->setWaterfallHeaderView(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAWaterfallView_setWaterfallHeaderView : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAWaterfallView_mouseMoved(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAWaterfallView* cobj = (CrossApp::CAWaterfallView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAWaterfallView_mouseMoved : Invalid Native Object");
    if (argc == 2) {
        CrossApp::CATouch* arg0 = nullptr;
        CrossApp::CAEvent* arg1 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CATouch*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        do {
            if (args.get(1).isNull()) { arg1 = nullptr; break; }
            if (!args.get(1).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(1).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg1 = (CrossApp::CAEvent*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg1, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAWaterfallView_mouseMoved : Error processing arguments");
        cobj->mouseMoved(arg0, arg1);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAWaterfallView_mouseMoved : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_autogentestbindings_js_CAWaterfallView_setWaterfallViewDataSource(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAWaterfallView* cobj = (CrossApp::CAWaterfallView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAWaterfallView_setWaterfallViewDataSource : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAWaterfallViewDataSource* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAWaterfallViewDataSource*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAWaterfallView_setWaterfallViewDataSource : Error processing arguments");
        cobj->setWaterfallViewDataSource(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAWaterfallView_setWaterfallViewDataSource : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAWaterfallView_setWaterfallFooterHeight(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAWaterfallView* cobj = (CrossApp::CAWaterfallView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAWaterfallView_setWaterfallFooterHeight : Invalid Native Object");
    if (argc == 1) {
        unsigned int arg0 = 0;
        ok &= jsval_to_uint32(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAWaterfallView_setWaterfallFooterHeight : Error processing arguments");
        cobj->setWaterfallFooterHeight(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAWaterfallView_setWaterfallFooterHeight : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAWaterfallView_setSelectRowAtIndexPath(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAWaterfallView* cobj = (CrossApp::CAWaterfallView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAWaterfallView_setSelectRowAtIndexPath : Invalid Native Object");
    if (argc == 1) {
        unsigned int arg0 = 0;
        ok &= jsval_to_uint32(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAWaterfallView_setSelectRowAtIndexPath : Error processing arguments");
        cobj->setSelectRowAtIndexPath(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAWaterfallView_setSelectRowAtIndexPath : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAWaterfallView_setWaterfallHeaderHeight(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAWaterfallView* cobj = (CrossApp::CAWaterfallView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAWaterfallView_setWaterfallHeaderHeight : Invalid Native Object");
    if (argc == 1) {
        unsigned int arg0 = 0;
        ok &= jsval_to_uint32(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAWaterfallView_setWaterfallHeaderHeight : Error processing arguments");
        cobj->setWaterfallHeaderHeight(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAWaterfallView_setWaterfallHeaderHeight : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAWaterfallView_init(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAWaterfallView* cobj = (CrossApp::CAWaterfallView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAWaterfallView_init : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->init();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAWaterfallView_init : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAWaterfallView_isAllowsMultipleSelection(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAWaterfallView* cobj = (CrossApp::CAWaterfallView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAWaterfallView_isAllowsMultipleSelection : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->isAllowsMultipleSelection();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAWaterfallView_isAllowsMultipleSelection : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAWaterfallView_getHighlightWaterfallCell(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAWaterfallView* cobj = (CrossApp::CAWaterfallView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAWaterfallView_getHighlightWaterfallCell : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CAWaterfallViewCell* ret = cobj->getHighlightWaterfallCell();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAWaterfallViewCell>(cx, (CrossApp::CAWaterfallViewCell*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAWaterfallView_getHighlightWaterfallCell : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAWaterfallView_ccTouchMoved(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAWaterfallView* cobj = (CrossApp::CAWaterfallView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAWaterfallView_ccTouchMoved : Invalid Native Object");
    if (argc == 2) {
        CrossApp::CATouch* arg0 = nullptr;
        CrossApp::CAEvent* arg1 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CATouch*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        do {
            if (args.get(1).isNull()) { arg1 = nullptr; break; }
            if (!args.get(1).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(1).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg1 = (CrossApp::CAEvent*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg1, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAWaterfallView_ccTouchMoved : Error processing arguments");
        cobj->ccTouchMoved(arg0, arg1);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAWaterfallView_ccTouchMoved : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_autogentestbindings_js_CAWaterfallView_setAllowsSelection(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAWaterfallView* cobj = (CrossApp::CAWaterfallView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAWaterfallView_setAllowsSelection : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        arg0 = JS::ToBoolean(args.get(0));
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAWaterfallView_setAllowsSelection : Error processing arguments");
        cobj->setAllowsSelection(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAWaterfallView_setAllowsSelection : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAWaterfallView_reloadData(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAWaterfallView* cobj = (CrossApp::CAWaterfallView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAWaterfallView_reloadData : Invalid Native Object");
    if (argc == 0) {
        cobj->reloadData();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAWaterfallView_reloadData : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAWaterfallView_setAllowsMultipleSelection(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAWaterfallView* cobj = (CrossApp::CAWaterfallView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAWaterfallView_setAllowsMultipleSelection : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        arg0 = JS::ToBoolean(args.get(0));
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAWaterfallView_setAllowsMultipleSelection : Error processing arguments");
        cobj->setAllowsMultipleSelection(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAWaterfallView_setAllowsMultipleSelection : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAWaterfallView_setShowsScrollIndicators(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAWaterfallView* cobj = (CrossApp::CAWaterfallView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAWaterfallView_setShowsScrollIndicators : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        arg0 = JS::ToBoolean(args.get(0));
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAWaterfallView_setShowsScrollIndicators : Error processing arguments");
        cobj->setShowsScrollIndicators(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAWaterfallView_setShowsScrollIndicators : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAWaterfallView_cellForRowAtIndexPath(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAWaterfallView* cobj = (CrossApp::CAWaterfallView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAWaterfallView_cellForRowAtIndexPath : Invalid Native Object");
    if (argc == 1) {
        unsigned int arg0 = 0;
        ok &= jsval_to_uint32(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAWaterfallView_cellForRowAtIndexPath : Error processing arguments");
        CrossApp::CAWaterfallViewCell* ret = cobj->cellForRowAtIndexPath(arg0);
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAWaterfallViewCell>(cx, (CrossApp::CAWaterfallViewCell*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAWaterfallView_cellForRowAtIndexPath : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAWaterfallView_setWaterfallFooterView(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAWaterfallView* cobj = (CrossApp::CAWaterfallView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAWaterfallView_setWaterfallFooterView : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAView* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAView*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAWaterfallView_setWaterfallFooterView : Error processing arguments");
        cobj->setWaterfallFooterView(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAWaterfallView_setWaterfallFooterView : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAWaterfallView_getColumnMargin(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAWaterfallView* cobj = (CrossApp::CAWaterfallView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAWaterfallView_getColumnMargin : Invalid Native Object");
    if (argc == 0) {
        unsigned int ret = cobj->getColumnMargin();
        jsval jsret = JSVAL_NULL;
        jsret = uint32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAWaterfallView_getColumnMargin : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAWaterfallView_getWaterfallFooterView(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAWaterfallView* cobj = (CrossApp::CAWaterfallView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAWaterfallView_getWaterfallFooterView : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CAView* ret = cobj->getWaterfallFooterView();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAView>(cx, (CrossApp::CAView*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAWaterfallView_getWaterfallFooterView : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAWaterfallView_setAlwaysBottomSectionFooter(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAWaterfallView* cobj = (CrossApp::CAWaterfallView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAWaterfallView_setAlwaysBottomSectionFooter : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        arg0 = JS::ToBoolean(args.get(0));
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAWaterfallView_setAlwaysBottomSectionFooter : Error processing arguments");
        cobj->setAlwaysBottomSectionFooter(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAWaterfallView_setAlwaysBottomSectionFooter : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAWaterfallView_onExitTransitionDidStart(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAWaterfallView* cobj = (CrossApp::CAWaterfallView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAWaterfallView_onExitTransitionDidStart : Invalid Native Object");
    if (argc == 0) {
        cobj->onExitTransitionDidStart();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAWaterfallView_onExitTransitionDidStart : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAWaterfallView_setItemMargin(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAWaterfallView* cobj = (CrossApp::CAWaterfallView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAWaterfallView_setItemMargin : Invalid Native Object");
    if (argc == 1) {
        unsigned int arg0 = 0;
        ok &= jsval_to_uint32(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAWaterfallView_setItemMargin : Error processing arguments");
        cobj->setItemMargin(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAWaterfallView_setItemMargin : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAWaterfallView_isAlwaysTopSectionHeader(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAWaterfallView* cobj = (CrossApp::CAWaterfallView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAWaterfallView_isAlwaysTopSectionHeader : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->isAlwaysTopSectionHeader();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAWaterfallView_isAlwaysTopSectionHeader : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAWaterfallView_displayingWaterfallCell(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAWaterfallView* cobj = (CrossApp::CAWaterfallView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAWaterfallView_displayingWaterfallCell : Invalid Native Object");
    if (argc == 0) {
        const CrossApp::CAVector<CrossApp::CAWaterfallViewCell *>& ret = cobj->displayingWaterfallCell();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAVector<CrossApp::CAWaterfallViewCell >&>(cx, (CrossApp::CAVector<CrossApp::CAWaterfallViewCell *>&)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAWaterfallView_displayingWaterfallCell : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAWaterfallView_ccTouchEnded(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAWaterfallView* cobj = (CrossApp::CAWaterfallView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAWaterfallView_ccTouchEnded : Invalid Native Object");
    if (argc == 2) {
        CrossApp::CATouch* arg0 = nullptr;
        CrossApp::CAEvent* arg1 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CATouch*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        do {
            if (args.get(1).isNull()) { arg1 = nullptr; break; }
            if (!args.get(1).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(1).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg1 = (CrossApp::CAEvent*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg1, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAWaterfallView_ccTouchEnded : Error processing arguments");
        cobj->ccTouchEnded(arg0, arg1);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAWaterfallView_ccTouchEnded : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_autogentestbindings_js_CAWaterfallView_getItemMargin(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAWaterfallView* cobj = (CrossApp::CAWaterfallView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAWaterfallView_getItemMargin : Invalid Native Object");
    if (argc == 0) {
        unsigned int ret = cobj->getItemMargin();
        jsval jsret = JSVAL_NULL;
        jsret = uint32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAWaterfallView_getItemMargin : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAWaterfallView_ccTouchCancelled(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAWaterfallView* cobj = (CrossApp::CAWaterfallView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAWaterfallView_ccTouchCancelled : Invalid Native Object");
    if (argc == 2) {
        CrossApp::CATouch* arg0 = nullptr;
        CrossApp::CAEvent* arg1 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CATouch*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        do {
            if (args.get(1).isNull()) { arg1 = nullptr; break; }
            if (!args.get(1).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(1).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg1 = (CrossApp::CAEvent*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg1, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAWaterfallView_ccTouchCancelled : Error processing arguments");
        cobj->ccTouchCancelled(arg0, arg1);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAWaterfallView_ccTouchCancelled : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_autogentestbindings_js_CAWaterfallView_setUnSelectRowAtIndexPath(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAWaterfallView* cobj = (CrossApp::CAWaterfallView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAWaterfallView_setUnSelectRowAtIndexPath : Invalid Native Object");
    if (argc == 1) {
        unsigned int arg0 = 0;
        ok &= jsval_to_uint32(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAWaterfallView_setUnSelectRowAtIndexPath : Error processing arguments");
        cobj->setUnSelectRowAtIndexPath(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAWaterfallView_setUnSelectRowAtIndexPath : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAWaterfallView_getWaterfallFooterHeight(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAWaterfallView* cobj = (CrossApp::CAWaterfallView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAWaterfallView_getWaterfallFooterHeight : Invalid Native Object");
    if (argc == 0) {
        unsigned int ret = cobj->getWaterfallFooterHeight();
        jsval jsret = JSVAL_NULL;
        jsret = uint32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAWaterfallView_getWaterfallFooterHeight : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAWaterfallView_switchPCMode(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAWaterfallView* cobj = (CrossApp::CAWaterfallView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAWaterfallView_switchPCMode : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        arg0 = JS::ToBoolean(args.get(0));
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAWaterfallView_switchPCMode : Error processing arguments");
        cobj->switchPCMode(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAWaterfallView_switchPCMode : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAWaterfallView_dequeueReusableCellWithIdentifier(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAWaterfallView* cobj = (CrossApp::CAWaterfallView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAWaterfallView_dequeueReusableCellWithIdentifier : Invalid Native Object");
    if (argc == 1) {
        const char* arg0 = nullptr;
        std::string arg0_tmp; ok &= jsval_to_std_string(cx, args.get(0), &arg0_tmp); arg0 = arg0_tmp.c_str();
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAWaterfallView_dequeueReusableCellWithIdentifier : Error processing arguments");
        CrossApp::CAWaterfallViewCell* ret = cobj->dequeueReusableCellWithIdentifier(arg0);
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAWaterfallViewCell>(cx, (CrossApp::CAWaterfallViewCell*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAWaterfallView_dequeueReusableCellWithIdentifier : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAWaterfallView_onEnterTransitionDidFinish(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAWaterfallView* cobj = (CrossApp::CAWaterfallView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAWaterfallView_onEnterTransitionDidFinish : Invalid Native Object");
    if (argc == 0) {
        cobj->onEnterTransitionDidFinish();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAWaterfallView_onEnterTransitionDidFinish : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAWaterfallView_createWithFrame(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        CrossApp::DRect arg0;
        ok &= jsval_to_drect(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAWaterfallView_createWithFrame : Error processing arguments");
        CrossApp::CAWaterfallView* ret = CrossApp::CAWaterfallView::createWithFrame(arg0);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAWaterfallView>(cx, (CrossApp::CAWaterfallView*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_autogentestbindings_js_CAWaterfallView_createWithFrame : wrong number of arguments");
    return false;
}

bool js_autogentestbindings_js_CAWaterfallView_createWithLayout(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        CrossApp::DRectLayout arg0;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (const CrossApp::DRectLayout&)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAWaterfallView_createWithLayout : Error processing arguments");
        CrossApp::CAWaterfallView* ret = CrossApp::CAWaterfallView::createWithLayout(arg0);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAWaterfallView>(cx, (CrossApp::CAWaterfallView*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_autogentestbindings_js_CAWaterfallView_createWithLayout : wrong number of arguments");
    return false;
}

bool js_autogentestbindings_js_CAWaterfallView_createWithCenter(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        CrossApp::DRect arg0;
        ok &= jsval_to_drect(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAWaterfallView_createWithCenter : Error processing arguments");
        CrossApp::CAWaterfallView* ret = CrossApp::CAWaterfallView::createWithCenter(arg0);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAWaterfallView>(cx, (CrossApp::CAWaterfallView*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_autogentestbindings_js_CAWaterfallView_createWithCenter : wrong number of arguments");
    return false;
}

bool js_autogentestbindings_js_CAWaterfallView_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    CrossApp::CAWaterfallView* cobj = new (std::nothrow) CrossApp::CAWaterfallView();
    TypeTest<CrossApp::CAWaterfallView> t;
    js_type_class_t *typeClass = nullptr;
    std::string typeName = t.s_name();
    auto typeMapIter = _js_global_type_map.find(typeName);
    CCAssert(typeMapIter != _js_global_type_map.end(), "Can't find the class type!");
    typeClass = typeMapIter->second;
    CCAssert(typeClass, "The value is null.");
    JS::RootedObject proto(cx, typeClass->proto.get());
    JS::RootedObject parent(cx, typeClass->parentProto.get());
    JS::RootedObject obj(cx, JS_NewObject(cx, typeClass->jsclass, proto, parent));
    args.rval().set(OBJECT_TO_JSVAL(obj));
    // link the native object with the javascript object
    js_proxy_t* p = jsb_new_proxy(cobj, obj);
    if (JS_HasProperty(cx, obj, "_ctor", &ok) && ok)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    return true;
}

extern JSObject *jsb_CrossApp_CAScrollView_prototype;

void js_CrossApp_CAWaterfallView_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOGINFO("jsbindings: finalizing JS object %p (CAWaterfallView)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::CAWaterfallView *nobj = static_cast<CrossApp::CAWaterfallView *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
void js_register_autogentestbindings_js_CAWaterfallView(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_CAWaterfallView_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_CAWaterfallView_class->name = "CAWaterfallView";
    jsb_CrossApp_CAWaterfallView_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_CAWaterfallView_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_CAWaterfallView_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_CAWaterfallView_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_CAWaterfallView_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_CAWaterfallView_class->resolve = JS_ResolveStub;
    jsb_CrossApp_CAWaterfallView_class->convert = JS_ConvertStub;
    jsb_CrossApp_CAWaterfallView_class->finalize = js_CrossApp_CAWaterfallView_finalize;
    jsb_CrossApp_CAWaterfallView_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("setWaterfallViewDelegate", js_autogentestbindings_js_CAWaterfallView_setWaterfallViewDelegate, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isAllowsSelection", js_autogentestbindings_js_CAWaterfallView_isAllowsSelection, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("mouseMovedOutSide", js_autogentestbindings_js_CAWaterfallView_mouseMovedOutSide, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getWaterfallViewDataSource", js_autogentestbindings_js_CAWaterfallView_getWaterfallViewDataSource, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("ccTouchBegan", js_autogentestbindings_js_CAWaterfallView_ccTouchBegan, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setColumnMargin", js_autogentestbindings_js_CAWaterfallView_setColumnMargin, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getWaterfallHeaderView", js_autogentestbindings_js_CAWaterfallView_getWaterfallHeaderView, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getColumnCount", js_autogentestbindings_js_CAWaterfallView_getColumnCount, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setAlwaysTopSectionHeader", js_autogentestbindings_js_CAWaterfallView_setAlwaysTopSectionHeader, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getWaterfallViewDelegate", js_autogentestbindings_js_CAWaterfallView_getWaterfallViewDelegate, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isAlwaysBottomSectionFooter", js_autogentestbindings_js_CAWaterfallView_isAlwaysBottomSectionFooter, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getWaterfallHeaderHeight", js_autogentestbindings_js_CAWaterfallView_getWaterfallHeaderHeight, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setColumnCount", js_autogentestbindings_js_CAWaterfallView_setColumnCount, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setWaterfallHeaderView", js_autogentestbindings_js_CAWaterfallView_setWaterfallHeaderView, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("mouseMoved", js_autogentestbindings_js_CAWaterfallView_mouseMoved, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setWaterfallViewDataSource", js_autogentestbindings_js_CAWaterfallView_setWaterfallViewDataSource, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setWaterfallFooterHeight", js_autogentestbindings_js_CAWaterfallView_setWaterfallFooterHeight, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setSelectRowAtIndexPath", js_autogentestbindings_js_CAWaterfallView_setSelectRowAtIndexPath, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setWaterfallHeaderHeight", js_autogentestbindings_js_CAWaterfallView_setWaterfallHeaderHeight, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("init", js_autogentestbindings_js_CAWaterfallView_init, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isAllowsMultipleSelection", js_autogentestbindings_js_CAWaterfallView_isAllowsMultipleSelection, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getHighlightWaterfallCell", js_autogentestbindings_js_CAWaterfallView_getHighlightWaterfallCell, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("ccTouchMoved", js_autogentestbindings_js_CAWaterfallView_ccTouchMoved, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setAllowsSelection", js_autogentestbindings_js_CAWaterfallView_setAllowsSelection, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("reloadData", js_autogentestbindings_js_CAWaterfallView_reloadData, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setAllowsMultipleSelection", js_autogentestbindings_js_CAWaterfallView_setAllowsMultipleSelection, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setShowsScrollIndicators", js_autogentestbindings_js_CAWaterfallView_setShowsScrollIndicators, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("cellForRowAtIndexPath", js_autogentestbindings_js_CAWaterfallView_cellForRowAtIndexPath, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setWaterfallFooterView", js_autogentestbindings_js_CAWaterfallView_setWaterfallFooterView, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getColumnMargin", js_autogentestbindings_js_CAWaterfallView_getColumnMargin, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getWaterfallFooterView", js_autogentestbindings_js_CAWaterfallView_getWaterfallFooterView, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setAlwaysBottomSectionFooter", js_autogentestbindings_js_CAWaterfallView_setAlwaysBottomSectionFooter, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("onExitTransitionDidStart", js_autogentestbindings_js_CAWaterfallView_onExitTransitionDidStart, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setItemMargin", js_autogentestbindings_js_CAWaterfallView_setItemMargin, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isAlwaysTopSectionHeader", js_autogentestbindings_js_CAWaterfallView_isAlwaysTopSectionHeader, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("displayingWaterfallCell", js_autogentestbindings_js_CAWaterfallView_displayingWaterfallCell, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("ccTouchEnded", js_autogentestbindings_js_CAWaterfallView_ccTouchEnded, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getItemMargin", js_autogentestbindings_js_CAWaterfallView_getItemMargin, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("ccTouchCancelled", js_autogentestbindings_js_CAWaterfallView_ccTouchCancelled, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setUnSelectRowAtIndexPath", js_autogentestbindings_js_CAWaterfallView_setUnSelectRowAtIndexPath, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getWaterfallFooterHeight", js_autogentestbindings_js_CAWaterfallView_getWaterfallFooterHeight, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("switchPCMode", js_autogentestbindings_js_CAWaterfallView_switchPCMode, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("dequeueReusableCellWithIdentifier", js_autogentestbindings_js_CAWaterfallView_dequeueReusableCellWithIdentifier, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("onEnterTransitionDidFinish", js_autogentestbindings_js_CAWaterfallView_onEnterTransitionDidFinish, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    static JSFunctionSpec st_funcs[] = {
        JS_FN("createWithFrame", js_autogentestbindings_js_CAWaterfallView_createWithFrame, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("createWithLayout", js_autogentestbindings_js_CAWaterfallView_createWithLayout, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("createWithCenter", js_autogentestbindings_js_CAWaterfallView_createWithCenter, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    jsb_CrossApp_CAWaterfallView_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_CAScrollView_prototype),
        jsb_CrossApp_CAWaterfallView_class,
        js_autogentestbindings_js_CAWaterfallView_constructor, 0, // constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27 
//  JS_SetPropertyAttributes(cx, global, "CAWaterfallView", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::CAWaterfallView> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_CAWaterfallView_class;
        p->proto = jsb_CrossApp_CAWaterfallView_prototype;
        p->parentProto = jsb_CrossApp_CAScrollView_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
}

JSClass  *jsb_CrossApp_CAWaterfallViewCell_class;
JSObject *jsb_CrossApp_CAWaterfallViewCell_prototype;

bool js_autogentestbindings_js_CAWaterfallViewCell_getContentView(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAWaterfallViewCell* cobj = (CrossApp::CAWaterfallViewCell *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAWaterfallViewCell_getContentView : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CAView* ret = cobj->getContentView();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAView>(cx, (CrossApp::CAView*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAWaterfallViewCell_getContentView : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAWaterfallViewCell_setReuseIdentifier(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAWaterfallViewCell* cobj = (CrossApp::CAWaterfallViewCell *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAWaterfallViewCell_setReuseIdentifier : Invalid Native Object");
    if (argc == 1) {
        std::string arg0;
        ok &= jsval_to_std_string(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAWaterfallViewCell_setReuseIdentifier : Error processing arguments");
        cobj->setReuseIdentifier(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAWaterfallViewCell_setReuseIdentifier : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAWaterfallViewCell_isAllowsSelected(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAWaterfallViewCell* cobj = (CrossApp::CAWaterfallViewCell *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAWaterfallViewCell_isAllowsSelected : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->isAllowsSelected();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAWaterfallViewCell_isAllowsSelected : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAWaterfallViewCell_getReuseIdentifier(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAWaterfallViewCell* cobj = (CrossApp::CAWaterfallViewCell *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAWaterfallViewCell_getReuseIdentifier : Invalid Native Object");
    if (argc == 0) {
        const std::string& ret = cobj->getReuseIdentifier();
        jsval jsret = JSVAL_NULL;
        jsret = std_string_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAWaterfallViewCell_getReuseIdentifier : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAWaterfallViewCell_setAllowsSelected(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAWaterfallViewCell* cobj = (CrossApp::CAWaterfallViewCell *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAWaterfallViewCell_setAllowsSelected : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        arg0 = JS::ToBoolean(args.get(0));
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAWaterfallViewCell_setAllowsSelected : Error processing arguments");
        cobj->setAllowsSelected(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAWaterfallViewCell_setAllowsSelected : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAWaterfallViewCell_setControlStateEffect(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAWaterfallViewCell* cobj = (CrossApp::CAWaterfallViewCell *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAWaterfallViewCell_setControlStateEffect : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        arg0 = JS::ToBoolean(args.get(0));
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAWaterfallViewCell_setControlStateEffect : Error processing arguments");
        cobj->setControlStateEffect(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAWaterfallViewCell_setControlStateEffect : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAWaterfallViewCell_getItemIndex(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAWaterfallViewCell* cobj = (CrossApp::CAWaterfallViewCell *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAWaterfallViewCell_getItemIndex : Invalid Native Object");
    if (argc == 0) {
        unsigned int ret = cobj->getItemIndex();
        jsval jsret = JSVAL_NULL;
        jsret = uint32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAWaterfallViewCell_getItemIndex : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAWaterfallViewCell_getBackgroundView(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAWaterfallViewCell* cobj = (CrossApp::CAWaterfallViewCell *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAWaterfallViewCell_getBackgroundView : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CAView* ret = cobj->getBackgroundView();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAView>(cx, (CrossApp::CAView*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAWaterfallViewCell_getBackgroundView : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAWaterfallViewCell_isControlStateEffect(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAWaterfallViewCell* cobj = (CrossApp::CAWaterfallViewCell *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAWaterfallViewCell_isControlStateEffect : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->isControlStateEffect();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAWaterfallViewCell_isControlStateEffect : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAWaterfallViewCell_initWithReuseIdentifier(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAWaterfallViewCell* cobj = (CrossApp::CAWaterfallViewCell *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAWaterfallViewCell_initWithReuseIdentifier : Invalid Native Object");
    if (argc == 1) {
        std::string arg0;
        ok &= jsval_to_std_string(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAWaterfallViewCell_initWithReuseIdentifier : Error processing arguments");
        bool ret = cobj->initWithReuseIdentifier(arg0);
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAWaterfallViewCell_initWithReuseIdentifier : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAWaterfallViewCell_setBackgroundView(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAWaterfallViewCell* cobj = (CrossApp::CAWaterfallViewCell *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAWaterfallViewCell_setBackgroundView : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAView* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAView*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAWaterfallViewCell_setBackgroundView : Error processing arguments");
        cobj->setBackgroundView(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAWaterfallViewCell_setBackgroundView : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAWaterfallViewCell_create(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        std::string arg0;
        ok &= jsval_to_std_string(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAWaterfallViewCell_create : Error processing arguments");
        CrossApp::CAWaterfallViewCell* ret = CrossApp::CAWaterfallViewCell::create(arg0);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAWaterfallViewCell>(cx, (CrossApp::CAWaterfallViewCell*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_autogentestbindings_js_CAWaterfallViewCell_create : wrong number of arguments");
    return false;
}

bool js_autogentestbindings_js_CAWaterfallViewCell_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    CrossApp::CAWaterfallViewCell* cobj = new (std::nothrow) CrossApp::CAWaterfallViewCell();
    TypeTest<CrossApp::CAWaterfallViewCell> t;
    js_type_class_t *typeClass = nullptr;
    std::string typeName = t.s_name();
    auto typeMapIter = _js_global_type_map.find(typeName);
    CCAssert(typeMapIter != _js_global_type_map.end(), "Can't find the class type!");
    typeClass = typeMapIter->second;
    CCAssert(typeClass, "The value is null.");
    JS::RootedObject proto(cx, typeClass->proto.get());
    JS::RootedObject parent(cx, typeClass->parentProto.get());
    JS::RootedObject obj(cx, JS_NewObject(cx, typeClass->jsclass, proto, parent));
    args.rval().set(OBJECT_TO_JSVAL(obj));
    // link the native object with the javascript object
    js_proxy_t* p = jsb_new_proxy(cobj, obj);
    if (JS_HasProperty(cx, obj, "_ctor", &ok) && ok)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    return true;
}

extern JSObject *jsb_CrossApp_CAControl_prototype;

void js_CrossApp_CAWaterfallViewCell_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOGINFO("jsbindings: finalizing JS object %p (CAWaterfallViewCell)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::CAWaterfallViewCell *nobj = static_cast<CrossApp::CAWaterfallViewCell *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
void js_register_autogentestbindings_js_CAWaterfallViewCell(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_CAWaterfallViewCell_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_CAWaterfallViewCell_class->name = "CAWaterfallViewCell";
    jsb_CrossApp_CAWaterfallViewCell_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_CAWaterfallViewCell_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_CAWaterfallViewCell_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_CAWaterfallViewCell_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_CAWaterfallViewCell_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_CAWaterfallViewCell_class->resolve = JS_ResolveStub;
    jsb_CrossApp_CAWaterfallViewCell_class->convert = JS_ConvertStub;
    jsb_CrossApp_CAWaterfallViewCell_class->finalize = js_CrossApp_CAWaterfallViewCell_finalize;
    jsb_CrossApp_CAWaterfallViewCell_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("getContentView", js_autogentestbindings_js_CAWaterfallViewCell_getContentView, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setReuseIdentifier", js_autogentestbindings_js_CAWaterfallViewCell_setReuseIdentifier, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isAllowsSelected", js_autogentestbindings_js_CAWaterfallViewCell_isAllowsSelected, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getReuseIdentifier", js_autogentestbindings_js_CAWaterfallViewCell_getReuseIdentifier, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setAllowsSelected", js_autogentestbindings_js_CAWaterfallViewCell_setAllowsSelected, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setControlStateEffect", js_autogentestbindings_js_CAWaterfallViewCell_setControlStateEffect, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getItemIndex", js_autogentestbindings_js_CAWaterfallViewCell_getItemIndex, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getBackgroundView", js_autogentestbindings_js_CAWaterfallViewCell_getBackgroundView, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isControlStateEffect", js_autogentestbindings_js_CAWaterfallViewCell_isControlStateEffect, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("initWithReuseIdentifier", js_autogentestbindings_js_CAWaterfallViewCell_initWithReuseIdentifier, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setBackgroundView", js_autogentestbindings_js_CAWaterfallViewCell_setBackgroundView, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    static JSFunctionSpec st_funcs[] = {
        JS_FN("create", js_autogentestbindings_js_CAWaterfallViewCell_create, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    jsb_CrossApp_CAWaterfallViewCell_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_CAControl_prototype),
        jsb_CrossApp_CAWaterfallViewCell_class,
        js_autogentestbindings_js_CAWaterfallViewCell_constructor, 0, // constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27 
//  JS_SetPropertyAttributes(cx, global, "CAWaterfallViewCell", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::CAWaterfallViewCell> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_CAWaterfallViewCell_class;
        p->proto = jsb_CrossApp_CAWaterfallViewCell_prototype;
        p->parentProto = jsb_CrossApp_CAControl_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
}

JSClass  *jsb_CrossApp_VPFrame_class;
JSObject *jsb_CrossApp_VPFrame_prototype;

bool js_autogentestbindings_js_VPFrame_getType(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::VPFrame* cobj = (CrossApp::VPFrame *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_VPFrame_getType : Invalid Native Object");
    if (argc == 0) {
        int ret = (int)cobj->getType();
        jsval jsret = JSVAL_NULL;
        jsret = int32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_VPFrame_getType : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_VPFrame_getDuration(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::VPFrame* cobj = (CrossApp::VPFrame *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_VPFrame_getDuration : Invalid Native Object");
    if (argc == 0) {
        const float& ret = cobj->getDuration();
        jsval jsret = JSVAL_NULL;
        jsret = DOUBLE_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_VPFrame_getDuration : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_VPFrame_setPosition(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::VPFrame* cobj = (CrossApp::VPFrame *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_VPFrame_setPosition : Invalid Native Object");
    if (argc == 1) {
        double arg0 = 0;
        ok &= JS::ToNumber( cx, args.get(0), &arg0) && !isnan(arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_VPFrame_setPosition : Error processing arguments");
        cobj->setPosition(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_VPFrame_setPosition : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_VPFrame_setDuration(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::VPFrame* cobj = (CrossApp::VPFrame *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_VPFrame_setDuration : Invalid Native Object");
    if (argc == 1) {
        double arg0 = 0;
        ok &= JS::ToNumber( cx, args.get(0), &arg0) && !isnan(arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_VPFrame_setDuration : Error processing arguments");
        cobj->setDuration(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_VPFrame_setDuration : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_VPFrame_getPosition(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::VPFrame* cobj = (CrossApp::VPFrame *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_VPFrame_getPosition : Invalid Native Object");
    if (argc == 0) {
        const float& ret = cobj->getPosition();
        jsval jsret = JSVAL_NULL;
        jsret = DOUBLE_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_VPFrame_getPosition : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_VPFrame_setType(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::VPFrame* cobj = (CrossApp::VPFrame *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_VPFrame_setType : Invalid Native Object");
    if (argc == 1) {
        CrossApp::VPFrameType arg0;
        ok &= jsval_to_int32(cx, args.get(0), (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_VPFrame_setType : Error processing arguments");
        cobj->setType(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_VPFrame_setType : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_VPFrame_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    CrossApp::VPFrame* cobj = new (std::nothrow) CrossApp::VPFrame();
    TypeTest<CrossApp::VPFrame> t;
    js_type_class_t *typeClass = nullptr;
    std::string typeName = t.s_name();
    auto typeMapIter = _js_global_type_map.find(typeName);
    CCAssert(typeMapIter != _js_global_type_map.end(), "Can't find the class type!");
    typeClass = typeMapIter->second;
    CCAssert(typeClass, "The value is null.");
    JS::RootedObject proto(cx, typeClass->proto.get());
    JS::RootedObject parent(cx, typeClass->parentProto.get());
    JS::RootedObject obj(cx, JS_NewObject(cx, typeClass->jsclass, proto, parent));
    args.rval().set(OBJECT_TO_JSVAL(obj));
    // link the native object with the javascript object
    js_proxy_t* p = jsb_new_proxy(cobj, obj);
    if (JS_HasProperty(cx, obj, "_ctor", &ok) && ok)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    return true;
}

void js_CrossApp_VPFrame_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOGINFO("jsbindings: finalizing JS object %p (VPFrame)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::VPFrame *nobj = static_cast<CrossApp::VPFrame *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
void js_register_autogentestbindings_js_VPFrame(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_VPFrame_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_VPFrame_class->name = "VPFrame";
    jsb_CrossApp_VPFrame_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_VPFrame_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_VPFrame_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_VPFrame_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_VPFrame_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_VPFrame_class->resolve = JS_ResolveStub;
    jsb_CrossApp_VPFrame_class->convert = JS_ConvertStub;
    jsb_CrossApp_VPFrame_class->finalize = js_CrossApp_VPFrame_finalize;
    jsb_CrossApp_VPFrame_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("getType", js_autogentestbindings_js_VPFrame_getType, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getDuration", js_autogentestbindings_js_VPFrame_getDuration, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setPosition", js_autogentestbindings_js_VPFrame_setPosition, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setDuration", js_autogentestbindings_js_VPFrame_setDuration, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getPosition", js_autogentestbindings_js_VPFrame_getPosition, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setType", js_autogentestbindings_js_VPFrame_setType, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    JSFunctionSpec *st_funcs = NULL;

    jsb_CrossApp_VPFrame_prototype = JS_InitClass(
        cx, global,
        JS::NullPtr(), // parent proto
        jsb_CrossApp_VPFrame_class,
        js_autogentestbindings_js_VPFrame_constructor, 0, // constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27 
//  JS_SetPropertyAttributes(cx, global, "VPFrame", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::VPFrame> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_VPFrame_class;
        p->proto = jsb_CrossApp_VPFrame_prototype;
        p->parentProto = NULL;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
}

JSClass  *jsb_CrossApp_VPAudioFrame_class;
JSObject *jsb_CrossApp_VPAudioFrame_prototype;

bool js_autogentestbindings_js_VPAudioFrame_setData(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::VPAudioFrame* cobj = (CrossApp::VPAudioFrame *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_VPAudioFrame_setData : Invalid Native Object");
    if (argc == 1) {
        char* arg0 = nullptr;
        std::string arg0_tmp; ok &= jsval_to_std_string(cx, args.get(0), &arg0_tmp); arg0 = arg0_tmp.c_str();
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_VPAudioFrame_setData : Error processing arguments");
        cobj->setData(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_VPAudioFrame_setData : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_VPAudioFrame_setDataLength(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::VPAudioFrame* cobj = (CrossApp::VPAudioFrame *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_VPAudioFrame_setDataLength : Invalid Native Object");
    if (argc == 1) {
        unsigned int arg0 = 0;
        ok &= jsval_to_uint32(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_VPAudioFrame_setDataLength : Error processing arguments");
        cobj->setDataLength(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_VPAudioFrame_setDataLength : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_VPAudioFrame_getData(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::VPAudioFrame* cobj = (CrossApp::VPAudioFrame *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_VPAudioFrame_getData : Invalid Native Object");
    if (argc == 0) {
        char* ret = cobj->getData();
        jsval jsret = JSVAL_NULL;
        jsret = c_string_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_VPAudioFrame_getData : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_VPAudioFrame_getDataLength(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::VPAudioFrame* cobj = (CrossApp::VPAudioFrame *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_VPAudioFrame_getDataLength : Invalid Native Object");
    if (argc == 0) {
        const unsigned int& ret = cobj->getDataLength();
        jsval jsret = JSVAL_NULL;
        jsret = uint32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_VPAudioFrame_getDataLength : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_VPAudioFrame_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    CrossApp::VPAudioFrame* cobj = new (std::nothrow) CrossApp::VPAudioFrame();
    TypeTest<CrossApp::VPAudioFrame> t;
    js_type_class_t *typeClass = nullptr;
    std::string typeName = t.s_name();
    auto typeMapIter = _js_global_type_map.find(typeName);
    CCAssert(typeMapIter != _js_global_type_map.end(), "Can't find the class type!");
    typeClass = typeMapIter->second;
    CCAssert(typeClass, "The value is null.");
    JS::RootedObject proto(cx, typeClass->proto.get());
    JS::RootedObject parent(cx, typeClass->parentProto.get());
    JS::RootedObject obj(cx, JS_NewObject(cx, typeClass->jsclass, proto, parent));
    args.rval().set(OBJECT_TO_JSVAL(obj));
    // link the native object with the javascript object
    js_proxy_t* p = jsb_new_proxy(cobj, obj);
    if (JS_HasProperty(cx, obj, "_ctor", &ok) && ok)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    return true;
}

extern JSObject *jsb_CrossApp_VPFrame_prototype;

void js_CrossApp_VPAudioFrame_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOGINFO("jsbindings: finalizing JS object %p (VPAudioFrame)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::VPAudioFrame *nobj = static_cast<CrossApp::VPAudioFrame *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
void js_register_autogentestbindings_js_VPAudioFrame(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_VPAudioFrame_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_VPAudioFrame_class->name = "VPAudioFrame";
    jsb_CrossApp_VPAudioFrame_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_VPAudioFrame_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_VPAudioFrame_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_VPAudioFrame_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_VPAudioFrame_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_VPAudioFrame_class->resolve = JS_ResolveStub;
    jsb_CrossApp_VPAudioFrame_class->convert = JS_ConvertStub;
    jsb_CrossApp_VPAudioFrame_class->finalize = js_CrossApp_VPAudioFrame_finalize;
    jsb_CrossApp_VPAudioFrame_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("setData", js_autogentestbindings_js_VPAudioFrame_setData, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setDataLength", js_autogentestbindings_js_VPAudioFrame_setDataLength, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getData", js_autogentestbindings_js_VPAudioFrame_getData, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getDataLength", js_autogentestbindings_js_VPAudioFrame_getDataLength, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    JSFunctionSpec *st_funcs = NULL;

    jsb_CrossApp_VPAudioFrame_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_VPFrame_prototype),
        jsb_CrossApp_VPAudioFrame_class,
        js_autogentestbindings_js_VPAudioFrame_constructor, 0, // constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27 
//  JS_SetPropertyAttributes(cx, global, "VPAudioFrame", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::VPAudioFrame> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_VPAudioFrame_class;
        p->proto = jsb_CrossApp_VPAudioFrame_prototype;
        p->parentProto = jsb_CrossApp_VPFrame_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
}

JSClass  *jsb_CrossApp_VPVideoFrame_class;
JSObject *jsb_CrossApp_VPVideoFrame_prototype;

bool js_autogentestbindings_js_VPVideoFrame_setHeight(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::VPVideoFrame* cobj = (CrossApp::VPVideoFrame *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_VPVideoFrame_setHeight : Invalid Native Object");
    if (argc == 1) {
        unsigned int arg0 = 0;
        ok &= jsval_to_uint32(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_VPVideoFrame_setHeight : Error processing arguments");
        cobj->setHeight(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_VPVideoFrame_setHeight : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_VPVideoFrame_setFormat(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::VPVideoFrame* cobj = (CrossApp::VPVideoFrame *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_VPVideoFrame_setFormat : Invalid Native Object");
    if (argc == 1) {
        CrossApp::VPVideoFrameFormat arg0;
        ok &= jsval_to_int32(cx, args.get(0), (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_VPVideoFrame_setFormat : Error processing arguments");
        cobj->setFormat(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_VPVideoFrame_setFormat : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_VPVideoFrame_setWidth(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::VPVideoFrame* cobj = (CrossApp::VPVideoFrame *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_VPVideoFrame_setWidth : Invalid Native Object");
    if (argc == 1) {
        unsigned int arg0 = 0;
        ok &= jsval_to_uint32(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_VPVideoFrame_setWidth : Error processing arguments");
        cobj->setWidth(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_VPVideoFrame_setWidth : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_VPVideoFrame_getHeight(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::VPVideoFrame* cobj = (CrossApp::VPVideoFrame *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_VPVideoFrame_getHeight : Invalid Native Object");
    if (argc == 0) {
        const unsigned int& ret = cobj->getHeight();
        jsval jsret = JSVAL_NULL;
        jsret = uint32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_VPVideoFrame_getHeight : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_VPVideoFrame_getWidth(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::VPVideoFrame* cobj = (CrossApp::VPVideoFrame *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_VPVideoFrame_getWidth : Invalid Native Object");
    if (argc == 0) {
        const unsigned int& ret = cobj->getWidth();
        jsval jsret = JSVAL_NULL;
        jsret = uint32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_VPVideoFrame_getWidth : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_VPVideoFrame_getFormat(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::VPVideoFrame* cobj = (CrossApp::VPVideoFrame *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_VPVideoFrame_getFormat : Invalid Native Object");
    if (argc == 0) {
        int ret = (int)cobj->getFormat();
        jsval jsret = JSVAL_NULL;
        jsret = int32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_VPVideoFrame_getFormat : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_VPVideoFrame_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    CrossApp::VPVideoFrame* cobj = new (std::nothrow) CrossApp::VPVideoFrame();
    TypeTest<CrossApp::VPVideoFrame> t;
    js_type_class_t *typeClass = nullptr;
    std::string typeName = t.s_name();
    auto typeMapIter = _js_global_type_map.find(typeName);
    CCAssert(typeMapIter != _js_global_type_map.end(), "Can't find the class type!");
    typeClass = typeMapIter->second;
    CCAssert(typeClass, "The value is null.");
    JS::RootedObject proto(cx, typeClass->proto.get());
    JS::RootedObject parent(cx, typeClass->parentProto.get());
    JS::RootedObject obj(cx, JS_NewObject(cx, typeClass->jsclass, proto, parent));
    args.rval().set(OBJECT_TO_JSVAL(obj));
    // link the native object with the javascript object
    js_proxy_t* p = jsb_new_proxy(cobj, obj);
    if (JS_HasProperty(cx, obj, "_ctor", &ok) && ok)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    return true;
}

extern JSObject *jsb_CrossApp_VPFrame_prototype;

void js_CrossApp_VPVideoFrame_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOGINFO("jsbindings: finalizing JS object %p (VPVideoFrame)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::VPVideoFrame *nobj = static_cast<CrossApp::VPVideoFrame *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
void js_register_autogentestbindings_js_VPVideoFrame(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_VPVideoFrame_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_VPVideoFrame_class->name = "VPVideoFrame";
    jsb_CrossApp_VPVideoFrame_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_VPVideoFrame_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_VPVideoFrame_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_VPVideoFrame_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_VPVideoFrame_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_VPVideoFrame_class->resolve = JS_ResolveStub;
    jsb_CrossApp_VPVideoFrame_class->convert = JS_ConvertStub;
    jsb_CrossApp_VPVideoFrame_class->finalize = js_CrossApp_VPVideoFrame_finalize;
    jsb_CrossApp_VPVideoFrame_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("setHeight", js_autogentestbindings_js_VPVideoFrame_setHeight, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setFormat", js_autogentestbindings_js_VPVideoFrame_setFormat, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setWidth", js_autogentestbindings_js_VPVideoFrame_setWidth, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getHeight", js_autogentestbindings_js_VPVideoFrame_getHeight, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getWidth", js_autogentestbindings_js_VPVideoFrame_getWidth, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getFormat", js_autogentestbindings_js_VPVideoFrame_getFormat, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    JSFunctionSpec *st_funcs = NULL;

    jsb_CrossApp_VPVideoFrame_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_VPFrame_prototype),
        jsb_CrossApp_VPVideoFrame_class,
        js_autogentestbindings_js_VPVideoFrame_constructor, 0, // constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27 
//  JS_SetPropertyAttributes(cx, global, "VPVideoFrame", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::VPVideoFrame> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_VPVideoFrame_class;
        p->proto = jsb_CrossApp_VPVideoFrame_prototype;
        p->parentProto = jsb_CrossApp_VPFrame_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
}

JSClass  *jsb_CrossApp_VPVideoFrameRGB_class;
JSObject *jsb_CrossApp_VPVideoFrameRGB_prototype;

bool js_autogentestbindings_js_VPVideoFrameRGB_getDataLength(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::VPVideoFrameRGB* cobj = (CrossApp::VPVideoFrameRGB *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_VPVideoFrameRGB_getDataLength : Invalid Native Object");
    if (argc == 0) {
        const unsigned int& ret = cobj->getDataLength();
        jsval jsret = JSVAL_NULL;
        jsret = uint32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_VPVideoFrameRGB_getDataLength : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_VPVideoFrameRGB_setLineSize(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::VPVideoFrameRGB* cobj = (CrossApp::VPVideoFrameRGB *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_VPVideoFrameRGB_setLineSize : Invalid Native Object");
    if (argc == 1) {
        unsigned int arg0 = 0;
        ok &= jsval_to_uint32(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_VPVideoFrameRGB_setLineSize : Error processing arguments");
        cobj->setLineSize(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_VPVideoFrameRGB_setLineSize : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_VPVideoFrameRGB_getLineSize(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::VPVideoFrameRGB* cobj = (CrossApp::VPVideoFrameRGB *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_VPVideoFrameRGB_getLineSize : Invalid Native Object");
    if (argc == 0) {
        const unsigned int& ret = cobj->getLineSize();
        jsval jsret = JSVAL_NULL;
        jsret = uint32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_VPVideoFrameRGB_getLineSize : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_VPVideoFrameRGB_setDataLength(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::VPVideoFrameRGB* cobj = (CrossApp::VPVideoFrameRGB *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_VPVideoFrameRGB_setDataLength : Invalid Native Object");
    if (argc == 1) {
        unsigned int arg0 = 0;
        ok &= jsval_to_uint32(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_VPVideoFrameRGB_setDataLength : Error processing arguments");
        cobj->setDataLength(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_VPVideoFrameRGB_setDataLength : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_VPVideoFrameRGB_getData(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::VPVideoFrameRGB* cobj = (CrossApp::VPVideoFrameRGB *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_VPVideoFrameRGB_getData : Invalid Native Object");
    if (argc == 0) {
        char* ret = cobj->getData();
        jsval jsret = JSVAL_NULL;
        jsret = c_string_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_VPVideoFrameRGB_getData : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_VPVideoFrameRGB_setData(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::VPVideoFrameRGB* cobj = (CrossApp::VPVideoFrameRGB *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_VPVideoFrameRGB_setData : Invalid Native Object");
    if (argc == 1) {
        char* arg0 = nullptr;
        std::string arg0_tmp; ok &= jsval_to_std_string(cx, args.get(0), &arg0_tmp); arg0 = arg0_tmp.c_str();
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_VPVideoFrameRGB_setData : Error processing arguments");
        cobj->setData(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_VPVideoFrameRGB_setData : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_VPVideoFrameRGB_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    CrossApp::VPVideoFrameRGB* cobj = new (std::nothrow) CrossApp::VPVideoFrameRGB();
    TypeTest<CrossApp::VPVideoFrameRGB> t;
    js_type_class_t *typeClass = nullptr;
    std::string typeName = t.s_name();
    auto typeMapIter = _js_global_type_map.find(typeName);
    CCAssert(typeMapIter != _js_global_type_map.end(), "Can't find the class type!");
    typeClass = typeMapIter->second;
    CCAssert(typeClass, "The value is null.");
    JS::RootedObject proto(cx, typeClass->proto.get());
    JS::RootedObject parent(cx, typeClass->parentProto.get());
    JS::RootedObject obj(cx, JS_NewObject(cx, typeClass->jsclass, proto, parent));
    args.rval().set(OBJECT_TO_JSVAL(obj));
    // link the native object with the javascript object
    js_proxy_t* p = jsb_new_proxy(cobj, obj);
    if (JS_HasProperty(cx, obj, "_ctor", &ok) && ok)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    return true;
}

extern JSObject *jsb_CrossApp_VPVideoFrame_prototype;

void js_CrossApp_VPVideoFrameRGB_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOGINFO("jsbindings: finalizing JS object %p (VPVideoFrameRGB)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::VPVideoFrameRGB *nobj = static_cast<CrossApp::VPVideoFrameRGB *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
void js_register_autogentestbindings_js_VPVideoFrameRGB(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_VPVideoFrameRGB_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_VPVideoFrameRGB_class->name = "VPVideoFrameRGB";
    jsb_CrossApp_VPVideoFrameRGB_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_VPVideoFrameRGB_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_VPVideoFrameRGB_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_VPVideoFrameRGB_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_VPVideoFrameRGB_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_VPVideoFrameRGB_class->resolve = JS_ResolveStub;
    jsb_CrossApp_VPVideoFrameRGB_class->convert = JS_ConvertStub;
    jsb_CrossApp_VPVideoFrameRGB_class->finalize = js_CrossApp_VPVideoFrameRGB_finalize;
    jsb_CrossApp_VPVideoFrameRGB_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("getDataLength", js_autogentestbindings_js_VPVideoFrameRGB_getDataLength, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setLineSize", js_autogentestbindings_js_VPVideoFrameRGB_setLineSize, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getLineSize", js_autogentestbindings_js_VPVideoFrameRGB_getLineSize, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setDataLength", js_autogentestbindings_js_VPVideoFrameRGB_setDataLength, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getData", js_autogentestbindings_js_VPVideoFrameRGB_getData, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setData", js_autogentestbindings_js_VPVideoFrameRGB_setData, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    JSFunctionSpec *st_funcs = NULL;

    jsb_CrossApp_VPVideoFrameRGB_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_VPVideoFrame_prototype),
        jsb_CrossApp_VPVideoFrameRGB_class,
        js_autogentestbindings_js_VPVideoFrameRGB_constructor, 0, // constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27 
//  JS_SetPropertyAttributes(cx, global, "VPVideoFrameRGB", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::VPVideoFrameRGB> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_VPVideoFrameRGB_class;
        p->proto = jsb_CrossApp_VPVideoFrameRGB_prototype;
        p->parentProto = jsb_CrossApp_VPVideoFrame_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
}

JSClass  *jsb_CrossApp_VPVideoFrameYUV_class;
JSObject *jsb_CrossApp_VPVideoFrameYUV_prototype;

bool js_autogentestbindings_js_VPVideoFrameYUV_getChromaB(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::VPVideoFrameYUV* cobj = (CrossApp::VPVideoFrameYUV *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_VPVideoFrameYUV_getChromaB : Invalid Native Object");
    if (argc == 0) {
        char* ret = cobj->getChromaB();
        jsval jsret = JSVAL_NULL;
        jsret = c_string_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_VPVideoFrameYUV_getChromaB : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_VPVideoFrameYUV_setChromaR(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::VPVideoFrameYUV* cobj = (CrossApp::VPVideoFrameYUV *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_VPVideoFrameYUV_setChromaR : Invalid Native Object");
    if (argc == 1) {
        char* arg0 = nullptr;
        std::string arg0_tmp; ok &= jsval_to_std_string(cx, args.get(0), &arg0_tmp); arg0 = arg0_tmp.c_str();
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_VPVideoFrameYUV_setChromaR : Error processing arguments");
        cobj->setChromaR(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_VPVideoFrameYUV_setChromaR : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_VPVideoFrameYUV_setChromaRLength(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::VPVideoFrameYUV* cobj = (CrossApp::VPVideoFrameYUV *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_VPVideoFrameYUV_setChromaRLength : Invalid Native Object");
    if (argc == 1) {
        unsigned int arg0 = 0;
        ok &= jsval_to_uint32(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_VPVideoFrameYUV_setChromaRLength : Error processing arguments");
        cobj->setChromaRLength(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_VPVideoFrameYUV_setChromaRLength : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_VPVideoFrameYUV_getChromaBLength(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::VPVideoFrameYUV* cobj = (CrossApp::VPVideoFrameYUV *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_VPVideoFrameYUV_getChromaBLength : Invalid Native Object");
    if (argc == 0) {
        const unsigned int& ret = cobj->getChromaBLength();
        jsval jsret = JSVAL_NULL;
        jsret = uint32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_VPVideoFrameYUV_getChromaBLength : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_VPVideoFrameYUV_getLumaLength(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::VPVideoFrameYUV* cobj = (CrossApp::VPVideoFrameYUV *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_VPVideoFrameYUV_getLumaLength : Invalid Native Object");
    if (argc == 0) {
        const unsigned int& ret = cobj->getLumaLength();
        jsval jsret = JSVAL_NULL;
        jsret = uint32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_VPVideoFrameYUV_getLumaLength : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_VPVideoFrameYUV_getChromaRLength(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::VPVideoFrameYUV* cobj = (CrossApp::VPVideoFrameYUV *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_VPVideoFrameYUV_getChromaRLength : Invalid Native Object");
    if (argc == 0) {
        const unsigned int& ret = cobj->getChromaRLength();
        jsval jsret = JSVAL_NULL;
        jsret = uint32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_VPVideoFrameYUV_getChromaRLength : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_VPVideoFrameYUV_setLumaLength(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::VPVideoFrameYUV* cobj = (CrossApp::VPVideoFrameYUV *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_VPVideoFrameYUV_setLumaLength : Invalid Native Object");
    if (argc == 1) {
        unsigned int arg0 = 0;
        ok &= jsval_to_uint32(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_VPVideoFrameYUV_setLumaLength : Error processing arguments");
        cobj->setLumaLength(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_VPVideoFrameYUV_setLumaLength : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_VPVideoFrameYUV_getLuma(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::VPVideoFrameYUV* cobj = (CrossApp::VPVideoFrameYUV *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_VPVideoFrameYUV_getLuma : Invalid Native Object");
    if (argc == 0) {
        char* ret = cobj->getLuma();
        jsval jsret = JSVAL_NULL;
        jsret = c_string_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_VPVideoFrameYUV_getLuma : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_VPVideoFrameYUV_getChromaR(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::VPVideoFrameYUV* cobj = (CrossApp::VPVideoFrameYUV *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_VPVideoFrameYUV_getChromaR : Invalid Native Object");
    if (argc == 0) {
        char* ret = cobj->getChromaR();
        jsval jsret = JSVAL_NULL;
        jsret = c_string_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_VPVideoFrameYUV_getChromaR : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_VPVideoFrameYUV_setChromaB(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::VPVideoFrameYUV* cobj = (CrossApp::VPVideoFrameYUV *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_VPVideoFrameYUV_setChromaB : Invalid Native Object");
    if (argc == 1) {
        char* arg0 = nullptr;
        std::string arg0_tmp; ok &= jsval_to_std_string(cx, args.get(0), &arg0_tmp); arg0 = arg0_tmp.c_str();
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_VPVideoFrameYUV_setChromaB : Error processing arguments");
        cobj->setChromaB(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_VPVideoFrameYUV_setChromaB : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_VPVideoFrameYUV_setChromaBLength(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::VPVideoFrameYUV* cobj = (CrossApp::VPVideoFrameYUV *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_VPVideoFrameYUV_setChromaBLength : Invalid Native Object");
    if (argc == 1) {
        unsigned int arg0 = 0;
        ok &= jsval_to_uint32(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_VPVideoFrameYUV_setChromaBLength : Error processing arguments");
        cobj->setChromaBLength(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_VPVideoFrameYUV_setChromaBLength : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_VPVideoFrameYUV_setLuma(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::VPVideoFrameYUV* cobj = (CrossApp::VPVideoFrameYUV *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_VPVideoFrameYUV_setLuma : Invalid Native Object");
    if (argc == 1) {
        char* arg0 = nullptr;
        std::string arg0_tmp; ok &= jsval_to_std_string(cx, args.get(0), &arg0_tmp); arg0 = arg0_tmp.c_str();
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_VPVideoFrameYUV_setLuma : Error processing arguments");
        cobj->setLuma(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_VPVideoFrameYUV_setLuma : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_VPVideoFrameYUV_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    CrossApp::VPVideoFrameYUV* cobj = new (std::nothrow) CrossApp::VPVideoFrameYUV();
    TypeTest<CrossApp::VPVideoFrameYUV> t;
    js_type_class_t *typeClass = nullptr;
    std::string typeName = t.s_name();
    auto typeMapIter = _js_global_type_map.find(typeName);
    CCAssert(typeMapIter != _js_global_type_map.end(), "Can't find the class type!");
    typeClass = typeMapIter->second;
    CCAssert(typeClass, "The value is null.");
    JS::RootedObject proto(cx, typeClass->proto.get());
    JS::RootedObject parent(cx, typeClass->parentProto.get());
    JS::RootedObject obj(cx, JS_NewObject(cx, typeClass->jsclass, proto, parent));
    args.rval().set(OBJECT_TO_JSVAL(obj));
    // link the native object with the javascript object
    js_proxy_t* p = jsb_new_proxy(cobj, obj);
    if (JS_HasProperty(cx, obj, "_ctor", &ok) && ok)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    return true;
}

extern JSObject *jsb_CrossApp_VPVideoFrame_prototype;

void js_CrossApp_VPVideoFrameYUV_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOGINFO("jsbindings: finalizing JS object %p (VPVideoFrameYUV)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::VPVideoFrameYUV *nobj = static_cast<CrossApp::VPVideoFrameYUV *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
void js_register_autogentestbindings_js_VPVideoFrameYUV(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_VPVideoFrameYUV_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_VPVideoFrameYUV_class->name = "VPVideoFrameYUV";
    jsb_CrossApp_VPVideoFrameYUV_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_VPVideoFrameYUV_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_VPVideoFrameYUV_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_VPVideoFrameYUV_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_VPVideoFrameYUV_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_VPVideoFrameYUV_class->resolve = JS_ResolveStub;
    jsb_CrossApp_VPVideoFrameYUV_class->convert = JS_ConvertStub;
    jsb_CrossApp_VPVideoFrameYUV_class->finalize = js_CrossApp_VPVideoFrameYUV_finalize;
    jsb_CrossApp_VPVideoFrameYUV_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("getChromaB", js_autogentestbindings_js_VPVideoFrameYUV_getChromaB, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setChromaR", js_autogentestbindings_js_VPVideoFrameYUV_setChromaR, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setChromaRLength", js_autogentestbindings_js_VPVideoFrameYUV_setChromaRLength, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getChromaBLength", js_autogentestbindings_js_VPVideoFrameYUV_getChromaBLength, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getLumaLength", js_autogentestbindings_js_VPVideoFrameYUV_getLumaLength, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getChromaRLength", js_autogentestbindings_js_VPVideoFrameYUV_getChromaRLength, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setLumaLength", js_autogentestbindings_js_VPVideoFrameYUV_setLumaLength, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getLuma", js_autogentestbindings_js_VPVideoFrameYUV_getLuma, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getChromaR", js_autogentestbindings_js_VPVideoFrameYUV_getChromaR, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setChromaB", js_autogentestbindings_js_VPVideoFrameYUV_setChromaB, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setChromaBLength", js_autogentestbindings_js_VPVideoFrameYUV_setChromaBLength, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setLuma", js_autogentestbindings_js_VPVideoFrameYUV_setLuma, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    JSFunctionSpec *st_funcs = NULL;

    jsb_CrossApp_VPVideoFrameYUV_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_VPVideoFrame_prototype),
        jsb_CrossApp_VPVideoFrameYUV_class,
        js_autogentestbindings_js_VPVideoFrameYUV_constructor, 0, // constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27 
//  JS_SetPropertyAttributes(cx, global, "VPVideoFrameYUV", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::VPVideoFrameYUV> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_VPVideoFrameYUV_class;
        p->proto = jsb_CrossApp_VPVideoFrameYUV_prototype;
        p->parentProto = jsb_CrossApp_VPVideoFrame_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
}

JSClass  *jsb_CrossApp_VPDecoder_class;
JSObject *jsb_CrossApp_VPDecoder_prototype;

bool js_autogentestbindings_js_VPDecoder_isValidAudio(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::VPDecoder* cobj = (CrossApp::VPDecoder *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_VPDecoder_isValidAudio : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->isValidAudio();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_VPDecoder_isValidAudio : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_VPDecoder_getStartTime(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::VPDecoder* cobj = (CrossApp::VPDecoder *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_VPDecoder_getStartTime : Invalid Native Object");
    if (argc == 0) {
        double ret = cobj->getStartTime();
        jsval jsret = JSVAL_NULL;
        jsret = DOUBLE_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_VPDecoder_getStartTime : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_VPDecoder_openFile(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::VPDecoder* cobj = (CrossApp::VPDecoder *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_VPDecoder_openFile : Invalid Native Object");
    if (argc == 1) {
        std::string arg0;
        ok &= jsval_to_std_string(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_VPDecoder_openFile : Error processing arguments");
        bool ret = cobj->openFile(arg0);
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_VPDecoder_openFile : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_VPDecoder_isEOF(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::VPDecoder* cobj = (CrossApp::VPDecoder *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_VPDecoder_isEOF : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->isEOF();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_VPDecoder_isEOF : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_VPDecoder_getFrameHeight(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::VPDecoder* cobj = (CrossApp::VPDecoder *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_VPDecoder_getFrameHeight : Invalid Native Object");
    if (argc == 0) {
        unsigned int ret = cobj->getFrameHeight();
        jsval jsret = JSVAL_NULL;
        jsret = uint32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_VPDecoder_getFrameHeight : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_VPDecoder_isValidVideo(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::VPDecoder* cobj = (CrossApp::VPDecoder *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_VPDecoder_isValidVideo : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->isValidVideo();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_VPDecoder_isValidVideo : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_VPDecoder_decodeFrames(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::VPDecoder* cobj = (CrossApp::VPDecoder *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_VPDecoder_decodeFrames : Invalid Native Object");
    if (argc == 1) {
        double arg0 = 0;
        ok &= JS::ToNumber( cx, args.get(0), &arg0) && !isnan(arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_VPDecoder_decodeFrames : Error processing arguments");
        std::vector<CrossApp::VPFrame *, std::allocator<CrossApp::VPFrame *> > ret = cobj->decodeFrames(arg0);
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<std::vector<CrossApp::VPFrame , std::allocator<CrossApp::VPFrame > >>(cx, (std::vector<CrossApp::VPFrame *, std::allocator<CrossApp::VPFrame *> >)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_VPDecoder_decodeFrames : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_VPDecoder_getDuration(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::VPDecoder* cobj = (CrossApp::VPDecoder *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_VPDecoder_getDuration : Invalid Native Object");
    if (argc == 0) {
        double ret = cobj->getDuration();
        jsval jsret = JSVAL_NULL;
        jsret = DOUBLE_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_VPDecoder_getDuration : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_VPDecoder_getFirstVideoFrame(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::VPDecoder* cobj = (CrossApp::VPDecoder *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_VPDecoder_getFirstVideoFrame : Invalid Native Object");
    if (argc == 0) {
        CrossApp::VPVideoFrame* ret = cobj->getFirstVideoFrame();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::VPVideoFrame>(cx, (CrossApp::VPVideoFrame*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_VPDecoder_getFirstVideoFrame : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_VPDecoder_enableAudio(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::VPDecoder* cobj = (CrossApp::VPDecoder *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_VPDecoder_enableAudio : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        arg0 = JS::ToBoolean(args.get(0));
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_VPDecoder_enableAudio : Error processing arguments");
        cobj->enableAudio(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_VPDecoder_enableAudio : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_VPDecoder_getSampleRate(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::VPDecoder* cobj = (CrossApp::VPDecoder *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_VPDecoder_getSampleRate : Invalid Native Object");
    if (argc == 0) {
        double ret = cobj->getSampleRate();
        jsval jsret = JSVAL_NULL;
        jsret = DOUBLE_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_VPDecoder_getSampleRate : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_VPDecoder_getFrameWidth(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::VPDecoder* cobj = (CrossApp::VPDecoder *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_VPDecoder_getFrameWidth : Invalid Native Object");
    if (argc == 0) {
        unsigned int ret = cobj->getFrameWidth();
        jsval jsret = JSVAL_NULL;
        jsret = uint32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_VPDecoder_getFrameWidth : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_VPDecoder_onAudioCallback(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::VPDecoder* cobj = (CrossApp::VPDecoder *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_VPDecoder_onAudioCallback : Invalid Native Object");
    if (argc == 2) {
        unsigned char* arg0 = nullptr;
        int arg1 = 0;
        #pragma warning NO CONVERSION TO NATIVE FOR unsigned char*
		ok = false;
        ok &= jsval_to_int32(cx, args.get(1), (int32_t *)&arg1);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_VPDecoder_onAudioCallback : Error processing arguments");
        cobj->onAudioCallback(arg0, arg1);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_VPDecoder_onAudioCallback : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_autogentestbindings_js_VPDecoder_setPosition(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::VPDecoder* cobj = (CrossApp::VPDecoder *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_VPDecoder_setPosition : Invalid Native Object");
    if (argc == 1) {
        double arg0 = 0;
        ok &= JS::ToNumber( cx, args.get(0), &arg0) && !isnan(arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_VPDecoder_setPosition : Error processing arguments");
        cobj->setPosition(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_VPDecoder_setPosition : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_VPDecoder_setupVideoFrameFormat(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::VPDecoder* cobj = (CrossApp::VPDecoder *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_VPDecoder_setupVideoFrameFormat : Invalid Native Object");
    if (argc == 1) {
        CrossApp::VPVideoFrameFormat arg0;
        ok &= jsval_to_int32(cx, args.get(0), (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_VPDecoder_setupVideoFrameFormat : Error processing arguments");
        bool ret = cobj->setupVideoFrameFormat(arg0);
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_VPDecoder_setupVideoFrameFormat : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_VPDecoder_getPosition(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::VPDecoder* cobj = (CrossApp::VPDecoder *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_VPDecoder_getPosition : Invalid Native Object");
    if (argc == 0) {
        double ret = cobj->getPosition();
        jsval jsret = JSVAL_NULL;
        jsret = DOUBLE_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_VPDecoder_getPosition : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_VPDecoder_closeFile(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::VPDecoder* cobj = (CrossApp::VPDecoder *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_VPDecoder_closeFile : Invalid Native Object");
    if (argc == 0) {
        cobj->closeFile();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_VPDecoder_closeFile : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_VPDecoder_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    CrossApp::VPDecoder* cobj = new (std::nothrow) CrossApp::VPDecoder();
    TypeTest<CrossApp::VPDecoder> t;
    js_type_class_t *typeClass = nullptr;
    std::string typeName = t.s_name();
    auto typeMapIter = _js_global_type_map.find(typeName);
    CCAssert(typeMapIter != _js_global_type_map.end(), "Can't find the class type!");
    typeClass = typeMapIter->second;
    CCAssert(typeClass, "The value is null.");
    JS::RootedObject proto(cx, typeClass->proto.get());
    JS::RootedObject parent(cx, typeClass->parentProto.get());
    JS::RootedObject obj(cx, JS_NewObject(cx, typeClass->jsclass, proto, parent));
    args.rval().set(OBJECT_TO_JSVAL(obj));
    // link the native object with the javascript object
    js_proxy_t* p = jsb_new_proxy(cobj, obj);
    if (JS_HasProperty(cx, obj, "_ctor", &ok) && ok)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    return true;
}

void js_CrossApp_VPDecoder_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOGINFO("jsbindings: finalizing JS object %p (VPDecoder)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::VPDecoder *nobj = static_cast<CrossApp::VPDecoder *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
void js_register_autogentestbindings_js_VPDecoder(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_VPDecoder_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_VPDecoder_class->name = "VPDecoder";
    jsb_CrossApp_VPDecoder_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_VPDecoder_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_VPDecoder_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_VPDecoder_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_VPDecoder_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_VPDecoder_class->resolve = JS_ResolveStub;
    jsb_CrossApp_VPDecoder_class->convert = JS_ConvertStub;
    jsb_CrossApp_VPDecoder_class->finalize = js_CrossApp_VPDecoder_finalize;
    jsb_CrossApp_VPDecoder_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("isValidAudio", js_autogentestbindings_js_VPDecoder_isValidAudio, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getStartTime", js_autogentestbindings_js_VPDecoder_getStartTime, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("openFile", js_autogentestbindings_js_VPDecoder_openFile, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isEOF", js_autogentestbindings_js_VPDecoder_isEOF, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getFrameHeight", js_autogentestbindings_js_VPDecoder_getFrameHeight, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isValidVideo", js_autogentestbindings_js_VPDecoder_isValidVideo, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("decodeFrames", js_autogentestbindings_js_VPDecoder_decodeFrames, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getDuration", js_autogentestbindings_js_VPDecoder_getDuration, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getFirstVideoFrame", js_autogentestbindings_js_VPDecoder_getFirstVideoFrame, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("enableAudio", js_autogentestbindings_js_VPDecoder_enableAudio, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getSampleRate", js_autogentestbindings_js_VPDecoder_getSampleRate, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getFrameWidth", js_autogentestbindings_js_VPDecoder_getFrameWidth, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("onAudioCallback", js_autogentestbindings_js_VPDecoder_onAudioCallback, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setPosition", js_autogentestbindings_js_VPDecoder_setPosition, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setupVideoFrameFormat", js_autogentestbindings_js_VPDecoder_setupVideoFrameFormat, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getPosition", js_autogentestbindings_js_VPDecoder_getPosition, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("closeFile", js_autogentestbindings_js_VPDecoder_closeFile, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    JSFunctionSpec *st_funcs = NULL;

    jsb_CrossApp_VPDecoder_prototype = JS_InitClass(
        cx, global,
        JS::NullPtr(), // parent proto
        jsb_CrossApp_VPDecoder_class,
        js_autogentestbindings_js_VPDecoder_constructor, 0, // constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27 
//  JS_SetPropertyAttributes(cx, global, "VPDecoder", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::VPDecoder> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_VPDecoder_class;
        p->proto = jsb_CrossApp_VPDecoder_prototype;
        p->parentProto = NULL;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
}

JSClass  *jsb_CrossApp_VPFrameRender_class;
JSObject *jsb_CrossApp_VPFrameRender_prototype;

bool js_autogentestbindings_js_VPFrameRender_updateVertices(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::VPFrameRender* cobj = (CrossApp::VPFrameRender *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_VPFrameRender_updateVertices : Invalid Native Object");
    if (argc == 4) {
        double arg0 = 0;
        double arg1 = 0;
        double arg2 = 0;
        double arg3 = 0;
        ok &= JS::ToNumber( cx, args.get(0), &arg0) && !isnan(arg0);
        ok &= JS::ToNumber( cx, args.get(1), &arg1) && !isnan(arg1);
        ok &= JS::ToNumber( cx, args.get(2), &arg2) && !isnan(arg2);
        ok &= JS::ToNumber( cx, args.get(3), &arg3) && !isnan(arg3);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_VPFrameRender_updateVertices : Error processing arguments");
        CrossApp::DRect ret = cobj->updateVertices(arg0, arg1, arg2, arg3);
        jsval jsret = JSVAL_NULL;
        jsret = drect_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_VPFrameRender_updateVertices : wrong number of arguments: %d, was expecting %d", argc, 4);
    return false;
}
bool js_autogentestbindings_js_VPFrameRender_draw(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::VPFrameRender* cobj = (CrossApp::VPFrameRender *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_VPFrameRender_draw : Invalid Native Object");
    if (argc == 2) {
        CrossApp::VPVideoFrame* arg0 = nullptr;
        long arg1 = 0;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::VPVideoFrame*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        ok &= jsval_to_long(cx, args.get(1), &arg1);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_VPFrameRender_draw : Error processing arguments");
        cobj->draw(arg0, arg1);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_VPFrameRender_draw : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_autogentestbindings_js_VPFrameRender_fragmentShader(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::VPFrameRender* cobj = (CrossApp::VPFrameRender *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_VPFrameRender_fragmentShader : Invalid Native Object");
    if (argc == 0) {
        const char* ret = cobj->fragmentShader();
        jsval jsret = JSVAL_NULL;
        jsret = c_string_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_VPFrameRender_fragmentShader : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_VPFrameRender_setFrame(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::VPFrameRender* cobj = (CrossApp::VPFrameRender *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_VPFrameRender_setFrame : Invalid Native Object");
    if (argc == 1) {
        CrossApp::VPVideoFrame* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::VPVideoFrame*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_VPFrameRender_setFrame : Error processing arguments");
        cobj->setFrame(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_VPFrameRender_setFrame : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_VPFrameRender_isValid(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::VPFrameRender* cobj = (CrossApp::VPFrameRender *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_VPFrameRender_isValid : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->isValid();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_VPFrameRender_isValid : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_VPFrameRender_prepareRender(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::VPFrameRender* cobj = (CrossApp::VPFrameRender *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_VPFrameRender_prepareRender : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->prepareRender();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_VPFrameRender_prepareRender : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_VPFrameRender_loadShaders(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::VPFrameRender* cobj = (CrossApp::VPFrameRender *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_VPFrameRender_loadShaders : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->loadShaders();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_VPFrameRender_loadShaders : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_VPFrameRender_key(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::VPFrameRender* cobj = (CrossApp::VPFrameRender *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_VPFrameRender_key : Invalid Native Object");
    if (argc == 0) {
        const char* ret = cobj->key();
        jsval jsret = JSVAL_NULL;
        jsret = c_string_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_VPFrameRender_key : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_VPFrameRender_resolveUniforms(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::VPFrameRender* cobj = (CrossApp::VPFrameRender *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_VPFrameRender_resolveUniforms : Invalid Native Object");
    if (argc == 1) {
        unsigned int arg0 = 0;
        ok &= jsval_to_uint32(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_VPFrameRender_resolveUniforms : Error processing arguments");
        cobj->resolveUniforms(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_VPFrameRender_resolveUniforms : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_VPFrameRender_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    CrossApp::VPFrameRender* cobj = new (std::nothrow) CrossApp::VPFrameRender();
    TypeTest<CrossApp::VPFrameRender> t;
    js_type_class_t *typeClass = nullptr;
    std::string typeName = t.s_name();
    auto typeMapIter = _js_global_type_map.find(typeName);
    CCAssert(typeMapIter != _js_global_type_map.end(), "Can't find the class type!");
    typeClass = typeMapIter->second;
    CCAssert(typeClass, "The value is null.");
    JS::RootedObject proto(cx, typeClass->proto.get());
    JS::RootedObject parent(cx, typeClass->parentProto.get());
    JS::RootedObject obj(cx, JS_NewObject(cx, typeClass->jsclass, proto, parent));
    args.rval().set(OBJECT_TO_JSVAL(obj));
    // link the native object with the javascript object
    js_proxy_t* p = jsb_new_proxy(cobj, obj);
    if (JS_HasProperty(cx, obj, "_ctor", &ok) && ok)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    return true;
}

void js_CrossApp_VPFrameRender_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOGINFO("jsbindings: finalizing JS object %p (VPFrameRender)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::VPFrameRender *nobj = static_cast<CrossApp::VPFrameRender *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
void js_register_autogentestbindings_js_VPFrameRender(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_VPFrameRender_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_VPFrameRender_class->name = "VPFrameRender";
    jsb_CrossApp_VPFrameRender_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_VPFrameRender_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_VPFrameRender_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_VPFrameRender_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_VPFrameRender_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_VPFrameRender_class->resolve = JS_ResolveStub;
    jsb_CrossApp_VPFrameRender_class->convert = JS_ConvertStub;
    jsb_CrossApp_VPFrameRender_class->finalize = js_CrossApp_VPFrameRender_finalize;
    jsb_CrossApp_VPFrameRender_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("updateVertices", js_autogentestbindings_js_VPFrameRender_updateVertices, 4, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("draw", js_autogentestbindings_js_VPFrameRender_draw, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("fragmentShader", js_autogentestbindings_js_VPFrameRender_fragmentShader, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setFrame", js_autogentestbindings_js_VPFrameRender_setFrame, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isValid", js_autogentestbindings_js_VPFrameRender_isValid, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("prepareRender", js_autogentestbindings_js_VPFrameRender_prepareRender, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("loadShaders", js_autogentestbindings_js_VPFrameRender_loadShaders, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("key", js_autogentestbindings_js_VPFrameRender_key, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("resolveUniforms", js_autogentestbindings_js_VPFrameRender_resolveUniforms, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    JSFunctionSpec *st_funcs = NULL;

    jsb_CrossApp_VPFrameRender_prototype = JS_InitClass(
        cx, global,
        JS::NullPtr(), // parent proto
        jsb_CrossApp_VPFrameRender_class,
        js_autogentestbindings_js_VPFrameRender_constructor, 0, // constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27 
//  JS_SetPropertyAttributes(cx, global, "VPFrameRender", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::VPFrameRender> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_VPFrameRender_class;
        p->proto = jsb_CrossApp_VPFrameRender_prototype;
        p->parentProto = NULL;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
}

JSClass  *jsb_CrossApp_VPFrameRenderRGB_class;
JSObject *jsb_CrossApp_VPFrameRenderRGB_prototype;

bool js_autogentestbindings_js_VPFrameRenderRGB_fragmentShader(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::VPFrameRenderRGB* cobj = (CrossApp::VPFrameRenderRGB *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_VPFrameRenderRGB_fragmentShader : Invalid Native Object");
    if (argc == 0) {
        const char* ret = cobj->fragmentShader();
        jsval jsret = JSVAL_NULL;
        jsret = c_string_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_VPFrameRenderRGB_fragmentShader : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_VPFrameRenderRGB_setFrame(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::VPFrameRenderRGB* cobj = (CrossApp::VPFrameRenderRGB *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_VPFrameRenderRGB_setFrame : Invalid Native Object");
    if (argc == 1) {
        CrossApp::VPVideoFrame* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::VPVideoFrame*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_VPFrameRenderRGB_setFrame : Error processing arguments");
        cobj->setFrame(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_VPFrameRenderRGB_setFrame : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_VPFrameRenderRGB_isValid(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::VPFrameRenderRGB* cobj = (CrossApp::VPFrameRenderRGB *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_VPFrameRenderRGB_isValid : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->isValid();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_VPFrameRenderRGB_isValid : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_VPFrameRenderRGB_prepareRender(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::VPFrameRenderRGB* cobj = (CrossApp::VPFrameRenderRGB *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_VPFrameRenderRGB_prepareRender : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->prepareRender();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_VPFrameRenderRGB_prepareRender : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_VPFrameRenderRGB_resolveUniforms(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::VPFrameRenderRGB* cobj = (CrossApp::VPFrameRenderRGB *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_VPFrameRenderRGB_resolveUniforms : Invalid Native Object");
    if (argc == 1) {
        unsigned int arg0 = 0;
        ok &= jsval_to_uint32(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_VPFrameRenderRGB_resolveUniforms : Error processing arguments");
        cobj->resolveUniforms(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_VPFrameRenderRGB_resolveUniforms : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_VPFrameRenderRGB_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    CrossApp::VPFrameRenderRGB* cobj = new (std::nothrow) CrossApp::VPFrameRenderRGB();
    TypeTest<CrossApp::VPFrameRenderRGB> t;
    js_type_class_t *typeClass = nullptr;
    std::string typeName = t.s_name();
    auto typeMapIter = _js_global_type_map.find(typeName);
    CCAssert(typeMapIter != _js_global_type_map.end(), "Can't find the class type!");
    typeClass = typeMapIter->second;
    CCAssert(typeClass, "The value is null.");
    JS::RootedObject proto(cx, typeClass->proto.get());
    JS::RootedObject parent(cx, typeClass->parentProto.get());
    JS::RootedObject obj(cx, JS_NewObject(cx, typeClass->jsclass, proto, parent));
    args.rval().set(OBJECT_TO_JSVAL(obj));
    // link the native object with the javascript object
    js_proxy_t* p = jsb_new_proxy(cobj, obj);
    if (JS_HasProperty(cx, obj, "_ctor", &ok) && ok)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    return true;
}

extern JSObject *jsb_CrossApp_VPFrameRender_prototype;

void js_CrossApp_VPFrameRenderRGB_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOGINFO("jsbindings: finalizing JS object %p (VPFrameRenderRGB)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::VPFrameRenderRGB *nobj = static_cast<CrossApp::VPFrameRenderRGB *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
void js_register_autogentestbindings_js_VPFrameRenderRGB(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_VPFrameRenderRGB_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_VPFrameRenderRGB_class->name = "VPFrameRenderRGB";
    jsb_CrossApp_VPFrameRenderRGB_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_VPFrameRenderRGB_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_VPFrameRenderRGB_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_VPFrameRenderRGB_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_VPFrameRenderRGB_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_VPFrameRenderRGB_class->resolve = JS_ResolveStub;
    jsb_CrossApp_VPFrameRenderRGB_class->convert = JS_ConvertStub;
    jsb_CrossApp_VPFrameRenderRGB_class->finalize = js_CrossApp_VPFrameRenderRGB_finalize;
    jsb_CrossApp_VPFrameRenderRGB_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("fragmentShader", js_autogentestbindings_js_VPFrameRenderRGB_fragmentShader, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setFrame", js_autogentestbindings_js_VPFrameRenderRGB_setFrame, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isValid", js_autogentestbindings_js_VPFrameRenderRGB_isValid, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("prepareRender", js_autogentestbindings_js_VPFrameRenderRGB_prepareRender, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("resolveUniforms", js_autogentestbindings_js_VPFrameRenderRGB_resolveUniforms, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    JSFunctionSpec *st_funcs = NULL;

    jsb_CrossApp_VPFrameRenderRGB_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_VPFrameRender_prototype),
        jsb_CrossApp_VPFrameRenderRGB_class,
        js_autogentestbindings_js_VPFrameRenderRGB_constructor, 0, // constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27 
//  JS_SetPropertyAttributes(cx, global, "VPFrameRenderRGB", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::VPFrameRenderRGB> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_VPFrameRenderRGB_class;
        p->proto = jsb_CrossApp_VPFrameRenderRGB_prototype;
        p->parentProto = jsb_CrossApp_VPFrameRender_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
}

JSClass  *jsb_CrossApp_VPFrameRenderYUV_class;
JSObject *jsb_CrossApp_VPFrameRenderYUV_prototype;

bool js_autogentestbindings_js_VPFrameRenderYUV_fragmentShader(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::VPFrameRenderYUV* cobj = (CrossApp::VPFrameRenderYUV *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_VPFrameRenderYUV_fragmentShader : Invalid Native Object");
    if (argc == 0) {
        const char* ret = cobj->fragmentShader();
        jsval jsret = JSVAL_NULL;
        jsret = c_string_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_VPFrameRenderYUV_fragmentShader : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_VPFrameRenderYUV_setFrame(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::VPFrameRenderYUV* cobj = (CrossApp::VPFrameRenderYUV *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_VPFrameRenderYUV_setFrame : Invalid Native Object");
    if (argc == 1) {
        CrossApp::VPVideoFrame* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::VPVideoFrame*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_VPFrameRenderYUV_setFrame : Error processing arguments");
        cobj->setFrame(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_VPFrameRenderYUV_setFrame : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_VPFrameRenderYUV_isValid(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::VPFrameRenderYUV* cobj = (CrossApp::VPFrameRenderYUV *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_VPFrameRenderYUV_isValid : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->isValid();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_VPFrameRenderYUV_isValid : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_VPFrameRenderYUV_prepareRender(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::VPFrameRenderYUV* cobj = (CrossApp::VPFrameRenderYUV *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_VPFrameRenderYUV_prepareRender : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->prepareRender();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_VPFrameRenderYUV_prepareRender : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_VPFrameRenderYUV_resolveUniforms(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::VPFrameRenderYUV* cobj = (CrossApp::VPFrameRenderYUV *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_VPFrameRenderYUV_resolveUniforms : Invalid Native Object");
    if (argc == 1) {
        unsigned int arg0 = 0;
        ok &= jsval_to_uint32(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_VPFrameRenderYUV_resolveUniforms : Error processing arguments");
        cobj->resolveUniforms(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_VPFrameRenderYUV_resolveUniforms : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_VPFrameRenderYUV_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    CrossApp::VPFrameRenderYUV* cobj = new (std::nothrow) CrossApp::VPFrameRenderYUV();
    TypeTest<CrossApp::VPFrameRenderYUV> t;
    js_type_class_t *typeClass = nullptr;
    std::string typeName = t.s_name();
    auto typeMapIter = _js_global_type_map.find(typeName);
    CCAssert(typeMapIter != _js_global_type_map.end(), "Can't find the class type!");
    typeClass = typeMapIter->second;
    CCAssert(typeClass, "The value is null.");
    JS::RootedObject proto(cx, typeClass->proto.get());
    JS::RootedObject parent(cx, typeClass->parentProto.get());
    JS::RootedObject obj(cx, JS_NewObject(cx, typeClass->jsclass, proto, parent));
    args.rval().set(OBJECT_TO_JSVAL(obj));
    // link the native object with the javascript object
    js_proxy_t* p = jsb_new_proxy(cobj, obj);
    if (JS_HasProperty(cx, obj, "_ctor", &ok) && ok)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    return true;
}

extern JSObject *jsb_CrossApp_VPFrameRender_prototype;

void js_CrossApp_VPFrameRenderYUV_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOGINFO("jsbindings: finalizing JS object %p (VPFrameRenderYUV)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::VPFrameRenderYUV *nobj = static_cast<CrossApp::VPFrameRenderYUV *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
void js_register_autogentestbindings_js_VPFrameRenderYUV(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_VPFrameRenderYUV_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_VPFrameRenderYUV_class->name = "VPFrameRenderYUV";
    jsb_CrossApp_VPFrameRenderYUV_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_VPFrameRenderYUV_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_VPFrameRenderYUV_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_VPFrameRenderYUV_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_VPFrameRenderYUV_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_VPFrameRenderYUV_class->resolve = JS_ResolveStub;
    jsb_CrossApp_VPFrameRenderYUV_class->convert = JS_ConvertStub;
    jsb_CrossApp_VPFrameRenderYUV_class->finalize = js_CrossApp_VPFrameRenderYUV_finalize;
    jsb_CrossApp_VPFrameRenderYUV_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("fragmentShader", js_autogentestbindings_js_VPFrameRenderYUV_fragmentShader, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setFrame", js_autogentestbindings_js_VPFrameRenderYUV_setFrame, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isValid", js_autogentestbindings_js_VPFrameRenderYUV_isValid, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("prepareRender", js_autogentestbindings_js_VPFrameRenderYUV_prepareRender, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("resolveUniforms", js_autogentestbindings_js_VPFrameRenderYUV_resolveUniforms, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    JSFunctionSpec *st_funcs = NULL;

    jsb_CrossApp_VPFrameRenderYUV_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_VPFrameRender_prototype),
        jsb_CrossApp_VPFrameRenderYUV_class,
        js_autogentestbindings_js_VPFrameRenderYUV_constructor, 0, // constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27 
//  JS_SetPropertyAttributes(cx, global, "VPFrameRenderYUV", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::VPFrameRenderYUV> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_VPFrameRenderYUV_class;
        p->proto = jsb_CrossApp_VPFrameRenderYUV_prototype;
        p->parentProto = jsb_CrossApp_VPFrameRender_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
}

JSClass  *jsb_CrossApp_CAVideoPlayerViewDelegate_class;
JSObject *jsb_CrossApp_CAVideoPlayerViewDelegate_prototype;

bool js_autogentestbindings_js_CAVideoPlayerViewDelegate_movieFinishedCallback(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAVideoPlayerViewDelegate* cobj = (CrossApp::CAVideoPlayerViewDelegate *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAVideoPlayerViewDelegate_movieFinishedCallback : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAVideoPlayerView* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAVideoPlayerView*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAVideoPlayerViewDelegate_movieFinishedCallback : Error processing arguments");
        cobj->movieFinishedCallback(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAVideoPlayerViewDelegate_movieFinishedCallback : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}

void js_CrossApp_CAVideoPlayerViewDelegate_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOGINFO("jsbindings: finalizing JS object %p (CAVideoPlayerViewDelegate)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::CAVideoPlayerViewDelegate *nobj = static_cast<CrossApp::CAVideoPlayerViewDelegate *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
void js_register_autogentestbindings_js_CAVideoPlayerViewDelegate(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_CAVideoPlayerViewDelegate_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_CAVideoPlayerViewDelegate_class->name = "CAVideoPlayerViewDelegate";
    jsb_CrossApp_CAVideoPlayerViewDelegate_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_CAVideoPlayerViewDelegate_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_CAVideoPlayerViewDelegate_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_CAVideoPlayerViewDelegate_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_CAVideoPlayerViewDelegate_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_CAVideoPlayerViewDelegate_class->resolve = JS_ResolveStub;
    jsb_CrossApp_CAVideoPlayerViewDelegate_class->convert = JS_ConvertStub;
    jsb_CrossApp_CAVideoPlayerViewDelegate_class->finalize = js_CrossApp_CAVideoPlayerViewDelegate_finalize;
    jsb_CrossApp_CAVideoPlayerViewDelegate_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("movieFinishedCallback", js_autogentestbindings_js_CAVideoPlayerViewDelegate_movieFinishedCallback, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    JSFunctionSpec *st_funcs = NULL;

    jsb_CrossApp_CAVideoPlayerViewDelegate_prototype = JS_InitClass(
        cx, global,
        JS::NullPtr(), // parent proto
        jsb_CrossApp_CAVideoPlayerViewDelegate_class,
        dummy_constructor<CrossApp::CAVideoPlayerViewDelegate>, 0, // no constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27 
//  JS_SetPropertyAttributes(cx, global, "CAVideoPlayerViewDelegate", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::CAVideoPlayerViewDelegate> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_CAVideoPlayerViewDelegate_class;
        p->proto = jsb_CrossApp_CAVideoPlayerViewDelegate_prototype;
        p->parentProto = NULL;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
}

JSClass  *jsb_CrossApp_CAVideoPlayerView_class;
JSObject *jsb_CrossApp_CAVideoPlayerView_prototype;

bool js_autogentestbindings_js_CAVideoPlayerView_setPlayerViewDelegate(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAVideoPlayerView* cobj = (CrossApp::CAVideoPlayerView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAVideoPlayerView_setPlayerViewDelegate : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAVideoPlayerViewDelegate* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAVideoPlayerViewDelegate*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAVideoPlayerView_setPlayerViewDelegate : Error processing arguments");
        cobj->setPlayerViewDelegate(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAVideoPlayerView_setPlayerViewDelegate : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAVideoPlayerView_play(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAVideoPlayerView* cobj = (CrossApp::CAVideoPlayerView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAVideoPlayerView_play : Invalid Native Object");
    if (argc == 0) {
        cobj->play();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAVideoPlayerView_play : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAVideoPlayerView_pause(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAVideoPlayerView* cobj = (CrossApp::CAVideoPlayerView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAVideoPlayerView_pause : Invalid Native Object");
    if (argc == 0) {
        cobj->pause();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAVideoPlayerView_pause : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAVideoPlayerView_setFirstVideoFrame(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAVideoPlayerView* cobj = (CrossApp::CAVideoPlayerView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAVideoPlayerView_setFirstVideoFrame : Invalid Native Object");
    if (argc == 0) {
        cobj->setFirstVideoFrame();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAVideoPlayerView_setFirstVideoFrame : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAVideoPlayerView_getDuration(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAVideoPlayerView* cobj = (CrossApp::CAVideoPlayerView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAVideoPlayerView_getDuration : Invalid Native Object");
    if (argc == 0) {
        double ret = cobj->getDuration();
        jsval jsret = JSVAL_NULL;
        jsret = DOUBLE_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAVideoPlayerView_getDuration : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAVideoPlayerView_enableAudio(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAVideoPlayerView* cobj = (CrossApp::CAVideoPlayerView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAVideoPlayerView_enableAudio : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        arg0 = JS::ToBoolean(args.get(0));
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAVideoPlayerView_enableAudio : Error processing arguments");
        cobj->enableAudio(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAVideoPlayerView_enableAudio : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAVideoPlayerView_setUrl(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAVideoPlayerView* cobj = (CrossApp::CAVideoPlayerView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAVideoPlayerView_setUrl : Invalid Native Object");
    if (argc == 1) {
        std::string arg0;
        ok &= jsval_to_std_string(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAVideoPlayerView_setUrl : Error processing arguments");
        cobj->setUrl(arg0);
        args.rval().setUndefined();
        return true;
    }
    if (argc == 2) {
        std::string arg0;
        bool arg1;
        ok &= jsval_to_std_string(cx, args.get(0), &arg0);
        arg1 = JS::ToBoolean(args.get(1));
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAVideoPlayerView_setUrl : Error processing arguments");
        cobj->setUrl(arg0, arg1);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAVideoPlayerView_setUrl : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAVideoPlayerView_isDecoderInited(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAVideoPlayerView* cobj = (CrossApp::CAVideoPlayerView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAVideoPlayerView_isDecoderInited : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->isDecoderInited();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAVideoPlayerView_isDecoderInited : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAVideoPlayerView_setFullPath(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAVideoPlayerView* cobj = (CrossApp::CAVideoPlayerView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAVideoPlayerView_setFullPath : Invalid Native Object");
    if (argc == 1) {
        std::string arg0;
        ok &= jsval_to_std_string(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAVideoPlayerView_setFullPath : Error processing arguments");
        cobj->setFullPath(arg0);
        args.rval().setUndefined();
        return true;
    }
    if (argc == 2) {
        std::string arg0;
        bool arg1;
        ok &= jsval_to_std_string(cx, args.get(0), &arg0);
        arg1 = JS::ToBoolean(args.get(1));
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAVideoPlayerView_setFullPath : Error processing arguments");
        cobj->setFullPath(arg0, arg1);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAVideoPlayerView_setFullPath : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAVideoPlayerView_setPosition(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAVideoPlayerView* cobj = (CrossApp::CAVideoPlayerView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAVideoPlayerView_setPosition : Invalid Native Object");
    if (argc == 1) {
        double arg0 = 0;
        ok &= JS::ToNumber( cx, args.get(0), &arg0) && !isnan(arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAVideoPlayerView_setPosition : Error processing arguments");
        cobj->setPosition(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAVideoPlayerView_setPosition : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAVideoPlayerView_isPlaying(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAVideoPlayerView* cobj = (CrossApp::CAVideoPlayerView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAVideoPlayerView_isPlaying : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->isPlaying();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAVideoPlayerView_isPlaying : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAVideoPlayerView_getPlayerViewDelegate(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAVideoPlayerView* cobj = (CrossApp::CAVideoPlayerView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAVideoPlayerView_getPlayerViewDelegate : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CAVideoPlayerViewDelegate* ret = cobj->getPlayerViewDelegate();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAVideoPlayerViewDelegate>(cx, (CrossApp::CAVideoPlayerViewDelegate*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAVideoPlayerView_getPlayerViewDelegate : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAVideoPlayerView_getPosition(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAVideoPlayerView* cobj = (CrossApp::CAVideoPlayerView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAVideoPlayerView_getPosition : Invalid Native Object");
    if (argc == 0) {
        double ret = cobj->getPosition();
        jsval jsret = JSVAL_NULL;
        jsret = DOUBLE_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAVideoPlayerView_getPosition : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAVideoPlayerView_create(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    if (argc == 0) {
        CrossApp::CAVideoPlayerView* ret = CrossApp::CAVideoPlayerView::create();
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAVideoPlayerView>(cx, (CrossApp::CAVideoPlayerView*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_autogentestbindings_js_CAVideoPlayerView_create : wrong number of arguments");
    return false;
}

bool js_autogentestbindings_js_CAVideoPlayerView_createWithFrame(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        CrossApp::DRect arg0;
        ok &= jsval_to_drect(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAVideoPlayerView_createWithFrame : Error processing arguments");
        CrossApp::CAVideoPlayerView* ret = CrossApp::CAVideoPlayerView::createWithFrame(arg0);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAVideoPlayerView>(cx, (CrossApp::CAVideoPlayerView*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_autogentestbindings_js_CAVideoPlayerView_createWithFrame : wrong number of arguments");
    return false;
}

bool js_autogentestbindings_js_CAVideoPlayerView_createWithLayout(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        CrossApp::DRectLayout arg0;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (const CrossApp::DRectLayout&)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAVideoPlayerView_createWithLayout : Error processing arguments");
        CrossApp::CAVideoPlayerView* ret = CrossApp::CAVideoPlayerView::createWithLayout(arg0);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAVideoPlayerView>(cx, (CrossApp::CAVideoPlayerView*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_autogentestbindings_js_CAVideoPlayerView_createWithLayout : wrong number of arguments");
    return false;
}

bool js_autogentestbindings_js_CAVideoPlayerView_createWithCenter(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        CrossApp::DRect arg0;
        ok &= jsval_to_drect(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAVideoPlayerView_createWithCenter : Error processing arguments");
        CrossApp::CAVideoPlayerView* ret = CrossApp::CAVideoPlayerView::createWithCenter(arg0);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAVideoPlayerView>(cx, (CrossApp::CAVideoPlayerView*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_autogentestbindings_js_CAVideoPlayerView_createWithCenter : wrong number of arguments");
    return false;
}

bool js_autogentestbindings_js_CAVideoPlayerView_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    CrossApp::CAVideoPlayerView* cobj = new (std::nothrow) CrossApp::CAVideoPlayerView();
    TypeTest<CrossApp::CAVideoPlayerView> t;
    js_type_class_t *typeClass = nullptr;
    std::string typeName = t.s_name();
    auto typeMapIter = _js_global_type_map.find(typeName);
    CCAssert(typeMapIter != _js_global_type_map.end(), "Can't find the class type!");
    typeClass = typeMapIter->second;
    CCAssert(typeClass, "The value is null.");
    JS::RootedObject proto(cx, typeClass->proto.get());
    JS::RootedObject parent(cx, typeClass->parentProto.get());
    JS::RootedObject obj(cx, JS_NewObject(cx, typeClass->jsclass, proto, parent));
    args.rval().set(OBJECT_TO_JSVAL(obj));
    // link the native object with the javascript object
    js_proxy_t* p = jsb_new_proxy(cobj, obj);
    if (JS_HasProperty(cx, obj, "_ctor", &ok) && ok)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    return true;
}

extern JSObject *jsb_CrossApp_CAView_prototype;

void js_CrossApp_CAVideoPlayerView_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOGINFO("jsbindings: finalizing JS object %p (CAVideoPlayerView)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::CAVideoPlayerView *nobj = static_cast<CrossApp::CAVideoPlayerView *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
void js_register_autogentestbindings_js_CAVideoPlayerView(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_CAVideoPlayerView_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_CAVideoPlayerView_class->name = "CAVideoPlayerView";
    jsb_CrossApp_CAVideoPlayerView_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_CAVideoPlayerView_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_CAVideoPlayerView_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_CAVideoPlayerView_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_CAVideoPlayerView_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_CAVideoPlayerView_class->resolve = JS_ResolveStub;
    jsb_CrossApp_CAVideoPlayerView_class->convert = JS_ConvertStub;
    jsb_CrossApp_CAVideoPlayerView_class->finalize = js_CrossApp_CAVideoPlayerView_finalize;
    jsb_CrossApp_CAVideoPlayerView_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("setPlayerViewDelegate", js_autogentestbindings_js_CAVideoPlayerView_setPlayerViewDelegate, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("play", js_autogentestbindings_js_CAVideoPlayerView_play, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("pause", js_autogentestbindings_js_CAVideoPlayerView_pause, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setFirstVideoFrame", js_autogentestbindings_js_CAVideoPlayerView_setFirstVideoFrame, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getDuration", js_autogentestbindings_js_CAVideoPlayerView_getDuration, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("enableAudio", js_autogentestbindings_js_CAVideoPlayerView_enableAudio, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setUrl", js_autogentestbindings_js_CAVideoPlayerView_setUrl, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isDecoderInited", js_autogentestbindings_js_CAVideoPlayerView_isDecoderInited, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setFullPath", js_autogentestbindings_js_CAVideoPlayerView_setFullPath, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setPosition", js_autogentestbindings_js_CAVideoPlayerView_setPosition, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isPlaying", js_autogentestbindings_js_CAVideoPlayerView_isPlaying, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getPlayerViewDelegate", js_autogentestbindings_js_CAVideoPlayerView_getPlayerViewDelegate, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getPosition", js_autogentestbindings_js_CAVideoPlayerView_getPosition, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    static JSFunctionSpec st_funcs[] = {
        JS_FN("create", js_autogentestbindings_js_CAVideoPlayerView_create, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("createWithFrame", js_autogentestbindings_js_CAVideoPlayerView_createWithFrame, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("createWithLayout", js_autogentestbindings_js_CAVideoPlayerView_createWithLayout, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("createWithCenter", js_autogentestbindings_js_CAVideoPlayerView_createWithCenter, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    jsb_CrossApp_CAVideoPlayerView_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_CAView_prototype),
        jsb_CrossApp_CAVideoPlayerView_class,
        js_autogentestbindings_js_CAVideoPlayerView_constructor, 0, // constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27 
//  JS_SetPropertyAttributes(cx, global, "CAVideoPlayerView", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::CAVideoPlayerView> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_CAVideoPlayerView_class;
        p->proto = jsb_CrossApp_CAVideoPlayerView_prototype;
        p->parentProto = jsb_CrossApp_CAView_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
}

JSClass  *jsb_CrossApp_CAVideoPlayerControlViewDelegate_class;
JSObject *jsb_CrossApp_CAVideoPlayerControlViewDelegate_prototype;

bool js_autogentestbindings_js_CAVideoPlayerControlViewDelegate_onBackButtonClicked(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAVideoPlayerControlViewDelegate* cobj = (CrossApp::CAVideoPlayerControlViewDelegate *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAVideoPlayerControlViewDelegate_onBackButtonClicked : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAVideoPlayerControlView* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAVideoPlayerControlView*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAVideoPlayerControlViewDelegate_onBackButtonClicked : Error processing arguments");
        cobj->onBackButtonClicked(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAVideoPlayerControlViewDelegate_onBackButtonClicked : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}

void js_CrossApp_CAVideoPlayerControlViewDelegate_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOGINFO("jsbindings: finalizing JS object %p (CAVideoPlayerControlViewDelegate)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::CAVideoPlayerControlViewDelegate *nobj = static_cast<CrossApp::CAVideoPlayerControlViewDelegate *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
void js_register_autogentestbindings_js_CAVideoPlayerControlViewDelegate(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_CAVideoPlayerControlViewDelegate_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_CAVideoPlayerControlViewDelegate_class->name = "CAVideoPlayerControlViewDelegate";
    jsb_CrossApp_CAVideoPlayerControlViewDelegate_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_CAVideoPlayerControlViewDelegate_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_CAVideoPlayerControlViewDelegate_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_CAVideoPlayerControlViewDelegate_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_CAVideoPlayerControlViewDelegate_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_CAVideoPlayerControlViewDelegate_class->resolve = JS_ResolveStub;
    jsb_CrossApp_CAVideoPlayerControlViewDelegate_class->convert = JS_ConvertStub;
    jsb_CrossApp_CAVideoPlayerControlViewDelegate_class->finalize = js_CrossApp_CAVideoPlayerControlViewDelegate_finalize;
    jsb_CrossApp_CAVideoPlayerControlViewDelegate_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("onBackButtonClicked", js_autogentestbindings_js_CAVideoPlayerControlViewDelegate_onBackButtonClicked, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    JSFunctionSpec *st_funcs = NULL;

    jsb_CrossApp_CAVideoPlayerControlViewDelegate_prototype = JS_InitClass(
        cx, global,
        JS::NullPtr(), // parent proto
        jsb_CrossApp_CAVideoPlayerControlViewDelegate_class,
        dummy_constructor<CrossApp::CAVideoPlayerControlViewDelegate>, 0, // no constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27 
//  JS_SetPropertyAttributes(cx, global, "CAVideoPlayerControlViewDelegate", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::CAVideoPlayerControlViewDelegate> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_CAVideoPlayerControlViewDelegate_class;
        p->proto = jsb_CrossApp_CAVideoPlayerControlViewDelegate_prototype;
        p->parentProto = NULL;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
}

JSClass  *jsb_CrossApp_CAVideoPlayerControlView_class;
JSObject *jsb_CrossApp_CAVideoPlayerControlView_prototype;

bool js_autogentestbindings_js_CAVideoPlayerControlView_getPlayerControlViewDelegate(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAVideoPlayerControlView* cobj = (CrossApp::CAVideoPlayerControlView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAVideoPlayerControlView_getPlayerControlViewDelegate : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CAVideoPlayerControlViewDelegate* ret = cobj->getPlayerControlViewDelegate();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAVideoPlayerControlViewDelegate>(cx, (CrossApp::CAVideoPlayerControlViewDelegate*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAVideoPlayerControlView_getPlayerControlViewDelegate : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAVideoPlayerControlView_setPlayerViewDelegate(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAVideoPlayerControlView* cobj = (CrossApp::CAVideoPlayerControlView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAVideoPlayerControlView_setPlayerViewDelegate : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAVideoPlayerViewDelegate* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAVideoPlayerViewDelegate*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAVideoPlayerControlView_setPlayerViewDelegate : Error processing arguments");
        cobj->setPlayerViewDelegate(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAVideoPlayerControlView_setPlayerViewDelegate : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAVideoPlayerControlView_setShowBackButton(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAVideoPlayerControlView* cobj = (CrossApp::CAVideoPlayerControlView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAVideoPlayerControlView_setShowBackButton : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        arg0 = JS::ToBoolean(args.get(0));
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAVideoPlayerControlView_setShowBackButton : Error processing arguments");
        cobj->setShowBackButton(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAVideoPlayerControlView_setShowBackButton : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAVideoPlayerControlView_setTitle(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAVideoPlayerControlView* cobj = (CrossApp::CAVideoPlayerControlView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAVideoPlayerControlView_setTitle : Invalid Native Object");
    if (argc == 1) {
        std::string arg0;
        ok &= jsval_to_std_string(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAVideoPlayerControlView_setTitle : Error processing arguments");
        cobj->setTitle(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAVideoPlayerControlView_setTitle : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAVideoPlayerControlView_setUrl(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAVideoPlayerControlView* cobj = (CrossApp::CAVideoPlayerControlView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAVideoPlayerControlView_setUrl : Invalid Native Object");
    if (argc == 1) {
        std::string arg0;
        ok &= jsval_to_std_string(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAVideoPlayerControlView_setUrl : Error processing arguments");
        cobj->setUrl(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAVideoPlayerControlView_setUrl : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAVideoPlayerControlView_setPlayerControlViewDelegate(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAVideoPlayerControlView* cobj = (CrossApp::CAVideoPlayerControlView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAVideoPlayerControlView_setPlayerControlViewDelegate : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAVideoPlayerControlViewDelegate* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAVideoPlayerControlViewDelegate*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAVideoPlayerControlView_setPlayerControlViewDelegate : Error processing arguments");
        cobj->setPlayerControlViewDelegate(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAVideoPlayerControlView_setPlayerControlViewDelegate : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAVideoPlayerControlView_getTitle(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAVideoPlayerControlView* cobj = (CrossApp::CAVideoPlayerControlView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAVideoPlayerControlView_getTitle : Invalid Native Object");
    if (argc == 0) {
        std::string ret = cobj->getTitle();
        jsval jsret = JSVAL_NULL;
        jsret = std_string_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAVideoPlayerControlView_getTitle : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAVideoPlayerControlView_setFullPath(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAVideoPlayerControlView* cobj = (CrossApp::CAVideoPlayerControlView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAVideoPlayerControlView_setFullPath : Invalid Native Object");
    if (argc == 1) {
        std::string arg0;
        ok &= jsval_to_std_string(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAVideoPlayerControlView_setFullPath : Error processing arguments");
        cobj->setFullPath(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAVideoPlayerControlView_setFullPath : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CAVideoPlayerControlView_getShowBackButton(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CAVideoPlayerControlView* cobj = (CrossApp::CAVideoPlayerControlView *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CAVideoPlayerControlView_getShowBackButton : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->getShowBackButton();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CAVideoPlayerControlView_getShowBackButton : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CAVideoPlayerControlView_createWithFrame(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        CrossApp::DRect arg0;
        ok &= jsval_to_drect(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAVideoPlayerControlView_createWithFrame : Error processing arguments");
        CrossApp::CAVideoPlayerControlView* ret = CrossApp::CAVideoPlayerControlView::createWithFrame(arg0);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAVideoPlayerControlView>(cx, (CrossApp::CAVideoPlayerControlView*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_autogentestbindings_js_CAVideoPlayerControlView_createWithFrame : wrong number of arguments");
    return false;
}

bool js_autogentestbindings_js_CAVideoPlayerControlView_createWithLayout(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        CrossApp::DRectLayout arg0;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (const CrossApp::DRectLayout&)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAVideoPlayerControlView_createWithLayout : Error processing arguments");
        CrossApp::CAVideoPlayerControlView* ret = CrossApp::CAVideoPlayerControlView::createWithLayout(arg0);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAVideoPlayerControlView>(cx, (CrossApp::CAVideoPlayerControlView*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_autogentestbindings_js_CAVideoPlayerControlView_createWithLayout : wrong number of arguments");
    return false;
}

bool js_autogentestbindings_js_CAVideoPlayerControlView_createWithCenter(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        CrossApp::DRect arg0;
        ok &= jsval_to_drect(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CAVideoPlayerControlView_createWithCenter : Error processing arguments");
        CrossApp::CAVideoPlayerControlView* ret = CrossApp::CAVideoPlayerControlView::createWithCenter(arg0);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CAVideoPlayerControlView>(cx, (CrossApp::CAVideoPlayerControlView*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_autogentestbindings_js_CAVideoPlayerControlView_createWithCenter : wrong number of arguments");
    return false;
}

bool js_autogentestbindings_js_CAVideoPlayerControlView_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    CrossApp::CAVideoPlayerControlView* cobj = new (std::nothrow) CrossApp::CAVideoPlayerControlView();
    TypeTest<CrossApp::CAVideoPlayerControlView> t;
    js_type_class_t *typeClass = nullptr;
    std::string typeName = t.s_name();
    auto typeMapIter = _js_global_type_map.find(typeName);
    CCAssert(typeMapIter != _js_global_type_map.end(), "Can't find the class type!");
    typeClass = typeMapIter->second;
    CCAssert(typeClass, "The value is null.");
    JS::RootedObject proto(cx, typeClass->proto.get());
    JS::RootedObject parent(cx, typeClass->parentProto.get());
    JS::RootedObject obj(cx, JS_NewObject(cx, typeClass->jsclass, proto, parent));
    args.rval().set(OBJECT_TO_JSVAL(obj));
    // link the native object with the javascript object
    js_proxy_t* p = jsb_new_proxy(cobj, obj);
    if (JS_HasProperty(cx, obj, "_ctor", &ok) && ok)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    return true;
}

extern JSObject *jsb_CrossApp_CAView_prototype;

void js_CrossApp_CAVideoPlayerControlView_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOGINFO("jsbindings: finalizing JS object %p (CAVideoPlayerControlView)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::CAVideoPlayerControlView *nobj = static_cast<CrossApp::CAVideoPlayerControlView *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
void js_register_autogentestbindings_js_CAVideoPlayerControlView(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_CAVideoPlayerControlView_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_CAVideoPlayerControlView_class->name = "CAVideoPlayerControlView";
    jsb_CrossApp_CAVideoPlayerControlView_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_CAVideoPlayerControlView_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_CAVideoPlayerControlView_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_CAVideoPlayerControlView_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_CAVideoPlayerControlView_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_CAVideoPlayerControlView_class->resolve = JS_ResolveStub;
    jsb_CrossApp_CAVideoPlayerControlView_class->convert = JS_ConvertStub;
    jsb_CrossApp_CAVideoPlayerControlView_class->finalize = js_CrossApp_CAVideoPlayerControlView_finalize;
    jsb_CrossApp_CAVideoPlayerControlView_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("getPlayerControlViewDelegate", js_autogentestbindings_js_CAVideoPlayerControlView_getPlayerControlViewDelegate, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setPlayerViewDelegate", js_autogentestbindings_js_CAVideoPlayerControlView_setPlayerViewDelegate, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setShowBackButton", js_autogentestbindings_js_CAVideoPlayerControlView_setShowBackButton, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setTitle", js_autogentestbindings_js_CAVideoPlayerControlView_setTitle, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setUrl", js_autogentestbindings_js_CAVideoPlayerControlView_setUrl, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setPlayerControlViewDelegate", js_autogentestbindings_js_CAVideoPlayerControlView_setPlayerControlViewDelegate, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getTitle", js_autogentestbindings_js_CAVideoPlayerControlView_getTitle, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setFullPath", js_autogentestbindings_js_CAVideoPlayerControlView_setFullPath, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getShowBackButton", js_autogentestbindings_js_CAVideoPlayerControlView_getShowBackButton, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    static JSFunctionSpec st_funcs[] = {
        JS_FN("createWithFrame", js_autogentestbindings_js_CAVideoPlayerControlView_createWithFrame, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("createWithLayout", js_autogentestbindings_js_CAVideoPlayerControlView_createWithLayout, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("createWithCenter", js_autogentestbindings_js_CAVideoPlayerControlView_createWithCenter, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    jsb_CrossApp_CAVideoPlayerControlView_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_CAView_prototype),
        jsb_CrossApp_CAVideoPlayerControlView_class,
        js_autogentestbindings_js_CAVideoPlayerControlView_constructor, 0, // constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27 
//  JS_SetPropertyAttributes(cx, global, "CAVideoPlayerControlView", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::CAVideoPlayerControlView> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_CAVideoPlayerControlView_class;
        p->proto = jsb_CrossApp_CAVideoPlayerControlView_prototype;
        p->parentProto = jsb_CrossApp_CAView_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
}

JSClass  *jsb_CrossApp_CACalendar_class;
JSObject *jsb_CrossApp_CACalendar_prototype;

bool js_autogentestbindings_js_CACalendar_dayOfWeek(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CACalendar* cobj = (CrossApp::CACalendar *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CACalendar_dayOfWeek : Invalid Native Object");
    if (argc == 0) {
        int ret = cobj->dayOfWeek();
        jsval jsret = JSVAL_NULL;
        jsret = int32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CACalendar_dayOfWeek : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CACalendar_dateByDayOfYear(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CACalendar* cobj = (CrossApp::CACalendar *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CACalendar_dateByDayOfYear : Invalid Native Object");
    if (argc == 4) {
        int arg0 = 0;
        int arg1 = 0;
        int arg2 = 0;
        int arg3 = 0;
        ok &= jsval_to_int32(cx, args.get(0), (int32_t *)&arg0);
        ok &= jsval_to_int32(cx, args.get(1), (int32_t *)&arg1);
        ok &= jsval_to_int32(cx, args.get(2), (int32_t *)&arg2);
        ok &= jsval_to_int32(cx, args.get(3), (int32_t *)&arg3);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CACalendar_dateByDayOfYear : Error processing arguments");
        cobj->dateByDayOfYear(arg0, arg1, arg2, arg3);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CACalendar_dateByDayOfYear : wrong number of arguments: %d, was expecting %d", argc, 4);
    return false;
}
bool js_autogentestbindings_js_CACalendar__dayCountOfYear(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CACalendar* cobj = (CrossApp::CACalendar *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CACalendar__dayCountOfYear : Invalid Native Object");
    if (argc == 1) {
        int arg0 = 0;
        ok &= jsval_to_int32(cx, args.get(0), (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CACalendar__dayCountOfYear : Error processing arguments");
        int ret = cobj->_dayCountOfYear(arg0);
        jsval jsret = JSVAL_NULL;
        jsret = int32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CACalendar__dayCountOfYear : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CACalendar_addYear(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CACalendar* cobj = (CrossApp::CACalendar *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CACalendar_addYear : Invalid Native Object");
    if (argc == 0) {
        cobj->addYear();
        args.rval().setUndefined();
        return true;
    }
    if (argc == 1) {
        int arg0 = 0;
        ok &= jsval_to_int32(cx, args.get(0), (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CACalendar_addYear : Error processing arguments");
        cobj->addYear(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CACalendar_addYear : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CACalendar_weekOfYear(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CACalendar* cobj = (CrossApp::CACalendar *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CACalendar_weekOfYear : Invalid Native Object");
    if (argc == 0) {
        int ret = cobj->weekOfYear();
        jsval jsret = JSVAL_NULL;
        jsret = int32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CACalendar_weekOfYear : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CACalendar_isLeapYear(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CACalendar* cobj = (CrossApp::CACalendar *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CACalendar_isLeapYear : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->isLeapYear();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CACalendar_isLeapYear : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CACalendar_dayCountOfYear(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CACalendar* cobj = (CrossApp::CACalendar *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CACalendar_dayCountOfYear : Invalid Native Object");
    if (argc == 0) {
        int ret = cobj->dayCountOfYear();
        jsval jsret = JSVAL_NULL;
        jsret = int32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CACalendar_dayCountOfYear : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CACalendar_dayOfYear(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CACalendar* cobj = (CrossApp::CACalendar *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CACalendar_dayOfYear : Invalid Native Object");
    if (argc == 0) {
        int ret = cobj->dayOfYear();
        jsval jsret = JSVAL_NULL;
        jsret = int32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CACalendar_dayOfYear : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CACalendar__dayCountOfMonth(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CACalendar* cobj = (CrossApp::CACalendar *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CACalendar__dayCountOfMonth : Invalid Native Object");
    if (argc == 2) {
        int arg0 = 0;
        int arg1 = 0;
        ok &= jsval_to_int32(cx, args.get(0), (int32_t *)&arg0);
        ok &= jsval_to_int32(cx, args.get(1), (int32_t *)&arg1);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CACalendar__dayCountOfMonth : Error processing arguments");
        int ret = cobj->_dayCountOfMonth(arg0, arg1);
        jsval jsret = JSVAL_NULL;
        jsret = int32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CACalendar__dayCountOfMonth : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_autogentestbindings_js_CACalendar_dayCountOfMonth(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CACalendar* cobj = (CrossApp::CACalendar *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CACalendar_dayCountOfMonth : Invalid Native Object");
    if (argc == 0) {
        int ret = cobj->dayCountOfMonth();
        jsval jsret = JSVAL_NULL;
        jsret = int32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CACalendar_dayCountOfMonth : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CACalendar__compareDate(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CACalendar* cobj = (CrossApp::CACalendar *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CACalendar__compareDate : Invalid Native Object");
    if (argc == 2) {
        tm arg0;
        tm arg1;
        #pragma warning NO CONVERSION TO NATIVE FOR tm
		ok = false;
        #pragma warning NO CONVERSION TO NATIVE FOR tm
		ok = false;
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CACalendar__compareDate : Error processing arguments");
        int ret = cobj->_compareDate(arg0, arg1);
        jsval jsret = JSVAL_NULL;
        jsret = int32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CACalendar__compareDate : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_autogentestbindings_js_CACalendar_addDay(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CACalendar* cobj = (CrossApp::CACalendar *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CACalendar_addDay : Invalid Native Object");
    if (argc == 0) {
        cobj->addDay();
        args.rval().setUndefined();
        return true;
    }
    if (argc == 1) {
        int arg0 = 0;
        ok &= jsval_to_int32(cx, args.get(0), (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CACalendar_addDay : Error processing arguments");
        cobj->addDay(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CACalendar_addDay : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CACalendar__isLeapYear(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CACalendar* cobj = (CrossApp::CACalendar *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CACalendar__isLeapYear : Invalid Native Object");
    if (argc == 1) {
        int arg0 = 0;
        ok &= jsval_to_int32(cx, args.get(0), (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CACalendar__isLeapYear : Error processing arguments");
        bool ret = cobj->_isLeapYear(arg0);
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CACalendar__isLeapYear : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CACalendar_addMonth(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CACalendar* cobj = (CrossApp::CACalendar *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CACalendar_addMonth : Invalid Native Object");
    if (argc == 0) {
        cobj->addMonth();
        args.rval().setUndefined();
        return true;
    }
    if (argc == 1) {
        int arg0 = 0;
        ok &= jsval_to_int32(cx, args.get(0), (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CACalendar_addMonth : Error processing arguments");
        cobj->addMonth(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CACalendar_addMonth : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CACalendar_monthOfYear(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CACalendar* cobj = (CrossApp::CACalendar *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CACalendar_monthOfYear : Invalid Native Object");
    if (argc == 0) {
        int ret = cobj->monthOfYear();
        jsval jsret = JSVAL_NULL;
        jsret = int32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CACalendar_monthOfYear : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CACalendar_setCalendar(JSContext *cx, uint32_t argc, jsval *vp)
{
    bool ok = true;
    CrossApp::CACalendar* cobj = nullptr;

    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx);
    obj = args.thisv().toObjectOrNull();
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    cobj = (CrossApp::CACalendar *)(proxy ? proxy->ptr : nullptr);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CACalendar_setCalendar : Invalid Native Object");
    do {
        if (argc == 1) {
            long arg0 = 0;
            ok &= jsval_to_long(cx, args.get(0), &arg0);
            if (!ok) { ok = true; break; }
            cobj->setCalendar(arg0);
            args.rval().setUndefined();
            return true;
        }
    } while(0);

    do {
        if (argc == 3) {
            int arg0 = 0;
            ok &= jsval_to_int32(cx, args.get(0), (int32_t *)&arg0);
            if (!ok) { ok = true; break; }
            int arg1 = 0;
            ok &= jsval_to_int32(cx, args.get(1), (int32_t *)&arg1);
            if (!ok) { ok = true; break; }
            int arg2 = 0;
            ok &= jsval_to_int32(cx, args.get(2), (int32_t *)&arg2);
            if (!ok) { ok = true; break; }
            cobj->setCalendar(arg0, arg1, arg2);
            args.rval().setUndefined();
            return true;
        }
    } while(0);

    JS_ReportError(cx, "js_autogentestbindings_js_CACalendar_setCalendar : wrong number of arguments");
    return false;
}
bool js_autogentestbindings_js_CACalendar__calcDayCount(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CACalendar* cobj = (CrossApp::CACalendar *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CACalendar__calcDayCount : Invalid Native Object");
    if (argc == 1) {
        tm arg0;
        #pragma warning NO CONVERSION TO NATIVE FOR tm
		ok = false;
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CACalendar__calcDayCount : Error processing arguments");
        int ret = cobj->_calcDayCount(arg0);
        jsval jsret = JSVAL_NULL;
        jsret = int32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CACalendar__calcDayCount : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CACalendar_dayOfMonth(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CACalendar* cobj = (CrossApp::CACalendar *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CACalendar_dayOfMonth : Invalid Native Object");
    if (argc == 0) {
        int ret = cobj->dayOfMonth();
        jsval jsret = JSVAL_NULL;
        jsret = int32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CACalendar_dayOfMonth : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CACalendar_create(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    
    do {
        if (argc == 3) {
            int arg0 = 0;
            ok &= jsval_to_int32(cx, args.get(0), (int32_t *)&arg0);
            if (!ok) { ok = true; break; }
            int arg1 = 0;
            ok &= jsval_to_int32(cx, args.get(1), (int32_t *)&arg1);
            if (!ok) { ok = true; break; }
            int arg2 = 0;
            ok &= jsval_to_int32(cx, args.get(2), (int32_t *)&arg2);
            if (!ok) { ok = true; break; }
            CrossApp::CACalendar* ret = CrossApp::CACalendar::create(arg0, arg1, arg2);
            jsval jsret = JSVAL_NULL;
            do {
                if (ret) {
                    js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CACalendar>(cx, (CrossApp::CACalendar*)ret);
                    jsret = OBJECT_TO_JSVAL(jsProxy->obj);
                } else {
                    jsret = JSVAL_NULL;
                }
            } while (0);
            args.rval().set(jsret);
            return true;
        }
    } while (0);
    
    do {
        if (argc == 0) {
            CrossApp::CACalendar* ret = CrossApp::CACalendar::create();
            jsval jsret = JSVAL_NULL;
            do {
                if (ret) {
                    js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CACalendar>(cx, (CrossApp::CACalendar*)ret);
                    jsret = OBJECT_TO_JSVAL(jsProxy->obj);
                } else {
                    jsret = JSVAL_NULL;
                }
            } while (0);
            args.rval().set(jsret);
            return true;
        }
    } while (0);
    
    do {
        if (argc == 1) {
            long arg0 = 0;
            ok &= jsval_to_long(cx, args.get(0), &arg0);
            if (!ok) { ok = true; break; }
            CrossApp::CACalendar* ret = CrossApp::CACalendar::create(arg0);
            jsval jsret = JSVAL_NULL;
            do {
                if (ret) {
                    js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CACalendar>(cx, (CrossApp::CACalendar*)ret);
                    jsret = OBJECT_TO_JSVAL(jsProxy->obj);
                } else {
                    jsret = JSVAL_NULL;
                }
            } while (0);
            args.rval().set(jsret);
            return true;
        }
    } while (0);
    JS_ReportError(cx, "js_autogentestbindings_js_CACalendar_create : wrong number of arguments");
    return false;
}
bool js_autogentestbindings_js_CACalendar_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    CrossApp::CACalendar* cobj = new (std::nothrow) CrossApp::CACalendar();
    TypeTest<CrossApp::CACalendar> t;
    js_type_class_t *typeClass = nullptr;
    std::string typeName = t.s_name();
    auto typeMapIter = _js_global_type_map.find(typeName);
    CCAssert(typeMapIter != _js_global_type_map.end(), "Can't find the class type!");
    typeClass = typeMapIter->second;
    CCAssert(typeClass, "The value is null.");
    JS::RootedObject proto(cx, typeClass->proto.get());
    JS::RootedObject parent(cx, typeClass->parentProto.get());
    JS::RootedObject obj(cx, JS_NewObject(cx, typeClass->jsclass, proto, parent));
    args.rval().set(OBJECT_TO_JSVAL(obj));
    // link the native object with the javascript object
    js_proxy_t* p = jsb_new_proxy(cobj, obj);
    if (JS_HasProperty(cx, obj, "_ctor", &ok) && ok)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    return true;
}

extern JSObject *jsb_CrossApp_CAObject_prototype;

void js_CrossApp_CACalendar_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOGINFO("jsbindings: finalizing JS object %p (CACalendar)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::CACalendar *nobj = static_cast<CrossApp::CACalendar *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
void js_register_autogentestbindings_js_CACalendar(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_CACalendar_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_CACalendar_class->name = "CACalendar";
    jsb_CrossApp_CACalendar_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_CACalendar_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_CACalendar_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_CACalendar_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_CACalendar_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_CACalendar_class->resolve = JS_ResolveStub;
    jsb_CrossApp_CACalendar_class->convert = JS_ConvertStub;
    jsb_CrossApp_CACalendar_class->finalize = js_CrossApp_CACalendar_finalize;
    jsb_CrossApp_CACalendar_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("dayOfWeek", js_autogentestbindings_js_CACalendar_dayOfWeek, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("dateByDayOfYear", js_autogentestbindings_js_CACalendar_dateByDayOfYear, 4, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("_dayCountOfYear", js_autogentestbindings_js_CACalendar__dayCountOfYear, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("addYear", js_autogentestbindings_js_CACalendar_addYear, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("weekOfYear", js_autogentestbindings_js_CACalendar_weekOfYear, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isLeapYear", js_autogentestbindings_js_CACalendar_isLeapYear, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("dayCountOfYear", js_autogentestbindings_js_CACalendar_dayCountOfYear, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("dayOfYear", js_autogentestbindings_js_CACalendar_dayOfYear, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("_dayCountOfMonth", js_autogentestbindings_js_CACalendar__dayCountOfMonth, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("dayCountOfMonth", js_autogentestbindings_js_CACalendar_dayCountOfMonth, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("_compareDate", js_autogentestbindings_js_CACalendar__compareDate, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("addDay", js_autogentestbindings_js_CACalendar_addDay, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("_isLeapYear", js_autogentestbindings_js_CACalendar__isLeapYear, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("addMonth", js_autogentestbindings_js_CACalendar_addMonth, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("monthOfYear", js_autogentestbindings_js_CACalendar_monthOfYear, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setCalendar", js_autogentestbindings_js_CACalendar_setCalendar, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("_calcDayCount", js_autogentestbindings_js_CACalendar__calcDayCount, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("dayOfMonth", js_autogentestbindings_js_CACalendar_dayOfMonth, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    static JSFunctionSpec st_funcs[] = {
        JS_FN("create", js_autogentestbindings_js_CACalendar_create, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    jsb_CrossApp_CACalendar_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_CAObject_prototype),
        jsb_CrossApp_CACalendar_class,
        js_autogentestbindings_js_CACalendar_constructor, 0, // constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27 
//  JS_SetPropertyAttributes(cx, global, "CACalendar", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::CACalendar> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_CACalendar_class;
        p->proto = jsb_CrossApp_CACalendar_prototype;
        p->parentProto = jsb_CrossApp_CAObject_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
}

JSClass  *jsb_CrossApp_CATextFieldDelegate_class;
JSObject *jsb_CrossApp_CATextFieldDelegate_prototype;

bool js_autogentestbindings_js_CATextFieldDelegate_textFieldShouldBeginEditing(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATextFieldDelegate* cobj = (CrossApp::CATextFieldDelegate *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CATextFieldDelegate_textFieldShouldBeginEditing : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CATextField* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CATextField*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CATextFieldDelegate_textFieldShouldBeginEditing : Error processing arguments");
        bool ret = cobj->textFieldShouldBeginEditing(arg0);
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CATextFieldDelegate_textFieldShouldBeginEditing : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CATextFieldDelegate_keyBoardHeight(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATextFieldDelegate* cobj = (CrossApp::CATextFieldDelegate *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CATextFieldDelegate_keyBoardHeight : Invalid Native Object");
    if (argc == 2) {
        CrossApp::CATextField* arg0 = nullptr;
        int arg1 = 0;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CATextField*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        ok &= jsval_to_int32(cx, args.get(1), (int32_t *)&arg1);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CATextFieldDelegate_keyBoardHeight : Error processing arguments");
        cobj->keyBoardHeight(arg0, arg1);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CATextFieldDelegate_keyBoardHeight : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_autogentestbindings_js_CATextFieldDelegate_textFieldShouldEndEditing(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATextFieldDelegate* cobj = (CrossApp::CATextFieldDelegate *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CATextFieldDelegate_textFieldShouldEndEditing : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CATextField* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CATextField*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CATextFieldDelegate_textFieldShouldEndEditing : Error processing arguments");
        bool ret = cobj->textFieldShouldEndEditing(arg0);
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CATextFieldDelegate_textFieldShouldEndEditing : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CATextFieldDelegate_textFieldShouldReturn(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATextFieldDelegate* cobj = (CrossApp::CATextFieldDelegate *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CATextFieldDelegate_textFieldShouldReturn : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CATextField* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CATextField*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CATextFieldDelegate_textFieldShouldReturn : Error processing arguments");
        cobj->textFieldShouldReturn(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CATextFieldDelegate_textFieldShouldReturn : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CATextFieldDelegate_textFieldShouldChangeCharacters(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATextFieldDelegate* cobj = (CrossApp::CATextFieldDelegate *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CATextFieldDelegate_textFieldShouldChangeCharacters : Invalid Native Object");
    if (argc == 4) {
        CrossApp::CATextField* arg0 = nullptr;
        unsigned int arg1 = 0;
        unsigned int arg2 = 0;
        std::string arg3;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CATextField*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        ok &= jsval_to_uint32(cx, args.get(1), &arg1);
        ok &= jsval_to_uint32(cx, args.get(2), &arg2);
        ok &= jsval_to_std_string(cx, args.get(3), &arg3);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CATextFieldDelegate_textFieldShouldChangeCharacters : Error processing arguments");
        bool ret = cobj->textFieldShouldChangeCharacters(arg0, arg1, arg2, arg3);
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CATextFieldDelegate_textFieldShouldChangeCharacters : wrong number of arguments: %d, was expecting %d", argc, 4);
    return false;
}

void js_CrossApp_CATextFieldDelegate_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOGINFO("jsbindings: finalizing JS object %p (CATextFieldDelegate)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::CATextFieldDelegate *nobj = static_cast<CrossApp::CATextFieldDelegate *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
void js_register_autogentestbindings_js_CATextFieldDelegate(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_CATextFieldDelegate_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_CATextFieldDelegate_class->name = "CATextFieldDelegate";
    jsb_CrossApp_CATextFieldDelegate_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_CATextFieldDelegate_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_CATextFieldDelegate_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_CATextFieldDelegate_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_CATextFieldDelegate_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_CATextFieldDelegate_class->resolve = JS_ResolveStub;
    jsb_CrossApp_CATextFieldDelegate_class->convert = JS_ConvertStub;
    jsb_CrossApp_CATextFieldDelegate_class->finalize = js_CrossApp_CATextFieldDelegate_finalize;
    jsb_CrossApp_CATextFieldDelegate_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("textFieldShouldBeginEditing", js_autogentestbindings_js_CATextFieldDelegate_textFieldShouldBeginEditing, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("keyBoardHeight", js_autogentestbindings_js_CATextFieldDelegate_keyBoardHeight, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("textFieldShouldEndEditing", js_autogentestbindings_js_CATextFieldDelegate_textFieldShouldEndEditing, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("textFieldShouldReturn", js_autogentestbindings_js_CATextFieldDelegate_textFieldShouldReturn, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("textFieldShouldChangeCharacters", js_autogentestbindings_js_CATextFieldDelegate_textFieldShouldChangeCharacters, 4, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    JSFunctionSpec *st_funcs = NULL;

    jsb_CrossApp_CATextFieldDelegate_prototype = JS_InitClass(
        cx, global,
        JS::NullPtr(), // parent proto
        jsb_CrossApp_CATextFieldDelegate_class,
        dummy_constructor<CrossApp::CATextFieldDelegate>, 0, // no constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27 
//  JS_SetPropertyAttributes(cx, global, "CATextFieldDelegate", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::CATextFieldDelegate> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_CATextFieldDelegate_class;
        p->proto = jsb_CrossApp_CATextFieldDelegate_prototype;
        p->parentProto = NULL;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
}

JSClass  *jsb_CrossApp_CATextField_class;
JSObject *jsb_CrossApp_CATextField_prototype;

bool js_autogentestbindings_js_CATextField_getFontSize(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATextField* cobj = (CrossApp::CATextField *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CATextField_getFontSize : Invalid Native Object");
    if (argc == 0) {
        int ret = cobj->getFontSize();
        jsval jsret = JSVAL_NULL;
        jsret = int32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CATextField_getFontSize : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CATextField_setKeyboardType(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATextField* cobj = (CrossApp::CATextField *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CATextField_setKeyboardType : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CATextField::KeyboardType arg0;
        ok &= jsval_to_int32(cx, args.get(0), (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CATextField_setKeyboardType : Error processing arguments");
        cobj->setKeyboardType(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CATextField_setKeyboardType : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CATextField_ccTouchBegan(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATextField* cobj = (CrossApp::CATextField *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CATextField_ccTouchBegan : Invalid Native Object");
    if (argc == 2) {
        CrossApp::CATouch* arg0 = nullptr;
        CrossApp::CAEvent* arg1 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CATouch*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        do {
            if (args.get(1).isNull()) { arg1 = nullptr; break; }
            if (!args.get(1).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(1).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg1 = (CrossApp::CAEvent*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg1, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CATextField_ccTouchBegan : Error processing arguments");
        bool ret = cobj->ccTouchBegan(arg0, arg1);
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CATextField_ccTouchBegan : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_autogentestbindings_js_CATextField_getText(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATextField* cobj = (CrossApp::CATextField *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CATextField_getText : Invalid Native Object");
    if (argc == 0) {
        const std::string& ret = cobj->getText();
        jsval jsret = JSVAL_NULL;
        jsret = std_string_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CATextField_getText : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CATextField_setClearButtonMode(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATextField* cobj = (CrossApp::CATextField *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CATextField_setClearButtonMode : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CATextField::ClearButtonMode arg0;
        ok &= jsval_to_int32(cx, args.get(0), (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CATextField_setClearButtonMode : Error processing arguments");
        cobj->setClearButtonMode(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CATextField_setClearButtonMode : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CATextField_ccTouchEnded(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATextField* cobj = (CrossApp::CATextField *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CATextField_ccTouchEnded : Invalid Native Object");
    if (argc == 2) {
        CrossApp::CATouch* arg0 = nullptr;
        CrossApp::CAEvent* arg1 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CATouch*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        do {
            if (args.get(1).isNull()) { arg1 = nullptr; break; }
            if (!args.get(1).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(1).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg1 = (CrossApp::CAEvent*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg1, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CATextField_ccTouchEnded : Error processing arguments");
        cobj->ccTouchEnded(arg0, arg1);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CATextField_ccTouchEnded : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_autogentestbindings_js_CATextField_getTextColor(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATextField* cobj = (CrossApp::CATextField *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CATextField_getTextColor : Invalid Native Object");
    if (argc == 0) {
        const CrossApp::CAColor4B& ret = cobj->getTextColor();
        jsval jsret = JSVAL_NULL;
        jsret = cacolor4b_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CATextField_getTextColor : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CATextField_getKeyboardType(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATextField* cobj = (CrossApp::CATextField *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CATextField_getKeyboardType : Invalid Native Object");
    if (argc == 0) {
        int ret = (int)cobj->getKeyboardType();
        jsval jsret = JSVAL_NULL;
        jsret = int32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CATextField_getKeyboardType : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CATextField_isSecureTextEntry(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATextField* cobj = (CrossApp::CATextField *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CATextField_isSecureTextEntry : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->isSecureTextEntry();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CATextField_isSecureTextEntry : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CATextField_getMaxLenght(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATextField* cobj = (CrossApp::CATextField *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CATextField_getMaxLenght : Invalid Native Object");
    if (argc == 0) {
        int ret = cobj->getMaxLenght();
        jsval jsret = JSVAL_NULL;
        jsret = int32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CATextField_getMaxLenght : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CATextField_setTextFieldAlign(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATextField* cobj = (CrossApp::CATextField *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CATextField_setTextFieldAlign : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CATextField::TextFieldAlign arg0;
        ok &= jsval_to_int32(cx, args.get(0), (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CATextField_setTextFieldAlign : Error processing arguments");
        cobj->setTextFieldAlign(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CATextField_setTextFieldAlign : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CATextField_setMarginImageLeft(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATextField* cobj = (CrossApp::CATextField *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CATextField_setMarginImageLeft : Invalid Native Object");
    if (argc == 2) {
        CrossApp::DSize arg0;
        std::string arg1;
        ok &= jsval_to_dsize(cx, args.get(0), &arg0);
        ok &= jsval_to_std_string(cx, args.get(1), &arg1);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CATextField_setMarginImageLeft : Error processing arguments");
        cobj->setMarginImageLeft(arg0, arg1);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CATextField_setMarginImageLeft : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_autogentestbindings_js_CATextField_init(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATextField* cobj = (CrossApp::CATextField *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CATextField_init : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->init();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CATextField_init : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CATextField_setMarginRight(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATextField* cobj = (CrossApp::CATextField *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CATextField_setMarginRight : Invalid Native Object");
    if (argc == 1) {
        int arg0 = 0;
        ok &= jsval_to_int32(cx, args.get(0), (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CATextField_setMarginRight : Error processing arguments");
        cobj->setMarginRight(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CATextField_setMarginRight : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CATextField_getClearButtonMode(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATextField* cobj = (CrossApp::CATextField *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CATextField_getClearButtonMode : Invalid Native Object");
    if (argc == 0) {
        int ret = (int)cobj->getClearButtonMode();
        jsval jsret = JSVAL_NULL;
        jsret = int32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CATextField_getClearButtonMode : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CATextField_ccTouchMoved(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATextField* cobj = (CrossApp::CATextField *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CATextField_ccTouchMoved : Invalid Native Object");
    if (argc == 2) {
        CrossApp::CATouch* arg0 = nullptr;
        CrossApp::CAEvent* arg1 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CATouch*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        do {
            if (args.get(1).isNull()) { arg1 = nullptr; break; }
            if (!args.get(1).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(1).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg1 = (CrossApp::CAEvent*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg1, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CATextField_ccTouchMoved : Error processing arguments");
        cobj->ccTouchMoved(arg0, arg1);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CATextField_ccTouchMoved : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_autogentestbindings_js_CATextField_getReturnType(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATextField* cobj = (CrossApp::CATextField *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CATextField_getReturnType : Invalid Native Object");
    if (argc == 0) {
        int ret = (int)cobj->getReturnType();
        jsval jsret = JSVAL_NULL;
        jsret = int32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CATextField_getReturnType : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CATextField_getPlaceHolderText(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATextField* cobj = (CrossApp::CATextField *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CATextField_getPlaceHolderText : Invalid Native Object");
    if (argc == 0) {
        const std::string& ret = cobj->getPlaceHolderText();
        jsval jsret = JSVAL_NULL;
        jsret = std_string_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CATextField_getPlaceHolderText : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CATextField_setAllowkeyBoardHide(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATextField* cobj = (CrossApp::CATextField *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CATextField_setAllowkeyBoardHide : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        arg0 = JS::ToBoolean(args.get(0));
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CATextField_setAllowkeyBoardHide : Error processing arguments");
        cobj->setAllowkeyBoardHide(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CATextField_setAllowkeyBoardHide : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CATextField_getPlaceHolderColor(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATextField* cobj = (CrossApp::CATextField *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CATextField_getPlaceHolderColor : Invalid Native Object");
    if (argc == 0) {
        const CrossApp::CAColor4B& ret = cobj->getPlaceHolderColor();
        jsval jsret = JSVAL_NULL;
        jsret = cacolor4b_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CATextField_getPlaceHolderColor : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CATextField_setPlaceHolderText(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATextField* cobj = (CrossApp::CATextField *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CATextField_setPlaceHolderText : Invalid Native Object");
    if (argc == 1) {
        std::string arg0;
        ok &= jsval_to_std_string(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CATextField_setPlaceHolderText : Error processing arguments");
        cobj->setPlaceHolderText(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CATextField_setPlaceHolderText : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CATextField_setBackgroundImage(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATextField* cobj = (CrossApp::CATextField *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CATextField_setBackgroundImage : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAImage* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAImage*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CATextField_setBackgroundImage : Error processing arguments");
        cobj->setBackgroundImage(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CATextField_setBackgroundImage : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CATextField_getMarginRight(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATextField* cobj = (CrossApp::CATextField *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CATextField_getMarginRight : Invalid Native Object");
    if (argc == 0) {
        int ret = cobj->getMarginRight();
        jsval jsret = JSVAL_NULL;
        jsret = int32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CATextField_getMarginRight : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CATextField_onExitTransitionDidStart(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATextField* cobj = (CrossApp::CATextField *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CATextField_onExitTransitionDidStart : Invalid Native Object");
    if (argc == 0) {
        cobj->onExitTransitionDidStart();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CATextField_onExitTransitionDidStart : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CATextField_setMarginLeft(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATextField* cobj = (CrossApp::CATextField *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CATextField_setMarginLeft : Invalid Native Object");
    if (argc == 1) {
        int arg0 = 0;
        ok &= jsval_to_int32(cx, args.get(0), (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CATextField_setMarginLeft : Error processing arguments");
        cobj->setMarginLeft(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CATextField_setMarginLeft : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CATextField_setDelegate(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATextField* cobj = (CrossApp::CATextField *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CATextField_setDelegate : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CATextFieldDelegate* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CATextFieldDelegate*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CATextField_setDelegate : Error processing arguments");
        cobj->setDelegate(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CATextField_setDelegate : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CATextField_setFontSize(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATextField* cobj = (CrossApp::CATextField *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CATextField_setFontSize : Invalid Native Object");
    if (argc == 1) {
        int arg0 = 0;
        ok &= jsval_to_int32(cx, args.get(0), (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CATextField_setFontSize : Error processing arguments");
        cobj->setFontSize(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CATextField_setFontSize : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CATextField_setPlaceHolderColor(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATextField* cobj = (CrossApp::CATextField *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CATextField_setPlaceHolderColor : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAColor4B arg0;
        ok &= jsval_to_cacolor4b(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CATextField_setPlaceHolderColor : Error processing arguments");
        cobj->setPlaceHolderColor(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CATextField_setPlaceHolderColor : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CATextField_setTextColor(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATextField* cobj = (CrossApp::CATextField *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CATextField_setTextColor : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAColor4B arg0;
        ok &= jsval_to_cacolor4b(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CATextField_setTextColor : Error processing arguments");
        cobj->setTextColor(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CATextField_setTextColor : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CATextField_setReturnType(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATextField* cobj = (CrossApp::CATextField *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CATextField_setReturnType : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CATextField::ReturnType arg0;
        ok &= jsval_to_int32(cx, args.get(0), (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CATextField_setReturnType : Error processing arguments");
        cobj->setReturnType(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CATextField_setReturnType : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CATextField_getDelegate(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATextField* cobj = (CrossApp::CATextField *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CATextField_getDelegate : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CATextFieldDelegate* ret = cobj->getDelegate();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CATextFieldDelegate>(cx, (CrossApp::CATextFieldDelegate*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CATextField_getDelegate : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CATextField_resignFirstResponder(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATextField* cobj = (CrossApp::CATextField *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CATextField_resignFirstResponder : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->resignFirstResponder();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CATextField_resignFirstResponder : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CATextField_setText(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATextField* cobj = (CrossApp::CATextField *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CATextField_setText : Invalid Native Object");
    if (argc == 1) {
        std::string arg0;
        ok &= jsval_to_std_string(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CATextField_setText : Error processing arguments");
        cobj->setText(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CATextField_setText : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CATextField_getTextFieldAlign(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATextField* cobj = (CrossApp::CATextField *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CATextField_getTextFieldAlign : Invalid Native Object");
    if (argc == 0) {
        int ret = (int)cobj->getTextFieldAlign();
        jsval jsret = JSVAL_NULL;
        jsret = int32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CATextField_getTextFieldAlign : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CATextField_setMarginImageRight(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATextField* cobj = (CrossApp::CATextField *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CATextField_setMarginImageRight : Invalid Native Object");
    if (argc == 2) {
        CrossApp::DSize arg0;
        std::string arg1;
        ok &= jsval_to_dsize(cx, args.get(0), &arg0);
        ok &= jsval_to_std_string(cx, args.get(1), &arg1);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CATextField_setMarginImageRight : Error processing arguments");
        cobj->setMarginImageRight(arg0, arg1);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CATextField_setMarginImageRight : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_autogentestbindings_js_CATextField_ccTouchCancelled(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATextField* cobj = (CrossApp::CATextField *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CATextField_ccTouchCancelled : Invalid Native Object");
    if (argc == 2) {
        CrossApp::CATouch* arg0 = nullptr;
        CrossApp::CAEvent* arg1 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CATouch*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        do {
            if (args.get(1).isNull()) { arg1 = nullptr; break; }
            if (!args.get(1).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(1).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg1 = (CrossApp::CAEvent*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg1, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CATextField_ccTouchCancelled : Error processing arguments");
        cobj->ccTouchCancelled(arg0, arg1);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CATextField_ccTouchCancelled : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_autogentestbindings_js_CATextField_getMarginLeft(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATextField* cobj = (CrossApp::CATextField *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CATextField_getMarginLeft : Invalid Native Object");
    if (argc == 0) {
        int ret = cobj->getMarginLeft();
        jsval jsret = JSVAL_NULL;
        jsret = int32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CATextField_getMarginLeft : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CATextField_setMaxLenght(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATextField* cobj = (CrossApp::CATextField *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CATextField_setMaxLenght : Invalid Native Object");
    if (argc == 1) {
        int arg0 = 0;
        ok &= jsval_to_int32(cx, args.get(0), (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CATextField_setMaxLenght : Error processing arguments");
        cobj->setMaxLenght(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CATextField_setMaxLenght : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CATextField_becomeFirstResponder(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATextField* cobj = (CrossApp::CATextField *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CATextField_becomeFirstResponder : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->becomeFirstResponder();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CATextField_becomeFirstResponder : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CATextField_setSecureTextEntry(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATextField* cobj = (CrossApp::CATextField *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CATextField_setSecureTextEntry : Invalid Native Object");
    if (argc == 1) {
        bool arg0;
        arg0 = JS::ToBoolean(args.get(0));
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CATextField_setSecureTextEntry : Error processing arguments");
        cobj->setSecureTextEntry(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CATextField_setSecureTextEntry : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CATextField_isAllowkeyBoardHide(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATextField* cobj = (CrossApp::CATextField *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CATextField_isAllowkeyBoardHide : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->isAllowkeyBoardHide();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CATextField_isAllowkeyBoardHide : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CATextField_onEnterTransitionDidFinish(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CATextField* cobj = (CrossApp::CATextField *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CATextField_onEnterTransitionDidFinish : Invalid Native Object");
    if (argc == 0) {
        cobj->onEnterTransitionDidFinish();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CATextField_onEnterTransitionDidFinish : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CATextField_createWithFrame(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        CrossApp::DRect arg0;
        ok &= jsval_to_drect(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CATextField_createWithFrame : Error processing arguments");
        CrossApp::CATextField* ret = CrossApp::CATextField::createWithFrame(arg0);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CATextField>(cx, (CrossApp::CATextField*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_autogentestbindings_js_CATextField_createWithFrame : wrong number of arguments");
    return false;
}

bool js_autogentestbindings_js_CATextField_createWithLayout(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        CrossApp::DRectLayout arg0;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (const CrossApp::DRectLayout&)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CATextField_createWithLayout : Error processing arguments");
        CrossApp::CATextField* ret = CrossApp::CATextField::createWithLayout(arg0);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CATextField>(cx, (CrossApp::CATextField*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_autogentestbindings_js_CATextField_createWithLayout : wrong number of arguments");
    return false;
}

bool js_autogentestbindings_js_CATextField_createWithCenter(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        CrossApp::DRect arg0;
        ok &= jsval_to_drect(cx, args.get(0), &arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CATextField_createWithCenter : Error processing arguments");
        CrossApp::CATextField* ret = CrossApp::CATextField::createWithCenter(arg0);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CATextField>(cx, (CrossApp::CATextField*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_autogentestbindings_js_CATextField_createWithCenter : wrong number of arguments");
    return false;
}

bool js_autogentestbindings_js_CATextField_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    CrossApp::CATextField* cobj = new (std::nothrow) CrossApp::CATextField();
    TypeTest<CrossApp::CATextField> t;
    js_type_class_t *typeClass = nullptr;
    std::string typeName = t.s_name();
    auto typeMapIter = _js_global_type_map.find(typeName);
    CCAssert(typeMapIter != _js_global_type_map.end(), "Can't find the class type!");
    typeClass = typeMapIter->second;
    CCAssert(typeClass, "The value is null.");
    JS::RootedObject proto(cx, typeClass->proto.get());
    JS::RootedObject parent(cx, typeClass->parentProto.get());
    JS::RootedObject obj(cx, JS_NewObject(cx, typeClass->jsclass, proto, parent));
    args.rval().set(OBJECT_TO_JSVAL(obj));
    // link the native object with the javascript object
    js_proxy_t* p = jsb_new_proxy(cobj, obj);
    if (JS_HasProperty(cx, obj, "_ctor", &ok) && ok)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    return true;
}

extern JSObject *jsb_CrossApp_CAView_prototype;

void js_CrossApp_CATextField_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOGINFO("jsbindings: finalizing JS object %p (CATextField)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::CATextField *nobj = static_cast<CrossApp::CATextField *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
void js_register_autogentestbindings_js_CATextField(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_CATextField_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_CATextField_class->name = "CATextField";
    jsb_CrossApp_CATextField_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_CATextField_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_CATextField_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_CATextField_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_CATextField_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_CATextField_class->resolve = JS_ResolveStub;
    jsb_CrossApp_CATextField_class->convert = JS_ConvertStub;
    jsb_CrossApp_CATextField_class->finalize = js_CrossApp_CATextField_finalize;
    jsb_CrossApp_CATextField_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("getFontSize", js_autogentestbindings_js_CATextField_getFontSize, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setKeyboardType", js_autogentestbindings_js_CATextField_setKeyboardType, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("ccTouchBegan", js_autogentestbindings_js_CATextField_ccTouchBegan, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getText", js_autogentestbindings_js_CATextField_getText, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setClearButtonMode", js_autogentestbindings_js_CATextField_setClearButtonMode, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("ccTouchEnded", js_autogentestbindings_js_CATextField_ccTouchEnded, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getTextColor", js_autogentestbindings_js_CATextField_getTextColor, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getKeyboardType", js_autogentestbindings_js_CATextField_getKeyboardType, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isSecureTextEntry", js_autogentestbindings_js_CATextField_isSecureTextEntry, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getMaxLenght", js_autogentestbindings_js_CATextField_getMaxLenght, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setTextFieldAlign", js_autogentestbindings_js_CATextField_setTextFieldAlign, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setMarginImageLeft", js_autogentestbindings_js_CATextField_setMarginImageLeft, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("init", js_autogentestbindings_js_CATextField_init, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setMarginRight", js_autogentestbindings_js_CATextField_setMarginRight, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getClearButtonMode", js_autogentestbindings_js_CATextField_getClearButtonMode, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("ccTouchMoved", js_autogentestbindings_js_CATextField_ccTouchMoved, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getReturnType", js_autogentestbindings_js_CATextField_getReturnType, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getPlaceHolderText", js_autogentestbindings_js_CATextField_getPlaceHolderText, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setAllowkeyBoardHide", js_autogentestbindings_js_CATextField_setAllowkeyBoardHide, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getPlaceHolderColor", js_autogentestbindings_js_CATextField_getPlaceHolderColor, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setPlaceHolderText", js_autogentestbindings_js_CATextField_setPlaceHolderText, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setBackgroundImage", js_autogentestbindings_js_CATextField_setBackgroundImage, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getMarginRight", js_autogentestbindings_js_CATextField_getMarginRight, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("onExitTransitionDidStart", js_autogentestbindings_js_CATextField_onExitTransitionDidStart, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setMarginLeft", js_autogentestbindings_js_CATextField_setMarginLeft, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setDelegate", js_autogentestbindings_js_CATextField_setDelegate, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setFontSize", js_autogentestbindings_js_CATextField_setFontSize, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setPlaceHolderColor", js_autogentestbindings_js_CATextField_setPlaceHolderColor, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setTextColor", js_autogentestbindings_js_CATextField_setTextColor, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setReturnType", js_autogentestbindings_js_CATextField_setReturnType, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getDelegate", js_autogentestbindings_js_CATextField_getDelegate, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("resignFirstResponder", js_autogentestbindings_js_CATextField_resignFirstResponder, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setText", js_autogentestbindings_js_CATextField_setText, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getTextFieldAlign", js_autogentestbindings_js_CATextField_getTextFieldAlign, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setMarginImageRight", js_autogentestbindings_js_CATextField_setMarginImageRight, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("ccTouchCancelled", js_autogentestbindings_js_CATextField_ccTouchCancelled, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getMarginLeft", js_autogentestbindings_js_CATextField_getMarginLeft, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setMaxLenght", js_autogentestbindings_js_CATextField_setMaxLenght, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("becomeFirstResponder", js_autogentestbindings_js_CATextField_becomeFirstResponder, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("setSecureTextEntry", js_autogentestbindings_js_CATextField_setSecureTextEntry, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isAllowkeyBoardHide", js_autogentestbindings_js_CATextField_isAllowkeyBoardHide, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("onEnterTransitionDidFinish", js_autogentestbindings_js_CATextField_onEnterTransitionDidFinish, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    static JSFunctionSpec st_funcs[] = {
        JS_FN("createWithFrame", js_autogentestbindings_js_CATextField_createWithFrame, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("createWithLayout", js_autogentestbindings_js_CATextField_createWithLayout, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("createWithCenter", js_autogentestbindings_js_CATextField_createWithCenter, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    jsb_CrossApp_CATextField_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_CAView_prototype),
        jsb_CrossApp_CATextField_class,
        js_autogentestbindings_js_CATextField_constructor, 0, // constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27 
//  JS_SetPropertyAttributes(cx, global, "CATextField", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::CATextField> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_CATextField_class;
        p->proto = jsb_CrossApp_CATextField_prototype;
        p->parentProto = jsb_CrossApp_CAView_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
}

JSClass  *jsb_CrossApp_CCScriptHandlerEntry_class;
JSObject *jsb_CrossApp_CCScriptHandlerEntry_prototype;

bool js_autogentestbindings_js_CCScriptHandlerEntry_getHandler(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CCScriptHandlerEntry* cobj = (CrossApp::CCScriptHandlerEntry *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CCScriptHandlerEntry_getHandler : Invalid Native Object");
    if (argc == 0) {
        int ret = cobj->getHandler();
        jsval jsret = JSVAL_NULL;
        jsret = int32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CCScriptHandlerEntry_getHandler : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CCScriptHandlerEntry_getEntryId(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CCScriptHandlerEntry* cobj = (CrossApp::CCScriptHandlerEntry *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CCScriptHandlerEntry_getEntryId : Invalid Native Object");
    if (argc == 0) {
        int ret = cobj->getEntryId();
        jsval jsret = JSVAL_NULL;
        jsret = int32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CCScriptHandlerEntry_getEntryId : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CCScriptHandlerEntry_create(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 1) {
        int arg0 = 0;
        ok &= jsval_to_int32(cx, args.get(0), (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CCScriptHandlerEntry_create : Error processing arguments");
        CrossApp::CCScriptHandlerEntry* ret = CrossApp::CCScriptHandlerEntry::create(arg0);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CCScriptHandlerEntry>(cx, (CrossApp::CCScriptHandlerEntry*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_autogentestbindings_js_CCScriptHandlerEntry_create : wrong number of arguments");
    return false;
}


extern JSObject *jsb_CrossApp_CAObject_prototype;

void js_CrossApp_CCScriptHandlerEntry_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOGINFO("jsbindings: finalizing JS object %p (CCScriptHandlerEntry)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::CCScriptHandlerEntry *nobj = static_cast<CrossApp::CCScriptHandlerEntry *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
void js_register_autogentestbindings_js_CCScriptHandlerEntry(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_CCScriptHandlerEntry_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_CCScriptHandlerEntry_class->name = "CCScriptHandlerEntry";
    jsb_CrossApp_CCScriptHandlerEntry_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_CCScriptHandlerEntry_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_CCScriptHandlerEntry_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_CCScriptHandlerEntry_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_CCScriptHandlerEntry_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_CCScriptHandlerEntry_class->resolve = JS_ResolveStub;
    jsb_CrossApp_CCScriptHandlerEntry_class->convert = JS_ConvertStub;
    jsb_CrossApp_CCScriptHandlerEntry_class->finalize = js_CrossApp_CCScriptHandlerEntry_finalize;
    jsb_CrossApp_CCScriptHandlerEntry_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("getHandler", js_autogentestbindings_js_CCScriptHandlerEntry_getHandler, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getEntryId", js_autogentestbindings_js_CCScriptHandlerEntry_getEntryId, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    static JSFunctionSpec st_funcs[] = {
        JS_FN("create", js_autogentestbindings_js_CCScriptHandlerEntry_create, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    jsb_CrossApp_CCScriptHandlerEntry_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_CAObject_prototype),
        jsb_CrossApp_CCScriptHandlerEntry_class,
        dummy_constructor<CrossApp::CCScriptHandlerEntry>, 0, // no constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27 
//  JS_SetPropertyAttributes(cx, global, "CCScriptHandlerEntry", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::CCScriptHandlerEntry> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_CCScriptHandlerEntry_class;
        p->proto = jsb_CrossApp_CCScriptHandlerEntry_prototype;
        p->parentProto = jsb_CrossApp_CAObject_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
}

JSClass  *jsb_CrossApp_CCSchedulerScriptHandlerEntry_class;
JSObject *jsb_CrossApp_CCSchedulerScriptHandlerEntry_prototype;

bool js_autogentestbindings_js_CCSchedulerScriptHandlerEntry_isMarkedForDeletion(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CCSchedulerScriptHandlerEntry* cobj = (CrossApp::CCSchedulerScriptHandlerEntry *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CCSchedulerScriptHandlerEntry_isMarkedForDeletion : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->isMarkedForDeletion();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CCSchedulerScriptHandlerEntry_isMarkedForDeletion : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CCSchedulerScriptHandlerEntry_markedForDeletion(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CCSchedulerScriptHandlerEntry* cobj = (CrossApp::CCSchedulerScriptHandlerEntry *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CCSchedulerScriptHandlerEntry_markedForDeletion : Invalid Native Object");
    if (argc == 0) {
        cobj->markedForDeletion();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CCSchedulerScriptHandlerEntry_markedForDeletion : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CCSchedulerScriptHandlerEntry_isPaused(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CCSchedulerScriptHandlerEntry* cobj = (CrossApp::CCSchedulerScriptHandlerEntry *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CCSchedulerScriptHandlerEntry_isPaused : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->isPaused();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CCSchedulerScriptHandlerEntry_isPaused : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CCSchedulerScriptHandlerEntry_getTimer(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CCSchedulerScriptHandlerEntry* cobj = (CrossApp::CCSchedulerScriptHandlerEntry *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CCSchedulerScriptHandlerEntry_getTimer : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CATimer* ret = cobj->getTimer();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CATimer>(cx, (CrossApp::CATimer*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CCSchedulerScriptHandlerEntry_getTimer : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CCSchedulerScriptHandlerEntry_create(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 3) {
        int arg0 = 0;
        double arg1 = 0;
        bool arg2;
        ok &= jsval_to_int32(cx, args.get(0), (int32_t *)&arg0);
        ok &= JS::ToNumber( cx, args.get(1), &arg1) && !isnan(arg1);
        arg2 = JS::ToBoolean(args.get(2));
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CCSchedulerScriptHandlerEntry_create : Error processing arguments");
        CrossApp::CCSchedulerScriptHandlerEntry* ret = CrossApp::CCSchedulerScriptHandlerEntry::create(arg0, arg1, arg2);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CCSchedulerScriptHandlerEntry>(cx, (CrossApp::CCSchedulerScriptHandlerEntry*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_autogentestbindings_js_CCSchedulerScriptHandlerEntry_create : wrong number of arguments");
    return false;
}


extern JSObject *jsb_CrossApp_CCScriptHandlerEntry_prototype;

void js_CrossApp_CCSchedulerScriptHandlerEntry_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOGINFO("jsbindings: finalizing JS object %p (CCSchedulerScriptHandlerEntry)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::CCSchedulerScriptHandlerEntry *nobj = static_cast<CrossApp::CCSchedulerScriptHandlerEntry *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
void js_register_autogentestbindings_js_CCSchedulerScriptHandlerEntry(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_CCSchedulerScriptHandlerEntry_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_CCSchedulerScriptHandlerEntry_class->name = "CCSchedulerScriptHandlerEntry";
    jsb_CrossApp_CCSchedulerScriptHandlerEntry_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_CCSchedulerScriptHandlerEntry_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_CCSchedulerScriptHandlerEntry_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_CCSchedulerScriptHandlerEntry_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_CCSchedulerScriptHandlerEntry_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_CCSchedulerScriptHandlerEntry_class->resolve = JS_ResolveStub;
    jsb_CrossApp_CCSchedulerScriptHandlerEntry_class->convert = JS_ConvertStub;
    jsb_CrossApp_CCSchedulerScriptHandlerEntry_class->finalize = js_CrossApp_CCSchedulerScriptHandlerEntry_finalize;
    jsb_CrossApp_CCSchedulerScriptHandlerEntry_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("isMarkedForDeletion", js_autogentestbindings_js_CCSchedulerScriptHandlerEntry_isMarkedForDeletion, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("markedForDeletion", js_autogentestbindings_js_CCSchedulerScriptHandlerEntry_markedForDeletion, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("isPaused", js_autogentestbindings_js_CCSchedulerScriptHandlerEntry_isPaused, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getTimer", js_autogentestbindings_js_CCSchedulerScriptHandlerEntry_getTimer, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    static JSFunctionSpec st_funcs[] = {
        JS_FN("create", js_autogentestbindings_js_CCSchedulerScriptHandlerEntry_create, 3, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    jsb_CrossApp_CCSchedulerScriptHandlerEntry_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_CCScriptHandlerEntry_prototype),
        jsb_CrossApp_CCSchedulerScriptHandlerEntry_class,
        dummy_constructor<CrossApp::CCSchedulerScriptHandlerEntry>, 0, // no constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27 
//  JS_SetPropertyAttributes(cx, global, "CCSchedulerScriptHandlerEntry", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::CCSchedulerScriptHandlerEntry> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_CCSchedulerScriptHandlerEntry_class;
        p->proto = jsb_CrossApp_CCSchedulerScriptHandlerEntry_prototype;
        p->parentProto = jsb_CrossApp_CCScriptHandlerEntry_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
}

JSClass  *jsb_CrossApp_CCTouchScriptHandlerEntry_class;
JSObject *jsb_CrossApp_CCTouchScriptHandlerEntry_prototype;

bool js_autogentestbindings_js_CCTouchScriptHandlerEntry_isMultiTouches(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CCTouchScriptHandlerEntry* cobj = (CrossApp::CCTouchScriptHandlerEntry *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CCTouchScriptHandlerEntry_isMultiTouches : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->isMultiTouches();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CCTouchScriptHandlerEntry_isMultiTouches : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CCTouchScriptHandlerEntry_getSwallowsTouches(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CCTouchScriptHandlerEntry* cobj = (CrossApp::CCTouchScriptHandlerEntry *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CCTouchScriptHandlerEntry_getSwallowsTouches : Invalid Native Object");
    if (argc == 0) {
        bool ret = cobj->getSwallowsTouches();
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CCTouchScriptHandlerEntry_getSwallowsTouches : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CCTouchScriptHandlerEntry_getPriority(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CCTouchScriptHandlerEntry* cobj = (CrossApp::CCTouchScriptHandlerEntry *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CCTouchScriptHandlerEntry_getPriority : Invalid Native Object");
    if (argc == 0) {
        int ret = cobj->getPriority();
        jsval jsret = JSVAL_NULL;
        jsret = int32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CCTouchScriptHandlerEntry_getPriority : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CCTouchScriptHandlerEntry_create(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    if (argc == 4) {
        int arg0 = 0;
        bool arg1;
        int arg2 = 0;
        bool arg3;
        ok &= jsval_to_int32(cx, args.get(0), (int32_t *)&arg0);
        arg1 = JS::ToBoolean(args.get(1));
        ok &= jsval_to_int32(cx, args.get(2), (int32_t *)&arg2);
        arg3 = JS::ToBoolean(args.get(3));
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CCTouchScriptHandlerEntry_create : Error processing arguments");
        CrossApp::CCTouchScriptHandlerEntry* ret = CrossApp::CCTouchScriptHandlerEntry::create(arg0, arg1, arg2, arg3);
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CCTouchScriptHandlerEntry>(cx, (CrossApp::CCTouchScriptHandlerEntry*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_autogentestbindings_js_CCTouchScriptHandlerEntry_create : wrong number of arguments");
    return false;
}


extern JSObject *jsb_CrossApp_CCScriptHandlerEntry_prototype;

void js_CrossApp_CCTouchScriptHandlerEntry_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOGINFO("jsbindings: finalizing JS object %p (CCTouchScriptHandlerEntry)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::CCTouchScriptHandlerEntry *nobj = static_cast<CrossApp::CCTouchScriptHandlerEntry *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
void js_register_autogentestbindings_js_CCTouchScriptHandlerEntry(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_CCTouchScriptHandlerEntry_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_CCTouchScriptHandlerEntry_class->name = "CCTouchScriptHandlerEntry";
    jsb_CrossApp_CCTouchScriptHandlerEntry_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_CCTouchScriptHandlerEntry_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_CCTouchScriptHandlerEntry_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_CCTouchScriptHandlerEntry_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_CCTouchScriptHandlerEntry_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_CCTouchScriptHandlerEntry_class->resolve = JS_ResolveStub;
    jsb_CrossApp_CCTouchScriptHandlerEntry_class->convert = JS_ConvertStub;
    jsb_CrossApp_CCTouchScriptHandlerEntry_class->finalize = js_CrossApp_CCTouchScriptHandlerEntry_finalize;
    jsb_CrossApp_CCTouchScriptHandlerEntry_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("isMultiTouches", js_autogentestbindings_js_CCTouchScriptHandlerEntry_isMultiTouches, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getSwallowsTouches", js_autogentestbindings_js_CCTouchScriptHandlerEntry_getSwallowsTouches, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getPriority", js_autogentestbindings_js_CCTouchScriptHandlerEntry_getPriority, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    static JSFunctionSpec st_funcs[] = {
        JS_FN("create", js_autogentestbindings_js_CCTouchScriptHandlerEntry_create, 4, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    jsb_CrossApp_CCTouchScriptHandlerEntry_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_CCScriptHandlerEntry_prototype),
        jsb_CrossApp_CCTouchScriptHandlerEntry_class,
        dummy_constructor<CrossApp::CCTouchScriptHandlerEntry>, 0, // no constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27 
//  JS_SetPropertyAttributes(cx, global, "CCTouchScriptHandlerEntry", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::CCTouchScriptHandlerEntry> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_CCTouchScriptHandlerEntry_class;
        p->proto = jsb_CrossApp_CCTouchScriptHandlerEntry_prototype;
        p->parentProto = jsb_CrossApp_CCScriptHandlerEntry_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
}

JSClass  *jsb_CrossApp_CCScriptEngineProtocol_class;
JSObject *jsb_CrossApp_CCScriptEngineProtocol_prototype;

bool js_autogentestbindings_js_CCScriptEngineProtocol_parseConfig(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CCScriptEngineProtocol* cobj = (CrossApp::CCScriptEngineProtocol *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CCScriptEngineProtocol_parseConfig : Invalid Native Object");
    if (argc == 2) {
        CrossApp::CCScriptEngineProtocol::ConfigType arg0;
        std::string arg1;
        ok &= jsval_to_int32(cx, args.get(0), (int32_t *)&arg0);
        ok &= jsval_to_std_string(cx, args.get(1), &arg1);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CCScriptEngineProtocol_parseConfig : Error processing arguments");
        bool ret = cobj->parseConfig(arg0, arg1);
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CCScriptEngineProtocol_parseConfig : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_autogentestbindings_js_CCScriptEngineProtocol_getScriptType(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CCScriptEngineProtocol* cobj = (CrossApp::CCScriptEngineProtocol *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CCScriptEngineProtocol_getScriptType : Invalid Native Object");
    if (argc == 0) {
        int ret = (int)cobj->getScriptType();
        jsval jsret = JSVAL_NULL;
        jsret = int32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CCScriptEngineProtocol_getScriptType : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CCScriptEngineProtocol_removeScriptObjectByCCObject(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CCScriptEngineProtocol* cobj = (CrossApp::CCScriptEngineProtocol *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CCScriptEngineProtocol_removeScriptObjectByCCObject : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CAObject* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAObject*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CCScriptEngineProtocol_removeScriptObjectByCCObject : Error processing arguments");
        cobj->removeScriptObjectByCCObject(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CCScriptEngineProtocol_removeScriptObjectByCCObject : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CCScriptEngineProtocol_executeScriptFile(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CCScriptEngineProtocol* cobj = (CrossApp::CCScriptEngineProtocol *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CCScriptEngineProtocol_executeScriptFile : Invalid Native Object");
    if (argc == 1) {
        const char* arg0 = nullptr;
        std::string arg0_tmp; ok &= jsval_to_std_string(cx, args.get(0), &arg0_tmp); arg0 = arg0_tmp.c_str();
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CCScriptEngineProtocol_executeScriptFile : Error processing arguments");
        int ret = cobj->executeScriptFile(arg0);
        jsval jsret = JSVAL_NULL;
        jsret = int32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CCScriptEngineProtocol_executeScriptFile : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CCScriptEngineProtocol_executeNodeEvent(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CCScriptEngineProtocol* cobj = (CrossApp::CCScriptEngineProtocol *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CCScriptEngineProtocol_executeNodeEvent : Invalid Native Object");
    if (argc == 2) {
        CrossApp::CAViewController* arg0 = nullptr;
        int arg1 = 0;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CAViewController*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        ok &= jsval_to_int32(cx, args.get(1), (int32_t *)&arg1);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CCScriptEngineProtocol_executeNodeEvent : Error processing arguments");
        int ret = cobj->executeNodeEvent(arg0, arg1);
        jsval jsret = JSVAL_NULL;
        jsret = int32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CCScriptEngineProtocol_executeNodeEvent : wrong number of arguments: %d, was expecting %d", argc, 2);
    return false;
}
bool js_autogentestbindings_js_CCScriptEngineProtocol_executeString(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CCScriptEngineProtocol* cobj = (CrossApp::CCScriptEngineProtocol *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CCScriptEngineProtocol_executeString : Invalid Native Object");
    if (argc == 1) {
        const char* arg0 = nullptr;
        std::string arg0_tmp; ok &= jsval_to_std_string(cx, args.get(0), &arg0_tmp); arg0 = arg0_tmp.c_str();
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CCScriptEngineProtocol_executeString : Error processing arguments");
        int ret = cobj->executeString(arg0);
        jsval jsret = JSVAL_NULL;
        jsret = int32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CCScriptEngineProtocol_executeString : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CCScriptEngineProtocol_handleAssert(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CCScriptEngineProtocol* cobj = (CrossApp::CCScriptEngineProtocol *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CCScriptEngineProtocol_handleAssert : Invalid Native Object");
    if (argc == 1) {
        const char* arg0 = nullptr;
        std::string arg0_tmp; ok &= jsval_to_std_string(cx, args.get(0), &arg0_tmp); arg0 = arg0_tmp.c_str();
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CCScriptEngineProtocol_handleAssert : Error processing arguments");
        bool ret = cobj->handleAssert(arg0);
        jsval jsret = JSVAL_NULL;
        jsret = BOOLEAN_TO_JSVAL(ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CCScriptEngineProtocol_handleAssert : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CCScriptEngineProtocol_removeScriptHandler(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CCScriptEngineProtocol* cobj = (CrossApp::CCScriptEngineProtocol *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CCScriptEngineProtocol_removeScriptHandler : Invalid Native Object");
    if (argc == 1) {
        int arg0 = 0;
        ok &= jsval_to_int32(cx, args.get(0), (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CCScriptEngineProtocol_removeScriptHandler : Error processing arguments");
        cobj->removeScriptHandler(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CCScriptEngineProtocol_removeScriptHandler : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CCScriptEngineProtocol_reallocateScriptHandler(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CCScriptEngineProtocol* cobj = (CrossApp::CCScriptEngineProtocol *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CCScriptEngineProtocol_reallocateScriptHandler : Invalid Native Object");
    if (argc == 1) {
        int arg0 = 0;
        ok &= jsval_to_int32(cx, args.get(0), (int32_t *)&arg0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CCScriptEngineProtocol_reallocateScriptHandler : Error processing arguments");
        int ret = cobj->reallocateScriptHandler(arg0);
        jsval jsret = JSVAL_NULL;
        jsret = int32_to_jsval(cx, ret);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CCScriptEngineProtocol_reallocateScriptHandler : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}

void js_CrossApp_CCScriptEngineProtocol_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOGINFO("jsbindings: finalizing JS object %p (CCScriptEngineProtocol)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::CCScriptEngineProtocol *nobj = static_cast<CrossApp::CCScriptEngineProtocol *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
void js_register_autogentestbindings_js_CCScriptEngineProtocol(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_CCScriptEngineProtocol_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_CCScriptEngineProtocol_class->name = "CCScriptEngineProtocol";
    jsb_CrossApp_CCScriptEngineProtocol_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_CCScriptEngineProtocol_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_CCScriptEngineProtocol_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_CCScriptEngineProtocol_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_CCScriptEngineProtocol_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_CCScriptEngineProtocol_class->resolve = JS_ResolveStub;
    jsb_CrossApp_CCScriptEngineProtocol_class->convert = JS_ConvertStub;
    jsb_CrossApp_CCScriptEngineProtocol_class->finalize = js_CrossApp_CCScriptEngineProtocol_finalize;
    jsb_CrossApp_CCScriptEngineProtocol_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("parseConfig", js_autogentestbindings_js_CCScriptEngineProtocol_parseConfig, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getScriptType", js_autogentestbindings_js_CCScriptEngineProtocol_getScriptType, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("removeScriptObjectByCCObject", js_autogentestbindings_js_CCScriptEngineProtocol_removeScriptObjectByCCObject, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("executeScriptFile", js_autogentestbindings_js_CCScriptEngineProtocol_executeScriptFile, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("executeNodeEvent", js_autogentestbindings_js_CCScriptEngineProtocol_executeNodeEvent, 2, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("executeString", js_autogentestbindings_js_CCScriptEngineProtocol_executeString, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("handleAssert", js_autogentestbindings_js_CCScriptEngineProtocol_handleAssert, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("removeScriptHandler", js_autogentestbindings_js_CCScriptEngineProtocol_removeScriptHandler, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("reallocateScriptHandler", js_autogentestbindings_js_CCScriptEngineProtocol_reallocateScriptHandler, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    JSFunctionSpec *st_funcs = NULL;

    jsb_CrossApp_CCScriptEngineProtocol_prototype = JS_InitClass(
        cx, global,
        JS::NullPtr(), // parent proto
        jsb_CrossApp_CCScriptEngineProtocol_class,
        dummy_constructor<CrossApp::CCScriptEngineProtocol>, 0, // no constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27 
//  JS_SetPropertyAttributes(cx, global, "CCScriptEngineProtocol", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::CCScriptEngineProtocol> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_CCScriptEngineProtocol_class;
        p->proto = jsb_CrossApp_CCScriptEngineProtocol_prototype;
        p->parentProto = NULL;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
}

JSClass  *jsb_CrossApp_CCScriptEngineManager_class;
JSObject *jsb_CrossApp_CCScriptEngineManager_prototype;

bool js_autogentestbindings_js_CCScriptEngineManager_setScriptEngine(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CCScriptEngineManager* cobj = (CrossApp::CCScriptEngineManager *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CCScriptEngineManager_setScriptEngine : Invalid Native Object");
    if (argc == 1) {
        CrossApp::CCScriptEngineProtocol* arg0 = nullptr;
        do {
            if (args.get(0).isNull()) { arg0 = nullptr; break; }
            if (!args.get(0).isObject()) { ok = false; break; }
            js_proxy_t *jsProxy;
            JSObject *tmpObj = args.get(0).toObjectOrNull();
            jsProxy = jsb_get_js_proxy(tmpObj);
            arg0 = (CrossApp::CCScriptEngineProtocol*)(jsProxy ? jsProxy->ptr : NULL);
            JSB_PRECONDITION2( arg0, cx, false, "Invalid Native Object");
        } while (0);
        JSB_PRECONDITION2(ok, cx, false, "js_autogentestbindings_js_CCScriptEngineManager_setScriptEngine : Error processing arguments");
        cobj->setScriptEngine(arg0);
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CCScriptEngineManager_setScriptEngine : wrong number of arguments: %d, was expecting %d", argc, 1);
    return false;
}
bool js_autogentestbindings_js_CCScriptEngineManager_getScriptEngine(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CCScriptEngineManager* cobj = (CrossApp::CCScriptEngineManager *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CCScriptEngineManager_getScriptEngine : Invalid Native Object");
    if (argc == 0) {
        CrossApp::CCScriptEngineProtocol* ret = cobj->getScriptEngine();
        jsval jsret = JSVAL_NULL;
        do {
            if (ret) {
                js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CCScriptEngineProtocol>(cx, (CrossApp::CCScriptEngineProtocol*)ret);
                jsret = OBJECT_TO_JSVAL(jsProxy->obj);
            } else {
                jsret = JSVAL_NULL;
            }
        } while (0);
        args.rval().set(jsret);
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CCScriptEngineManager_getScriptEngine : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CCScriptEngineManager_removeScriptEngine(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    CrossApp::CCScriptEngineManager* cobj = (CrossApp::CCScriptEngineManager *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_CCScriptEngineManager_removeScriptEngine : Invalid Native Object");
    if (argc == 0) {
        cobj->removeScriptEngine();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_CCScriptEngineManager_removeScriptEngine : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_CCScriptEngineManager_sharedManager(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    if (argc == 0) {
        CrossApp::CCScriptEngineManager* ret = CrossApp::CCScriptEngineManager::sharedManager();
        jsval jsret = JSVAL_NULL;
        do {
        if (ret) {
            js_proxy_t *jsProxy = js_get_or_create_proxy<CrossApp::CCScriptEngineManager>(cx, (CrossApp::CCScriptEngineManager*)ret);
            jsret = OBJECT_TO_JSVAL(jsProxy->obj);
        } else {
            jsret = JSVAL_NULL;
        }
    } while (0);
        args.rval().set(jsret);
        return true;
    }
    JS_ReportError(cx, "js_autogentestbindings_js_CCScriptEngineManager_sharedManager : wrong number of arguments");
    return false;
}

bool js_autogentestbindings_js_CCScriptEngineManager_purgeSharedManager(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    if (argc == 0) {
        CrossApp::CCScriptEngineManager::purgeSharedManager();
        args.rval().setUndefined();
        return true;
    }
    JS_ReportError(cx, "js_autogentestbindings_js_CCScriptEngineManager_purgeSharedManager : wrong number of arguments");
    return false;
}


void js_CrossApp_CCScriptEngineManager_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOGINFO("jsbindings: finalizing JS object %p (CCScriptEngineManager)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        CrossApp::CCScriptEngineManager *nobj = static_cast<CrossApp::CCScriptEngineManager *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
void js_register_autogentestbindings_js_CCScriptEngineManager(JSContext *cx, JS::HandleObject global) {
    jsb_CrossApp_CCScriptEngineManager_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_CrossApp_CCScriptEngineManager_class->name = "CCScriptEngineManager";
    jsb_CrossApp_CCScriptEngineManager_class->addProperty = JS_PropertyStub;
    jsb_CrossApp_CCScriptEngineManager_class->delProperty = JS_DeletePropertyStub;
    jsb_CrossApp_CCScriptEngineManager_class->getProperty = JS_PropertyStub;
    jsb_CrossApp_CCScriptEngineManager_class->setProperty = JS_StrictPropertyStub;
    jsb_CrossApp_CCScriptEngineManager_class->enumerate = JS_EnumerateStub;
    jsb_CrossApp_CCScriptEngineManager_class->resolve = JS_ResolveStub;
    jsb_CrossApp_CCScriptEngineManager_class->convert = JS_ConvertStub;
    jsb_CrossApp_CCScriptEngineManager_class->finalize = js_CrossApp_CCScriptEngineManager_finalize;
    jsb_CrossApp_CCScriptEngineManager_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("setScriptEngine", js_autogentestbindings_js_CCScriptEngineManager_setScriptEngine, 1, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("getScriptEngine", js_autogentestbindings_js_CCScriptEngineManager_getScriptEngine, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("removeScriptEngine", js_autogentestbindings_js_CCScriptEngineManager_removeScriptEngine, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    static JSFunctionSpec st_funcs[] = {
        JS_FN("sharedManager", js_autogentestbindings_js_CCScriptEngineManager_sharedManager, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("purgeSharedManager", js_autogentestbindings_js_CCScriptEngineManager_purgeSharedManager, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    jsb_CrossApp_CCScriptEngineManager_prototype = JS_InitClass(
        cx, global,
        JS::NullPtr(), // parent proto
        jsb_CrossApp_CCScriptEngineManager_class,
        dummy_constructor<CrossApp::CCScriptEngineManager>, 0, // no constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27 
//  JS_SetPropertyAttributes(cx, global, "CCScriptEngineManager", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<CrossApp::CCScriptEngineManager> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_CrossApp_CCScriptEngineManager_class;
        p->proto = jsb_CrossApp_CCScriptEngineManager_prototype;
        p->parentProto = NULL;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
}

JSClass  *jsb_JSViewController_class;
JSObject *jsb_JSViewController_prototype;

bool js_autogentestbindings_js_JSViewController_viewDidUnload(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    JSViewController* cobj = (JSViewController *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_JSViewController_viewDidUnload : Invalid Native Object");
    if (argc == 0) {
        cobj->viewDidUnload();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_JSViewController_viewDidUnload : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_JSViewController_viewDidLoad(JSContext *cx, uint32_t argc, jsval *vp)
{
    
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    JS::RootedObject obj(cx, args.thisv().toObjectOrNull());
    js_proxy_t *proxy = jsb_get_js_proxy(obj);
    JSViewController* cobj = (JSViewController *)(proxy ? proxy->ptr : NULL);
    JSB_PRECONDITION2( cobj, cx, false, "js_autogentestbindings_js_JSViewController_viewDidLoad : Invalid Native Object");
    if (argc == 0) {
        cobj->viewDidLoad();
        args.rval().setUndefined();
        return true;
    }

    JS_ReportError(cx, "js_autogentestbindings_js_JSViewController_viewDidLoad : wrong number of arguments: %d, was expecting %d", argc, 0);
    return false;
}
bool js_autogentestbindings_js_JSViewController_constructor(JSContext *cx, uint32_t argc, jsval *vp)
{
    JS::CallArgs args = JS::CallArgsFromVp(argc, vp);
    bool ok = true;
    JSViewController* cobj = new (std::nothrow) JSViewController();
    TypeTest<JSViewController> t;
    js_type_class_t *typeClass = nullptr;
    std::string typeName = t.s_name();
    auto typeMapIter = _js_global_type_map.find(typeName);
    CCAssert(typeMapIter != _js_global_type_map.end(), "Can't find the class type!");
    typeClass = typeMapIter->second;
    CCAssert(typeClass, "The value is null.");
    JS::RootedObject proto(cx, typeClass->proto.get());
    JS::RootedObject parent(cx, typeClass->parentProto.get());
    JS::RootedObject obj(cx, JS_NewObject(cx, typeClass->jsclass, proto, parent));
    args.rval().set(OBJECT_TO_JSVAL(obj));
    // link the native object with the javascript object
    js_proxy_t* p = jsb_new_proxy(cobj, obj);
    if (JS_HasProperty(cx, obj, "_ctor", &ok) && ok)
        ScriptingCore::getInstance()->executeFunctionWithOwner(OBJECT_TO_JSVAL(obj), "_ctor", args);
    return true;
}

extern JSObject *jsb_CrossApp_CAViewController_prototype;

void js_JSViewController_finalize(JSFreeOp *fop, JSObject *obj) {
    CCLOGINFO("jsbindings: finalizing JS object %p (JSViewController)", obj);
    js_proxy_t* nproxy;
    js_proxy_t* jsproxy;
    jsproxy = jsb_get_js_proxy(obj);
    if (jsproxy) {
        JSViewController *nobj = static_cast<JSViewController *>(jsproxy->ptr);
        nproxy = jsb_get_native_proxy(jsproxy->ptr);

        if (nobj) {
            jsb_remove_proxy(nproxy, jsproxy);
            delete nobj;
        }
        else jsb_remove_proxy(nullptr, jsproxy);
    }
}
void js_register_autogentestbindings_js_JSViewController(JSContext *cx, JS::HandleObject global) {
    jsb_JSViewController_class = (JSClass *)calloc(1, sizeof(JSClass));
    jsb_JSViewController_class->name = "JSViewController";
    jsb_JSViewController_class->addProperty = JS_PropertyStub;
    jsb_JSViewController_class->delProperty = JS_DeletePropertyStub;
    jsb_JSViewController_class->getProperty = JS_PropertyStub;
    jsb_JSViewController_class->setProperty = JS_StrictPropertyStub;
    jsb_JSViewController_class->enumerate = JS_EnumerateStub;
    jsb_JSViewController_class->resolve = JS_ResolveStub;
    jsb_JSViewController_class->convert = JS_ConvertStub;
    jsb_JSViewController_class->finalize = js_JSViewController_finalize;
    jsb_JSViewController_class->flags = JSCLASS_HAS_RESERVED_SLOTS(2);

    static JSPropertySpec properties[] = {
        JS_PSG("__nativeObj", js_is_native_obj, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_PS_END
    };

    static JSFunctionSpec funcs[] = {
        JS_FN("viewDidUnload", js_autogentestbindings_js_JSViewController_viewDidUnload, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FN("viewDidLoad", js_autogentestbindings_js_JSViewController_viewDidLoad, 0, JSPROP_PERMANENT | JSPROP_ENUMERATE),
        JS_FS_END
    };

    JSFunctionSpec *st_funcs = NULL;

    jsb_JSViewController_prototype = JS_InitClass(
        cx, global,
        JS::RootedObject(cx, jsb_CrossApp_CAViewController_prototype),
        jsb_JSViewController_class,
        js_autogentestbindings_js_JSViewController_constructor, 0, // constructor
        properties,
        funcs,
        NULL, // no static properties
        st_funcs);
    // make the class enumerable in the registered namespace
//  bool found;
//FIXME: Removed in Firefox v27 
//  JS_SetPropertyAttributes(cx, global, "JSViewController", JSPROP_ENUMERATE | JSPROP_READONLY, &found);

    // add the proto and JSClass to the type->js info hash table
    TypeTest<JSViewController> t;
    js_type_class_t *p;
    std::string typeName = t.s_name();
    if (_js_global_type_map.find(typeName) == _js_global_type_map.end())
    {
        p = (js_type_class_t *)malloc(sizeof(js_type_class_t));
        p->jsclass = jsb_JSViewController_class;
        p->proto = jsb_JSViewController_prototype;
        p->parentProto = jsb_CrossApp_CAViewController_prototype;
        _js_global_type_map.insert(std::make_pair(typeName, p));
    }
}

void register_all_autogentestbindings_js(JSContext* cx, JS::HandleObject obj) {
    // Get the ns
    JS::RootedObject ns(cx);
    get_or_create_js_obj(cx, obj, "ca", &ns);

    js_register_autogentestbindings_js_VPFrame(cx, ns);
    js_register_autogentestbindings_js_VPVideoFrame(cx, ns);
    js_register_autogentestbindings_js_VPVideoFrameYUV(cx, ns);
    js_register_autogentestbindings_js_VPAudioFrame(cx, ns);
    js_register_autogentestbindings_js_CAVideoPlayerViewDelegate(cx, ns);
    js_register_autogentestbindings_js_CACopying(cx, ns);
    js_register_autogentestbindings_js_CAObject(cx, ns);
    js_register_autogentestbindings_js_CCScriptHandlerEntry(cx, ns);
    js_register_autogentestbindings_js_CCTouchScriptHandlerEntry(cx, ns);
    js_register_autogentestbindings_js_CAApplication(cx, ns);
    js_register_autogentestbindings_js_CAScrollViewDelegate(cx, ns);
    js_register_autogentestbindings_js_CAResponder(cx, ns);
    js_register_autogentestbindings_js_CARGBAProtocol(cx, ns);
    js_register_autogentestbindings_js_CAImageProtocol(cx, ns);
    js_register_autogentestbindings_js_CAView(cx, ns);
    js_register_autogentestbindings_js_CAControl(cx, ns);
    js_register_autogentestbindings_js_CATextField(cx, ns);
    js_register_autogentestbindings_js_CCEGLTouchDelegate(cx, ns);
    js_register_autogentestbindings_js_CATouchDispatcher(cx, ns);
    js_register_autogentestbindings_js_VPFrameRender(cx, ns);
    js_register_autogentestbindings_js_CATextToolBarView(cx, ns);
    js_register_autogentestbindings_js_CAPullToRefreshView(cx, ns);
    js_register_autogentestbindings_js_CCScriptEngineManager(cx, ns);
    js_register_autogentestbindings_js_CAWaterfallViewDataSource(cx, ns);
    js_register_autogentestbindings_js_CAListViewDelegate(cx, ns);
    js_register_autogentestbindings_js_CABarItem(cx, ns);
    js_register_autogentestbindings_js_CABarButtonItem(cx, ns);
    js_register_autogentestbindings_js_CATextResponder(cx, ns);
    js_register_autogentestbindings_js_CATabBarItem(cx, ns);
    js_register_autogentestbindings_js_CAWindow(cx, ns);
    js_register_autogentestbindings_js_CATouchView(cx, ns);
    js_register_autogentestbindings_js_CALabel(cx, ns);
    js_register_autogentestbindings_js_CAScrollView(cx, ns);
    js_register_autogentestbindings_js_CAPageView(cx, ns);
    js_register_autogentestbindings_js_CAWebViewDelegate(cx, ns);
    js_register_autogentestbindings_js_CAAutoLock(cx, ns);
    js_register_autogentestbindings_js_CAScheduler(cx, ns);
    js_register_autogentestbindings_js_CAProgress(cx, ns);
    js_register_autogentestbindings_js_CATableViewDataSource(cx, ns);
    js_register_autogentestbindings_js_CATableViewDelegate(cx, ns);
    js_register_autogentestbindings_js_CAAlertView(cx, ns);
    js_register_autogentestbindings_js_CAKeypadDelegate(cx, ns);
    js_register_autogentestbindings_js_CAViewController(cx, ns);
    js_register_autogentestbindings_js_CATabBarDelegate(cx, ns);
    js_register_autogentestbindings_js_CAPageViewDelegate(cx, ns);
    js_register_autogentestbindings_js_CATabBarController(cx, ns);
    js_register_autogentestbindings_js_CAAutoCollectionViewDataSource(cx, ns);
    js_register_autogentestbindings_js_CAPickerViewDelegate(cx, ns);
    js_register_autogentestbindings_js_CAWaterfallViewCell(cx, ns);
    js_register_autogentestbindings_js_CAPickerViewDataSource(cx, ns);
    js_register_autogentestbindings_js_CADatePickerView(cx, ns);
    js_register_autogentestbindings_js_CABatchView(cx, ns);
    js_register_autogentestbindings_js_CATimer(cx, ns);
    js_register_autogentestbindings_js_CATextFieldDelegate(cx, ns);
    js_register_autogentestbindings_js_CAClippingView(cx, ns);
    js_register_autogentestbindings_js_CAViewAnimation(cx, ns);
    js_register_autogentestbindings_js_CARenderImage(cx, ns);
    js_register_autogentestbindings_js_CAVideoPlayerControlViewDelegate(cx, ns);
    js_register_autogentestbindings_js_CANavigationBarItem(cx, ns);
    js_register_autogentestbindings_js_CATabBar(cx, ns);
    js_register_autogentestbindings_js_CAKeypadHandler(cx, ns);
    js_register_autogentestbindings_js_CAWaterfallViewDelegate(cx, ns);
    js_register_autogentestbindings_js_CCDisplayLinkDirector(cx, ns);
    js_register_autogentestbindings_js_CANavigationBarDelegate(cx, ns);
    js_register_autogentestbindings_js_CCSchedulerScriptHandlerEntry(cx, ns);
    js_register_autogentestbindings_js_CAWebView(cx, ns);
    js_register_autogentestbindings_js_CACollectionView(cx, ns);
    js_register_autogentestbindings_js_CACalendar(cx, ns);
    js_register_autogentestbindings_js_CAAutoCollectionViewDelegate(cx, ns);
    js_register_autogentestbindings_js_CASwitch(cx, ns);
    js_register_autogentestbindings_js_CAViewAnimationModule(cx, ns);
    js_register_autogentestbindings_js_CAAutoCollectionView(cx, ns);
    js_register_autogentestbindings_js_CACamera(cx, ns);
    js_register_autogentestbindings_js_CAPageControl(cx, ns);
    js_register_autogentestbindings_js_CATableView(cx, ns);
    js_register_autogentestbindings_js_CAPickerView(cx, ns);
    js_register_autogentestbindings_js_CATouch(cx, ns);
    js_register_autogentestbindings_js_VPVideoFrameRGB(cx, ns);
    js_register_autogentestbindings_js_CAVideoPlayerControlView(cx, ns);
    js_register_autogentestbindings_js_CAGifView(cx, ns);
    js_register_autogentestbindings_js_JSViewController(cx, ns);
    js_register_autogentestbindings_js_CAThread(cx, ns);
    js_register_autogentestbindings_js_CAActivityIndicatorView(cx, ns);
    js_register_autogentestbindings_js_CAImageView(cx, ns);
    js_register_autogentestbindings_js_CASlider(cx, ns);
    js_register_autogentestbindings_js_CAZone(cx, ns);
    js_register_autogentestbindings_js_CASegmentedControl(cx, ns);
    js_register_autogentestbindings_js_CAPoolManager(cx, ns);
    js_register_autogentestbindings_js_CADrawView(cx, ns);
    js_register_autogentestbindings_js_CADrawerController(cx, ns);
    js_register_autogentestbindings_js_CABadgeView(cx, ns);
    js_register_autogentestbindings_js_CCLabelProtocol(cx, ns);
    js_register_autogentestbindings_js_VPDecoder(cx, ns);
    js_register_autogentestbindings_js_CATableViewCell(cx, ns);
    js_register_autogentestbindings_js_CCScriptEngineProtocol(cx, ns);
    js_register_autogentestbindings_js_VPFrameRenderYUV(cx, ns);
    js_register_autogentestbindings_js_VPFrameRenderRGB(cx, ns);
    js_register_autogentestbindings_js_CAEvent(cx, ns);
    js_register_autogentestbindings_js_CAStepper(cx, ns);
    js_register_autogentestbindings_js_CACollectionViewCell(cx, ns);
    js_register_autogentestbindings_js_CAKeypadDispatcher(cx, ns);
    js_register_autogentestbindings_js_CAListViewCell(cx, ns);
    js_register_autogentestbindings_js_CATouchController(cx, ns);
    js_register_autogentestbindings_js_CACollectionViewDelegate(cx, ns);
    js_register_autogentestbindings_js_CAImage(cx, ns);
    js_register_autogentestbindings_js_CANavigationController(cx, ns);
    js_register_autogentestbindings_js_CAWaterfallView(cx, ns);
    js_register_autogentestbindings_js_CAScale9ImageView(cx, ns);
    js_register_autogentestbindings_js_CAImageCache(cx, ns);
    js_register_autogentestbindings_js_CADatePickerViewDelegate(cx, ns);
    js_register_autogentestbindings_js_CACollectionViewDataSource(cx, ns);
    js_register_autogentestbindings_js_CAButton(cx, ns);
    js_register_autogentestbindings_js_CAGif(cx, ns);
    js_register_autogentestbindings_js_CAVideoPlayerView(cx, ns);
    js_register_autogentestbindings_js_CAIndicator(cx, ns);
    js_register_autogentestbindings_js_CANavigationBar(cx, ns);
    js_register_autogentestbindings_js_CAListView(cx, ns);
    js_register_autogentestbindings_js_CALock(cx, ns);
    js_register_autogentestbindings_js_CAAutoreleasePool(cx, ns);
    js_register_autogentestbindings_js_CAListViewDataSource(cx, ns);
    js_register_autogentestbindings_js_CAImageAtlas(cx, ns);
    js_register_autogentestbindings_js_CCSet(cx, ns);
}

