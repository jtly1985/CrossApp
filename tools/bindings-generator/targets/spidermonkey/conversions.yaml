definitions:
  # the names of the functions - we use this to generate the code and to register the functions in
  # the javascript class
  ifunction: "js_${generator.prefix}_${class_name}_${func_name}"
  sfunction: "js_${generator.prefix}_${class_name}_${func_name}"
  constructor: "js_${generator.prefix}_${class_name}_constructor"
  ctor: "js_${generator.prefix}_${class_name}_ctor"
  public_field: "js_${generator.prefix}_${class_name}"
conversions:
  # some times you want to use a special native type when converting from spidermonkey to native
  # the most common case would be from JS-boolean to bool. Using "bool" will fail here since we
  # pass the address to the conversion method, and a JSBool is defined as an integer in spidermonkey
  native_types:
    float: "double"
    short: "int32_t"
    "unsigned char": "uint16_t"
    "char": "int32_t"
    "@std::vector<std::basic_string.*>.>.>": "std::vector<std::string>"
    "@std::vector<int.*>.>": "std::vector<int>"
    "@CrossApp::CAMap<std::basic_string.*,": "CrossApp::CAMap<std::string,"
    "@std::map<std::basic_string.*,\\s*std::basic_string.*>": "std::map<std::string, std::string>"
  ns_map:
    "CrossApp::extension::": "cc."
    "CrossApp::": "cc."
  to_native:
    # jsval to int
    int: "ok &= jsval_to_int32(cx, ${in_value}, (int32_t *)&${out_value})"
    "unsigned int": "ok &= jsval_to_uint32(cx, ${in_value}, &${out_value})"
    "unsigned char": "ok &= jsval_to_uint16(cx, ${in_value}, &${out_value})"
    short: "ok &= jsval_to_int32(cx, ${in_value}, &${out_value})"
    "unsigned short": "ok &= jsval_to_ushort(cx, ${in_value}, &${out_value})"
    char: "ok &= jsval_to_int32(cx, ${in_value}, &${out_value})"
    bool: "${out_value} = JS::ToBoolean(${in_value})"
    float: "ok &= JS::ToNumber( cx, ${in_value}, &${out_value}) && !isnan(${out_value})"
    double: "ok &= JS::ToNumber( cx, ${in_value}, &${out_value}) && !isnan(${out_value})"
    long: "ok &= jsval_to_long(cx, ${in_value}, &${out_value})"
    "unsigned long": "ok &= jsval_to_ulong(cx, ${in_value}, &${out_value})"
    "ssize_t": "ok &= jsval_to_ssize(cx, ${in_value}, &${out_value})"
    # jsval has to be a TypedArray, a UInt32Array with 2 elements
    "long long": "ok &= jsval_to_long_long(cx, ${in_value}, &${out_value})"
    "std::string": "ok &= jsval_to_std_string(cx, ${in_value}, &${out_value})"
    "char*": "std::string ${out_value}_tmp; ok &= jsval_to_std_string(cx, ${in_value}, &${out_value}_tmp); ${out_value} = ${out_value}_tmp.c_str()"
    "DPoint": "ok &= jsval_to_dpoint(cx, ${in_value}, &${out_value})"
    "DRect": "ok &= jsval_to_drect(cx, ${in_value}, &${out_value})"
    "DSize": "ok &= jsval_to_dsize(cx, ${in_value}, &${out_value})"
    "CAColor4B": "ok &= jsval_to_cacolor4b(cx, ${in_value}, &${out_value})"
    "CAColor4F": "ok &= jsval_to_cacolor4f(cx, ${in_value}, &${out_value})"
    "String*": "std::string ${out_value}_tmp; ok &= jsval_to_std_string(cx, ${in_value}, &${out_value}_tmp)"
    "@CAVector<.*>": "ok &= jsval_to_cavector(cx, ${in_value}, &${out_value})"
    "@CAMap<std::basic_string.*>": "ok &= jsval_to_camap_string_key(cx, ${in_value}, &${out_value})"
    "@map<std::basic_string.*,\\s*std::basic_string.*>": "ok &= jsval_to_std_map_string_string(cx, ${in_value}, &${out_value})"
    "@vector<std::basic_string.*>": "ok &= jsval_to_std_vector_string(cx, ${in_value}, &${out_value})"
    "@vector<int.*>": "ok &= jsval_to_std_vector_int(cx, ${in_value}, &${out_value})"
    "CAAcceleration": "ok &= jsval_to_caacceleration(cx, ${in_value}, &${out_value})"

    object: |
      do {
      ${($level + 1) * '    '}if (${in_value}.isNull()) { ${out_value} = nullptr; break; }
      ${($level + 1) * '    '}if (!${in_value}.isObject()) { ok = false; break; }
      ${($level + 1) * '    '}js_proxy_t *jsProxy;
      ${($level + 1) * '    '}JSObject *tmpObj = ${in_value}.toObjectOrNull();
      ${($level + 1) * '    '}jsProxy = jsb_get_js_proxy(tmpObj);
      ${($level + 1) * '    '}${out_value} = (${ntype})(jsProxy ? jsProxy->ptr : NULL);
      ${($level + 1) * '    '}JSB_PRECONDITION2( ${out_value}, cx, false, "Invalid Native Object");
      ${($level + 0) * '    '}} while (0)

  from_native:
    # int to jsval
    int: "${out_value} = int32_to_jsval(cx, ${in_value})"
    "unsigned int": "${out_value} = uint32_to_jsval(cx, ${in_value})"
    "unsigned short": "${out_value} = ushort_to_jsval(cx, ${in_value})"
    "unsigned char": "${out_value} = uint32_to_jsval(cx, ${in_value})"
    "long long": "${out_value} = long_long_to_jsval(cx, ${in_value})"
    "@string\\s*&?": "${out_value} = std_string_to_jsval(cx, ${in_value})"
    "@basic_string<char>\\s*&?": "${out_value} = std_string_to_jsval(cx, ${in_value})"
    "std::string": "${out_value} = std_string_to_jsval(cx, ${in_value})"
    "char*": "${out_value} = c_string_to_jsval(cx, ${in_value})"
    bool: "${out_value} = BOOLEAN_TO_JSVAL(${in_value})"
    float: "${out_value} = DOUBLE_TO_JSVAL(${in_value})"
    double: "${out_value} = DOUBLE_TO_JSVAL(${in_value})"
    long: "${out_value} = long_to_jsval(cx, ${in_value})"
    "unsigned long": "${out_value} = ulong_to_jsval(cx, ${in_value})"
    "ssize_t": "${out_value} = ssize_to_jsval(cx, ${in_value})"
    "DPoint": "${out_value} = dpoint_to_jsval(cx, ${in_value})"
    "DRect": "${out_value} = drect_to_jsval(cx, ${in_value})"
    "DSize": "${out_value} = dsize_to_jsval(cx, ${in_value})"
    "CAColor4B": "${out_value} = cacolor4b_to_jsval(cx, ${in_value})"
    "CAColor4F": "${out_value} = cacolor4f_to_jsval(cx, ${in_value})"

    "String*": "${out_value} = std_string_to_jsval(cx, ${in_value}->getCString())"
    "@Vector<.*>": "${out_value} = ccvector_to_jsval(cx, ${in_value})"
    "@Map<std::basic_string.*>": "${out_value} = ccmap_string_key_to_jsval(cx, ${in_value})"
    "@map<std::basic_string.*,\\s*std::basic_string.*>": "${out_value} = std_map_string_string_to_jsval(cx, ${in_value})"


    "@vector<std::basic_string.*>": "${out_value} = std_vector_string_to_jsval(cx, ${in_value})"
    "@vector<int.*>": "${out_value} = std_vector_int_to_jsval(cx, ${in_value})"
    "Acceleration*": "${out_value} = ccacceleration_to_jsval(cx, *${in_value})"

    "spEventData*": "${out_value} = speventdata_to_jsval(cx, *${in_value})"
    "spEvent*": "${out_value} = spevent_to_jsval(cx, *${in_value})"
    "spBoneData*": "${out_value} = spbonedata_to_jsval(cx, *${in_value})"
    "spBone*": "${out_value} = spbone_to_jsval(cx, *${in_value})"
    "spSkeleton*": "${out_value} = spskeleton_to_jsval(cx, *${in_value})"
    "spAttachment*": "${out_value} = spattachment_to_jsval(cx, *${in_value})"
    "spSlotData*": "${out_value} = spslotdata_to_jsval(cx, *${in_value})"
    "spSlot*": "${out_value} = spslot_to_jsval(cx, *${in_value})"
    "spTimeline*": "${out_value} = sptimeline_to_jsval(cx, *${in_value})"
    "spAnimationState*": "${out_value} = spanimationstate_to_jsval(cx, *${in_value})"
    "spAnimation*": "${out_value} = spanimation_to_jsval(cx, *${in_value})"
    "spTrackEntry*": "${out_value} = sptrackentry_to_jsval(cx, *${in_value})"
    "Quaternion": "${out_value} = quaternion_to_jsval(cx, ${in_value})"
    "OffMeshLinkData": "${out_value} = offMeshLinkData_to_jsval(cx, ${in_value})"
    "Uniform*": "${out_value} = uniform_to_jsval(cx, ${in_value})"
    object: |
      do {
      ${($level + 1) * '    '}if (${in_value}) {
      ${($level + 2) * '    '}js_proxy_t *jsProxy = js_get_or_create_proxy<${ntype.replace("*", "").replace("const ", "")}>(cx, (${ntype.replace("const ", "")})${in_value});
      ${($level + 2) * '    '}${out_value} = OBJECT_TO_JSVAL(jsProxy->obj);
      ${($level + 1) * '    '}} else {
      ${($level + 2) * '    '}${out_value} = JSVAL_NULL;
      ${($level + 1) * '    '}}
      ${($level) * '    '}} while (0)
