[CrossApp]
# the prefix to be added to the generated functions. You might or might not use this in your own
# templates
prefix = CrossApp

# create a target namespace (in javascript, this would create some code like the equiv. to `ns = ns || {}`)
# all classes will be embedded in that namespace
target_namespace = ca

android_headers = -I%(androidndkdir)s/platforms/android-14/arch-arm/usr/include -I%(androidndkdir)s/sources/cxx-stl/gnu-libstdc++/4.6/libs/armeabi-v7a/include -I%(androidndkdir)s/sources/cxx-stl/gnu-libstdc++/4.6/include
android_flags = -D_SIZE_T_DEFINED_ 

clang_headers = -I%(clangllvmdir)s/lib/clang/3.1/include 
clang_flags = -nostdinc -x c++

cocos_headers = -I%(cocosdir)s/CrossApp/include -I%(cocosdir)s/CrossApp/platform -I%(cocosdir)s/CrossApp/platform/android -I%(cocosdir)s/CrossApp -I%(cocosdir)s/CrossApp/kazmath/include -I%(cocosdir)s/CrossApp/platform/third_party/android/prebuilt/libfreetype2/include
cocos_flags = -DANDROID -DCOCOS2D_JAVASCRIPT

cxxgenerator_headers = -I%(cxxgeneratordir)s/targets/spidermonkey/common

# extra arguments for clang
extra_arguments = %(android_headers)s %(clang_headers)s %(cxxgenerator_headers)s %(cocos_headers)s %(android_flags)s %(clang_flags)s %(cocos_flags)s %(extra_flags)s 

# what headers to parse
headers = %(cocosdir)s/CrossApp/CrossApp.h %(cocosdir)s/CocosDenshion/include/SimpleAudioEngine.h 

# what classes to produce code for. You can use regular expressions here. When testing the regular
# expression, it will be enclosed in "^$", like this: "^CCMenu*$".

classes = CAView CAResponder CAWindow CAApplication CALabel CAImage CAImageView CAScrollView$ CATableView$ CATableViewCell$ CATextField$ CAScale9ImageView CANavigationController CABarItem CATabBarController CCArray CATabBarItem CAScheduler CCTimer CAButton JSViewController CAViewController CAControl CCApplication CASwitch CASlider CAPageView CAPickerView CAProgress CAStepper CADrawerController CAListView CAListViewCell$
# what should we skip? in the format ClassName::[function function]
# ClassName is a regular expression, but will be used like this: "^ClassName$" functions are also
# regular expressions, they will not be surrounded by "^$". If you want to skip a whole class, just
# add a single "*" as functions. See bellow for several examples. A special class name is "*", which
# will apply to all class names. This is a convenience wildcard to be able to skip similar named
# functions from all classes.

skip = CAResponder::[nextResponder],
	CAApplication::[getOpenGLView getProjection getClassTypeInfo getAccelerometer],
	CAScrollView::[(g|s)etScrollViewDelegate$],
	CA.*Delegate::[*],
	CAViewController::[viewDidLoad viewDidUnload],
	CAScale9ImageView::[createWithImage],
	CATabBarController::[initWithViewControllers],
	CCArray::[*],
	CCTimer::[getSelector],
	CAScheduler::[pause resume unschedule schedule update isTargetPaused getTimeScale setTimeScale],
	CANavigationController::[viewDidLoad viewDidAppear viewDidUnload],
	CATextField::[(g|s)etDelegate],
	CAPickerView::[(g|s)etDelegate (g|s)etDataSource],
	CCApplication::[^application.* ^run$],
	CAControl::[addTarget removeTarget removeAllTargets],
	CAPageView::[setViews],
	CAButton::[layoutSubViews],
	CASlider::[layoutSubViews],
	CAStepper::[addTarget removeTarget removeAllTargets onEnter onExit],
	CAListView::[(g|s)etListViewDelegate (g|s)etListViewDataSource]
rename_functions = 

rename_classes =

# for all class names, should we remove something when registering in the target VM?
remove_prefix = CA

# classes for which there will be no "parent" lookup
classes_have_no_parents = CAApplication CCApplication

# base classes which will be skipped when their sub-classes found them.
base_classes_to_skip = CAObject

# classes that create no constructor
# CCSet is special and we will use a hand-written constructor
abstract_classes = CAResponder CAApplication CAButton CAViewController CAScheduler CCApplication CAPageView

# Determining whether to use script object(js object) to control the lifecycle of native(cpp) object or the other way around. Supported values are 'yes' or 'no'.
script_control_cpp = no

